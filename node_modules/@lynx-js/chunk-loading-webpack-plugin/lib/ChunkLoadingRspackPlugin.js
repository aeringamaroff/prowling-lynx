// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { RuntimeGlobals } from '@lynx-js/webpack-runtime-globals';
import { CssRuntimeModule } from './runtime/CssRuntimeModule.js';
import { getCssChunkObject } from './runtime/helper.js';
import { JavaScriptRuntimeModule } from './runtime/JavaScriptRuntimeModule.js';
/**
 * @public
 * The ChunkLoadingRspackPlugin enables chunk loading for webpack in Lynx.
 *
 * @remarks
 * Note that this plugin should be used with `output.chunkFormat: 'require'`.
 * See {@link https://github.com/web-infra-dev/rspack/issues/5365 | [Feature Request]: runtimeModule hook support} for details.
 *
 * @example
 *
 * ```js
 * // rspack.config.js
 * import { ChunkLoadingRspackPlugin } from '@lynx-js/chunk-loading-webpack-plugin'
 * export default {
 *   output: {
 *     chunkFormat: 'require',
 *   },
 *   plugins: [new ChunkLoadingRspackPlugin()],
 * }
 * ```
 *
 * @deprecated Use {@link ChunkLoadingWebpackPlugin} instead.
 */
class ChunkLoadingRspackPlugin {
    options;
    constructor(options = {}) {
        this.options = options;
    }
    /**
     * `defaultOptions` is the default options that the {@link ChunkLoadingRspackPlugin} uses.
     *
     * @public
     */
    static defaultOptions = Object.freeze({});
    /**
     * The entry point of a webpack plugin.
     * @param compiler - the webpack compiler
     */
    apply(compiler) {
        new ChunkLoadingRspackPluginImpl(compiler, Object.assign({}, ChunkLoadingRspackPlugin.defaultOptions, this.options));
    }
}
export { ChunkLoadingRspackPlugin };
export class ChunkLoadingRspackPluginImpl {
    name = 'ChunkLoadingRspackPlugin';
    constructor(compiler, _options) {
        compiler.hooks.thisCompilation.tap(this.name, (compilation) => {
            compilation.hooks.additionalTreeRuntimeRequirements.tap(this.name, (_, set) => {
                set.add(compiler.webpack.RuntimeGlobals.exports);
                set.add(compiler.webpack.RuntimeGlobals.publicPath);
            });
            compilation.hooks.runtimeRequirementInTree.for(compiler.webpack.RuntimeGlobals.ensureChunkHandlers).tap(this.name, (_, runtimeRequirements) => {
                runtimeRequirements.add(RuntimeGlobals.lynxAsyncChunkIds);
            });
            compilation.hooks.runtimeModule.tap(this.name, (runtimeModule, chunk) => {
                if (runtimeModule.name === 'require_chunk_loading') {
                    this.#overrideChunkLoadingRuntimeModule(runtimeModule);
                    if (compiler.options.mode === 'development') {
                        this.#overrideHMRChunkLoadingRuntimeModule(runtimeModule);
                    }
                }
                else if (runtimeModule.name === 'css loading'
                    // TODO: support production CSS chunk loading
                    && compiler.options.mode === 'development') {
                    this.#overrideCSSChunkLoadingRuntimeModule(compilation, runtimeModule, chunk);
                }
            });
        });
    }
    #overrideChunkLoadingRuntimeModule(runtimeModule) {
        runtimeModule.source.source = Buffer.concat([
            Buffer.from(runtimeModule.source.source),
            Buffer.from('\n'),
            Buffer.from('\n'),
            // withLoading
            Buffer.from(JavaScriptRuntimeModule.generateChunkLoadingRuntime('true')), // TODO: JS_MATCHER
            Buffer.from('\n'),
            // withOnChunkLoad
            Buffer.from(JavaScriptRuntimeModule.generateChunkOnloadRuntime()),
        ]);
    }
    #overrideHMRChunkLoadingRuntimeModule(runtimeModule) {
        runtimeModule.source.source = Buffer.concat([
            Buffer.from(runtimeModule.source.source),
            // withHmr
            Buffer.from(JavaScriptRuntimeModule.generateHMRRuntime()),
            // withHmrManifest
            Buffer.from(JavaScriptRuntimeModule.generateHMRManifestRuntime()),
        ]);
    }
    #overrideCSSChunkLoadingRuntimeModule(compilation, runtimeModule, chunk) {
        const chunkMap = getCssChunkObject(
        // @ts-expect-error webpack-rspack types
        chunk, compilation);
        runtimeModule.source.source = Buffer.concat([
            Buffer.from('\n'),
            Buffer.from(CssRuntimeModule.generateLoadStyleRuntime()),
            Buffer.from('\n'),
            // withLoading
            Buffer.from(CssRuntimeModule.generateChunkLoadingRuntime(chunkMap, chunk.ids ?? [])),
            Buffer.from('\n'),
            // withHmr
            Buffer.from(CssRuntimeModule.generateHMRLoadChunkRuntime()),
            Buffer.from('\n'),
        ]);
    }
}
//# sourceMappingURL=ChunkLoadingRspackPlugin.js.map