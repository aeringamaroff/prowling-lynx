// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { createRequire } from 'node:module';
import { LynxEncodePlugin, LynxTemplatePlugin, } from '@lynx-js/template-webpack-plugin';
const require = createRequire(import.meta.url);
/**
 * @public
 *
 * CssExtractRspackPlugin is the CSS extract plugin for Lynx.
 * It works just like the {@link https://www.rspack.dev/plugins/rspack/css-extract-rspack-plugin.html | CssExtractRspackPlugin} in Web.
 *
 * @example
 * ```js
 * import { CssExtractRspackPlugin } from '@lynx-js/css-extract-webpack-plugin'
 * export default {
 *   plugins: [new CssExtractRspackPlugin()],
 *   module: {
 *     rules: [
 *       {
 *         test: /\.css$/,
 *         uses: [CssExtractRspackPlugin.loader, 'css-loader'],
 *       },
 *     ],
 *   },
 * }
 * ```
 */
class CssExtractRspackPlugin {
    constructor(options) {
        this.options = options;
    }
    // TODO: implement a custom loader for scoped CSS.
    /**
     * The loader to extract CSS.
     *
     * @remarks
     * It should be used with the {@link https://github.com/webpack-contrib/css-loader | 'css-loader'}.
     *
     * @example
     *
     * ```js
     * import { CssExtractRspackPlugin } from '@lynx-js/css-extract-webpack-plugin'
     * export default {
     *   plugins: [new CssExtractRspackPlugin()],
     *   module: {
     *     rules: [
     *       {
     *         test: /\.css$/,
     *         uses: [CssExtractRspackPlugin.loader, 'css-loader'],
     *       },
     *     ],
     *   },
     * }
     * ```
     *
     * @public
     */
    static { this.loader = require.resolve('./rspack-loader.js'); }
    /**
     * `defaultOptions` is the default options that the {@link CssExtractRspackPlugin} uses.
     *
     * @public
     */
    static { this.defaultOptions = Object
        .freeze({
        enableRemoveCSSScope: false,
        enableCSSSelector: true,
        // TODO: version
        targetSdkVersion: '3.2',
        filename: '[name].css',
        cssPlugins: [],
    }); }
    /**
     * The entry point of a webpack plugin.
     * @param compiler - the webpack compiler
     */
    apply(compiler) {
        new CssExtractRspackPluginImpl(compiler, Object.assign({}, CssExtractRspackPlugin.defaultOptions, this.options));
    }
}
export { CssExtractRspackPlugin };
class CssExtractRspackPluginImpl {
    constructor(compiler, options) {
        this.options = options;
        this.name = 'CssExtractRspackPlugin';
        this.hash = null;
        new compiler.webpack.CssExtractRspackPlugin({
            filename: options.filename ?? '[name].css',
            chunkFilename: options.chunkFilename ?? '',
            ignoreOrder: options.ignoreOrder ?? false,
            insert: options.insert ?? '',
            attributes: options.attributes ?? {},
            linkType: options.linkType ?? '',
            runtime: options.runtime ?? false,
        }).apply(compiler);
        compiler.hooks.thisCompilation.tap(this.name, (compilation) => {
            if (compiler.options.mode === 'development'
                || process.env['NODE_ENV'] === 'development') {
                // We require publicPath to get css.hot-update.json
                compilation.hooks.additionalTreeRuntimeRequirements.tap(this.name, (_, set) => {
                    set.add(compiler.webpack.RuntimeGlobals.publicPath);
                });
                compilation.hooks.runtimeModule.tap(this.name, (runtimeModule, chunk) => {
                    if (runtimeModule.name === 'require_chunk_loading') {
                        const { path } = compilation.getPathWithInfo(options.filename ?? '[name].css', 
                        // Rspack does not pass JsChunk to Rust.
                        // See: https://github.com/web-infra-dev/rspack/blob/73c31abcb78472eb5a3d93e4ece19d9f106727a6/crates/rspack_binding_values/src/path_data.rs#L62
                        { filename: chunk.name });
                        this.#overrideChunkLoadingRuntimeModule(compiler, runtimeModule, path.replace('.css', `${this.hash ? `.${this.hash}` : ''}.css.hot-update.json`));
                    }
                });
                compilation.hooks.processAssets.tapPromise({
                    name: this.name,
                    stage: 300,
                }, async (assets) => {
                    for (const [filename, source] of Object.entries(assets)) {
                        if (!filename.endsWith('.css')) {
                            continue;
                        }
                        // TODO: sourcemap
                        const content = source.source().toString('utf-8');
                        const { cssMap } = LynxTemplatePlugin.convertCSSChunksToMap([content], options.cssPlugins);
                        const cssDeps = Object.entries(cssMap).reduce((acc, [key, value]) => {
                            const importRuleNodes = value.filter((node) => node.type === 'ImportRule');
                            acc[key] = importRuleNodes.map(({ href }) => href);
                            return acc;
                        }, {});
                        const hooks = LynxTemplatePlugin.getLynxTemplatePluginHooks(
                        // @ts-expect-error Rspack to Webpack Compilation
                        compilation);
                        try {
                            const encoded = await LynxEncodePlugin.encodeCSS([content], {
                                targetSdkVersion: options.targetSdkVersion,
                                enableCSSSelector: options.enableCSSSelector,
                                enableRemoveCSSScope: options.enableRemoveCSSScope,
                            }, options.cssPlugins, hooks.encode.taps.length > 0
                                ? async (encodeOptions) => {
                                    // @ts-expect-error Only CSS is needed
                                    return await hooks.encode.promise({
                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                                        encodeOptions,
                                    });
                                }
                                : undefined);
                            const result = {
                                content: encoded.toString('base64'),
                                deps: cssDeps,
                            };
                            compilation.emitAsset(filename.replace('.css', `${this.hash ? `.${this.hash}` : ''}.css.hot-update.json`), new compiler.webpack.sources.RawSource(JSON.stringify(result), true));
                            this.hash = compilation.hash;
                        }
                        catch (error) {
                            if (error && typeof error === 'object' && 'error_msg' in error) {
                                compilation.errors.push(
                                // TODO: use more human-readable error message(i.e.: using sourcemap to get source code)
                                //       or give webpack/rspack with location of bundle
                                new compiler.webpack.WebpackError(error.error_msg));
                            }
                            else {
                                compilation.errors.push(error);
                            }
                        }
                    }
                });
            }
        });
    }
    #overrideChunkLoadingRuntimeModule(compiler, runtimeModule, filename) {
        const { RuntimeGlobals } = compiler.webpack;
        runtimeModule.source.source = Buffer.concat([
            Buffer.from(runtimeModule.source.source),
            // lynxCssFileName
            Buffer.from(`
      ${RuntimeGlobals.require}.lynxCssFileName = ${filename ? JSON.stringify(filename) : 'null'};
    `),
        ]);
    }
}
//# sourceMappingURL=CssExtractRspackPlugin.js.map