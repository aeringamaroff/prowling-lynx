// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { registerConsoleShortcuts } from './shortcuts.js';
/**
 * Create a rsbuild plugin for printing QRCode.
 *
 * @example
 * ```ts
 * // rsbuild.config.ts
 * import { pluginQRCode } from '@lynx-js/qrcode-rsbuild-plugin'
 * export default {
 *   plugins: [pluginQRCode()],
 * }
 * ```
 *
 * @public
 */
export function pluginQRCode(options) {
    const defaultPluginOptions = {
        schema: (url) => ({ http: url }),
    };
    const { schema } = Object.assign({}, defaultPluginOptions, options);
    return {
        name: 'lynx:rsbuild:qrcode',
        pre: ['lynx:rsbuild:api'],
        setup(api) {
            api.onAfterStartProdServer(async ({ environments, port }) => {
                await main(environments['lynx'], port);
            });
            api.onDevCompileDone(async ({ isFirstCompile, stats, environments }) => {
                if (!api.context.devServer) {
                    return;
                }
                if (!isFirstCompile) {
                    return;
                }
                if (stats.hasErrors()) {
                    return;
                }
                await main(environments['lynx'], api.context.devServer.port);
            });
            api.modifyRsbuildConfig((config) => {
                const originalPrintUrl = config.server?.printUrls;
                if (originalPrintUrl === false || typeof originalPrintUrl === 'function') {
                    return;
                }
                config.server ??= {};
                config.server.printUrls = false;
            });
            async function main(environmentContext, port) {
                if (!environmentContext) {
                    // Not lynx environment, skip print QRCode
                    return;
                }
                const entries = Object.keys(environmentContext.entry);
                if (entries.length === 0) {
                    return;
                }
                const unregister = await registerConsoleShortcuts({
                    entries,
                    api,
                    port,
                    schema,
                });
                api.onCloseDevServer(unregister);
            }
        },
    };
}
//# sourceMappingURL=index.js.map