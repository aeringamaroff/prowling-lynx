import generateDevUrls from './generateDevUrls.js';
const gExistingShortcuts = new WeakSet();
export async function registerConsoleShortcuts(options) {
    const [{ default: showQRCode },] = await Promise.all([
        import('./showQRCode.js'),
    ]);
    const currentEntry = options.entries[0];
    const devUrls = generateDevUrls(options.api, currentEntry, options.schema, options.port);
    const value = Object.values(devUrls)[0];
    await options.onPrint?.(value);
    await showQRCode(value);
    gExistingShortcuts.add(options);
    // We should not `await` on this since it would block the NodeJS main thread.
    void loop(options, value, devUrls);
    function off() {
        gExistingShortcuts.delete(options);
    }
    return off;
}
async function loop(options, value, devUrls) {
    const [{ select, selectKey, isCancel, cancel }, { default: showQRCode },] = await Promise.all([
        import('@clack/prompts'),
        import('./showQRCode.js'),
    ]);
    let currentEntry = options.entries[0];
    let currentSchema = Object.keys(devUrls)[0];
    while (!isCancel(value)) {
        const name = await selectKey({
            message: 'Usage',
            options: [
                { value: 'r', label: 'Switch entries' },
                { value: 'a', label: 'Switch schema' },
                { value: 'h', label: 'Help' },
                ...Object.values(options.customShortcuts ?? {}),
                { value: 'q', label: 'Quit' },
            ],
            initialValue: 'q',
        });
        if (
        // User cancel, exit the process
        isCancel(name) || name === 'q'
            // Auto restart, stop the loop but avoid exiting the process
            || !gExistingShortcuts.has(options)) {
            break;
        }
        if (name === 'r') {
            const selection = await select({
                message: 'Select entry',
                options: options.entries.map(entry => ({
                    value: entry,
                    label: entry,
                    hint: generateDevUrls(options.api, entry, options.schema, options.port)[currentSchema],
                })),
                initialValue: currentEntry,
            });
            if (isCancel(selection)) {
                break;
            }
            currentEntry = selection;
            value = getCurrentUrl();
        }
        else if (name === 'a') {
            const devUrls = generateDevUrls(options.api, currentEntry, options.schema, options.port);
            const selection = await select({
                message: 'Select schema',
                options: Object.entries(devUrls).map(([name, url]) => ({
                    value: name,
                    label: name,
                    hint: url,
                })),
                initialValue: currentSchema,
            });
            if (isCancel(selection)) {
                break;
            }
            currentSchema = selection;
            value = getCurrentUrl();
        }
        else if (options.customShortcuts?.[name]) {
            await options.customShortcuts[name].action?.();
        }
        await options.onPrint?.(value);
        await showQRCode(value);
    }
    // If the `options` is not deleted from `gExistingShortcuts`, means that this is an explicitly
    // exiting requested by the user. We should exit the process.
    // Otherwise, this is exit by devServer restart, we should not exit the process.
    if (gExistingShortcuts.has(options)) {
        await exit(1);
    }
    return;
    function getCurrentUrl() {
        return generateDevUrls(options.api, currentEntry, options.schema, options.port)[currentSchema];
    }
    function exit(code) {
        cancel('exiting...');
        // biome-ignore lint/correctness/useHookAtTopLevel: not react hooks
        const { exit } = options.api.useExposed(Symbol.for('rspeedy.api'));
        return exit(code);
    }
}
//# sourceMappingURL=shortcuts.js.map