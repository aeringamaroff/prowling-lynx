import type { SnapshotInstance } from './snapshot.js';
export interface ListUpdateInfo {
    flush(): void;
    onInsertBefore(newNode: SnapshotInstance, existingNode?: SnapshotInstance): void;
    onRemoveChild(child: SnapshotInstance): void;
    onSetAttribute(child: SnapshotInstance, attr: any, oldAttr: any): void;
}
interface UpdateAction {
    insertAction: {
        position: number;
        type: string;
    }[];
    removeAction: number[];
    updateAction: any[];
}
export declare class ListUpdateInfoRecording implements ListUpdateInfo {
    private list;
    constructor(list: SnapshotInstance);
    flush(): void;
    private oldChildNodes;
    private removeChild;
    private insertBefore;
    private appendChild;
    private platformInfoUpdate;
    onInsertBefore(newNode: SnapshotInstance, existingNode?: SnapshotInstance): void;
    onRemoveChild(child: SnapshotInstance): void;
    onSetAttribute(child: SnapshotInstance, attr: any, _oldAttr: any): void;
    private __toAttribute;
    toJSON(): [UpdateAction];
}
export declare const __pendingListUpdates: {
    values: Record<number, ListUpdateInfo>;
    clear(): void;
    flush(): void;
};
export declare function componentAtIndexFactory(ctx: SnapshotInstance[]): ComponentAtIndexCallback;
export declare function enqueueComponentFactory(): EnqueueComponentCallback;
export declare function snapshotCreateList(pageId: number, _ctx: SnapshotInstance, _expIndex: number): FiberElement;
export declare function snapshotDestroyList(si: SnapshotInstance): void;
export {};
