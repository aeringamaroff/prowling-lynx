import { version } from '../version.js';
function applyCommonOptions(command) {
    command
        .option('-c --config <config>', 'specify the configuration file, can be a relative or absolute path');
}
export function apply(program) {
    // TODO(cli): support custom cwd
    const cwd = process.cwd();
    program
        .name('rspeedy')
        .usage('<command> [options]')
        .version(version)
        .option('--unmanaged', 'Force to use the unmanaged version of Rspeedy, instead of the locally installed.')
        .showHelpAfterError(true)
        .showSuggestionAfterError(true)
        .exitOverride(); // Avoid calling `process.exit` by commander
    const buildCommand = program.command('build');
    buildCommand
        .description('Build the project in production mode')
        .action((buildOptions) => import('./build.js').then(({ build }) => build.call(buildCommand, cwd, buildOptions)));
    const devCommand = program.command('dev');
    devCommand
        .description('Run the dev server and watch for source file changes while serving.')
        .action((devOptions) => import('./dev.js').then(({ dev }) => dev.call(devCommand, cwd, devOptions)));
    const inspectCommand = program.command('inspect');
    inspectCommand
        .description('View the Rsbuild config and Rspack config of the project.')
        .option('--mode <mode>', 'specify the mode of Rsbuild', 'development')
        .option('--output <output>', 'specify inspect content output path')
        .option('--verbose', 'show full function definitions in output')
        .action((inspectOptions) => import('./inspect.js').then(({ inspect }) => inspect.call(inspectCommand, cwd, inspectOptions)));
    const previewCommand = program.command('preview');
    previewCommand
        .description('Preview the production build outputs locally.')
        .action((previewOptions) => import('./preview.js').then(({ preview }) => preview.call(previewCommand, cwd, previewOptions)));
    const commonCommands = [
        devCommand,
        buildCommand,
        inspectCommand,
        previewCommand,
    ];
    commonCommands.forEach((command) => applyCommonOptions(command));
    return program;
}
//# sourceMappingURL=commands.js.map