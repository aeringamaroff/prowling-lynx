/**
 * {@inheritdoc Output.cssModules}
 *
 * @public
 */
export interface CssModules {
    /**
     * The `auto` option allows CSS modules to be automatically enabled based on their filenames.
     *
     * @remarks
     *
     * Given the various `auto` values, the behavior is described as follows:
     *
     * - `true`: enable CSS modules for all files matching `/\.module\.\w+$/i.test(filename)` RegExp.
     *
     * - `false`: disable CSS modules.
     *
     * - `RegExp`: enable CSS modules for all files matching the `auto.test(filename)` RegExp.
     *
     * - `function`: enable CSS modules based on the filter function.
     *
     * See {@link https://github.com/webpack-contrib/css-loader?tab=readme-ov-file#auto | css-loader#auto} for details.
     *
     * @example
     *
     * Enable CSS module for `*.module.css` and `shared/*.css`:
     *
     * ```js
     * import { defineConfig } from '@lynx-js/rspeedy'
     * export default defineConfig({
     *   output: {
     *     cssModules: {
     *       auto: (filename) => {
     *         return filename.includes('.module.') || filename.includes('shared/')
     *       },
     *     },
     *   },
     * })
     * ```
     */
    auto?: boolean | RegExp | ((filename: string) => boolean) | undefined;
    /**
     * Allows exporting names from global class names, so you can use them via import.
     *
     * @remarks
     *
     * See {@link https://github.com/webpack-contrib/css-loader?tab=readme-ov-file#exportglobals | css-loader#exportGlobals} for details.
     */
    exportGlobals?: boolean | undefined;
    /**
     * The style of exported class names.
     *
     * @remarks
     *
     * Given the various `exportLocalsConvention` values, the behavior is described as follows:
     *
     * - `'asIs'`:	Class names will be exported as is.
     *
     * - `'camelCase'`: Class names will be camelized, the original class name will not to be removed from the locals
     *
     * - `'camelCaseOnly'`: Class names will be camelized, the original class name will be removed from the locals
     *
     * - `'dashes'`: Only dashes in class names will be camelized
     *
     * - `'dashesOnly'`: Dashes in class names will be camelized, the original class name will be removed from the locals
     *
     * See {@link https://github.com/webpack-contrib/css-loader?tab=readme-ov-file#exportlocalsconvention | css-loader#exportLocalsConvention} for details.
     */
    exportLocalsConvention?: CssModuleLocalsConvention | undefined;
    /**
     * Sets the format of the className generated by CSS Modules after compilation.
     *
     * @remarks
     *
     * See {@link https://github.com/webpack-contrib/css-loader?tab=readme-ov-file#localIdentName | css-loader#localIdentName} for details.
     */
    localIdentName?: string | undefined;
}
/**
 * {@inheritdoc CssModules.exportLocalsConvention}
 *
 * @public
 */
export type CssModuleLocalsConvention = 'asIs' | 'camelCase' | 'camelCaseOnly' | 'dashes' | 'dashesOnly';
