/**
 * {@inheritdoc Tools.cssExtract}
 *
 * @public
 */
export interface CssExtract {
    /**
     * {@inheritdoc @lynx-js/css-extract-webpack-plugin#LoaderOptions}
     */
    loaderOptions?: CssExtractRspackLoaderOptions | undefined;
    /**
     * {@inheritdoc @lynx-js/css-extract-webpack-plugin#CssExtractRspackPluginOptions}
     */
    pluginOptions?: CssExtractRspackPluginOptions | undefined;
}
/**
 * {@inheritdoc @lynx-js/css-extract-webpack-plugin#LoaderOptions}
 *
 * @public
 */
export interface CssExtractRspackLoaderOptions {
    /**
     * The same as {@link https://github.com/webpack-contrib/mini-css-extract-plugin#esModule}.
     * By default, `@lynx-js/css-extract-webpack-plugin` generates JS modules that use the ES modules syntax.
     * There are some cases in which using ES modules is beneficial,
     * like in the case of module concatenation and tree shaking.
     *
     * @example
     * You can enable a CommonJS syntax using:
     *
     * ```js
     * import {CssExtractWebpackPlugin} from "@lynx-js/css-extract-webpack-plugin";
     * export default {
     *   plugins: [new CssExtractWebpackPlugin()],
     *   module: {
     *     rules: [
     *       {
     *         test: /\.css$/i,
     *         use: [
     *           {
     *             loader: CssExtractWebpackPlugin.loader,
     *             options: {
     *               esModule: false,
     *             },
     *           },
     *           "css-loader",
     *         ],
     *       },
     *     ],
     *   },
     * };
     * ```
     *
     * @public
     */
    esModule?: boolean | undefined;
}
/**
 * {@inheritdoc @lynx-js/css-extract-webpack-plugin#CssExtractRspackPluginOptions}
 *
 * @public
 */
export interface CssExtractRspackPluginOptions {
    /**
     * {@inheritdoc @lynx-js/css-extract-webpack-plugin#CssExtractRspackPluginOptions.ignoreOrder}
     */
    ignoreOrder?: boolean | undefined;
    /**
     * {@inheritdoc @lynx-js/css-extract-webpack-plugin#CssExtractRspackPluginOptions.pathinfo}
     */
    pathinfo?: boolean | undefined;
}
