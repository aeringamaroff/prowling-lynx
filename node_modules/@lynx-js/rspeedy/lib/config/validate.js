import * as __typia_transform__accessExpressionAsString from "typia/lib/internal/_accessExpressionAsString.js";
import * as __typia_transform__validateReport from "typia/lib/internal/_validateReport.js";
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import color from 'picocolors';
import * as typia from 'typia';
export const validateConfig = (() => { const _iv8 = new Set(["ascii", "utf8", "base64", "binary", "utf-8", "utf16le", "utf-16le", "ucs2", "ucs-2", "base64url", "latin1", "hex"]); const _iv10 = new Set(["ascii", "utf8", "base64", "binary", "utf-8", "utf16le", "utf-16le", "ucs2", "ucs-2", "base64url", "latin1", "hex"]); const _iv53 = new Set(["es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "es2023", "es2024", "esnext"]); const _iv71 = new Set([false, "node", "async-node", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "web", "webworker", "electron-main", "electron-renderer", "electron-preload", "nwjs", "node-webkit", "browserslist"]); const _iv73 = new Set(["node", "async-node", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "web", "webworker", "electron-main", "electron-renderer", "electron-preload", "nwjs", "node-webkit", "browserslist"]); const _iv75 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs", "commonjs-import"]); const _iv76 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _iv176 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs"]); const _iv322 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _iv342 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs", "commonjs-import"]); const _iv353 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _vv388 = new Set(["ascii", "utf8", "base64", "binary", "utf-8", "utf16le", "utf-16le", "ucs2", "ucs-2", "base64url", "latin1", "hex"]); const _vv390 = new Set(["ascii", "utf8", "base64", "binary", "utf-8", "utf16le", "utf-16le", "ucs2", "ucs-2", "base64url", "latin1", "hex"]); const _vv433 = new Set(["es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "es2023", "es2024", "esnext"]); const _vv451 = new Set([false, "node", "async-node", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "web", "webworker", "electron-main", "electron-renderer", "electron-preload", "nwjs", "node-webkit", "browserslist"]); const _vv453 = new Set(["node", "async-node", "es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2021", "es2022", "web", "webworker", "electron-main", "electron-renderer", "electron-preload", "nwjs", "node-webkit", "browserslist"]); const _vv455 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs", "commonjs-import"]); const _vv456 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _vv556 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs"]); const _vv702 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _vv722 = new Set(["import", "jsonp", "module", "amd", "global", "commonjs", "umd", "commonjs2", "var", "assign", "this", "window", "self", "commonjs-module", "commonjs-static", "amd-require", "umd2", "system", "promise", "module-import", "script", "node-commonjs", "commonjs-import"]); const _vv733 = new Set([false, "eval", "cheap-source-map", "cheap-module-source-map", "source-map", "inline-cheap-source-map", "inline-cheap-module-source-map", "inline-source-map", "inline-nosources-cheap-source-map", "inline-nosources-cheap-module-source-map", "inline-nosources-source-map", "nosources-cheap-source-map", "nosources-cheap-module-source-map", "nosources-source-map", "hidden-nosources-cheap-source-map", "hidden-nosources-cheap-module-source-map", "hidden-nosources-source-map", "hidden-cheap-source-map", "hidden-cheap-module-source-map", "hidden-source-map", "eval-cheap-source-map", "eval-cheap-module-source-map", "eval-source-map", "eval-nosources-cheap-source-map", "eval-nosources-cheap-module-source-map", "eval-nosources-source-map"]); const _ip0 = (input, _exceptionable = true) => {
    const array = input;
    const top = input[0];
    if (0 === input.length)
        return true;
    const arrayPredicators = [
        [
            top => "string" === typeof top,
            entire => entire.every((elem, _index21) => "string" === typeof elem)
        ],
        [
            top => top instanceof Uint8Array,
            entire => entire.every((elem, _index22) => elem instanceof Uint8Array)
        ]
    ];
    const passed = arrayPredicators.filter(pred => pred[0](top));
    if (1 === passed.length)
        return passed[0][1](array);
    else if (1 < passed.length)
        for (const pred of passed)
            if (array.every(value => true === pred[0](value)))
                return pred[1](array);
    return false;
}; const _ip1 = (input, _exceptionable = true) => {
    const array = input;
    const top = input[0];
    if (0 === input.length)
        return true;
    const arrayPredicators = [
        [
            top => null !== top && undefined !== top && ("string" === typeof top || "object" === typeof top && null !== top && _io178(top, false && _exceptionable)),
            entire => entire.every((elem, _index126) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io178(elem, true && _exceptionable)))
        ],
        [
            top => "string" === typeof top,
            entire => entire.every((elem, _index127) => "string" === typeof elem)
        ]
    ];
    const passed = arrayPredicators.filter(pred => pred[0](top));
    if (1 === passed.length)
        return passed[0][1](array);
    else if (1 < passed.length)
        for (const pred of passed)
            if (array.every(value => true === pred[0](value)))
                return pred[1](array);
    return false;
}; const _vp2 = (input, _path, _exceptionable = true) => {
    const array = input;
    const top = input[0];
    if (0 === input.length)
        return true;
    const arrayPredicators = [
        [
            top => "string" === typeof top,
            entire => entire.map((elem, _index401) => "string" === typeof elem || _report(_exceptionable, {
                path: _path + "[" + _index401 + "]",
                expected: "string",
                value: elem
            })).every(flag => flag)
        ],
        [
            top => top instanceof Uint8Array,
            entire => entire.map((elem, _index402) => elem instanceof Uint8Array || _report(_exceptionable, {
                path: _path + "[" + _index402 + "]",
                expected: "Uint8Array",
                value: elem
            })).every(flag => flag)
        ]
    ];
    const passed = arrayPredicators.filter(pred => pred[0](top));
    if (1 === passed.length)
        return passed[0][1](array);
    else if (1 < passed.length)
        for (const pred of passed)
            if (array.every(value => true === pred[0](value)))
                return pred[1](array);
    return _report(_exceptionable, {
        path: _path,
        expected: "(Array<string> | Array<Uint8Array<ArrayBufferLike>>)",
        value: input
    });
}; const _vp3 = (input, _path, _exceptionable = true) => {
    const array = input;
    const top = input[0];
    if (0 === input.length)
        return true;
    const arrayPredicators = [
        [
            top => null !== top && undefined !== top && ("string" === typeof top || "object" === typeof top && null !== top && _vo178(top, _path, false && _exceptionable)),
            entire => entire.map((elem, _index506) => (null !== elem || _report(_exceptionable, {
                path: _path + "[" + _index506 + "]",
                expected: "(WatchFiles.o1 | string)",
                value: elem
            })) && (undefined !== elem || _report(_exceptionable, {
                path: _path + "[" + _index506 + "]",
                expected: "(WatchFiles.o1 | string)",
                value: elem
            })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
                path: _path + "[" + _index506 + "]",
                expected: "(WatchFiles.o1 | string)",
                value: elem
            })) && _vo178(elem, _path + "[" + _index506 + "]", true && _exceptionable) || _report(_exceptionable, {
                path: _path + "[" + _index506 + "]",
                expected: "(WatchFiles.o1 | string)",
                value: elem
            }))).every(flag => flag)
        ],
        [
            top => "string" === typeof top,
            entire => entire.map((elem, _index507) => "string" === typeof elem || _report(_exceptionable, {
                path: _path + "[" + _index507 + "]",
                expected: "string",
                value: elem
            })).every(flag => flag)
        ]
    ];
    const passed = arrayPredicators.filter(pred => pred[0](top));
    if (1 === passed.length)
        return passed[0][1](array);
    else if (1 < passed.length)
        for (const pred of passed)
            if (array.every(value => true === pred[0](value)))
                return pred[1](array);
    return _report(_exceptionable, {
        path: _path,
        expected: "(Array<string | WatchFiles> | Array<string>)",
        value: input
    });
}; const _io0 = (input, _exceptionable = true) => true && (undefined === input.dev || "object" === typeof input.dev && null !== input.dev && false === Array.isArray(input.dev) && _io1(input.dev, true && _exceptionable)) && (undefined === input.environments || "object" === typeof input.environments && null !== input.environments && false === Array.isArray(input.environments) && _io7(input.environments, true && _exceptionable)) && (undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode) && (undefined === input.output || "object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) && _io420(input.output, true && _exceptionable)) && (undefined === input.performance || "object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) && _io426(input.performance, true && _exceptionable)) && (undefined === input.server || "object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) && _io430(input.server, true && _exceptionable)) && (undefined === input.source || "object" === typeof input.source && null !== input.source && false === Array.isArray(input.source) && _io431(input.source, true && _exceptionable)) && (undefined === input.tools || "object" === typeof input.tools && null !== input.tools && false === Array.isArray(input.tools) && _io438(input.tools, true && _exceptionable)) && (undefined === input.plugins || Array.isArray(input.plugins) && (_ia3(input.plugins, true && _exceptionable) || false)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["provider", "dev", "environments", "mode", "output", "performance", "server", "source", "tools", "plugins"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io1 = (input, _exceptionable = true) => (undefined === input.assetPrefix || "string" === typeof input.assetPrefix || "boolean" === typeof input.assetPrefix) && (undefined === input.client || "object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) && _io2(input.client, true && _exceptionable)) && (null !== input.watchFiles && (undefined === input.watchFiles || (Array.isArray(input.watchFiles) && input.watchFiles.every((elem, _index1) => "object" === typeof elem && null !== elem && _io3(elem, true && _exceptionable)) || "object" === typeof input.watchFiles && null !== input.watchFiles && _io3(input.watchFiles, true && _exceptionable)))) && (null !== input.writeToDisk && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assetPrefix", "client", "watchFiles", "writeToDisk"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io2 = (input, _exceptionable = true) => (undefined === input.websocketTransport || "string" === typeof input.websocketTransport) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["websocketTransport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io3 = (input, _exceptionable = true) => null !== input.paths && undefined !== input.paths && ("string" === typeof input.paths || Array.isArray(input.paths) && input.paths.every((elem, _index2) => "string" === typeof elem)) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io4(input.options, true && _exceptionable)) && (undefined === input.type || "reload-page" === input.type || "reload-server" === input.type) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["paths", "options", "type"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io4 = (input, _exceptionable = true) => (undefined === input.persistent || "boolean" === typeof input.persistent) && (undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial) && (undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks) && (undefined === input.cwd || "string" === typeof input.cwd) && (undefined === input.usePolling || "boolean" === typeof input.usePolling) && (undefined === input.interval || "number" === typeof input.interval) && (undefined === input.binaryInterval || "number" === typeof input.binaryInterval) && (undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat) && (undefined === input.depth || "number" === typeof input.depth) && (undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors) && (undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic) && (null !== input.ignored && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) && input.ignored.every((elem, _index3) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && _io5(elem, true && _exceptionable))) || "object" === typeof input.ignored && null !== input.ignored && _io5(input.ignored, true && _exceptionable)))) && (null !== input.awaitWriteFinish && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || "object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) && _io6(input.awaitWriteFinish, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["persistent", "ignoreInitial", "followSymlinks", "cwd", "usePolling", "interval", "binaryInterval", "alwaysStat", "depth", "ignorePermissionErrors", "atomic", "ignored", "awaitWriteFinish"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io5 = (input, _exceptionable = true) => "string" === typeof input.path && (undefined === input.recursive || "boolean" === typeof input.recursive) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["path", "recursive"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io6 = (input, _exceptionable = true) => (undefined === input.stabilityThreshold || "number" === typeof input.stabilityThreshold) && (undefined === input.pollInterval || "number" === typeof input.pollInterval) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["stabilityThreshold", "pollInterval"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io7 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io8(value, true && _exceptionable);
}); const _io8 = (input, _exceptionable = true) => (undefined === input.dev || "object" === typeof input.dev && null !== input.dev && false === Array.isArray(input.dev) && _io9(input.dev, true && _exceptionable)) && (undefined === input.html || "object" === typeof input.html && null !== input.html && false === Array.isArray(input.html) && _io32(input.html, true && _exceptionable)) && (undefined === input.tools || "object" === typeof input.tools && null !== input.tools && false === Array.isArray(input.tools) && _io40(input.tools, true && _exceptionable)) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io365(input.resolve, true && _exceptionable)) && (undefined === input.source || "object" === typeof input.source && null !== input.source && false === Array.isArray(input.source) && _io367(input.source, true && _exceptionable)) && (undefined === input.output || "object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) && _io373(input.output, true && _exceptionable)) && (undefined === input.security || "object" === typeof input.security && null !== input.security && false === Array.isArray(input.security) && _io397(input.security, true && _exceptionable)) && (undefined === input.performance || "object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) && _io399(input.performance, true && _exceptionable)) && (undefined === input.moduleFederation || "object" === typeof input.moduleFederation && null !== input.moduleFederation && _io410(input.moduleFederation, true && _exceptionable)) && (undefined === input.plugins || Array.isArray(input.plugins) && (_ia3(input.plugins, true && _exceptionable) || false)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dev", "html", "tools", "resolve", "source", "output", "security", "performance", "moduleFederation", "plugins"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io9 = (input, _exceptionable = true) => (undefined === input.hmr || "boolean" === typeof input.hmr) && (undefined === input.assetPrefix || "string" === typeof input.assetPrefix || "boolean" === typeof input.assetPrefix) && (null !== input.progressBar && (undefined === input.progressBar || "boolean" === typeof input.progressBar || "object" === typeof input.progressBar && null !== input.progressBar && false === Array.isArray(input.progressBar) && _io10(input.progressBar, true && _exceptionable))) && (null !== input.writeToDisk && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk)) && (null !== input.lazyCompilation && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || "object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) && _io11(input.lazyCompilation, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hmr", "assetPrefix", "progressBar", "writeToDisk", "lazyCompilation"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io10 = (input, _exceptionable = true) => (undefined === input.id || "string" === typeof input.id) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["id"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io11 = (input, _exceptionable = true) => (undefined === input.backend || "object" === typeof input.backend && null !== input.backend && false === Array.isArray(input.backend) && _io12(input.backend, true && _exceptionable)) && (undefined === input.imports || "boolean" === typeof input.imports) && (undefined === input.entries || "boolean" === typeof input.entries) && (null !== input.test && (undefined === input.test || "function" === typeof input.test || input.test instanceof RegExp)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["backend", "imports", "entries", "test"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io12 = (input, _exceptionable = true) => (undefined === input.client || "string" === typeof input.client) && (null !== input.listen && (undefined === input.listen || "function" === typeof input.listen || "number" === typeof input.listen || "object" === typeof input.listen && null !== input.listen && false === Array.isArray(input.listen) && _io13(input.listen, true && _exceptionable))) && (undefined === input.protocol || "https" === input.protocol || "http" === input.protocol) && (null !== input.server && (undefined === input.server || "function" === typeof input.server || "object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) && _iu6(input.server, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["client", "listen", "protocol", "server"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io13 = (input, _exceptionable = true) => (undefined === input.backlog || "number" === typeof input.backlog) && (undefined === input.exclusive || "boolean" === typeof input.exclusive) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.ipv6Only || "boolean" === typeof input.ipv6Only) && (undefined === input.reusePort || "boolean" === typeof input.reusePort) && (undefined === input.path || "string" === typeof input.path) && (undefined === input.port || "number" === typeof input.port) && (undefined === input.readableAll || "boolean" === typeof input.readableAll) && (undefined === input.writableAll || "boolean" === typeof input.writableAll) && (undefined === input.signal || "object" === typeof input.signal && null !== input.signal && _io14(input.signal, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["backlog", "exclusive", "host", "ipv6Only", "reusePort", "path", "port", "readableAll", "writableAll", "signal"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io14 = (input, _exceptionable = true) => "boolean" === typeof input.aborted && true && (null === input.onabort || true) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["aborted", "reason", "onabort"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io15 = (input, _exceptionable = true) => (undefined === input.IncomingMessage || "object" === typeof input.IncomingMessage && null !== input.IncomingMessage && _io16(input.IncomingMessage, true && _exceptionable)) && (undefined === input.ServerResponse || "object" === typeof input.ServerResponse && null !== input.ServerResponse && _io24(input.ServerResponse, true && _exceptionable)) && (undefined === input.requestTimeout || "number" === typeof input.requestTimeout) && (undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders) && (undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout) && (undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval) && (undefined === input.highWaterMark || "number" === typeof input.highWaterMark) && (undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser) && (undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize) && (undefined === input.noDelay || "boolean" === typeof input.noDelay) && (undefined === input.keepAlive || "boolean" === typeof input.keepAlive) && (undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay) && (undefined === input.uniqueHeaders || Array.isArray(input.uniqueHeaders) && input.uniqueHeaders.every((elem, _index4) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index5) => "string" === typeof elem)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "highWaterMark", "insecureHTTPParser", "maxHeaderSize", "noDelay", "keepAlive", "keepAliveInitialDelay", "uniqueHeaders"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io16 = (input, _exceptionable = true) => "object" === typeof input.prototype && null !== input.prototype && _io17(input.prototype, true && _exceptionable) && true && true && "boolean" === typeof input.captureRejections && "number" === typeof input.defaultMaxListeners && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (9 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "errorMonitor", "captureRejectionSymbol", "captureRejections", "defaultMaxListeners", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io17 = (input, _exceptionable = true) => "boolean" === typeof input.aborted && "string" === typeof input.httpVersion && "number" === typeof input.httpVersionMajor && "number" === typeof input.httpVersionMinor && "boolean" === typeof input.complete && ("object" === typeof input.connection && null !== input.connection && _io18(input.connection, true && _exceptionable)) && ("object" === typeof input.socket && null !== input.socket && _io18(input.socket, true && _exceptionable)) && ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io20(input.headers, true && _exceptionable)) && ("object" === typeof input.headersDistinct && null !== input.headersDistinct && false === Array.isArray(input.headersDistinct) && _io21(input.headersDistinct, true && _exceptionable)) && (Array.isArray(input.rawHeaders) && input.rawHeaders.every((elem, _index6) => "string" === typeof elem)) && ("object" === typeof input.trailers && null !== input.trailers && false === Array.isArray(input.trailers) && _io22(input.trailers, true && _exceptionable)) && ("object" === typeof input.trailersDistinct && null !== input.trailersDistinct && false === Array.isArray(input.trailersDistinct) && _io21(input.trailersDistinct, true && _exceptionable)) && (Array.isArray(input.rawTrailers) && input.rawTrailers.every((elem, _index7) => "string" === typeof elem)) && (undefined === input.method || "string" === typeof input.method) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.statusCode || "number" === typeof input.statusCode) && (undefined === input.statusMessage || "string" === typeof input.statusMessage) && "boolean" === typeof input.readableAborted && "boolean" === typeof input.readable && "boolean" === typeof input.readableDidRead && (null === input.readableEncoding || true === _iv8.has(input.readableEncoding)) && "boolean" === typeof input.readableEnded && (null === input.readableFlowing || "boolean" === typeof input.readableFlowing) && "number" === typeof input.readableHighWaterMark && "number" === typeof input.readableLength && "boolean" === typeof input.readableObjectMode && "boolean" === typeof input.destroyed && "boolean" === typeof input.closed && (null === input.errored || "object" === typeof input.errored && null !== input.errored && _io19(input.errored, true && _exceptionable)) && (25 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["aborted", "httpVersion", "httpVersionMajor", "httpVersionMinor", "complete", "connection", "socket", "headers", "headersDistinct", "rawHeaders", "trailers", "trailersDistinct", "rawTrailers", "method", "url", "statusCode", "statusMessage", "readableAborted", "readable", "readableDidRead", "readableEncoding", "readableEnded", "readableFlowing", "readableHighWaterMark", "readableLength", "readableObjectMode", "destroyed", "closed", "errored"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io18 = (input, _exceptionable = true) => Array.isArray(input.autoSelectFamilyAttemptedAddresses) && input.autoSelectFamilyAttemptedAddresses.every((elem, _index9) => "string" === typeof elem) && "number" === typeof input.bufferSize && "number" === typeof input.bytesRead && "number" === typeof input.bytesWritten && "boolean" === typeof input.connecting && "boolean" === typeof input.pending && "boolean" === typeof input.destroyed && (undefined === input.localAddress || "string" === typeof input.localAddress) && (undefined === input.localPort || "number" === typeof input.localPort) && (undefined === input.localFamily || "string" === typeof input.localFamily) && ("open" === input.readyState || "opening" === input.readyState || "readOnly" === input.readyState || "writeOnly" === input.readyState || "closed" === input.readyState) && (undefined === input.remoteAddress || "string" === typeof input.remoteAddress) && (undefined === input.remoteFamily || "string" === typeof input.remoteFamily) && (undefined === input.remotePort || "number" === typeof input.remotePort) && (undefined === input.timeout || "number" === typeof input.timeout) && "boolean" === typeof input.writable && "boolean" === typeof input.writableEnded && "boolean" === typeof input.writableFinished && "number" === typeof input.writableHighWaterMark && "number" === typeof input.writableLength && "boolean" === typeof input.writableObjectMode && "number" === typeof input.writableCorked && "boolean" === typeof input.writableNeedDrain && "boolean" === typeof input.closed && (null === input.errored || "object" === typeof input.errored && null !== input.errored && _io19(input.errored, true && _exceptionable)) && "boolean" === typeof input.allowHalfOpen && "boolean" === typeof input.readableAborted && "boolean" === typeof input.readable && "boolean" === typeof input.readableDidRead && (null === input.readableEncoding || true === _iv10.has(input.readableEncoding)) && "boolean" === typeof input.readableEnded && (null === input.readableFlowing || "boolean" === typeof input.readableFlowing) && "number" === typeof input.readableHighWaterMark && "number" === typeof input.readableLength && "boolean" === typeof input.readableObjectMode && (28 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["autoSelectFamilyAttemptedAddresses", "bufferSize", "bytesRead", "bytesWritten", "connecting", "pending", "destroyed", "localAddress", "localPort", "localFamily", "readyState", "remoteAddress", "remoteFamily", "remotePort", "timeout", "writable", "writableEnded", "writableFinished", "writableHighWaterMark", "writableLength", "writableObjectMode", "writableCorked", "writableNeedDrain", "closed", "errored", "allowHalfOpen", "readableAborted", "readable", "readableDidRead", "readableEncoding", "readableEnded", "readableFlowing", "readableHighWaterMark", "readableLength", "readableObjectMode"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io19 = (input, _exceptionable = true) => "string" === typeof input.name && "string" === typeof input.message && (undefined === input.stack || "string" === typeof input.stack) && true && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "message", "stack", "cause"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io20 = (input, _exceptionable = true) => (undefined === input.accept || "string" === typeof input.accept) && (undefined === input["accept-language"] || "string" === typeof input["accept-language"]) && (undefined === input["accept-patch"] || "string" === typeof input["accept-patch"]) && (undefined === input["accept-ranges"] || "string" === typeof input["accept-ranges"]) && (undefined === input["access-control-allow-credentials"] || "string" === typeof input["access-control-allow-credentials"]) && (undefined === input["access-control-allow-headers"] || "string" === typeof input["access-control-allow-headers"]) && (undefined === input["access-control-allow-methods"] || "string" === typeof input["access-control-allow-methods"]) && (undefined === input["access-control-allow-origin"] || "string" === typeof input["access-control-allow-origin"]) && (undefined === input["access-control-expose-headers"] || "string" === typeof input["access-control-expose-headers"]) && (undefined === input["access-control-max-age"] || "string" === typeof input["access-control-max-age"]) && (undefined === input["access-control-request-headers"] || "string" === typeof input["access-control-request-headers"]) && (undefined === input["access-control-request-method"] || "string" === typeof input["access-control-request-method"]) && (undefined === input.age || "string" === typeof input.age) && (undefined === input.allow || "string" === typeof input.allow) && (undefined === input["alt-svc"] || "string" === typeof input["alt-svc"]) && (undefined === input.authorization || "string" === typeof input.authorization) && (undefined === input["cache-control"] || "string" === typeof input["cache-control"]) && (undefined === input.connection || "string" === typeof input.connection) && (undefined === input["content-disposition"] || "string" === typeof input["content-disposition"]) && (undefined === input["content-encoding"] || "string" === typeof input["content-encoding"]) && (undefined === input["content-language"] || "string" === typeof input["content-language"]) && (undefined === input["content-length"] || "string" === typeof input["content-length"]) && (undefined === input["content-location"] || "string" === typeof input["content-location"]) && (undefined === input["content-range"] || "string" === typeof input["content-range"]) && (undefined === input["content-type"] || "string" === typeof input["content-type"]) && (undefined === input.cookie || "string" === typeof input.cookie) && (undefined === input.date || "string" === typeof input.date) && (undefined === input.etag || "string" === typeof input.etag) && (undefined === input.expect || "string" === typeof input.expect) && (undefined === input.expires || "string" === typeof input.expires) && (undefined === input.forwarded || "string" === typeof input.forwarded) && (undefined === input.from || "string" === typeof input.from) && (undefined === input.host || "string" === typeof input.host) && (undefined === input["if-match"] || "string" === typeof input["if-match"]) && (undefined === input["if-modified-since"] || "string" === typeof input["if-modified-since"]) && (undefined === input["if-none-match"] || "string" === typeof input["if-none-match"]) && (undefined === input["if-unmodified-since"] || "string" === typeof input["if-unmodified-since"]) && (undefined === input["last-modified"] || "string" === typeof input["last-modified"]) && (undefined === input.location || "string" === typeof input.location) && (undefined === input.origin || "string" === typeof input.origin) && (undefined === input.pragma || "string" === typeof input.pragma) && (undefined === input["proxy-authenticate"] || "string" === typeof input["proxy-authenticate"]) && (undefined === input["proxy-authorization"] || "string" === typeof input["proxy-authorization"]) && (undefined === input["public-key-pins"] || "string" === typeof input["public-key-pins"]) && (undefined === input.range || "string" === typeof input.range) && (undefined === input.referer || "string" === typeof input.referer) && (undefined === input["retry-after"] || "string" === typeof input["retry-after"]) && (undefined === input["sec-websocket-accept"] || "string" === typeof input["sec-websocket-accept"]) && (undefined === input["sec-websocket-extensions"] || "string" === typeof input["sec-websocket-extensions"]) && (undefined === input["sec-websocket-key"] || "string" === typeof input["sec-websocket-key"]) && (undefined === input["sec-websocket-protocol"] || "string" === typeof input["sec-websocket-protocol"]) && (undefined === input["sec-websocket-version"] || "string" === typeof input["sec-websocket-version"]) && (undefined === input["set-cookie"] || Array.isArray(input["set-cookie"]) && input["set-cookie"].every((elem, _index11) => "string" === typeof elem)) && (undefined === input["strict-transport-security"] || "string" === typeof input["strict-transport-security"]) && (undefined === input.tk || "string" === typeof input.tk) && (undefined === input.trailer || "string" === typeof input.trailer) && (undefined === input["transfer-encoding"] || "string" === typeof input["transfer-encoding"]) && (undefined === input.upgrade || "string" === typeof input.upgrade) && (undefined === input["user-agent"] || "string" === typeof input["user-agent"]) && (undefined === input.vary || "string" === typeof input.vary) && (undefined === input.via || "string" === typeof input.via) && (undefined === input.warning || "string" === typeof input.warning) && (undefined === input["www-authenticate"] || "string" === typeof input["www-authenticate"]) && Object.keys(input).every(key => {
    if (["accept", "accept-language", "accept-patch", "accept-ranges", "access-control-allow-credentials", "access-control-allow-headers", "access-control-allow-methods", "access-control-allow-origin", "access-control-expose-headers", "access-control-max-age", "access-control-request-headers", "access-control-request-method", "age", "allow", "alt-svc", "authorization", "cache-control", "connection", "content-disposition", "content-encoding", "content-language", "content-length", "content-location", "content-range", "content-type", "cookie", "date", "etag", "expect", "expires", "forwarded", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-unmodified-since", "last-modified", "location", "origin", "pragma", "proxy-authenticate", "proxy-authorization", "public-key-pins", "range", "referer", "retry-after", "sec-websocket-accept", "sec-websocket-extensions", "sec-websocket-key", "sec-websocket-protocol", "sec-websocket-version", "set-cookie", "strict-transport-security", "tk", "trailer", "transfer-encoding", "upgrade", "user-agent", "vary", "via", "warning", "www-authenticate"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && (undefined === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index12) => "string" === typeof elem));
}); const _io21 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return undefined === value || Array.isArray(value) && value.every((elem, _index13) => "string" === typeof elem);
}); const _io22 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return undefined === value || "string" === typeof value;
}); const _io23 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io24 = (input, _exceptionable = true) => "object" === typeof input.prototype && null !== input.prototype && _io25(input.prototype, true && _exceptionable) && true && true && "boolean" === typeof input.captureRejections && "number" === typeof input.defaultMaxListeners && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (9 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "errorMonitor", "captureRejectionSymbol", "captureRejections", "defaultMaxListeners", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io25 = (input, _exceptionable = true) => "number" === typeof input.statusCode && "string" === typeof input.statusMessage && "boolean" === typeof input.strictContentLength && true && "boolean" === typeof input.chunkedEncoding && "boolean" === typeof input.shouldKeepAlive && "boolean" === typeof input.useChunkedEncodingByDefault && "boolean" === typeof input.sendDate && "boolean" === typeof input.finished && "boolean" === typeof input.headersSent && (null === input.connection || "object" === typeof input.connection && null !== input.connection && _io18(input.connection, true && _exceptionable)) && (null === input.socket || "object" === typeof input.socket && null !== input.socket && _io18(input.socket, true && _exceptionable)) && "boolean" === typeof input.writable && "boolean" === typeof input.writableEnded && "boolean" === typeof input.writableFinished && "number" === typeof input.writableHighWaterMark && "number" === typeof input.writableLength && "boolean" === typeof input.writableObjectMode && "number" === typeof input.writableCorked && "boolean" === typeof input.destroyed && "boolean" === typeof input.closed && (null === input.errored || "object" === typeof input.errored && null !== input.errored && _io19(input.errored, true && _exceptionable)) && "boolean" === typeof input.writableNeedDrain && (23 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["statusCode", "statusMessage", "strictContentLength", "req", "chunkedEncoding", "shouldKeepAlive", "useChunkedEncodingByDefault", "sendDate", "finished", "headersSent", "connection", "socket", "writable", "writableEnded", "writableFinished", "writableHighWaterMark", "writableLength", "writableObjectMode", "writableCorked", "destroyed", "closed", "errored", "writableNeedDrain"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io26 = (input, _exceptionable = true) => (undefined === input.ALPNCallback || true) && (undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain) && (null !== input.ca && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.every((elem, _index14) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.ca && null !== input.ca && _io27(input.ca, true && _exceptionable)))) && (null !== input.cert && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.every((elem, _index15) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.cert && null !== input.cert && _io27(input.cert, true && _exceptionable)))) && (undefined === input.sigalgs || "string" === typeof input.sigalgs) && (undefined === input.ciphers || "string" === typeof input.ciphers) && (undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine) && (null !== input.crl && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.every((elem, _index16) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.crl && null !== input.crl && _io27(input.crl, true && _exceptionable)))) && (null !== input.dhparam && (undefined === input.dhparam || "string" === typeof input.dhparam || "object" === typeof input.dhparam && null !== input.dhparam && _io27(input.dhparam, true && _exceptionable))) && (undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve) && (undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder) && (null !== input.key && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.every((elem, _index17) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu0(elem, true && _exceptionable))) || "object" === typeof input.key && null !== input.key && _io27(input.key, true && _exceptionable)))) && (undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine) && (undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier) && (undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion) && (undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (null !== input.pfx && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.every((elem, _index18) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu1(elem, true && _exceptionable))) || "object" === typeof input.pfx && null !== input.pfx && _io27(input.pfx, true && _exceptionable)))) && (undefined === input.secureOptions || "number" === typeof input.secureOptions) && (undefined === input.secureProtocol || "string" === typeof input.secureProtocol) && (undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext) && (undefined === input.ticketKeys || "object" === typeof input.ticketKeys && null !== input.ticketKeys && _io27(input.ticketKeys, true && _exceptionable)) && (undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout) && (undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout) && (undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint) && (undefined === input.secureContext || "object" === typeof input.secureContext && null !== input.secureContext && _io30(input.secureContext, true && _exceptionable)) && (undefined === input.enableTrace || "boolean" === typeof input.enableTrace) && (undefined === input.requestCert || "boolean" === typeof input.requestCert) && (null !== input.ALPNProtocols && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || Array.isArray(input.ALPNProtocols) && (_ip0(input.ALPNProtocols, true && _exceptionable) || false))) && (undefined === input.SNICallback || true) && (undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized) && (undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen) && (undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect) && (undefined === input.noDelay || "boolean" === typeof input.noDelay) && (undefined === input.keepAlive || "boolean" === typeof input.keepAlive) && (undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay) && (undefined === input.highWaterMark || "number" === typeof input.highWaterMark) && (undefined === input.blockList || "object" === typeof input.blockList && null !== input.blockList && _io31(input.blockList, true && _exceptionable)) && (undefined === input.IncomingMessage || "object" === typeof input.IncomingMessage && null !== input.IncomingMessage && _io16(input.IncomingMessage, true && _exceptionable)) && (undefined === input.ServerResponse || "object" === typeof input.ServerResponse && null !== input.ServerResponse && _io24(input.ServerResponse, true && _exceptionable)) && (undefined === input.requestTimeout || "number" === typeof input.requestTimeout) && (undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders) && (undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout) && (undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval) && (undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser) && (undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize) && (undefined === input.uniqueHeaders || Array.isArray(input.uniqueHeaders) && input.uniqueHeaders.every((elem, _index23) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index24) => "string" === typeof elem)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io27 = (input, _exceptionable = true) => "number" === typeof input.BYTES_PER_ELEMENT && (input.buffer instanceof ArrayBuffer || input.buffer instanceof SharedArrayBuffer) && "number" === typeof input.byteLength && "number" === typeof input.byteOffset && "number" === typeof input.length && "Uint8Array" === input["__@toStringTag@729"] && Object.keys(input).every(key => {
    if (["BYTES_PER_ELEMENT", "buffer", "byteLength", "byteOffset", "length", "__@toStringTag@729"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    if ("number" === typeof Number(key))
        return "number" === typeof value;
    return false;
}); const _io28 = (input, _exceptionable = true) => null !== input.pem && undefined !== input.pem && ("string" === typeof input.pem || "object" === typeof input.pem && null !== input.pem && _io27(input.pem, true && _exceptionable)) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["pem", "passphrase"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io29 = (input, _exceptionable = true) => null !== input.buf && undefined !== input.buf && ("string" === typeof input.buf || "object" === typeof input.buf && null !== input.buf && _io27(input.buf, true && _exceptionable)) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["buf", "passphrase"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io30 = (input, _exceptionable = true) => true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["context"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io31 = (input, _exceptionable = true) => Array.isArray(input.rules) && input.rules.every((elem, _index25) => "string" === typeof elem) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["rules"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io32 = (input, _exceptionable = true) => null !== input.meta && (undefined === input.meta || "function" === typeof input.meta || (Array.isArray(input.meta) && input.meta.every((elem, _index26) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io33(elem, true && _exceptionable))) || "object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) && _io33(input.meta, true && _exceptionable))) && (null !== input.title && (undefined === input.title || "function" === typeof input.title || "string" === typeof input.title || Array.isArray(input.title) && input.title.every((elem, _index27) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem)))) && (null !== input.inject && (undefined === input.inject || "function" === typeof input.inject || "body" === input.inject || "head" === input.inject || "boolean" === typeof input.inject || Array.isArray(input.inject) && input.inject.every((elem, _index28) => null !== elem && undefined !== elem && ("function" === typeof elem || "body" === elem || "head" === elem || "boolean" === typeof elem)))) && (null !== input.tags && (undefined === input.tags || "function" === typeof input.tags || (Array.isArray(input.tags) && input.tags.every((elem, _index29) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && _io35(elem, true && _exceptionable))) || "object" === typeof input.tags && null !== input.tags && _io35(input.tags, true && _exceptionable)))) && (null !== input.favicon && (undefined === input.favicon || "function" === typeof input.favicon || "string" === typeof input.favicon || Array.isArray(input.favicon) && input.favicon.every((elem, _index30) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem)))) && (undefined === input.appIcon || "object" === typeof input.appIcon && null !== input.appIcon && _io37(input.appIcon, true && _exceptionable)) && (undefined === input.mountId || "string" === typeof input.mountId) && (undefined === input.crossorigin || "anonymous" === input.crossorigin || "use-credentials" === input.crossorigin || "boolean" === typeof input.crossorigin) && (undefined === input.outputStructure || "flat" === input.outputStructure || "nested" === input.outputStructure) && (null !== input.template && (undefined === input.template || "function" === typeof input.template || "string" === typeof input.template || Array.isArray(input.template) && input.template.every((elem, _index31) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem)))) && (null !== input.templateParameters && (undefined === input.templateParameters || "function" === typeof input.templateParameters || (Array.isArray(input.templateParameters) && input.templateParameters.every((elem, _index32) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem, true && _exceptionable))) || "object" === typeof input.templateParameters && null !== input.templateParameters && false === Array.isArray(input.templateParameters) && _io39(input.templateParameters, true && _exceptionable)))) && (undefined === input.scriptLoading || "module" === input.scriptLoading || "defer" === input.scriptLoading || "blocking" === input.scriptLoading) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["meta", "title", "inject", "tags", "favicon", "appIcon", "mountId", "crossorigin", "outputStructure", "template", "templateParameters", "scriptLoading"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io33 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io34(value, true && _exceptionable));
}); const _io34 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value || "boolean" === typeof value;
}); const _io35 = (input, _exceptionable = true) => "string" === typeof input.tag && (undefined === input.attrs || "object" === typeof input.attrs && null !== input.attrs && false === Array.isArray(input.attrs) && _io36(input.attrs, true && _exceptionable)) && (undefined === input.children || "string" === typeof input.children) && (null !== input.hash && (undefined === input.hash || "function" === typeof input.hash || "string" === typeof input.hash || "boolean" === typeof input.hash)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || "boolean" === typeof input.publicPath)) && (undefined === input.append || "boolean" === typeof input.append) && (undefined === input.head || "boolean" === typeof input.head) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["tag", "attrs", "children", "hash", "publicPath", "append", "head"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io36 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null === value || undefined === value || "string" === typeof value || "boolean" === typeof value;
}); const _io37 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.icons) && input.icons.every((elem, _index33) => "object" === typeof elem && null !== elem && _io38(elem, true && _exceptionable))) && (undefined === input.filename || "string" === typeof input.filename) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "icons", "filename"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io38 = (input, _exceptionable = true) => "string" === typeof input.src && "number" === typeof input.size && (undefined === input.target || "apple-touch-icon" === input.target || "web-app-manifest" === input.target) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["src", "size", "target"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io39 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io40 = (input, _exceptionable = true) => null !== input.bundlerChain && (undefined === input.bundlerChain || "function" === typeof input.bundlerChain || Array.isArray(input.bundlerChain) && input.bundlerChain.every((elem, _index34) => true)) && (null !== input.cssLoader && (undefined === input.cssLoader || "function" === typeof input.cssLoader || (Array.isArray(input.cssLoader) && input.cssLoader.every((elem, _index35) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io41(elem, true && _exceptionable))) || "object" === typeof input.cssLoader && null !== input.cssLoader && false === Array.isArray(input.cssLoader) && _io41(input.cssLoader, true && _exceptionable)))) && (null !== input.postcss && (undefined === input.postcss || "function" === typeof input.postcss || (Array.isArray(input.postcss) && input.postcss.every((elem, _index36) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io45(elem, true && _exceptionable))) || "object" === typeof input.postcss && null !== input.postcss && false === Array.isArray(input.postcss) && _io45(input.postcss, true && _exceptionable)))) && (null !== input.styleLoader && (undefined === input.styleLoader || "function" === typeof input.styleLoader || (Array.isArray(input.styleLoader) && input.styleLoader.every((elem, _index37) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io63(elem, true && _exceptionable))) || "object" === typeof input.styleLoader && null !== input.styleLoader && false === Array.isArray(input.styleLoader) && _io63(input.styleLoader, true && _exceptionable)))) && (null !== input.htmlPlugin && (undefined === input.htmlPlugin || "function" === typeof input.htmlPlugin || "boolean" === typeof input.htmlPlugin || (Array.isArray(input.htmlPlugin) && input.htmlPlugin.every((elem, _index38) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io65(elem, true && _exceptionable))) || "object" === typeof input.htmlPlugin && null !== input.htmlPlugin && false === Array.isArray(input.htmlPlugin) && _io65(input.htmlPlugin, true && _exceptionable)))) && (null !== input.swc && (undefined === input.swc || "function" === typeof input.swc || (Array.isArray(input.swc) && input.swc.every((elem, _index39) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io70(elem, true && _exceptionable))) || "object" === typeof input.swc && null !== input.swc && false === Array.isArray(input.swc) && _io70(input.swc, true && _exceptionable)))) && (null !== input.lightningcssLoader && (undefined === input.lightningcssLoader || "function" === typeof input.lightningcssLoader || "boolean" === typeof input.lightningcssLoader || (Array.isArray(input.lightningcssLoader) && input.lightningcssLoader.every((elem, _index40) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io101(elem, true && _exceptionable))) || "object" === typeof input.lightningcssLoader && null !== input.lightningcssLoader && false === Array.isArray(input.lightningcssLoader) && _io101(input.lightningcssLoader, true && _exceptionable)))) && (undefined === input.cssExtract || "object" === typeof input.cssExtract && null !== input.cssExtract && false === Array.isArray(input.cssExtract) && _io107(input.cssExtract, true && _exceptionable)) && (null !== input.rspack && (undefined === input.rspack || "function" === typeof input.rspack || (Array.isArray(input.rspack) && input.rspack.every((elem, _index41) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io110(elem, true && _exceptionable))) || "object" === typeof input.rspack && null !== input.rspack && false === Array.isArray(input.rspack) && _io110(input.rspack, true && _exceptionable)))) && (null !== input.webpack && (undefined === input.webpack || "function" === typeof input.webpack || (Array.isArray(input.webpack) && input.webpack.every((elem, _index42) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io228(elem, true && _exceptionable))) || "object" === typeof input.webpack && null !== input.webpack && false === Array.isArray(input.webpack) && _io228(input.webpack, true && _exceptionable)))) && (null !== input.webpackChain && (undefined === input.webpackChain || "function" === typeof input.webpackChain || Array.isArray(input.webpackChain) && input.webpackChain.every((elem, _index43) => true))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["bundlerChain", "cssLoader", "postcss", "styleLoader", "htmlPlugin", "swc", "lightningcssLoader", "cssExtract", "rspack", "webpack", "webpackChain"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io41 = (input, _exceptionable = true) => null !== input.url && (undefined === input.url || "boolean" === typeof input.url || "object" === typeof input.url && null !== input.url && _io42(input.url, true && _exceptionable)) && (null !== input["import"] && (undefined === input["import"] || "boolean" === typeof input["import"] || "object" === typeof input["import"] && null !== input["import"] && _io43(input["import"], true && _exceptionable))) && (null !== input.modules && (undefined === input.modules || "string" === typeof input.modules || "boolean" === typeof input.modules || "object" === typeof input.modules && null !== input.modules && false === Array.isArray(input.modules) && _io44(input.modules, true && _exceptionable))) && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap) && (undefined === input.importLoaders || "number" === typeof input.importLoaders) && (undefined === input.esModule || "boolean" === typeof input.esModule) && (undefined === input.exportType || "string" === input.exportType || "array" === input.exportType || "css-style-sheet" === input.exportType) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["url", "import", "modules", "sourceMap", "importLoaders", "esModule", "exportType"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io42 = (input, _exceptionable = true) => true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["filter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io43 = (input, _exceptionable = true) => true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["filter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io44 = (input, _exceptionable = true) => null !== input.auto && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp) && (undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals) && (null !== input.exportLocalsConvention && (undefined === input.exportLocalsConvention || "function" === typeof input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention || "as-is" === input.exportLocalsConvention || "camel-case" === input.exportLocalsConvention || "camel-case-only" === input.exportLocalsConvention || "dashes-only" === input.exportLocalsConvention)) && (undefined === input.exportOnlyLocals || "boolean" === typeof input.exportOnlyLocals) && (undefined === input.getLocalIdent || true) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (undefined === input.localIdentContext || "string" === typeof input.localIdentContext) && (undefined === input.localIdentHashSalt || "string" === typeof input.localIdentHashSalt) && (undefined === input.localIdentHashFunction || "string" === typeof input.localIdentHashFunction) && (undefined === input.localIdentHashDigest || "string" === typeof input.localIdentHashDigest) && (null !== input.localIdentRegExp && (undefined === input.localIdentRegExp || "string" === typeof input.localIdentRegExp || input.localIdentRegExp instanceof RegExp)) && (null !== input.mode && (undefined === input.mode || "function" === typeof input.mode || "local" === input.mode || "global" === input.mode || "pure" === input.mode || "icss" === input.mode)) && (undefined === input.namedExport || "boolean" === typeof input.namedExport) && (undefined === input.getJSON || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["auto", "exportGlobals", "exportLocalsConvention", "exportOnlyLocals", "getLocalIdent", "localIdentName", "localIdentContext", "localIdentHashSalt", "localIdentHashFunction", "localIdentHashDigest", "localIdentRegExp", "mode", "namedExport", "getJSON"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io45 = (input, _exceptionable = true) => (undefined === input.execute || "boolean" === typeof input.execute) && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap) && true && (null !== input.postcssOptions && (undefined === input.postcssOptions || "function" === typeof input.postcssOptions || "object" === typeof input.postcssOptions && null !== input.postcssOptions && false === Array.isArray(input.postcssOptions) && _io46(input.postcssOptions, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["execute", "sourceMap", "implementation", "postcssOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io46 = (input, _exceptionable = true) => (undefined === input.document || "string" === typeof input.document) && (undefined === input.from || "string" === typeof input.from) && (null !== input.map && (undefined === input.map || "boolean" === typeof input.map || "object" === typeof input.map && null !== input.map && false === Array.isArray(input.map) && _io47(input.map, true && _exceptionable))) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) && _iu7(input.parser, true && _exceptionable)) && (undefined === input.stringifier || "object" === typeof input.stringifier && null !== input.stringifier && false === Array.isArray(input.stringifier) && _iu8(input.stringifier, true && _exceptionable)) && (undefined === input.syntax || "object" === typeof input.syntax && null !== input.syntax && false === Array.isArray(input.syntax) && _io50(input.syntax, true && _exceptionable)) && (undefined === input.to || "string" === typeof input.to) && (undefined === input.config || "boolean" === typeof input.config) && (undefined === input.plugins || Array.isArray(input.plugins) && input.plugins.every((elem, _index44) => "object" === typeof elem && null !== elem && _iu2(elem, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["document", "from", "map", "parser", "stringifier", "syntax", "to", "config", "plugins"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io47 = (input, _exceptionable = true) => (undefined === input.absolute || "boolean" === typeof input.absolute) && (null !== input.annotation && (undefined === input.annotation || "function" === typeof input.annotation || "string" === typeof input.annotation || "boolean" === typeof input.annotation)) && (undefined === input.from || "string" === typeof input.from) && (undefined === input.inline || "boolean" === typeof input.inline) && (null !== input.prev && (undefined === input.prev || "function" === typeof input.prev || "string" === typeof input.prev || "boolean" === typeof input.prev || "object" === typeof input.prev && null !== input.prev && false === Array.isArray(input.prev) && _io48(input.prev, true && _exceptionable))) && (undefined === input.sourcesContent || "boolean" === typeof input.sourcesContent) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["absolute", "annotation", "from", "inline", "prev", "sourcesContent"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io48 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io49 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io50 = (input, _exceptionable = true) => (undefined === input.parse || "object" === typeof input.parse && null !== input.parse && _io49(input.parse, true && _exceptionable)) && (undefined === input.stringify || "object" === typeof input.stringify && null !== input.stringify && _io51(input.stringify, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["parse", "stringify"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io51 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io52 = (input, _exceptionable = true) => Array.isArray(input.plugins) && input.plugins.every((elem, _index45) => "object" === typeof elem && null !== elem && _iu3(elem, true && _exceptionable)) && "string" === typeof input.version && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["plugins", "version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io53 = (input, _exceptionable = true) => "string" === typeof input.postcssPlugin && (undefined === input.prepare || true) && (null !== input.AtRule && (undefined === input.AtRule || "function" === typeof input.AtRule || "object" === typeof input.AtRule && null !== input.AtRule && false === Array.isArray(input.AtRule) && _io54(input.AtRule, true && _exceptionable))) && (null !== input.AtRuleExit && (undefined === input.AtRuleExit || "function" === typeof input.AtRuleExit || "object" === typeof input.AtRuleExit && null !== input.AtRuleExit && false === Array.isArray(input.AtRuleExit) && _io55(input.AtRuleExit, true && _exceptionable))) && (undefined === input.Comment || true) && (undefined === input.CommentExit || true) && (null !== input.Declaration && (undefined === input.Declaration || "function" === typeof input.Declaration || "object" === typeof input.Declaration && null !== input.Declaration && false === Array.isArray(input.Declaration) && _io56(input.Declaration, true && _exceptionable))) && (null !== input.DeclarationExit && (undefined === input.DeclarationExit || "function" === typeof input.DeclarationExit || "object" === typeof input.DeclarationExit && null !== input.DeclarationExit && false === Array.isArray(input.DeclarationExit) && _io57(input.DeclarationExit, true && _exceptionable))) && (undefined === input.Document || true) && (undefined === input.DocumentExit || true) && (undefined === input.Once || true) && (undefined === input.OnceExit || true) && (undefined === input.Root || true) && (undefined === input.RootExit || true) && (undefined === input.Rule || true) && (undefined === input.RuleExit || true) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["postcssPlugin", "prepare", "AtRule", "AtRuleExit", "Comment", "CommentExit", "Declaration", "DeclarationExit", "Document", "DocumentExit", "Once", "OnceExit", "Root", "RootExit", "Rule", "RuleExit"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io54 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io55 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io56 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io57 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io58 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io59 = (input, _exceptionable = true) => "string" === typeof input.postcssPlugin && "string" === typeof input.postcssVersion && true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (7 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["postcssPlugin", "postcssVersion", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io60 = (input, _exceptionable = true) => "object" === typeof input.postcss && null !== input.postcss && _iu9(input.postcss, true && _exceptionable) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["postcss"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io61 = (input, _exceptionable = true) => "object" === typeof input.postcss && null !== input.postcss && _io59(input.postcss, true && _exceptionable) && "string" === typeof input.postcssPlugin && "string" === typeof input.postcssVersion && true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (8 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["postcss", "postcssPlugin", "postcssVersion", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io62 = (input, _exceptionable = true) => true === input.postcss && true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (6 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["postcss", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io63 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (undefined === input.injectType || "styleTag" === input.injectType || "singletonStyleTag" === input.injectType || "lazyStyleTag" === input.injectType || "lazySingletonStyleTag" === input.injectType || "linkTag" === input.injectType) && (undefined === input.attributes || "object" === typeof input.attributes && null !== input.attributes && false === Array.isArray(input.attributes) && _io64(input.attributes, true && _exceptionable)) && (null !== input.insert && (undefined === input.insert || "function" === typeof input.insert || "string" === typeof input.insert)) && (null !== input.styleTagTransform && (undefined === input.styleTagTransform || "function" === typeof input.styleTagTransform || "string" === typeof input.styleTagTransform)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule", "injectType", "attributes", "insert", "styleTagTransform"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io64 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io65 = (input, _exceptionable = true) => (undefined === input.cache || "boolean" === typeof input.cache) && (null !== input.chunks && (undefined === input.chunks || "all" === input.chunks || Array.isArray(input.chunks) && input.chunks.every((elem, _index46) => "string" === typeof elem))) && (null !== input.chunksSortMode && (undefined === input.chunksSortMode || "function" === typeof input.chunksSortMode || "none" === input.chunksSortMode || "auto" === input.chunksSortMode || "manual" === input.chunksSortMode)) && (undefined === input.excludeChunks || Array.isArray(input.excludeChunks) && input.excludeChunks.every((elem, _index47) => "string" === typeof elem)) && (undefined === input.favicon || false === input.favicon || "string" === typeof input.favicon) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.publicPath || "string" === typeof input.publicPath) && (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.inject || "body" === input.inject || "head" === input.inject || "boolean" === typeof input.inject) && (undefined === input.scriptLoading || "module" === input.scriptLoading || "defer" === input.scriptLoading || "blocking" === input.scriptLoading || "systemjs-module" === input.scriptLoading) && (null !== input.meta && (undefined === input.meta || false === input.meta || "object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) && _io66(input.meta, true && _exceptionable))) && (undefined === input.minify || true) && (undefined === input.showErrors || "boolean" === typeof input.showErrors) && (undefined === input.template || "string" === typeof input.template) && (null !== input.templateContent && (undefined === input.templateContent || "function" === typeof input.templateContent || false === input.templateContent || "string" === typeof input.templateContent || "object" === typeof input.templateContent && null !== input.templateContent && _io68(input.templateContent, true && _exceptionable))) && (null !== input.templateParameters && (undefined === input.templateParameters || "function" === typeof input.templateParameters || false === input.templateParameters || "object" === typeof input.templateParameters && null !== input.templateParameters && false === Array.isArray(input.templateParameters) && _io69(input.templateParameters, true && _exceptionable))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.xhtml || "boolean" === typeof input.xhtml) && Object.keys(input).every(key => {
    if (["cache", "chunks", "chunksSortMode", "excludeChunks", "favicon", "filename", "publicPath", "hash", "inject", "scriptLoading", "meta", "minify", "showErrors", "template", "templateContent", "templateParameters", "title", "xhtml"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io66 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io67(value, true && _exceptionable));
}); const _io67 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value || "boolean" === typeof value;
}); const _io68 = (input, _exceptionable = true) => "string" === typeof input["__@toStringTag@729"] && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["__@toStringTag@729"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io69 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io70 = (input, _exceptionable = true) => null !== input.test && (undefined === input.test || "string" === typeof input.test || Array.isArray(input.test) && input.test.every((elem, _index48) => "string" === typeof elem)) && (null !== input.exclude && (undefined === input.exclude || "string" === typeof input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index49) => "string" === typeof elem))) && (undefined === input.env || "object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) && _io71(input.env, true && _exceptionable)) && (undefined === input.jsc || "object" === typeof input.jsc && null !== input.jsc && false === Array.isArray(input.jsc) && _io72(input.jsc, true && _exceptionable)) && (undefined === input["module"] || "object" === typeof input["module"] && null !== input["module"] && _iu10(input["module"], true && _exceptionable)) && (undefined === input.minify || "boolean" === typeof input.minify) && (undefined === input.sourceMaps || "inline" === input.sourceMaps || "boolean" === typeof input.sourceMaps) && (undefined === input.inlineSourcesContent || "boolean" === typeof input.inlineSourcesContent) && (undefined === input.isModule || "unknown" === input.isModule || "boolean" === typeof input.isModule) && (undefined === input.rspackExperiments || "object" === typeof input.rspackExperiments && null !== input.rspackExperiments && false === Array.isArray(input.rspackExperiments) && _io99(input.rspackExperiments, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["test", "exclude", "env", "jsc", "module", "minify", "sourceMaps", "inlineSourcesContent", "isModule", "rspackExperiments"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io71 = (input, _exceptionable = true) => (undefined === input.mode || "entry" === input.mode || "usage" === input.mode) && (undefined === input.debug || "boolean" === typeof input.debug) && (undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport) && (undefined === input.loose || "boolean" === typeof input.loose) && (undefined === input.bugfixes || "boolean" === typeof input.bugfixes) && (undefined === input.skip || Array.isArray(input.skip) && input.skip.every((elem, _index50) => "string" === typeof elem)) && (undefined === input.include || Array.isArray(input.include) && input.include.every((elem, _index51) => "string" === typeof elem)) && (undefined === input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index52) => "string" === typeof elem)) && (undefined === input.coreJs || "string" === typeof input.coreJs) && true && (undefined === input.path || "string" === typeof input.path) && (undefined === input.shippedProposals || "boolean" === typeof input.shippedProposals) && (undefined === input.forceAllTransforms || "boolean" === typeof input.forceAllTransforms) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["mode", "debug", "dynamicImport", "loose", "bugfixes", "skip", "include", "exclude", "coreJs", "targets", "path", "shippedProposals", "forceAllTransforms"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io72 = (input, _exceptionable = true) => (undefined === input.assumptions || "object" === typeof input.assumptions && null !== input.assumptions && false === Array.isArray(input.assumptions) && _io73(input.assumptions, true && _exceptionable)) && (undefined === input.loose || "boolean" === typeof input.loose) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && _iu11(input.parser, true && _exceptionable)) && (undefined === input.transform || "object" === typeof input.transform && null !== input.transform && false === Array.isArray(input.transform) && _io76(input.transform, true && _exceptionable)) && (undefined === input.externalHelpers || "boolean" === typeof input.externalHelpers) && (undefined === input.target || true === _iv53.has(input.target)) && (undefined === input.keepClassNames || "boolean" === typeof input.keepClassNames) && (undefined === input.experimental || "object" === typeof input.experimental && null !== input.experimental && false === Array.isArray(input.experimental) && _io84(input.experimental, true && _exceptionable)) && (undefined === input.baseUrl || "string" === typeof input.baseUrl) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io86(input.paths, true && _exceptionable)) && (undefined === input.minify || "object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) && _io87(input.minify, true && _exceptionable)) && (undefined === input.preserveAllComments || "boolean" === typeof input.preserveAllComments) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assumptions", "loose", "parser", "transform", "externalHelpers", "target", "keepClassNames", "experimental", "baseUrl", "paths", "minify", "preserveAllComments"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io73 = (input, _exceptionable = true) => (undefined === input.arrayLikeIsIterable || "boolean" === typeof input.arrayLikeIsIterable) && (undefined === input.constantReexports || "boolean" === typeof input.constantReexports) && (undefined === input.constantSuper || "boolean" === typeof input.constantSuper) && (undefined === input.enumerableModuleMeta || "boolean" === typeof input.enumerableModuleMeta) && (undefined === input.ignoreFunctionLength || "boolean" === typeof input.ignoreFunctionLength) && (undefined === input.ignoreFunctionName || "boolean" === typeof input.ignoreFunctionName) && (undefined === input.ignoreToPrimitiveHint || "boolean" === typeof input.ignoreToPrimitiveHint) && (undefined === input.iterableIsArray || "boolean" === typeof input.iterableIsArray) && (undefined === input.mutableTemplateObject || "boolean" === typeof input.mutableTemplateObject) && (undefined === input.noClassCalls || "boolean" === typeof input.noClassCalls) && (undefined === input.noDocumentAll || "boolean" === typeof input.noDocumentAll) && (undefined === input.noIncompleteNsImportDetection || "boolean" === typeof input.noIncompleteNsImportDetection) && (undefined === input.noNewArrows || "boolean" === typeof input.noNewArrows) && (undefined === input.objectRestNoSymbols || "boolean" === typeof input.objectRestNoSymbols) && (undefined === input.privateFieldsAsProperties || "boolean" === typeof input.privateFieldsAsProperties) && (undefined === input.pureGetters || "boolean" === typeof input.pureGetters) && (undefined === input.setClassMethods || "boolean" === typeof input.setClassMethods) && (undefined === input.setComputedProperties || "boolean" === typeof input.setComputedProperties) && (undefined === input.setPublicClassFields || "boolean" === typeof input.setPublicClassFields) && (undefined === input.setSpreadProperties || "boolean" === typeof input.setSpreadProperties) && (undefined === input.skipForOfIteratorClosing || "boolean" === typeof input.skipForOfIteratorClosing) && (undefined === input.superIsCallableConstructor || "boolean" === typeof input.superIsCallableConstructor) && (undefined === input.tsEnumIsReadonly || "boolean" === typeof input.tsEnumIsReadonly) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreFunctionName", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor", "tsEnumIsReadonly"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io74 = (input, _exceptionable = true) => "typescript" === input.syntax && (undefined === input.tsx || "boolean" === typeof input.tsx) && (undefined === input.decorators || "boolean" === typeof input.decorators) && (undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["syntax", "tsx", "decorators", "dynamicImport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io75 = (input, _exceptionable = true) => "ecmascript" === input.syntax && (undefined === input.jsx || "boolean" === typeof input.jsx) && (undefined === input.numericSeparator || "boolean" === typeof input.numericSeparator) && (undefined === input.classPrivateProperty || "boolean" === typeof input.classPrivateProperty) && (undefined === input.privateMethod || "boolean" === typeof input.privateMethod) && (undefined === input.classProperty || "boolean" === typeof input.classProperty) && (undefined === input.functionBind || "boolean" === typeof input.functionBind) && (undefined === input.decorators || "boolean" === typeof input.decorators) && (undefined === input.decoratorsBeforeExport || "boolean" === typeof input.decoratorsBeforeExport) && (undefined === input.exportDefaultFrom || "boolean" === typeof input.exportDefaultFrom) && (undefined === input.exportNamespaceFrom || "boolean" === typeof input.exportNamespaceFrom) && (undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport) && (undefined === input.nullishCoalescing || "boolean" === typeof input.nullishCoalescing) && (undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining) && (undefined === input.importMeta || "boolean" === typeof input.importMeta) && (undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait) && (undefined === input.importAssertions || "boolean" === typeof input.importAssertions) && (undefined === input.importAttributes || "boolean" === typeof input.importAttributes) && (undefined === input.allowSuperOutsideMethod || "boolean" === typeof input.allowSuperOutsideMethod) && (undefined === input.allowReturnOutsideFunction || "boolean" === typeof input.allowReturnOutsideFunction) && (undefined === input.autoAccessors || "boolean" === typeof input.autoAccessors) && (undefined === input.explicitResourceManagement || "boolean" === typeof input.explicitResourceManagement) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["syntax", "jsx", "numericSeparator", "classPrivateProperty", "privateMethod", "classProperty", "functionBind", "decorators", "decoratorsBeforeExport", "exportDefaultFrom", "exportNamespaceFrom", "dynamicImport", "nullishCoalescing", "optionalChaining", "importMeta", "topLevelAwait", "importAssertions", "importAttributes", "allowSuperOutsideMethod", "allowReturnOutsideFunction", "autoAccessors", "explicitResourceManagement"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io76 = (input, _exceptionable = true) => (undefined === input.react || "object" === typeof input.react && null !== input.react && false === Array.isArray(input.react) && _io77(input.react, true && _exceptionable)) && (undefined === input.constModules || "object" === typeof input.constModules && null !== input.constModules && false === Array.isArray(input.constModules) && _io78(input.constModules, true && _exceptionable)) && (undefined === input.optimizer || "object" === typeof input.optimizer && null !== input.optimizer && false === Array.isArray(input.optimizer) && _io81(input.optimizer, true && _exceptionable)) && (undefined === input.legacyDecorator || "boolean" === typeof input.legacyDecorator) && (undefined === input.decoratorMetadata || "boolean" === typeof input.decoratorMetadata) && (undefined === input.decoratorVersion || "2022-03" === input.decoratorVersion || "2021-12" === input.decoratorVersion) && (undefined === input.treatConstEnumAsEnum || "boolean" === typeof input.treatConstEnumAsEnum) && (undefined === input.useDefineForClassFields || "boolean" === typeof input.useDefineForClassFields) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["react", "constModules", "optimizer", "legacyDecorator", "decoratorMetadata", "decoratorVersion", "treatConstEnumAsEnum", "useDefineForClassFields"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io77 = (input, _exceptionable = true) => (undefined === input.pragma || "string" === typeof input.pragma) && (undefined === input.pragmaFrag || "string" === typeof input.pragmaFrag) && (undefined === input.throwIfNamespace || "boolean" === typeof input.throwIfNamespace) && (undefined === input.development || "boolean" === typeof input.development) && (undefined === input.useBuiltins || "boolean" === typeof input.useBuiltins) && (undefined === input.refresh || "boolean" === typeof input.refresh) && (undefined === input.runtime || "automatic" === input.runtime || "classic" === input.runtime) && (undefined === input.importSource || "string" === typeof input.importSource) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["pragma", "pragmaFrag", "throwIfNamespace", "development", "useBuiltins", "refresh", "runtime", "importSource"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io78 = (input, _exceptionable = true) => (undefined === input.globals || "object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) && _io79(input.globals, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["globals"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io79 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io80(value, true && _exceptionable);
}); const _io80 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io81 = (input, _exceptionable = true) => (undefined === input.simplify || "boolean" === typeof input.simplify) && (undefined === input.globals || "object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) && _io82(input.globals, true && _exceptionable)) && (undefined === input.jsonify || "object" === typeof input.jsonify && null !== input.jsonify && _io83(input.jsonify, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["simplify", "globals", "jsonify"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io82 = (input, _exceptionable = true) => (undefined === input.vars || "object" === typeof input.vars && null !== input.vars && false === Array.isArray(input.vars) && _io64(input.vars, true && _exceptionable)) && (null !== input.envs && (undefined === input.envs || (Array.isArray(input.envs) && input.envs.every((elem, _index54) => "string" === typeof elem) || "object" === typeof input.envs && null !== input.envs && false === Array.isArray(input.envs) && _io64(input.envs, true && _exceptionable)))) && (undefined === input.typeofs || "object" === typeof input.typeofs && null !== input.typeofs && false === Array.isArray(input.typeofs) && _io64(input.typeofs, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["vars", "envs", "typeofs"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io83 = (input, _exceptionable = true) => "number" === typeof input.minCost && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["minCost"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io84 = (input, _exceptionable = true) => (undefined === input.optimizeHygiene || "boolean" === typeof input.optimizeHygiene) && (undefined === input.keepImportAttributes || "boolean" === typeof input.keepImportAttributes) && (undefined === input.emitAssertForImportAttributes || "boolean" === typeof input.emitAssertForImportAttributes) && (undefined === input.cacheRoot || "string" === typeof input.cacheRoot) && (undefined === input.plugins || Array.isArray(input.plugins) && input.plugins.every((elem, _index55) => Array.isArray(elem) && (elem.length === 2 && "string" === typeof elem[0] && ("object" === typeof elem[1] && null !== elem[1] && false === Array.isArray(elem[1]) && _io85(elem[1], true && _exceptionable))))) && (undefined === input.runPluginFirst || "boolean" === typeof input.runPluginFirst) && (undefined === input.disableBuiltinTransformsForInternalTesting || "boolean" === typeof input.disableBuiltinTransformsForInternalTesting) && (undefined === input.emitIsolatedDts || "boolean" === typeof input.emitIsolatedDts) && (undefined === input.disableAllLints || "boolean" === typeof input.disableAllLints) && (undefined === input.keepImportAssertions || "boolean" === typeof input.keepImportAssertions) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["optimizeHygiene", "keepImportAttributes", "emitAssertForImportAttributes", "cacheRoot", "plugins", "runPluginFirst", "disableBuiltinTransformsForInternalTesting", "emitIsolatedDts", "disableAllLints", "keepImportAssertions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io85 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io86 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return Array.isArray(value) && value.every((elem, _index56) => "string" === typeof elem);
}); const _io87 = (input, _exceptionable = true) => null !== input.compress && (undefined === input.compress || "boolean" === typeof input.compress || "object" === typeof input.compress && null !== input.compress && false === Array.isArray(input.compress) && _io88(input.compress, true && _exceptionable)) && (undefined === input.format || "object" === typeof input.format && null !== input.format && false === Array.isArray(input.format) && _io89(input.format, true && _exceptionable)) && (null !== input.mangle && (undefined === input.mangle || "boolean" === typeof input.mangle || "object" === typeof input.mangle && null !== input.mangle && false === Array.isArray(input.mangle) && _io90(input.mangle, true && _exceptionable))) && (undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma) && (undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames) && (undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames) && (undefined === input["module"] || "unknown" === input["module"] || "boolean" === typeof input["module"]) && (undefined === input.safari10 || "boolean" === typeof input.safari10) && (undefined === input.toplevel || "boolean" === typeof input.toplevel) && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap) && (undefined === input.outputPath || "string" === typeof input.outputPath) && (undefined === input.inlineSourcesContent || "boolean" === typeof input.inlineSourcesContent) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["compress", "format", "mangle", "ecma", "keep_classnames", "keep_fnames", "module", "safari10", "toplevel", "sourceMap", "outputPath", "inlineSourcesContent"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io88 = (input, _exceptionable = true) => (undefined === input.arguments || "boolean" === typeof input.arguments) && (undefined === input.arrows || "boolean" === typeof input.arrows) && (undefined === input.booleans || "boolean" === typeof input.booleans) && (undefined === input.booleans_as_integers || "boolean" === typeof input.booleans_as_integers) && (undefined === input.collapse_vars || "boolean" === typeof input.collapse_vars) && (undefined === input.comparisons || "boolean" === typeof input.comparisons) && (undefined === input.computed_props || "boolean" === typeof input.computed_props) && (undefined === input.conditionals || "boolean" === typeof input.conditionals) && (undefined === input.dead_code || "boolean" === typeof input.dead_code) && (undefined === input.defaults || "boolean" === typeof input.defaults) && (undefined === input.directives || "boolean" === typeof input.directives) && (undefined === input.drop_console || "boolean" === typeof input.drop_console) && (undefined === input.drop_debugger || "boolean" === typeof input.drop_debugger) && (undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma) && (undefined === input.evaluate || "boolean" === typeof input.evaluate) && (undefined === input.expression || "boolean" === typeof input.expression) && true && (undefined === input.hoist_funs || "boolean" === typeof input.hoist_funs) && (undefined === input.hoist_props || "boolean" === typeof input.hoist_props) && (undefined === input.hoist_vars || "boolean" === typeof input.hoist_vars) && (undefined === input.ie8 || "boolean" === typeof input.ie8) && (undefined === input.if_return || "boolean" === typeof input.if_return) && (undefined === input.inline || 0 === input.inline || 1 === input.inline || 2 === input.inline || 3 === input.inline) && (undefined === input.join_vars || "boolean" === typeof input.join_vars) && (undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames) && (undefined === input.keep_fargs || "boolean" === typeof input.keep_fargs) && (undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames) && (undefined === input.keep_infinity || "boolean" === typeof input.keep_infinity) && (undefined === input.loops || "boolean" === typeof input.loops) && (undefined === input.negate_iife || "boolean" === typeof input.negate_iife) && (undefined === input.passes || "number" === typeof input.passes) && (undefined === input.properties || "boolean" === typeof input.properties) && true && (undefined === input.pure_funcs || Array.isArray(input.pure_funcs) && input.pure_funcs.every((elem, _index57) => "string" === typeof elem)) && (undefined === input.reduce_funcs || "boolean" === typeof input.reduce_funcs) && (undefined === input.reduce_vars || "boolean" === typeof input.reduce_vars) && true && (undefined === input.side_effects || "boolean" === typeof input.side_effects) && (undefined === input.switches || "boolean" === typeof input.switches) && true && true && (undefined === input.typeofs || "boolean" === typeof input.typeofs) && (undefined === input.unsafe || "boolean" === typeof input.unsafe) && (undefined === input.unsafe_passes || "boolean" === typeof input.unsafe_passes) && (undefined === input.unsafe_arrows || "boolean" === typeof input.unsafe_arrows) && (undefined === input.unsafe_comps || "boolean" === typeof input.unsafe_comps) && (undefined === input.unsafe_function || "boolean" === typeof input.unsafe_function) && (undefined === input.unsafe_math || "boolean" === typeof input.unsafe_math) && (undefined === input.unsafe_symbols || "boolean" === typeof input.unsafe_symbols) && (undefined === input.unsafe_methods || "boolean" === typeof input.unsafe_methods) && (undefined === input.unsafe_proto || "boolean" === typeof input.unsafe_proto) && (undefined === input.unsafe_regexp || "boolean" === typeof input.unsafe_regexp) && (undefined === input.unsafe_undefined || "boolean" === typeof input.unsafe_undefined) && (undefined === input.unused || "boolean" === typeof input.unused) && (undefined === input.const_to_let || "boolean" === typeof input.const_to_let) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["arguments", "arrows", "booleans", "booleans_as_integers", "collapse_vars", "comparisons", "computed_props", "conditionals", "dead_code", "defaults", "directives", "drop_console", "drop_debugger", "ecma", "evaluate", "expression", "global_defs", "hoist_funs", "hoist_props", "hoist_vars", "ie8", "if_return", "inline", "join_vars", "keep_classnames", "keep_fargs", "keep_fnames", "keep_infinity", "loops", "negate_iife", "passes", "properties", "pure_getters", "pure_funcs", "reduce_funcs", "reduce_vars", "sequences", "side_effects", "switches", "top_retain", "toplevel", "typeofs", "unsafe", "unsafe_passes", "unsafe_arrows", "unsafe_comps", "unsafe_function", "unsafe_math", "unsafe_symbols", "unsafe_methods", "unsafe_proto", "unsafe_regexp", "unsafe_undefined", "unused", "const_to_let", "module"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io89 = (input, _exceptionable = true) => (undefined === input.asciiOnly || "boolean" === typeof input.asciiOnly) && (undefined === input.beautify || "boolean" === typeof input.beautify) && (undefined === input.braces || "boolean" === typeof input.braces) && (undefined === input.comments || false === input.comments || "some" === input.comments || "all" === input.comments) && (undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma) && (undefined === input.indentLevel || "number" === typeof input.indentLevel) && (undefined === input.indentStart || "number" === typeof input.indentStart) && (undefined === input.inlineScript || "boolean" === typeof input.inlineScript) && (undefined === input.keepNumbers || "number" === typeof input.keepNumbers) && (undefined === input.keepQuotedProps || "boolean" === typeof input.keepQuotedProps) && (undefined === input.maxLineLen || false === input.maxLineLen || "number" === typeof input.maxLineLen) && (undefined === input.preamble || "string" === typeof input.preamble) && (undefined === input.quoteKeys || "boolean" === typeof input.quoteKeys) && (undefined === input.quoteStyle || "boolean" === typeof input.quoteStyle) && (undefined === input.preserveAnnotations || "boolean" === typeof input.preserveAnnotations) && (undefined === input.safari10 || "boolean" === typeof input.safari10) && (undefined === input.semicolons || "boolean" === typeof input.semicolons) && (undefined === input.shebang || "boolean" === typeof input.shebang) && (undefined === input.webkit || "boolean" === typeof input.webkit) && (undefined === input.wrapIife || "boolean" === typeof input.wrapIife) && (undefined === input.wrapFuncArgs || "boolean" === typeof input.wrapFuncArgs) && (undefined === input.ascii_only || "boolean" === typeof input.ascii_only) && (undefined === input.indent_level || "number" === typeof input.indent_level) && (undefined === input.indent_start || "number" === typeof input.indent_start) && (undefined === input.inline_script || "boolean" === typeof input.inline_script) && (undefined === input.keep_numbers || "number" === typeof input.keep_numbers) && (undefined === input.keep_quoted_props || "boolean" === typeof input.keep_quoted_props) && (undefined === input.max_line_len || false === input.max_line_len || "number" === typeof input.max_line_len) && (undefined === input.quote_keys || "boolean" === typeof input.quote_keys) && (undefined === input.quote_style || "boolean" === typeof input.quote_style) && (undefined === input.preserve_annotations || "boolean" === typeof input.preserve_annotations) && (undefined === input.wrap_iife || "boolean" === typeof input.wrap_iife) && (undefined === input.wrap_func_args || "boolean" === typeof input.wrap_func_args) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asciiOnly", "beautify", "braces", "comments", "ecma", "indentLevel", "indentStart", "inlineScript", "keepNumbers", "keepQuotedProps", "maxLineLen", "preamble", "quoteKeys", "quoteStyle", "preserveAnnotations", "safari10", "semicolons", "shebang", "webkit", "wrapIife", "wrapFuncArgs", "ascii_only", "indent_level", "indent_start", "inline_script", "keep_numbers", "keep_quoted_props", "max_line_len", "quote_keys", "quote_style", "preserve_annotations", "wrap_iife", "wrap_func_args"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io90 = (input, _exceptionable = true) => (undefined === input.props || "object" === typeof input.props && null !== input.props && false === Array.isArray(input.props) && _io91(input.props, true && _exceptionable)) && (undefined === input.topLevel || "boolean" === typeof input.topLevel) && (undefined === input.toplevel || "boolean" === typeof input.toplevel) && (undefined === input.keepClassNames || "boolean" === typeof input.keepClassNames) && (undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames) && (undefined === input.keepFnNames || "boolean" === typeof input.keepFnNames) && (undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames) && (undefined === input.keepPrivateProps || "boolean" === typeof input.keepPrivateProps) && (undefined === input.keep_private_props || "boolean" === typeof input.keep_private_props) && (undefined === input.ie8 || "boolean" === typeof input.ie8) && (undefined === input.safari10 || "boolean" === typeof input.safari10) && (undefined === input.reserved || Array.isArray(input.reserved) && input.reserved.every((elem, _index58) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["props", "topLevel", "toplevel", "keepClassNames", "keep_classnames", "keepFnNames", "keep_fnames", "keepPrivateProps", "keep_private_props", "ie8", "safari10", "reserved"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io91 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io92 = (input, _exceptionable = true) => "es6" === input.type && (undefined === input.strict || "boolean" === typeof input.strict) && (undefined === input.strictMode || "boolean" === typeof input.strictMode) && (null !== input.lazy && (undefined === input.lazy || "boolean" === typeof input.lazy || Array.isArray(input.lazy) && input.lazy.every((elem, _index59) => "string" === typeof elem))) && (undefined === input.noInterop || "boolean" === typeof input.noInterop) && (undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop) && (undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation) && (undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic) && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io93 = (input, _exceptionable = true) => "commonjs" === input.type && (undefined === input.strict || "boolean" === typeof input.strict) && (undefined === input.strictMode || "boolean" === typeof input.strictMode) && (null !== input.lazy && (undefined === input.lazy || "boolean" === typeof input.lazy || Array.isArray(input.lazy) && input.lazy.every((elem, _index60) => "string" === typeof elem))) && (undefined === input.noInterop || "boolean" === typeof input.noInterop) && (undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop) && (undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation) && (undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic) && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io94 = (input, _exceptionable = true) => "umd" === input.type && (undefined === input.globals || "object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) && _io95(input.globals, true && _exceptionable)) && (undefined === input.strict || "boolean" === typeof input.strict) && (undefined === input.strictMode || "boolean" === typeof input.strictMode) && (null !== input.lazy && (undefined === input.lazy || "boolean" === typeof input.lazy || Array.isArray(input.lazy) && input.lazy.every((elem, _index61) => "string" === typeof elem))) && (undefined === input.noInterop || "boolean" === typeof input.noInterop) && (undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop) && (undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation) && (undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic) && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "globals", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io95 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io96 = (input, _exceptionable = true) => "amd" === input.type && (undefined === input.moduleId || "string" === typeof input.moduleId) && (undefined === input.strict || "boolean" === typeof input.strict) && (undefined === input.strictMode || "boolean" === typeof input.strictMode) && (null !== input.lazy && (undefined === input.lazy || "boolean" === typeof input.lazy || Array.isArray(input.lazy) && input.lazy.every((elem, _index62) => "string" === typeof elem))) && (undefined === input.noInterop || "boolean" === typeof input.noInterop) && (undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop) && (undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation) && (undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic) && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "moduleId", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io97 = (input, _exceptionable = true) => "nodenext" === input.type && (undefined === input.strict || "boolean" === typeof input.strict) && (undefined === input.strictMode || "boolean" === typeof input.strictMode) && (null !== input.lazy && (undefined === input.lazy || "boolean" === typeof input.lazy || Array.isArray(input.lazy) && input.lazy.every((elem, _index63) => "string" === typeof elem))) && (undefined === input.noInterop || "boolean" === typeof input.noInterop) && (undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop) && (undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation) && (undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic) && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io98 = (input, _exceptionable = true) => "systemjs" === input.type && (undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "allowTopLevelThis"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io99 = (input, _exceptionable = true) => (undefined === input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index64) => "object" === typeof elem && null !== elem && _io100(elem, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io100 = (input, _exceptionable = true) => "string" === typeof input.libraryName && (undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory) && (undefined === input.customName || "string" === typeof input.customName) && (undefined === input.customStyleName || "string" === typeof input.customStyleName) && (undefined === input.style || "string" === typeof input.style || "boolean" === typeof input.style) && (undefined === input.styleLibraryDirectory || "string" === typeof input.styleLibraryDirectory) && (undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName) && (undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport) && (undefined === input.ignoreEsComponent || Array.isArray(input.ignoreEsComponent) && input.ignoreEsComponent.every((elem, _index65) => "string" === typeof elem)) && (undefined === input.ignoreStyleComponent || Array.isArray(input.ignoreStyleComponent) && input.ignoreStyleComponent.every((elem, _index66) => "string" === typeof elem)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["libraryName", "libraryDirectory", "customName", "customStyleName", "style", "styleLibraryDirectory", "camelToDashComponentName", "transformToDefaultImport", "ignoreEsComponent", "ignoreStyleComponent"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io101 = (input, _exceptionable = true) => (undefined === input.minify || "boolean" === typeof input.minify) && (undefined === input.errorRecovery || "boolean" === typeof input.errorRecovery) && (null !== input.targets && (undefined === input.targets || "string" === typeof input.targets || (Array.isArray(input.targets) && input.targets.every((elem, _index67) => "string" === typeof elem) || "object" === typeof input.targets && null !== input.targets && false === Array.isArray(input.targets) && _io102(input.targets, true && _exceptionable)))) && (undefined === input.include || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _io103(input.include, true && _exceptionable)) && (undefined === input.exclude || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _io103(input.exclude, true && _exceptionable)) && (undefined === input.draft || "object" === typeof input.draft && null !== input.draft && false === Array.isArray(input.draft) && _io104(input.draft, true && _exceptionable)) && (undefined === input.drafts || "object" === typeof input.drafts && null !== input.drafts && false === Array.isArray(input.drafts) && _io104(input.drafts, true && _exceptionable)) && (undefined === input.nonStandard || "object" === typeof input.nonStandard && null !== input.nonStandard && false === Array.isArray(input.nonStandard) && _io105(input.nonStandard, true && _exceptionable)) && (undefined === input.pseudoClasses || "object" === typeof input.pseudoClasses && null !== input.pseudoClasses && false === Array.isArray(input.pseudoClasses) && _io106(input.pseudoClasses, true && _exceptionable)) && (undefined === input.unusedSymbols || Array.isArray(input.unusedSymbols) && input.unusedSymbols.every((elem, _index68) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["minify", "errorRecovery", "targets", "include", "exclude", "draft", "drafts", "nonStandard", "pseudoClasses", "unusedSymbols"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io102 = (input, _exceptionable = true) => (undefined === input.android || "number" === typeof input.android) && (undefined === input.chrome || "number" === typeof input.chrome) && (undefined === input.edge || "number" === typeof input.edge) && (undefined === input.firefox || "number" === typeof input.firefox) && (undefined === input.ie || "number" === typeof input.ie) && (undefined === input.ios_saf || "number" === typeof input.ios_saf) && (undefined === input.opera || "number" === typeof input.opera) && (undefined === input.safari || "number" === typeof input.safari) && (undefined === input.samsung || "number" === typeof input.samsung) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["android", "chrome", "edge", "firefox", "ie", "ios_saf", "opera", "safari", "samsung"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io103 = (input, _exceptionable = true) => (undefined === input.nesting || "boolean" === typeof input.nesting) && (undefined === input.notSelectorList || "boolean" === typeof input.notSelectorList) && (undefined === input.dirSelector || "boolean" === typeof input.dirSelector) && (undefined === input.langSelectorList || "boolean" === typeof input.langSelectorList) && (undefined === input.isSelector || "boolean" === typeof input.isSelector) && (undefined === input.textDecorationThicknessPercent || "boolean" === typeof input.textDecorationThicknessPercent) && (undefined === input.mediaIntervalSyntax || "boolean" === typeof input.mediaIntervalSyntax) && (undefined === input.mediaRangeSyntax || "boolean" === typeof input.mediaRangeSyntax) && (undefined === input.customMediaQueries || "boolean" === typeof input.customMediaQueries) && (undefined === input.clampFunction || "boolean" === typeof input.clampFunction) && (undefined === input.colorFunction || "boolean" === typeof input.colorFunction) && (undefined === input.oklabColors || "boolean" === typeof input.oklabColors) && (undefined === input.labColors || "boolean" === typeof input.labColors) && (undefined === input.p3Colors || "boolean" === typeof input.p3Colors) && (undefined === input.hexAlphaColors || "boolean" === typeof input.hexAlphaColors) && (undefined === input.spaceSeparatedColorNotation || "boolean" === typeof input.spaceSeparatedColorNotation) && (undefined === input.fontFamilySystemUi || "boolean" === typeof input.fontFamilySystemUi) && (undefined === input.doublePositionGradients || "boolean" === typeof input.doublePositionGradients) && (undefined === input.vendorPrefixes || "boolean" === typeof input.vendorPrefixes) && (undefined === input.logicalProperties || "boolean" === typeof input.logicalProperties) && (undefined === input.selectors || "boolean" === typeof input.selectors) && (undefined === input.mediaQueries || "boolean" === typeof input.mediaQueries) && (undefined === input.color || "boolean" === typeof input.color) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["nesting", "notSelectorList", "dirSelector", "langSelectorList", "isSelector", "textDecorationThicknessPercent", "mediaIntervalSyntax", "mediaRangeSyntax", "customMediaQueries", "clampFunction", "colorFunction", "oklabColors", "labColors", "p3Colors", "hexAlphaColors", "spaceSeparatedColorNotation", "fontFamilySystemUi", "doublePositionGradients", "vendorPrefixes", "logicalProperties", "selectors", "mediaQueries", "color"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io104 = (input, _exceptionable = true) => (undefined === input.customMedia || "boolean" === typeof input.customMedia) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["customMedia"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io105 = (input, _exceptionable = true) => (undefined === input.deepSelectorCombinator || "boolean" === typeof input.deepSelectorCombinator) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["deepSelectorCombinator"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io106 = (input, _exceptionable = true) => (undefined === input.hover || "string" === typeof input.hover) && (undefined === input.active || "string" === typeof input.active) && (undefined === input.focus || "string" === typeof input.focus) && (undefined === input.focusVisible || "string" === typeof input.focusVisible) && (undefined === input.focusWithin || "string" === typeof input.focusWithin) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hover", "active", "focus", "focusVisible", "focusWithin"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io107 = (input, _exceptionable = true) => (undefined === input.pluginOptions || "object" === typeof input.pluginOptions && null !== input.pluginOptions && false === Array.isArray(input.pluginOptions) && _io108(input.pluginOptions, true && _exceptionable)) && (undefined === input.loaderOptions || "object" === typeof input.loaderOptions && null !== input.loaderOptions && false === Array.isArray(input.loaderOptions) && _io109(input.loaderOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["pluginOptions", "loaderOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io108 = (input, _exceptionable = true) => null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename) && (null !== input.chunkFilename && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename)) && (undefined === input.ignoreOrder || "boolean" === typeof input.ignoreOrder) && (null !== input.insert && (undefined === input.insert || "function" === typeof input.insert || "string" === typeof input.insert)) && (undefined === input.attributes || "object" === typeof input.attributes && null !== input.attributes && false === Array.isArray(input.attributes) && _io64(input.attributes, true && _exceptionable)) && (undefined === input.linkType || false === input.linkType || "string" === typeof input.linkType) && (undefined === input.runtime || "boolean" === typeof input.runtime) && (undefined === input.pathinfo || "boolean" === typeof input.pathinfo) && (undefined === input.enforceRelative || "boolean" === typeof input.enforceRelative) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["filename", "chunkFilename", "ignoreOrder", "insert", "attributes", "linkType", "runtime", "pathinfo", "enforceRelative"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io109 = (input, _exceptionable = true) => null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath) && (undefined === input.emit || "boolean" === typeof input.emit) && (undefined === input.esModule || "boolean" === typeof input.esModule) && (undefined === input.layer || "string" === typeof input.layer) && (undefined === input.defaultExport || "boolean" === typeof input.defaultExport) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["publicPath", "emit", "esModule", "layer", "defaultExport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io110 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (undefined === input.dependencies || Array.isArray(input.dependencies) && input.dependencies.every((elem, _index69) => "string" === typeof elem)) && (null !== input.entry && (undefined === input.entry || "function" === typeof input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.every((elem, _index70) => "string" === typeof elem) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _io111(input.entry, true && _exceptionable)))) && (undefined === input.output || "object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) && _io116(input.output, true && _exceptionable)) && (null !== input.target && (undefined === input.target || true === _iv71.has(input.target) || "string" === typeof input.target && (RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(input.target) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^browserslist:(.*)/).test(input.target)) || Array.isArray(input.target) && input.target.every((elem, _index72) => null !== elem && undefined !== elem && (true === _iv73.has(elem) || "string" === typeof elem && (RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(elem) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^browserslist:(.*)/).test(elem)))))) && (undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode) && (undefined === input.experiments || "object" === typeof input.experiments && null !== input.experiments && false === Array.isArray(input.experiments) && _io120(input.experiments, true && _exceptionable)) && (null !== input.externals && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.every((elem, _index74) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io128(elem, true && _exceptionable))) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _io128(input.externals, true && _exceptionable)))) && (undefined === input.externalsType || true === _iv75.has(input.externalsType)) && (undefined === input.externalsPresets || "object" === typeof input.externalsPresets && null !== input.externalsPresets && false === Array.isArray(input.externalsPresets) && _io131(input.externalsPresets, true && _exceptionable)) && (undefined === input.infrastructureLogging || "object" === typeof input.infrastructureLogging && null !== input.infrastructureLogging && false === Array.isArray(input.infrastructureLogging) && _io132(input.infrastructureLogging, true && _exceptionable)) && (undefined === input.cache || "boolean" === typeof input.cache) && (undefined === input.context || "string" === typeof input.context) && (undefined === input.devtool || true === _iv76.has(input.devtool)) && (null !== input.node && (undefined === input.node || false === input.node || "object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) && _io136(input.node, true && _exceptionable))) && (undefined === input.loader || "object" === typeof input.loader && null !== input.loader && false === Array.isArray(input.loader) && _io137(input.loader, true && _exceptionable)) && (undefined === input.ignoreWarnings || Array.isArray(input.ignoreWarnings) && input.ignoreWarnings.every((elem, _index77) => null !== elem && undefined !== elem && ("function" === typeof elem || elem instanceof RegExp))) && (undefined === input.watchOptions || "object" === typeof input.watchOptions && null !== input.watchOptions && false === Array.isArray(input.watchOptions) && _io138(input.watchOptions, true && _exceptionable)) && (undefined === input.watch || "boolean" === typeof input.watch) && (null !== input.stats && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || "object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) && _io139(input.stats, true && _exceptionable))) && (undefined === input.snapshot || "object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) && _io140(input.snapshot, true && _exceptionable)) && (undefined === input.optimization || "object" === typeof input.optimization && null !== input.optimization && false === Array.isArray(input.optimization) && _io141(input.optimization, true && _exceptionable)) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io150(input.resolve, true && _exceptionable)) && (undefined === input.resolveLoader || "object" === typeof input.resolveLoader && null !== input.resolveLoader && false === Array.isArray(input.resolveLoader) && _io150(input.resolveLoader, true && _exceptionable)) && (undefined === input.plugins || Array.isArray(input.plugins) && input.plugins.every((elem, _index78) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && _iu4(elem, true && _exceptionable))) && (undefined === input.devServer || "object" === typeof input.devServer && null !== input.devServer && false === Array.isArray(input.devServer) && _io155(input.devServer, true && _exceptionable)) && (undefined === input["module"] || "object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) && _io205(input["module"], true && _exceptionable)) && (undefined === input.profile || "boolean" === typeof input.profile) && (null !== input.amd && (undefined === input.amd || false === input.amd || "object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) && _io85(input.amd, true && _exceptionable))) && (undefined === input.bail || "boolean" === typeof input.bail) && (null !== input.performance && (undefined === input.performance || false === input.performance || "object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) && _io227(input.performance, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "dependencies", "entry", "output", "target", "mode", "experiments", "externals", "externalsType", "externalsPresets", "infrastructureLogging", "cache", "context", "devtool", "node", "loader", "ignoreWarnings", "watchOptions", "watch", "stats", "snapshot", "optimization", "resolve", "resolveLoader", "plugins", "devServer", "module", "profile", "amd", "bail", "performance"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io111 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index79) => "string" === typeof elem) || "object" === typeof value && null !== value && _io112(value, true && _exceptionable)));
}); const _io112 = (input, _exceptionable = true) => null !== input["import"] && undefined !== input["import"] && ("string" === typeof input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index80) => "string" === typeof elem)) && (undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.baseUri || "string" === typeof input.baseUri) && (undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading) && (undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks) && (undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.library || "object" === typeof input.library && null !== input.library && _io113(input.library, true && _exceptionable)) && (null !== input.dependOn && (undefined === input.dependOn || "string" === typeof input.dependOn || Array.isArray(input.dependOn) && input.dependOn.every((elem, _index81) => "string" === typeof elem))) && (null === input.layer || undefined === input.layer || "string" === typeof input.layer) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "runtime", "publicPath", "baseUri", "chunkLoading", "asyncChunks", "wasmLoading", "filename", "library", "dependOn", "layer"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io113 = (input, _exceptionable = true) => (undefined === input.amdContainer || "string" === typeof input.amdContainer) && (null !== input.auxiliaryComment && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || "object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) && _io114(input.auxiliaryComment, true && _exceptionable))) && (null !== input["export"] && (undefined === input["export"] || "string" === typeof input["export"] || Array.isArray(input["export"]) && input["export"].every((elem, _index82) => "string" === typeof elem))) && (null !== input.name && (undefined === input.name || "string" === typeof input.name || (Array.isArray(input.name) && input.name.every((elem, _index83) => "string" === typeof elem) || "object" === typeof input.name && null !== input.name && false === Array.isArray(input.name) && _io115(input.name, true && _exceptionable)))) && "string" === typeof input.type && (undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amdContainer", "auxiliaryComment", "export", "name", "type", "umdNamedDefine"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io114 = (input, _exceptionable = true) => (undefined === input.amd || "string" === typeof input.amd) && (undefined === input.commonjs || "string" === typeof input.commonjs) && (undefined === input.commonjs2 || "string" === typeof input.commonjs2) && (undefined === input.root || "string" === typeof input.root) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amd", "commonjs", "commonjs2", "root"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io115 = (input, _exceptionable = true) => (undefined === input.amd || "string" === typeof input.amd) && (undefined === input.commonjs || "string" === typeof input.commonjs) && (null !== input.root && (undefined === input.root || "string" === typeof input.root || Array.isArray(input.root) && input.root.every((elem, _index84) => "string" === typeof elem))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amd", "commonjs", "root"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io116 = (input, _exceptionable = true) => (undefined === input.path || "string" === typeof input.path) && (undefined === input.pathinfo || "verbose" === input.pathinfo || "boolean" === typeof input.pathinfo) && (null !== input.clean && (undefined === input.clean || "boolean" === typeof input.clean || "object" === typeof input.clean && null !== input.clean && false === Array.isArray(input.clean) && _io117(input.clean, true && _exceptionable))) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.chunkFilename && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename)) && (undefined === input.crossOriginLoading || false === input.crossOriginLoading || "anonymous" === input.crossOriginLoading || "use-credentials" === input.crossOriginLoading) && (null !== input.cssFilename && (undefined === input.cssFilename || "function" === typeof input.cssFilename || "string" === typeof input.cssFilename)) && (undefined === input.cssHeadDataCompression || "boolean" === typeof input.cssHeadDataCompression) && (null !== input.cssChunkFilename && (undefined === input.cssChunkFilename || "function" === typeof input.cssChunkFilename || "string" === typeof input.cssChunkFilename)) && (undefined === input.hotUpdateMainFilename || "string" === typeof input.hotUpdateMainFilename) && (undefined === input.hotUpdateChunkFilename || "string" === typeof input.hotUpdateChunkFilename) && (undefined === input.hotUpdateGlobal || "string" === typeof input.hotUpdateGlobal) && (null !== input.assetModuleFilename && (undefined === input.assetModuleFilename || "function" === typeof input.assetModuleFilename || "string" === typeof input.assetModuleFilename)) && (undefined === input.uniqueName || "string" === typeof input.uniqueName) && (undefined === input.chunkLoadingGlobal || "string" === typeof input.chunkLoadingGlobal) && (undefined === input.enabledLibraryTypes || Array.isArray(input.enabledLibraryTypes) && input.enabledLibraryTypes.every((elem, _index85) => "string" === typeof elem)) && (null !== input.library && (undefined === input.library || "string" === typeof input.library || (Array.isArray(input.library) && input.library.every((elem, _index86) => "string" === typeof elem) || "object" === typeof input.library && null !== input.library && false === Array.isArray(input.library) && _iu12(input.library, true && _exceptionable)))) && (null !== input.libraryExport && (undefined === input.libraryExport || "string" === typeof input.libraryExport || Array.isArray(input.libraryExport) && input.libraryExport.every((elem, _index87) => "string" === typeof elem))) && (undefined === input.libraryTarget || "string" === typeof input.libraryTarget) && (undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine) && (null !== input.auxiliaryComment && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || "object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) && _io114(input.auxiliaryComment, true && _exceptionable))) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (undefined === input.strictModuleExceptionHandling || "boolean" === typeof input.strictModuleExceptionHandling) && (undefined === input.strictModuleErrorHandling || "boolean" === typeof input.strictModuleErrorHandling) && (undefined === input.globalObject || "string" === typeof input.globalObject) && (undefined === input.importFunctionName || "string" === typeof input.importFunctionName) && (undefined === input.importMetaName || "string" === typeof input.importMetaName) && (undefined === input.iife || "boolean" === typeof input.iife) && (undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading) && (undefined === input.enabledWasmLoadingTypes || Array.isArray(input.enabledWasmLoadingTypes) && input.enabledWasmLoadingTypes.every((elem, _index88) => "string" === typeof elem)) && (undefined === input.webassemblyModuleFilename || "string" === typeof input.webassemblyModuleFilename) && (undefined === input.chunkFormat || false === input.chunkFormat || "string" === typeof input.chunkFormat) && (undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading) && (undefined === input.enabledChunkLoadingTypes || Array.isArray(input.enabledChunkLoadingTypes) && input.enabledChunkLoadingTypes.every((elem, _index89) => "string" === typeof elem)) && (null !== input.trustedTypes && (undefined === input.trustedTypes || true === input.trustedTypes || "string" === typeof input.trustedTypes || "object" === typeof input.trustedTypes && null !== input.trustedTypes && false === Array.isArray(input.trustedTypes) && _io118(input.trustedTypes, true && _exceptionable))) && (undefined === input.sourceMapFilename || "string" === typeof input.sourceMapFilename) && (undefined === input.hashDigest || "string" === typeof input.hashDigest) && (undefined === input.hashDigestLength || "number" === typeof input.hashDigestLength) && (undefined === input.hashFunction || "md4" === input.hashFunction || "xxhash64" === input.hashFunction) && (undefined === input.hashSalt || "string" === typeof input.hashSalt) && (undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks) && (undefined === input.workerChunkLoading || false === input.workerChunkLoading || "string" === typeof input.workerChunkLoading) && (undefined === input.workerWasmLoading || false === input.workerWasmLoading || "string" === typeof input.workerWasmLoading) && (undefined === input.workerPublicPath || "string" === typeof input.workerPublicPath) && (undefined === input.scriptType || false === input.scriptType || "module" === input.scriptType || "text/javascript" === input.scriptType) && (undefined === input.devtoolNamespace || "string" === typeof input.devtoolNamespace) && (null !== input.devtoolModuleFilenameTemplate && (undefined === input.devtoolModuleFilenameTemplate || "function" === typeof input.devtoolModuleFilenameTemplate || "string" === typeof input.devtoolModuleFilenameTemplate)) && (null !== input.devtoolFallbackModuleFilenameTemplate && (undefined === input.devtoolFallbackModuleFilenameTemplate || "function" === typeof input.devtoolFallbackModuleFilenameTemplate || "string" === typeof input.devtoolFallbackModuleFilenameTemplate)) && (undefined === input.chunkLoadTimeout || "number" === typeof input.chunkLoadTimeout) && (undefined === input.charset || "boolean" === typeof input.charset) && (undefined === input.environment || "object" === typeof input.environment && null !== input.environment && false === Array.isArray(input.environment) && _io119(input.environment, true && _exceptionable)) && (undefined === input.compareBeforeEmit || "boolean" === typeof input.compareBeforeEmit) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["path", "pathinfo", "clean", "publicPath", "filename", "chunkFilename", "crossOriginLoading", "cssFilename", "cssHeadDataCompression", "cssChunkFilename", "hotUpdateMainFilename", "hotUpdateChunkFilename", "hotUpdateGlobal", "assetModuleFilename", "uniqueName", "chunkLoadingGlobal", "enabledLibraryTypes", "library", "libraryExport", "libraryTarget", "umdNamedDefine", "auxiliaryComment", "module", "strictModuleExceptionHandling", "strictModuleErrorHandling", "globalObject", "importFunctionName", "importMetaName", "iife", "wasmLoading", "enabledWasmLoadingTypes", "webassemblyModuleFilename", "chunkFormat", "chunkLoading", "enabledChunkLoadingTypes", "trustedTypes", "sourceMapFilename", "hashDigest", "hashDigestLength", "hashFunction", "hashSalt", "asyncChunks", "workerChunkLoading", "workerWasmLoading", "workerPublicPath", "scriptType", "devtoolNamespace", "devtoolModuleFilenameTemplate", "devtoolFallbackModuleFilenameTemplate", "chunkLoadTimeout", "charset", "environment", "compareBeforeEmit"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io117 = (input, _exceptionable = true) => (undefined === input.keep || "string" === typeof input.keep) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["keep"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io118 = (input, _exceptionable = true) => (undefined === input.policyName || "string" === typeof input.policyName) && (undefined === input.onPolicyCreationFailure || "continue" === input.onPolicyCreationFailure || "stop" === input.onPolicyCreationFailure) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["policyName", "onPolicyCreationFailure"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io119 = (input, _exceptionable = true) => (undefined === input.arrowFunction || "boolean" === typeof input.arrowFunction) && (undefined === input.asyncFunction || "boolean" === typeof input.asyncFunction) && (undefined === input.bigIntLiteral || "boolean" === typeof input.bigIntLiteral) && (undefined === input["const"] || "boolean" === typeof input["const"]) && (undefined === input.destructuring || "boolean" === typeof input.destructuring) && (undefined === input.document || "boolean" === typeof input.document) && (undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport) && (undefined === input.dynamicImportInWorker || "boolean" === typeof input.dynamicImportInWorker) && (undefined === input.forOf || "boolean" === typeof input.forOf) && (undefined === input.globalThis || "boolean" === typeof input.globalThis) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (undefined === input.nodePrefixForCoreModules || "boolean" === typeof input.nodePrefixForCoreModules) && (undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining) && (undefined === input.templateLiteral || "boolean" === typeof input.templateLiteral) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["arrowFunction", "asyncFunction", "bigIntLiteral", "const", "destructuring", "document", "dynamicImport", "dynamicImportInWorker", "forOf", "globalThis", "module", "nodePrefixForCoreModules", "optionalChaining", "templateLiteral"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io120 = (input, _exceptionable = true) => null !== input.cache && (undefined === input.cache || "boolean" === typeof input.cache || "object" === typeof input.cache && null !== input.cache && _iu13(input.cache, true && _exceptionable)) && (null !== input.lazyCompilation && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || "object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) && _io11(input.lazyCompilation, true && _exceptionable))) && (undefined === input.asyncWebAssembly || "boolean" === typeof input.asyncWebAssembly) && (undefined === input.outputModule || "boolean" === typeof input.outputModule) && (undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait) && (undefined === input.css || "boolean" === typeof input.css) && (undefined === input.layers || "boolean" === typeof input.layers) && (null !== input.incremental && (undefined === input.incremental || "boolean" === typeof input.incremental || "object" === typeof input.incremental && null !== input.incremental && false === Array.isArray(input.incremental) && _io125(input.incremental, true && _exceptionable))) && (undefined === input.parallelCodeSplitting || "boolean" === typeof input.parallelCodeSplitting) && (undefined === input.futureDefaults || "boolean" === typeof input.futureDefaults) && (undefined === input.rspackFuture || "object" === typeof input.rspackFuture && null !== input.rspackFuture && false === Array.isArray(input.rspackFuture) && _io126(input.rspackFuture, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["cache", "lazyCompilation", "asyncWebAssembly", "outputModule", "topLevelAwait", "css", "layers", "incremental", "parallelCodeSplitting", "futureDefaults", "rspackFuture"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io121 = (input, _exceptionable = true) => "memory" === input.type && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io122 = (input, _exceptionable = true) => "persistent" === input.type && (undefined === input.buildDependencies || Array.isArray(input.buildDependencies) && input.buildDependencies.every((elem, _index90) => "string" === typeof elem)) && (undefined === input.version || "string" === typeof input.version) && (undefined === input.snapshot || "object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) && _io123(input.snapshot, true && _exceptionable)) && (undefined === input.storage || "object" === typeof input.storage && null !== input.storage && _io124(input.storage, true && _exceptionable)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "buildDependencies", "version", "snapshot", "storage"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io123 = (input, _exceptionable = true) => (undefined === input.immutablePaths || Array.isArray(input.immutablePaths) && input.immutablePaths.every((elem, _index91) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.unmanagedPaths || Array.isArray(input.unmanagedPaths) && input.unmanagedPaths.every((elem, _index92) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.managedPaths || Array.isArray(input.managedPaths) && input.managedPaths.every((elem, _index93) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["immutablePaths", "unmanagedPaths", "managedPaths"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io124 = (input, _exceptionable = true) => "filesystem" === input.type && (undefined === input.directory || "string" === typeof input.directory) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "directory"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io125 = (input, _exceptionable = true) => (undefined === input.make || "boolean" === typeof input.make) && (undefined === input.inferAsyncModules || "boolean" === typeof input.inferAsyncModules) && (undefined === input.providedExports || "boolean" === typeof input.providedExports) && (undefined === input.dependenciesDiagnostics || "boolean" === typeof input.dependenciesDiagnostics) && (undefined === input.sideEffects || "boolean" === typeof input.sideEffects) && (undefined === input.buildChunkGraph || "boolean" === typeof input.buildChunkGraph) && (undefined === input.moduleIds || "boolean" === typeof input.moduleIds) && (undefined === input.chunkIds || "boolean" === typeof input.chunkIds) && (undefined === input.modulesHashes || "boolean" === typeof input.modulesHashes) && (undefined === input.modulesCodegen || "boolean" === typeof input.modulesCodegen) && (undefined === input.modulesRuntimeRequirements || "boolean" === typeof input.modulesRuntimeRequirements) && (undefined === input.chunksRuntimeRequirements || "boolean" === typeof input.chunksRuntimeRequirements) && (undefined === input.chunksHashes || "boolean" === typeof input.chunksHashes) && (undefined === input.chunksRender || "boolean" === typeof input.chunksRender) && (undefined === input.emitAssets || "boolean" === typeof input.emitAssets) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["make", "inferAsyncModules", "providedExports", "dependenciesDiagnostics", "sideEffects", "buildChunkGraph", "moduleIds", "chunkIds", "modulesHashes", "modulesCodegen", "modulesRuntimeRequirements", "chunksRuntimeRequirements", "chunksHashes", "chunksRender", "emitAssets"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io126 = (input, _exceptionable = true) => (undefined === input.bundlerInfo || "object" === typeof input.bundlerInfo && null !== input.bundlerInfo && false === Array.isArray(input.bundlerInfo) && _io127(input.bundlerInfo, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["bundlerInfo"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io127 = (input, _exceptionable = true) => (undefined === input.version || "string" === typeof input.version) && (undefined === input.bundler || "string" === typeof input.bundler) && (null !== input.force && (undefined === input.force || "boolean" === typeof input.force || Array.isArray(input.force) && input.force.every((elem, _index94) => "version" === elem || "uniqueId" === elem))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["version", "bundler", "force"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io128 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || "boolean" === typeof value || (Array.isArray(value) && value.every((elem, _index95) => "string" === typeof elem) || "object" === typeof value && null !== value && false === Array.isArray(value) && _iu14(value, true && _exceptionable)));
}); const _io129 = (input, _exceptionable = true) => null !== input.root && undefined !== input.root && ("string" === typeof input.root || Array.isArray(input.root) && input.root.every((elem, _index96) => "string" === typeof elem)) && (null !== input.commonjs && undefined !== input.commonjs && ("string" === typeof input.commonjs || Array.isArray(input.commonjs) && input.commonjs.every((elem, _index97) => "string" === typeof elem))) && (null !== input.commonjs2 && undefined !== input.commonjs2 && ("string" === typeof input.commonjs2 || Array.isArray(input.commonjs2) && input.commonjs2.every((elem, _index98) => "string" === typeof elem))) && (null !== input.amd && undefined !== input.amd && ("string" === typeof input.amd || Array.isArray(input.amd) && input.amd.every((elem, _index99) => "string" === typeof elem))) && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["root", "commonjs", "commonjs2", "amd"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io130 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || Array.isArray(value) && value.every((elem, _index100) => "string" === typeof elem));
}); const _io131 = (input, _exceptionable = true) => (undefined === input.node || "boolean" === typeof input.node) && (undefined === input.web || "boolean" === typeof input.web) && (undefined === input.webAsync || "boolean" === typeof input.webAsync) && (undefined === input.electron || "boolean" === typeof input.electron) && (undefined === input.electronMain || "boolean" === typeof input.electronMain) && (undefined === input.electronPreload || "boolean" === typeof input.electronPreload) && (undefined === input.electronRenderer || "boolean" === typeof input.electronRenderer) && (undefined === input.nwjs || "boolean" === typeof input.nwjs) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["node", "web", "webAsync", "electron", "electronMain", "electronPreload", "electronRenderer", "nwjs"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io132 = (input, _exceptionable = true) => (undefined === input.appendOnly || "boolean" === typeof input.appendOnly) && (undefined === input.colors || "boolean" === typeof input.colors) && (undefined === input.console || "object" === typeof input.console && null !== input.console && _io133(input.console, true && _exceptionable)) && (null !== input.debug && (undefined === input.debug || "function" === typeof input.debug || "string" === typeof input.debug || "boolean" === typeof input.debug || input.debug instanceof RegExp || Array.isArray(input.debug) && input.debug.every((elem, _index101) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.level || "none" === input.level || "log" === input.level || "warn" === input.level || "error" === input.level || "info" === input.level || "verbose" === input.level) && (undefined === input.stream || "object" === typeof input.stream && null !== input.stream && _io135(input.stream, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["appendOnly", "colors", "console", "debug", "level", "stream"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io133 = (input, _exceptionable = true) => "object" === typeof input.Console && null !== input.Console && _io134(input.Console, true && _exceptionable) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["Console"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io134 = (input, _exceptionable = true) => "object" === typeof input.prototype && null !== input.prototype && _io133(input.prototype, true && _exceptionable) && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io135 = (input, _exceptionable = true) => "boolean" === typeof input.writable && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["writable"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io136 = (input, _exceptionable = true) => (undefined === input.__dirname || "warn-mock" === input.__dirname || "mock" === input.__dirname || "eval-only" === input.__dirname || "node-module" === input.__dirname || "boolean" === typeof input.__dirname) && (undefined === input.__filename || "warn-mock" === input.__filename || "mock" === input.__filename || "eval-only" === input.__filename || "node-module" === input.__filename || "boolean" === typeof input.__filename) && (undefined === input.global || "warn" === input.global || "boolean" === typeof input.global) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["__dirname", "__filename", "global"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io137 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io138 = (input, _exceptionable = true) => (undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout) && (undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks) && (null !== input.ignored && (undefined === input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || Array.isArray(input.ignored) && input.ignored.every((elem, _index102) => "string" === typeof elem))) && (undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll) && (undefined === input.stdin || "boolean" === typeof input.stdin) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["aggregateTimeout", "followSymlinks", "ignored", "poll", "stdin"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io139 = (input, _exceptionable = true) => (undefined === input.all || "boolean" === typeof input.all) && (undefined === input.preset || "none" === input.preset || "verbose" === input.preset || "normal" === input.preset || "errors-only" === input.preset || "errors-warnings" === input.preset || "minimal" === input.preset || "detailed" === input.preset || "summary" === input.preset || "boolean" === typeof input.preset) && (undefined === input.assets || "boolean" === typeof input.assets) && (undefined === input.chunks || "boolean" === typeof input.chunks) && (undefined === input.modules || "boolean" === typeof input.modules) && (undefined === input.entrypoints || "auto" === input.entrypoints || "boolean" === typeof input.entrypoints) && (undefined === input.chunkGroups || "boolean" === typeof input.chunkGroups) && (undefined === input.warnings || "boolean" === typeof input.warnings) && (undefined === input.warningsCount || "boolean" === typeof input.warningsCount) && (undefined === input.errors || "boolean" === typeof input.errors) && (undefined === input.errorsCount || "boolean" === typeof input.errorsCount) && (undefined === input.colors || "boolean" === typeof input.colors) && (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.version || "boolean" === typeof input.version) && (undefined === input.reasons || "boolean" === typeof input.reasons) && (undefined === input.publicPath || "boolean" === typeof input.publicPath) && (undefined === input.outputPath || "boolean" === typeof input.outputPath) && (undefined === input.chunkModules || "boolean" === typeof input.chunkModules) && (undefined === input.chunkRelations || "boolean" === typeof input.chunkRelations) && (undefined === input.ids || "boolean" === typeof input.ids) && (undefined === input.timings || "boolean" === typeof input.timings) && (undefined === input.builtAt || "boolean" === typeof input.builtAt) && (undefined === input.moduleAssets || "boolean" === typeof input.moduleAssets) && (undefined === input.nestedModules || "boolean" === typeof input.nestedModules) && (undefined === input.source || "boolean" === typeof input.source) && (undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging || "boolean" === typeof input.logging) && (null !== input.loggingDebug && (undefined === input.loggingDebug || "function" === typeof input.loggingDebug || "string" === typeof input.loggingDebug || "boolean" === typeof input.loggingDebug || input.loggingDebug instanceof RegExp || Array.isArray(input.loggingDebug) && input.loggingDebug.every((elem, _index103) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.loggingTrace || "boolean" === typeof input.loggingTrace) && (undefined === input.runtimeModules || "boolean" === typeof input.runtimeModules) && (undefined === input.children || "boolean" === typeof input.children) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (undefined === input.providedExports || "boolean" === typeof input.providedExports) && (undefined === input.optimizationBailout || "boolean" === typeof input.optimizationBailout) && (undefined === input.groupModulesByType || "boolean" === typeof input.groupModulesByType) && (undefined === input.groupModulesByCacheStatus || "boolean" === typeof input.groupModulesByCacheStatus) && (undefined === input.groupModulesByLayer || "boolean" === typeof input.groupModulesByLayer) && (undefined === input.groupModulesByAttributes || "boolean" === typeof input.groupModulesByAttributes) && (undefined === input.groupModulesByPath || "boolean" === typeof input.groupModulesByPath) && (undefined === input.groupModulesByExtension || "boolean" === typeof input.groupModulesByExtension) && (undefined === input.modulesSpace || "number" === typeof input.modulesSpace) && (undefined === input.chunkModulesSpace || "number" === typeof input.chunkModulesSpace) && (undefined === input.nestedModulesSpace || "number" === typeof input.nestedModulesSpace) && (undefined === input.relatedAssets || "boolean" === typeof input.relatedAssets) && (undefined === input.groupAssetsByEmitStatus || "boolean" === typeof input.groupAssetsByEmitStatus) && (undefined === input.groupAssetsByInfo || "boolean" === typeof input.groupAssetsByInfo) && (undefined === input.groupAssetsByPath || "boolean" === typeof input.groupAssetsByPath) && (undefined === input.groupAssetsByExtension || "boolean" === typeof input.groupAssetsByExtension) && (undefined === input.groupAssetsByChunk || "boolean" === typeof input.groupAssetsByChunk) && (undefined === input.assetsSpace || "number" === typeof input.assetsSpace) && (undefined === input.orphanModules || "boolean" === typeof input.orphanModules) && (null !== input.excludeModules && (undefined === input.excludeModules || "function" === typeof input.excludeModules || "string" === typeof input.excludeModules || "boolean" === typeof input.excludeModules || input.excludeModules instanceof RegExp || Array.isArray(input.excludeModules) && input.excludeModules.every((elem, _index104) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (null !== input.excludeAssets && (undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || "boolean" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || Array.isArray(input.excludeAssets) && input.excludeAssets.every((elem, _index105) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.modulesSort || "string" === typeof input.modulesSort) && (undefined === input.chunkModulesSort || "string" === typeof input.chunkModulesSort) && (undefined === input.nestedModulesSort || "string" === typeof input.nestedModulesSort) && (undefined === input.chunksSort || "string" === typeof input.chunksSort) && (undefined === input.assetsSort || "string" === typeof input.assetsSort) && (undefined === input.performance || "boolean" === typeof input.performance) && (undefined === input.env || "boolean" === typeof input.env) && (undefined === input.chunkGroupAuxiliary || "boolean" === typeof input.chunkGroupAuxiliary) && (undefined === input.chunkGroupChildren || "boolean" === typeof input.chunkGroupChildren) && (undefined === input.chunkGroupMaxAssets || "number" === typeof input.chunkGroupMaxAssets) && (undefined === input.dependentModules || "boolean" === typeof input.dependentModules) && (undefined === input.chunkOrigins || "boolean" === typeof input.chunkOrigins) && (undefined === input.runtime || "boolean" === typeof input.runtime) && (undefined === input.depth || "boolean" === typeof input.depth) && (undefined === input.reasonsSpace || "number" === typeof input.reasonsSpace) && (undefined === input.groupReasonsByOrigin || "boolean" === typeof input.groupReasonsByOrigin) && (undefined === input.errorDetails || "boolean" === typeof input.errorDetails) && (undefined === input.errorStack || "boolean" === typeof input.errorStack) && (undefined === input.moduleTrace || "boolean" === typeof input.moduleTrace) && (undefined === input.cachedModules || "boolean" === typeof input.cachedModules) && (undefined === input.cachedAssets || "boolean" === typeof input.cachedAssets) && (undefined === input.cached || "boolean" === typeof input.cached) && (undefined === input.errorsSpace || "number" === typeof input.errorsSpace) && (undefined === input.warningsSpace || "number" === typeof input.warningsSpace) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["all", "preset", "assets", "chunks", "modules", "entrypoints", "chunkGroups", "warnings", "warningsCount", "errors", "errorsCount", "colors", "hash", "version", "reasons", "publicPath", "outputPath", "chunkModules", "chunkRelations", "ids", "timings", "builtAt", "moduleAssets", "nestedModules", "source", "logging", "loggingDebug", "loggingTrace", "runtimeModules", "children", "usedExports", "providedExports", "optimizationBailout", "groupModulesByType", "groupModulesByCacheStatus", "groupModulesByLayer", "groupModulesByAttributes", "groupModulesByPath", "groupModulesByExtension", "modulesSpace", "chunkModulesSpace", "nestedModulesSpace", "relatedAssets", "groupAssetsByEmitStatus", "groupAssetsByInfo", "groupAssetsByPath", "groupAssetsByExtension", "groupAssetsByChunk", "assetsSpace", "orphanModules", "excludeModules", "excludeAssets", "modulesSort", "chunkModulesSort", "nestedModulesSort", "chunksSort", "assetsSort", "performance", "env", "chunkGroupAuxiliary", "chunkGroupChildren", "chunkGroupMaxAssets", "dependentModules", "chunkOrigins", "runtime", "depth", "reasonsSpace", "groupReasonsByOrigin", "errorDetails", "errorStack", "moduleTrace", "cachedModules", "cachedAssets", "cached", "errorsSpace", "warningsSpace"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io140 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io141 = (input, _exceptionable = true) => (undefined === input.moduleIds || "named" === input.moduleIds || "natural" === input.moduleIds || "deterministic" === input.moduleIds) && (undefined === input.chunkIds || "size" === input.chunkIds || "named" === input.chunkIds || "natural" === input.chunkIds || "deterministic" === input.chunkIds || "total-size" === input.chunkIds) && (undefined === input.minimize || "boolean" === typeof input.minimize) && (undefined === input.minimizer || Array.isArray(input.minimizer) && input.minimizer.every((elem, _index106) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && _iu4(elem, true && _exceptionable))) && (undefined === input.mergeDuplicateChunks || "boolean" === typeof input.mergeDuplicateChunks) && (null !== input.splitChunks && (undefined === input.splitChunks || false === input.splitChunks || "object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) && _io144(input.splitChunks, true && _exceptionable))) && (null !== input.runtimeChunk && (undefined === input.runtimeChunk || "single" === input.runtimeChunk || "multiple" === input.runtimeChunk || "boolean" === typeof input.runtimeChunk || "object" === typeof input.runtimeChunk && null !== input.runtimeChunk && false === Array.isArray(input.runtimeChunk) && _io149(input.runtimeChunk, true && _exceptionable))) && (undefined === input.removeAvailableModules || "boolean" === typeof input.removeAvailableModules) && (undefined === input.removeEmptyChunks || "boolean" === typeof input.removeEmptyChunks) && (undefined === input.realContentHash || "boolean" === typeof input.realContentHash) && (undefined === input.sideEffects || "flag" === input.sideEffects || "boolean" === typeof input.sideEffects) && (undefined === input.providedExports || "boolean" === typeof input.providedExports) && (undefined === input.concatenateModules || "boolean" === typeof input.concatenateModules) && (undefined === input.innerGraph || "boolean" === typeof input.innerGraph) && (undefined === input.usedExports || "global" === input.usedExports || "boolean" === typeof input.usedExports) && (undefined === input.mangleExports || "size" === input.mangleExports || "deterministic" === input.mangleExports || "boolean" === typeof input.mangleExports) && (undefined === input.nodeEnv || false === input.nodeEnv || "string" === typeof input.nodeEnv) && (undefined === input.emitOnErrors || "boolean" === typeof input.emitOnErrors) && (undefined === input.avoidEntryIife || "boolean" === typeof input.avoidEntryIife) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["moduleIds", "chunkIds", "minimize", "minimizer", "mergeDuplicateChunks", "splitChunks", "runtimeChunk", "removeAvailableModules", "removeEmptyChunks", "realContentHash", "sideEffects", "providedExports", "concatenateModules", "innerGraph", "usedExports", "mangleExports", "nodeEnv", "emitOnErrors", "avoidEntryIife"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io142 = (input, _exceptionable = true) => true && Object.keys(input).every(key => {
    if (["apply"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io143 = (input, _exceptionable = true) => true && Object.keys(input).every(key => {
    if (["apply"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io144 = (input, _exceptionable = true) => (undefined === input.cacheGroups || "object" === typeof input.cacheGroups && null !== input.cacheGroups && false === Array.isArray(input.cacheGroups) && _io145(input.cacheGroups, true && _exceptionable)) && (undefined === input.fallbackCacheGroup || "object" === typeof input.fallbackCacheGroup && null !== input.fallbackCacheGroup && false === Array.isArray(input.fallbackCacheGroup) && _io148(input.fallbackCacheGroup, true && _exceptionable)) && (undefined === input.hidePathInfo || "boolean" === typeof input.hidePathInfo) && (null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp)) && (undefined === input.defaultSizeTypes || Array.isArray(input.defaultSizeTypes) && input.defaultSizeTypes.every((elem, _index107) => "string" === typeof elem)) && (undefined === input.minChunks || "number" === typeof input.minChunks) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (null !== input.name && (undefined === input.name || "function" === typeof input.name || false === input.name || "string" === typeof input.name)) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.minSize && (undefined === input.minSize || "number" === typeof input.minSize || "object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) && _io147(input.minSize, true && _exceptionable))) && (null !== input.minSizeReduction && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || "object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) && _io147(input.minSizeReduction, true && _exceptionable))) && (null !== input.maxSize && (undefined === input.maxSize || "number" === typeof input.maxSize || "object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) && _io147(input.maxSize, true && _exceptionable))) && (null !== input.maxAsyncSize && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || "object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) && _io147(input.maxAsyncSize, true && _exceptionable))) && (null !== input.maxInitialSize && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || "object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) && _io147(input.maxInitialSize, true && _exceptionable))) && (undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests) && (undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests) && (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["cacheGroups", "fallbackCacheGroup", "hidePathInfo", "chunks", "defaultSizeTypes", "minChunks", "usedExports", "name", "filename", "minSize", "minSizeReduction", "maxSize", "maxAsyncSize", "maxInitialSize", "maxAsyncRequests", "maxInitialRequests", "automaticNameDelimiter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io145 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io146(value, true && _exceptionable));
}); const _io146 = (input, _exceptionable = true) => null !== input.test && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp) && (undefined === input.priority || "number" === typeof input.priority) && (undefined === input.enforce || "boolean" === typeof input.enforce) && (undefined === input.reuseExistingChunk || "boolean" === typeof input.reuseExistingChunk) && (null !== input.type && (undefined === input.type || "string" === typeof input.type || input.type instanceof RegExp)) && (undefined === input.idHint || "string" === typeof input.idHint) && (null !== input.layer && (undefined === input.layer || "function" === typeof input.layer || "string" === typeof input.layer || input.layer instanceof RegExp)) && (null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp)) && (undefined === input.defaultSizeTypes || Array.isArray(input.defaultSizeTypes) && input.defaultSizeTypes.every((elem, _index108) => "string" === typeof elem)) && (undefined === input.minChunks || "number" === typeof input.minChunks) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (null !== input.name && (undefined === input.name || "function" === typeof input.name || false === input.name || "string" === typeof input.name)) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.minSize && (undefined === input.minSize || "number" === typeof input.minSize || "object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) && _io147(input.minSize, true && _exceptionable))) && (null !== input.minSizeReduction && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || "object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) && _io147(input.minSizeReduction, true && _exceptionable))) && (null !== input.maxSize && (undefined === input.maxSize || "number" === typeof input.maxSize || "object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) && _io147(input.maxSize, true && _exceptionable))) && (null !== input.maxAsyncSize && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || "object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) && _io147(input.maxAsyncSize, true && _exceptionable))) && (null !== input.maxInitialSize && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || "object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) && _io147(input.maxInitialSize, true && _exceptionable))) && (undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests) && (undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests) && (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["test", "priority", "enforce", "reuseExistingChunk", "type", "idHint", "layer", "chunks", "defaultSizeTypes", "minChunks", "usedExports", "name", "filename", "minSize", "minSizeReduction", "maxSize", "maxAsyncSize", "maxInitialSize", "maxAsyncRequests", "maxInitialRequests", "automaticNameDelimiter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io147 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io148 = (input, _exceptionable = true) => null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp) && (undefined === input.minSize || "number" === typeof input.minSize) && (undefined === input.maxSize || "number" === typeof input.maxSize) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize) && (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["chunks", "minSize", "maxSize", "maxAsyncSize", "maxInitialSize", "automaticNameDelimiter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io149 = (input, _exceptionable = true) => null !== input.name && (undefined === input.name || "function" === typeof input.name || "string" === typeof input.name) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io150 = (input, _exceptionable = true) => (undefined === input.alias || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _io151(input.alias, true && _exceptionable)) && (undefined === input.conditionNames || Array.isArray(input.conditionNames) && input.conditionNames.every((elem, _index109) => "string" === typeof elem)) && (undefined === input.extensions || Array.isArray(input.extensions) && input.extensions.every((elem, _index110) => "string" === typeof elem)) && (undefined === input.fallback || "object" === typeof input.fallback && null !== input.fallback && false === Array.isArray(input.fallback) && _io151(input.fallback, true && _exceptionable)) && (undefined === input.mainFields || Array.isArray(input.mainFields) && input.mainFields.every((elem, _index111) => "string" === typeof elem)) && (undefined === input.mainFiles || Array.isArray(input.mainFiles) && input.mainFiles.every((elem, _index112) => "string" === typeof elem)) && (undefined === input.modules || Array.isArray(input.modules) && input.modules.every((elem, _index113) => "string" === typeof elem)) && (undefined === input.preferRelative || "boolean" === typeof input.preferRelative) && (undefined === input.preferAbsolute || "boolean" === typeof input.preferAbsolute) && (undefined === input.symlinks || "boolean" === typeof input.symlinks) && (undefined === input.enforceExtension || "boolean" === typeof input.enforceExtension) && (undefined === input.importsFields || Array.isArray(input.importsFields) && input.importsFields.every((elem, _index114) => "string" === typeof elem)) && (undefined === input.descriptionFiles || Array.isArray(input.descriptionFiles) && input.descriptionFiles.every((elem, _index115) => "string" === typeof elem)) && (null !== input.tsConfig && (undefined === input.tsConfig || "string" === typeof input.tsConfig || "object" === typeof input.tsConfig && null !== input.tsConfig && _io152(input.tsConfig, true && _exceptionable))) && (undefined === input.fullySpecified || "boolean" === typeof input.fullySpecified) && (undefined === input.exportsFields || Array.isArray(input.exportsFields) && input.exportsFields.every((elem, _index116) => "string" === typeof elem)) && (undefined === input.extensionAlias || "object" === typeof input.extensionAlias && null !== input.extensionAlias && false === Array.isArray(input.extensionAlias) && _io153(input.extensionAlias, true && _exceptionable)) && (undefined === input.aliasFields || Array.isArray(input.aliasFields) && input.aliasFields.every((elem, _index117) => "string" === typeof elem)) && (undefined === input.restrictions || Array.isArray(input.restrictions) && input.restrictions.every((elem, _index118) => "string" === typeof elem)) && (undefined === input.roots || Array.isArray(input.roots) && input.roots.every((elem, _index119) => "string" === typeof elem)) && (undefined === input.byDependency || "object" === typeof input.byDependency && null !== input.byDependency && false === Array.isArray(input.byDependency) && _io154(input.byDependency, true && _exceptionable)) && (undefined === input.pnp || "boolean" === typeof input.pnp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "conditionNames", "extensions", "fallback", "mainFields", "mainFiles", "modules", "preferRelative", "preferAbsolute", "symlinks", "enforceExtension", "importsFields", "descriptionFiles", "tsConfig", "fullySpecified", "exportsFields", "extensionAlias", "aliasFields", "restrictions", "roots", "byDependency", "pnp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io151 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index120) => false === elem || "string" === typeof elem));
}); const _io152 = (input, _exceptionable = true) => "string" === typeof input.configFile && (null !== input.references && (undefined === input.references || "auto" === input.references || Array.isArray(input.references) && input.references.every((elem, _index121) => "string" === typeof elem))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["configFile", "references"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io153 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || Array.isArray(value) && value.every((elem, _index122) => "string" === typeof elem));
}); const _io154 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io150(value, true && _exceptionable);
}); const _io155 = (input, _exceptionable = true) => (undefined === input.ipc || "string" === typeof input.ipc || "boolean" === typeof input.ipc) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.port || "string" === typeof input.port || "number" === typeof input.port) && (undefined === input.hot || "only" === input.hot || "boolean" === typeof input.hot) && (undefined === input.liveReload || "boolean" === typeof input.liveReload) && (undefined === input.devMiddleware || "object" === typeof input.devMiddleware && null !== input.devMiddleware && false === Array.isArray(input.devMiddleware) && _io156(input.devMiddleware, true && _exceptionable)) && (undefined === input.compress || "boolean" === typeof input.compress) && (null !== input.allowedHosts && (undefined === input.allowedHosts || "string" === typeof input.allowedHosts || Array.isArray(input.allowedHosts) && input.allowedHosts.every((elem, _index123) => "string" === typeof elem))) && (null !== input.historyApiFallback && (undefined === input.historyApiFallback || "boolean" === typeof input.historyApiFallback || "object" === typeof input.historyApiFallback && null !== input.historyApiFallback && false === Array.isArray(input.historyApiFallback) && _io172(input.historyApiFallback, true && _exceptionable))) && (null !== input.bonjour && (undefined === input.bonjour || "boolean" === typeof input.bonjour || "object" === typeof input.bonjour && null !== input.bonjour && false === Array.isArray(input.bonjour) && _iu15(input.bonjour, true && _exceptionable))) && (null !== input.watchFiles && (undefined === input.watchFiles || "string" === typeof input.watchFiles || (Array.isArray(input.watchFiles) && (_ip1(input.watchFiles, true && _exceptionable) || false) || "object" === typeof input.watchFiles && null !== input.watchFiles && _io178(input.watchFiles, true && _exceptionable)))) && (null !== input.static && (undefined === input.static || "string" === typeof input.static || "boolean" === typeof input.static || (Array.isArray(input.static) && input.static.every((elem, _index128) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io181(elem, true && _exceptionable))) || "object" === typeof input.static && null !== input.static && false === Array.isArray(input.static) && _io181(input.static, true && _exceptionable)))) && (null !== input.https && (undefined === input.https || "boolean" === typeof input.https || "object" === typeof input.https && null !== input.https && false === Array.isArray(input.https) && _io185(input.https, true && _exceptionable))) && (undefined === input.http2 || "boolean" === typeof input.http2) && (null !== input.server && (undefined === input.server || "string" === typeof input.server || "object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) && _io187(input.server, true && _exceptionable))) && (null !== input.webSocketServer && (undefined === input.webSocketServer || "string" === typeof input.webSocketServer || "boolean" === typeof input.webSocketServer || "object" === typeof input.webSocketServer && null !== input.webSocketServer && false === Array.isArray(input.webSocketServer) && _io188(input.webSocketServer, true && _exceptionable))) && (undefined === input.proxy || Array.isArray(input.proxy) && input.proxy.every((elem, _index129) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io189(elem, true && _exceptionable)))) && (null !== input.open && (undefined === input.open || "string" === typeof input.open || "boolean" === typeof input.open || (Array.isArray(input.open) && input.open.every((elem, _index130) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io199(elem, true && _exceptionable))) || "object" === typeof input.open && null !== input.open && false === Array.isArray(input.open) && _io199(input.open, true && _exceptionable)))) && (undefined === input.setupExitSignals || "boolean" === typeof input.setupExitSignals) && (null !== input.client && (undefined === input.client || "boolean" === typeof input.client || "object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) && _io201(input.client, true && _exceptionable))) && (null !== input.headers && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.every((elem, _index131) => "object" === typeof elem && null !== elem && _io204(elem, true && _exceptionable)) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io153(input.headers, true && _exceptionable)))) && (undefined === input.onListening || true) && (undefined === input.setupMiddlewares || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ipc", "host", "port", "hot", "liveReload", "devMiddleware", "compress", "allowedHosts", "historyApiFallback", "bonjour", "watchFiles", "static", "https", "http2", "server", "webSocketServer", "proxy", "open", "setupExitSignals", "client", "headers", "onListening", "setupMiddlewares"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io156 = (input, _exceptionable = true) => (undefined === input.mimeTypes || "object" === typeof input.mimeTypes && null !== input.mimeTypes && false === Array.isArray(input.mimeTypes) && _io157(input.mimeTypes, true && _exceptionable)) && (undefined === input.mimeTypeDefault || "string" === typeof input.mimeTypeDefault) && (null !== input.writeToDisk && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk)) && (undefined === input.methods || Array.isArray(input.methods) && input.methods.every((elem, _index132) => "string" === typeof elem)) && (null !== input.headers && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.every((elem, _index133) => "object" === typeof elem && null !== elem && _io159(elem, true && _exceptionable)) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io158(input.headers, true && _exceptionable)))) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (null !== input.stats && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || "object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) && _io160(input.stats, true && _exceptionable))) && (undefined === input.serverSideRender || "boolean" === typeof input.serverSideRender) && (undefined === input.outputFileSystem || "object" === typeof input.outputFileSystem && null !== input.outputFileSystem && _io162(input.outputFileSystem, true && _exceptionable)) && (undefined === input.index || "string" === typeof input.index || "boolean" === typeof input.index) && (undefined === input.modifyResponseData || true) && (undefined === input.etag || "strong" === input.etag || "weak" === input.etag) && (undefined === input.lastModified || "boolean" === typeof input.lastModified) && (null !== input.cacheControl && (undefined === input.cacheControl || "string" === typeof input.cacheControl || "number" === typeof input.cacheControl || "boolean" === typeof input.cacheControl || "object" === typeof input.cacheControl && null !== input.cacheControl && false === Array.isArray(input.cacheControl) && _io171(input.cacheControl, true && _exceptionable))) && (undefined === input.cacheImmutable || "boolean" === typeof input.cacheImmutable) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["mimeTypes", "mimeTypeDefault", "writeToDisk", "methods", "headers", "publicPath", "stats", "serverSideRender", "outputFileSystem", "index", "modifyResponseData", "etag", "lastModified", "cacheControl", "cacheImmutable"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io157 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io158 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value || "number" === typeof value;
}); const _io159 = (input, _exceptionable = true) => "string" === typeof input.key && ("string" === typeof input.value || "number" === typeof input.value) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["key", "value"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io160 = (input, _exceptionable = true) => (undefined === input.all || "boolean" === typeof input.all) && (undefined === input.assets || "boolean" === typeof input.assets) && (undefined === input.assetsSort || "string" === typeof input.assetsSort) && (undefined === input.assetsSpace || "number" === typeof input.assetsSpace) && (undefined === input.builtAt || "boolean" === typeof input.builtAt) && (undefined === input.cached || "boolean" === typeof input.cached) && (undefined === input.cachedAssets || "boolean" === typeof input.cachedAssets) && (undefined === input.cachedModules || "boolean" === typeof input.cachedModules) && (undefined === input.children || "boolean" === typeof input.children) && (undefined === input.chunkGroupAuxiliary || "boolean" === typeof input.chunkGroupAuxiliary) && (undefined === input.chunkGroupChildren || "boolean" === typeof input.chunkGroupChildren) && (undefined === input.chunkGroupMaxAssets || "number" === typeof input.chunkGroupMaxAssets) && (undefined === input.chunkGroups || "boolean" === typeof input.chunkGroups) && (undefined === input.chunkModules || "boolean" === typeof input.chunkModules) && (undefined === input.chunkModulesSpace || "number" === typeof input.chunkModulesSpace) && (undefined === input.chunkOrigins || "boolean" === typeof input.chunkOrigins) && (undefined === input.chunkRelations || "boolean" === typeof input.chunkRelations) && (undefined === input.chunks || "boolean" === typeof input.chunks) && (undefined === input.chunksSort || "string" === typeof input.chunksSort) && (null !== input.colors && (undefined === input.colors || "boolean" === typeof input.colors || "object" === typeof input.colors && null !== input.colors && false === Array.isArray(input.colors) && _io161(input.colors, true && _exceptionable))) && (undefined === input.context || "string" === typeof input.context) && (undefined === input.dependentModules || "boolean" === typeof input.dependentModules) && (undefined === input.depth || "boolean" === typeof input.depth) && (undefined === input.entrypoints || "auto" === input.entrypoints || "boolean" === typeof input.entrypoints) && (undefined === input.env || "boolean" === typeof input.env) && (undefined === input.errorDetails || "auto" === input.errorDetails || "boolean" === typeof input.errorDetails) && (undefined === input.errorStack || "boolean" === typeof input.errorStack) && (undefined === input.errors || "boolean" === typeof input.errors) && (undefined === input.errorsCount || "boolean" === typeof input.errorsCount) && (undefined === input.errorsSpace || "number" === typeof input.errorsSpace) && (null !== input.exclude && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || "boolean" === typeof input.exclude || input.exclude instanceof RegExp || Array.isArray(input.exclude) && input.exclude.every((elem, _index134) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (null !== input.excludeAssets && (undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || Array.isArray(input.excludeAssets) && input.excludeAssets.every((elem, _index135) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (null !== input.excludeModules && (undefined === input.excludeModules || "function" === typeof input.excludeModules || "string" === typeof input.excludeModules || "boolean" === typeof input.excludeModules || input.excludeModules instanceof RegExp || Array.isArray(input.excludeModules) && input.excludeModules.every((elem, _index136) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.groupAssetsByChunk || "boolean" === typeof input.groupAssetsByChunk) && (undefined === input.groupAssetsByEmitStatus || "boolean" === typeof input.groupAssetsByEmitStatus) && (undefined === input.groupAssetsByExtension || "boolean" === typeof input.groupAssetsByExtension) && (undefined === input.groupAssetsByInfo || "boolean" === typeof input.groupAssetsByInfo) && (undefined === input.groupAssetsByPath || "boolean" === typeof input.groupAssetsByPath) && (undefined === input.groupModulesByAttributes || "boolean" === typeof input.groupModulesByAttributes) && (undefined === input.groupModulesByCacheStatus || "boolean" === typeof input.groupModulesByCacheStatus) && (undefined === input.groupModulesByExtension || "boolean" === typeof input.groupModulesByExtension) && (undefined === input.groupModulesByLayer || "boolean" === typeof input.groupModulesByLayer) && (undefined === input.groupModulesByPath || "boolean" === typeof input.groupModulesByPath) && (undefined === input.groupModulesByType || "boolean" === typeof input.groupModulesByType) && (undefined === input.groupReasonsByOrigin || "boolean" === typeof input.groupReasonsByOrigin) && (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.ids || "boolean" === typeof input.ids) && (undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging || "boolean" === typeof input.logging) && (null !== input.loggingDebug && (undefined === input.loggingDebug || "function" === typeof input.loggingDebug || "string" === typeof input.loggingDebug || "boolean" === typeof input.loggingDebug || input.loggingDebug instanceof RegExp || Array.isArray(input.loggingDebug) && input.loggingDebug.every((elem, _index137) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.loggingTrace || "boolean" === typeof input.loggingTrace) && (undefined === input.moduleAssets || "boolean" === typeof input.moduleAssets) && (undefined === input.moduleTrace || "boolean" === typeof input.moduleTrace) && (undefined === input.modules || "boolean" === typeof input.modules) && (undefined === input.modulesSort || "string" === typeof input.modulesSort) && (undefined === input.modulesSpace || "number" === typeof input.modulesSpace) && (undefined === input.nestedModules || "boolean" === typeof input.nestedModules) && (undefined === input.nestedModulesSpace || "number" === typeof input.nestedModulesSpace) && (undefined === input.optimizationBailout || "boolean" === typeof input.optimizationBailout) && (undefined === input.orphanModules || "boolean" === typeof input.orphanModules) && (undefined === input.outputPath || "boolean" === typeof input.outputPath) && (undefined === input.performance || "boolean" === typeof input.performance) && (undefined === input.preset || "string" === typeof input.preset || "boolean" === typeof input.preset) && (undefined === input.providedExports || "boolean" === typeof input.providedExports) && (undefined === input.publicPath || "boolean" === typeof input.publicPath) && (undefined === input.reasons || "boolean" === typeof input.reasons) && (undefined === input.reasonsSpace || "number" === typeof input.reasonsSpace) && (undefined === input.relatedAssets || "boolean" === typeof input.relatedAssets) && (undefined === input.runtime || "boolean" === typeof input.runtime) && (undefined === input.runtimeModules || "boolean" === typeof input.runtimeModules) && (undefined === input.source || "boolean" === typeof input.source) && (undefined === input.timings || "boolean" === typeof input.timings) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (undefined === input.version || "boolean" === typeof input.version) && (undefined === input.warnings || "boolean" === typeof input.warnings) && (undefined === input.warningsCount || "boolean" === typeof input.warningsCount) && (null !== input.warningsFilter && (undefined === input.warningsFilter || "function" === typeof input.warningsFilter || "string" === typeof input.warningsFilter || input.warningsFilter instanceof RegExp || Array.isArray(input.warningsFilter) && input.warningsFilter.every((elem, _index138) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.warningsSpace || "number" === typeof input.warningsSpace) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["all", "assets", "assetsSort", "assetsSpace", "builtAt", "cached", "cachedAssets", "cachedModules", "children", "chunkGroupAuxiliary", "chunkGroupChildren", "chunkGroupMaxAssets", "chunkGroups", "chunkModules", "chunkModulesSpace", "chunkOrigins", "chunkRelations", "chunks", "chunksSort", "colors", "context", "dependentModules", "depth", "entrypoints", "env", "errorDetails", "errorStack", "errors", "errorsCount", "errorsSpace", "exclude", "excludeAssets", "excludeModules", "groupAssetsByChunk", "groupAssetsByEmitStatus", "groupAssetsByExtension", "groupAssetsByInfo", "groupAssetsByPath", "groupModulesByAttributes", "groupModulesByCacheStatus", "groupModulesByExtension", "groupModulesByLayer", "groupModulesByPath", "groupModulesByType", "groupReasonsByOrigin", "hash", "ids", "logging", "loggingDebug", "loggingTrace", "moduleAssets", "moduleTrace", "modules", "modulesSort", "modulesSpace", "nestedModules", "nestedModulesSpace", "optimizationBailout", "orphanModules", "outputPath", "performance", "preset", "providedExports", "publicPath", "reasons", "reasonsSpace", "relatedAssets", "runtime", "runtimeModules", "source", "timings", "usedExports", "version", "warnings", "warningsCount", "warningsFilter", "warningsSpace"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io161 = (input, _exceptionable = true) => (undefined === input.bold || "string" === typeof input.bold) && (undefined === input.cyan || "string" === typeof input.cyan) && (undefined === input.green || "string" === typeof input.green) && (undefined === input.magenta || "string" === typeof input.magenta) && (undefined === input.red || "string" === typeof input.red) && (undefined === input.yellow || "string" === typeof input.yellow) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["bold", "cyan", "green", "magenta", "red", "yellow"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io162 = (input, _exceptionable = true) => "object" === typeof input.writeFile && null !== input.writeFile && _io163(input.writeFile, true && _exceptionable) && ("object" === typeof input.mkdir && null !== input.mkdir && _io164(input.mkdir, true && _exceptionable)) && (undefined === input.readdir || "object" === typeof input.readdir && null !== input.readdir && _io165(input.readdir, true && _exceptionable)) && (undefined === input.rmdir || "object" === typeof input.rmdir && null !== input.rmdir && _io166(input.rmdir, true && _exceptionable)) && (undefined === input.unlink || true) && ("object" === typeof input.stat && null !== input.stat && _io167(input.stat, true && _exceptionable)) && (undefined === input.lstat || "object" === typeof input.lstat && null !== input.lstat && _io168(input.lstat, true && _exceptionable)) && ("object" === typeof input.readFile && null !== input.readFile && _io169(input.readFile, true && _exceptionable)) && (undefined === input.join || true) && (undefined === input.relative || true) && (undefined === input.dirname || true) && (undefined === input.createReadStream || true) && ("object" === typeof input.statSync && null !== input.statSync && _io170(input.statSync, true && _exceptionable)) && true && (6 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["writeFile", "mkdir", "readdir", "rmdir", "unlink", "stat", "lstat", "readFile", "join", "relative", "dirname", "createReadStream", "statSync", "readFileSync"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io163 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io164 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io165 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io166 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io167 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io168 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io169 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io170 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io171 = (input, _exceptionable = true) => (undefined === input.maxAge || "number" === typeof input.maxAge) && (undefined === input.immutable || "boolean" === typeof input.immutable) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["maxAge", "immutable"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io172 = (input, _exceptionable = true) => (undefined === input.disableDotRule || true === input.disableDotRule) && (undefined === input.htmlAcceptHeaders || Array.isArray(input.htmlAcceptHeaders) && input.htmlAcceptHeaders.every((elem, _index139) => "string" === typeof elem)) && (undefined === input.index || "string" === typeof input.index) && (undefined === input.logger || true) && (undefined === input.rewrites || Array.isArray(input.rewrites) && input.rewrites.every((elem, _index140) => "object" === typeof elem && null !== elem && _io173(elem, true && _exceptionable))) && (undefined === input.verbose || "boolean" === typeof input.verbose) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["disableDotRule", "htmlAcceptHeaders", "index", "logger", "rewrites", "verbose"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io173 = (input, _exceptionable = true) => input.from instanceof RegExp && (null !== input.to && undefined !== input.to && ("function" === typeof input.to || "string" === typeof input.to || input.to instanceof RegExp)) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["from", "to"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io174 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined === value;
}); const _io175 = (input, _exceptionable = true) => "string" === typeof input.name && "string" === typeof input.type && ("tcp" === input.protocol || "udp" === input.protocol) && "number" === typeof input.port && "string" === typeof input.host && "string" === typeof input.fqdn && true && (undefined === input.subtypes || Array.isArray(input.subtypes) && input.subtypes.every((elem, _index141) => "string" === typeof elem)) && (undefined === input.addresses || Array.isArray(input.addresses) && input.addresses.every((elem, _index142) => "string" === typeof elem)) && (undefined === input.referer || "object" === typeof input.referer && null !== input.referer && _io176(input.referer, true && _exceptionable)) && "boolean" === typeof input.disableIPv6 && "boolean" === typeof input.probe && "boolean" === typeof input.published && "boolean" === typeof input.activated && "boolean" === typeof input.destroyed && (undefined === input.start || "object" === typeof input.start && null !== input.start && _io177(input.start, true && _exceptionable)) && (undefined === input.stop || "object" === typeof input.stop && null !== input.stop && _io177(input.stop, true && _exceptionable)) && (11 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "type", "protocol", "port", "host", "fqdn", "txt", "subtypes", "addresses", "referer", "disableIPv6", "probe", "published", "activated", "destroyed", "start", "stop"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io176 = (input, _exceptionable = true) => "string" === typeof input.address && ("IPv4" === input.family || "IPv6" === input.family) && "number" === typeof input.port && "number" === typeof input.size && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["address", "family", "port", "size"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io177 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io178 = (input, _exceptionable = true) => null !== input.paths && undefined !== input.paths && ("string" === typeof input.paths || Array.isArray(input.paths) && input.paths.every((elem, _index143) => "string" === typeof elem)) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io179(input.options, true && _exceptionable)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["paths", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io179 = (input, _exceptionable = true) => (undefined === input.persistent || "boolean" === typeof input.persistent) && (null !== input.ignored && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || Array.isArray(input.ignored) && input.ignored.every((elem, _index144) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial) && (undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks) && (undefined === input.cwd || "string" === typeof input.cwd) && (undefined === input.disableGlobbing || "boolean" === typeof input.disableGlobbing) && (undefined === input.usePolling || "boolean" === typeof input.usePolling) && (undefined === input.useFsEvents || "boolean" === typeof input.useFsEvents) && (undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat) && (undefined === input.depth || "number" === typeof input.depth) && (undefined === input.interval || "number" === typeof input.interval) && (undefined === input.binaryInterval || "number" === typeof input.binaryInterval) && (undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors) && (undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic) && (null !== input.awaitWriteFinish && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || "object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) && _io180(input.awaitWriteFinish, true && _exceptionable))) && (undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout) && (undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["persistent", "ignored", "ignoreInitial", "followSymlinks", "cwd", "disableGlobbing", "usePolling", "useFsEvents", "alwaysStat", "depth", "interval", "binaryInterval", "ignorePermissionErrors", "atomic", "awaitWriteFinish", "aggregateTimeout", "poll"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io180 = (input, _exceptionable = true) => (undefined === input.stabilityThreshold || "number" === typeof input.stabilityThreshold) && (undefined === input.pollInterval || "number" === typeof input.pollInterval) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["stabilityThreshold", "pollInterval"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io181 = (input, _exceptionable = true) => (undefined === input.directory || "string" === typeof input.directory) && (null !== input.publicPath && (undefined === input.publicPath || "string" === typeof input.publicPath || Array.isArray(input.publicPath) && input.publicPath.every((elem, _index145) => "string" === typeof elem))) && (null !== input.serveIndex && (undefined === input.serveIndex || "boolean" === typeof input.serveIndex || "object" === typeof input.serveIndex && null !== input.serveIndex && false === Array.isArray(input.serveIndex) && _io182(input.serveIndex, true && _exceptionable))) && (undefined === input.staticOptions || "object" === typeof input.staticOptions && null !== input.staticOptions && false === Array.isArray(input.staticOptions) && _io183(input.staticOptions, true && _exceptionable)) && (null !== input.watch && (undefined === input.watch || "boolean" === typeof input.watch || "object" === typeof input.watch && null !== input.watch && false === Array.isArray(input.watch) && _io184(input.watch, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["directory", "publicPath", "serveIndex", "staticOptions", "watch"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io182 = (input, _exceptionable = true) => (undefined === input.filter || true) && (undefined === input.hidden || "boolean" === typeof input.hidden) && (undefined === input.icons || "boolean" === typeof input.icons) && (undefined === input.stylesheet || "string" === typeof input.stylesheet) && (null !== input.template && (undefined === input.template || "function" === typeof input.template || "string" === typeof input.template)) && (undefined === input.view || "string" === typeof input.view) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["filter", "hidden", "icons", "stylesheet", "template", "view"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io183 = (input, _exceptionable = true) => (undefined === input.acceptRanges || "boolean" === typeof input.acceptRanges) && (undefined === input.cacheControl || "boolean" === typeof input.cacheControl) && (undefined === input.dotfiles || "string" === typeof input.dotfiles) && (undefined === input.etag || "boolean" === typeof input.etag) && (null !== input.extensions && (undefined === input.extensions || false === input.extensions || Array.isArray(input.extensions) && input.extensions.every((elem, _index146) => "string" === typeof elem))) && (undefined === input.fallthrough || "boolean" === typeof input.fallthrough) && (undefined === input.immutable || "boolean" === typeof input.immutable) && (null !== input.index && (undefined === input.index || "string" === typeof input.index || "boolean" === typeof input.index || Array.isArray(input.index) && input.index.every((elem, _index147) => "string" === typeof elem))) && (undefined === input.lastModified || "boolean" === typeof input.lastModified) && (undefined === input.maxAge || "string" === typeof input.maxAge || "number" === typeof input.maxAge) && (undefined === input.redirect || "boolean" === typeof input.redirect) && (undefined === input.setHeaders || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["acceptRanges", "cacheControl", "dotfiles", "etag", "extensions", "fallthrough", "immutable", "index", "lastModified", "maxAge", "redirect", "setHeaders"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io184 = (input, _exceptionable = true) => (undefined === input.persistent || "boolean" === typeof input.persistent) && (null !== input.ignored && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || Array.isArray(input.ignored) && input.ignored.every((elem, _index148) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial) && (undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks) && (undefined === input.cwd || "string" === typeof input.cwd) && (undefined === input.disableGlobbing || "boolean" === typeof input.disableGlobbing) && (undefined === input.usePolling || "boolean" === typeof input.usePolling) && (undefined === input.useFsEvents || "boolean" === typeof input.useFsEvents) && (undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat) && (undefined === input.depth || "number" === typeof input.depth) && (undefined === input.interval || "number" === typeof input.interval) && (undefined === input.binaryInterval || "number" === typeof input.binaryInterval) && (undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors) && (undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic) && (null !== input.awaitWriteFinish && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || "object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) && _io180(input.awaitWriteFinish, true && _exceptionable))) && (undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout) && (undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["persistent", "ignored", "ignoreInitial", "followSymlinks", "cwd", "disableGlobbing", "usePolling", "useFsEvents", "alwaysStat", "depth", "interval", "binaryInterval", "ignorePermissionErrors", "atomic", "awaitWriteFinish", "aggregateTimeout", "poll"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io185 = (input, _exceptionable = true) => (undefined === input.ALPNCallback || true) && (undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain) && (null !== input.ca && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.every((elem, _index149) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.ca && null !== input.ca && _io27(input.ca, true && _exceptionable)))) && (null !== input.cert && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.every((elem, _index150) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.cert && null !== input.cert && _io27(input.cert, true && _exceptionable)))) && (undefined === input.sigalgs || "string" === typeof input.sigalgs) && (undefined === input.ciphers || "string" === typeof input.ciphers) && (undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine) && (null !== input.crl && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.every((elem, _index151) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.crl && null !== input.crl && _io27(input.crl, true && _exceptionable)))) && (null !== input.dhparam && (undefined === input.dhparam || "string" === typeof input.dhparam || "object" === typeof input.dhparam && null !== input.dhparam && _io27(input.dhparam, true && _exceptionable))) && (undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve) && (undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder) && (null !== input.key && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.every((elem, _index152) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu0(elem, true && _exceptionable))) || "object" === typeof input.key && null !== input.key && _io27(input.key, true && _exceptionable)))) && (undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine) && (undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier) && (undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion) && (undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (null !== input.pfx && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.every((elem, _index153) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu1(elem, true && _exceptionable))) || "object" === typeof input.pfx && null !== input.pfx && _io27(input.pfx, true && _exceptionable)))) && (undefined === input.secureOptions || "number" === typeof input.secureOptions) && (undefined === input.secureProtocol || "string" === typeof input.secureProtocol) && (undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext) && (undefined === input.ticketKeys || "object" === typeof input.ticketKeys && null !== input.ticketKeys && _io27(input.ticketKeys, true && _exceptionable)) && (undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout) && (undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout) && (undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint) && (undefined === input.secureContext || "object" === typeof input.secureContext && null !== input.secureContext && _io30(input.secureContext, true && _exceptionable)) && (undefined === input.enableTrace || "boolean" === typeof input.enableTrace) && (undefined === input.requestCert || "boolean" === typeof input.requestCert) && (null !== input.ALPNProtocols && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || Array.isArray(input.ALPNProtocols) && (_ip0(input.ALPNProtocols, true && _exceptionable) || false))) && (undefined === input.SNICallback || true) && (undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized) && (undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen) && (undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect) && (undefined === input.noDelay || "boolean" === typeof input.noDelay) && (undefined === input.keepAlive || "boolean" === typeof input.keepAlive) && (undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay) && (undefined === input.highWaterMark || "number" === typeof input.highWaterMark) && (undefined === input.blockList || "object" === typeof input.blockList && null !== input.blockList && _io31(input.blockList, true && _exceptionable)) && (undefined === input.IncomingMessage || "object" === typeof input.IncomingMessage && null !== input.IncomingMessage && _io16(input.IncomingMessage, true && _exceptionable)) && (undefined === input.ServerResponse || "object" === typeof input.ServerResponse && null !== input.ServerResponse && _io24(input.ServerResponse, true && _exceptionable)) && (undefined === input.requestTimeout || "number" === typeof input.requestTimeout) && (undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders) && (undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout) && (undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval) && (undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser) && (undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize) && (undefined === input.uniqueHeaders || Array.isArray(input.uniqueHeaders) && input.uniqueHeaders.every((elem, _index156) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index157) => "string" === typeof elem)))) && (undefined === input.spdy || "object" === typeof input.spdy && null !== input.spdy && false === Array.isArray(input.spdy) && _io186(input.spdy, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders", "spdy"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io186 = (input, _exceptionable = true) => (undefined === input.plain || "boolean" === typeof input.plain) && (undefined === input.ssl || "boolean" === typeof input.ssl) && (undefined === input["x-forwarded-for"] || "string" === typeof input["x-forwarded-for"]) && (undefined === input.protocol || "string" === typeof input.protocol) && (undefined === input.protocols || Array.isArray(input.protocols) && input.protocols.every((elem, _index158) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["plain", "ssl", "x-forwarded-for", "protocol", "protocols"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io187 = (input, _exceptionable = true) => (undefined === input.type || "string" === typeof input.type) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io185(input.options, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io188 = (input, _exceptionable = true) => null !== input.type && (undefined === input.type || "string" === typeof input.type || "object" === typeof input.type && null !== input.type && _io23(input.type, true && _exceptionable)) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io85(input.options, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io189 = (input, _exceptionable = true) => null !== input.path && (undefined === input.path || "function" === typeof input.path || "string" === typeof input.path || Array.isArray(input.path) && input.path.every((elem, _index159) => "string" === typeof elem)) && (null !== input.context && (undefined === input.context || "function" === typeof input.context || "string" === typeof input.context || Array.isArray(input.context) && input.context.every((elem, _index160) => "string" === typeof elem))) && (undefined === input.bypass || true) && (null !== input.pathRewrite && (undefined === input.pathRewrite || "function" === typeof input.pathRewrite || "object" === typeof input.pathRewrite && null !== input.pathRewrite && false === Array.isArray(input.pathRewrite) && _io190(input.pathRewrite, true && _exceptionable))) && (null !== input.router && (undefined === input.router || "function" === typeof input.router || "object" === typeof input.router && null !== input.router && false === Array.isArray(input.router) && _io191(input.router, true && _exceptionable))) && (undefined === input.logLevel || "warn" === input.logLevel || "error" === input.logLevel || "info" === input.logLevel || "debug" === input.logLevel || "silent" === input.logLevel) && (undefined === input.logProvider || true) && (undefined === input.onError || true) && (undefined === input.onProxyRes || true) && (undefined === input.onProxyReq || true) && (undefined === input.onProxyReqWs || true) && (undefined === input.onOpen || true) && (undefined === input.onClose || true) && (null !== input.target && (undefined === input.target || "string" === typeof input.target || "object" === typeof input.target && null !== input.target && false === Array.isArray(input.target) && _iu16(input.target, true && _exceptionable))) && (null !== input.forward && (undefined === input.forward || "string" === typeof input.forward || "object" === typeof input.forward && null !== input.forward && false === Array.isArray(input.forward) && _io192(input.forward, true && _exceptionable))) && true && true && (undefined === input.ws || "boolean" === typeof input.ws) && (undefined === input.xfwd || "boolean" === typeof input.xfwd) && (undefined === input.secure || "boolean" === typeof input.secure) && (undefined === input.toProxy || "boolean" === typeof input.toProxy) && (undefined === input.prependPath || "boolean" === typeof input.prependPath) && (undefined === input.ignorePath || "boolean" === typeof input.ignorePath) && (undefined === input.localAddress || "string" === typeof input.localAddress) && (undefined === input.changeOrigin || "boolean" === typeof input.changeOrigin) && (undefined === input.preserveHeaderKeyCase || "boolean" === typeof input.preserveHeaderKeyCase) && (undefined === input.auth || "string" === typeof input.auth) && (undefined === input.hostRewrite || "string" === typeof input.hostRewrite) && (undefined === input.autoRewrite || "boolean" === typeof input.autoRewrite) && (undefined === input.protocolRewrite || "string" === typeof input.protocolRewrite) && (null !== input.cookieDomainRewrite && (undefined === input.cookieDomainRewrite || false === input.cookieDomainRewrite || "string" === typeof input.cookieDomainRewrite || "object" === typeof input.cookieDomainRewrite && null !== input.cookieDomainRewrite && false === Array.isArray(input.cookieDomainRewrite) && _io195(input.cookieDomainRewrite, true && _exceptionable))) && (null !== input.cookiePathRewrite && (undefined === input.cookiePathRewrite || false === input.cookiePathRewrite || "string" === typeof input.cookiePathRewrite || "object" === typeof input.cookiePathRewrite && null !== input.cookiePathRewrite && false === Array.isArray(input.cookiePathRewrite) && _io196(input.cookiePathRewrite, true && _exceptionable))) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io197(input.headers, true && _exceptionable)) && (undefined === input.proxyTimeout || "number" === typeof input.proxyTimeout) && (undefined === input.timeout || "number" === typeof input.timeout) && (undefined === input.followRedirects || "boolean" === typeof input.followRedirects) && (undefined === input.selfHandleResponse || "boolean" === typeof input.selfHandleResponse) && (undefined === input.buffer || "object" === typeof input.buffer && null !== input.buffer && false === Array.isArray(input.buffer) && _io198(input.buffer, true && _exceptionable)) && (undefined === input.method || "string" === typeof input.method) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["path", "context", "bypass", "pathRewrite", "router", "logLevel", "logProvider", "onError", "onProxyRes", "onProxyReq", "onProxyReqWs", "onOpen", "onClose", "target", "forward", "agent", "ssl", "ws", "xfwd", "secure", "toProxy", "prependPath", "ignorePath", "localAddress", "changeOrigin", "preserveHeaderKeyCase", "auth", "hostRewrite", "autoRewrite", "protocolRewrite", "cookieDomainRewrite", "cookiePathRewrite", "headers", "proxyTimeout", "timeout", "followRedirects", "selfHandleResponse", "buffer", "method"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io190 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io191 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && (undefined === value || "string" === typeof value || "object" === typeof value && null !== value && false === Array.isArray(value) && _iu16(value, true && _exceptionable));
}); const _io192 = (input, _exceptionable = true) => (null === input.auth || undefined === input.auth || "string" === typeof input.auth) && (null === input.hash || undefined === input.hash || "string" === typeof input.hash) && (null === input.host || undefined === input.host || "string" === typeof input.host) && (null === input.hostname || undefined === input.hostname || "string" === typeof input.hostname) && (undefined === input.href || "string" === typeof input.href) && (null === input.path || undefined === input.path || "string" === typeof input.path) && (null === input.pathname || undefined === input.pathname || "string" === typeof input.pathname) && (null === input.protocol || undefined === input.protocol || "string" === typeof input.protocol) && (null === input.search || undefined === input.search || "string" === typeof input.search) && (null === input.slashes || undefined === input.slashes || "boolean" === typeof input.slashes) && (null === input.port || undefined === input.port || "string" === typeof input.port) && (null === input.query || undefined === input.query || "string" === typeof input.query || "object" === typeof input.query && null !== input.query && false === Array.isArray(input.query) && _io193(input.query, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["auth", "hash", "host", "hostname", "href", "path", "pathname", "protocol", "search", "slashes", "port", "query"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io193 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && (undefined === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index161) => "string" === typeof elem));
}); const _io194 = (input, _exceptionable = true) => "string" === typeof input.host && "number" === typeof input.port && (undefined === input.protocol || "string" === typeof input.protocol) && (undefined === input.hostname || "string" === typeof input.hostname) && (undefined === input.socketPath || "string" === typeof input.socketPath) && (undefined === input.key || "string" === typeof input.key) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (null !== input.pfx && (undefined === input.pfx || "string" === typeof input.pfx || "object" === typeof input.pfx && null !== input.pfx && _io27(input.pfx, true && _exceptionable))) && (undefined === input.cert || "string" === typeof input.cert) && (undefined === input.ca || "string" === typeof input.ca) && (undefined === input.ciphers || "string" === typeof input.ciphers) && (undefined === input.secureProtocol || "string" === typeof input.secureProtocol) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["host", "port", "protocol", "hostname", "socketPath", "key", "passphrase", "pfx", "cert", "ca", "ciphers", "secureProtocol"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io195 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io196 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io197 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io198 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io199 = (input, _exceptionable = true) => null !== input.app && (undefined === input.app || "string" === typeof input.app || (Array.isArray(input.app) && input.app.every((elem, _index162) => "string" === typeof elem) || "object" === typeof input.app && null !== input.app && false === Array.isArray(input.app) && _io200(input.app, true && _exceptionable))) && (null !== input.target && (undefined === input.target || "string" === typeof input.target || Array.isArray(input.target) && input.target.every((elem, _index163) => "string" === typeof elem))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["app", "target"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io200 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (undefined === input.arguments || Array.isArray(input.arguments) && input.arguments.every((elem, _index164) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "arguments"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io201 = (input, _exceptionable = true) => (undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging) && (null !== input.overlay && (undefined === input.overlay || "boolean" === typeof input.overlay || "object" === typeof input.overlay && null !== input.overlay && false === Array.isArray(input.overlay) && _io202(input.overlay, true && _exceptionable))) && (undefined === input.progress || "boolean" === typeof input.progress) && (undefined === input.reconnect || "number" === typeof input.reconnect || "boolean" === typeof input.reconnect) && (undefined === input.webSocketTransport || "string" === typeof input.webSocketTransport) && (null !== input.webSocketURL && (undefined === input.webSocketURL || "string" === typeof input.webSocketURL || "object" === typeof input.webSocketURL && null !== input.webSocketURL && false === Array.isArray(input.webSocketURL) && _io203(input.webSocketURL, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["logging", "overlay", "progress", "reconnect", "webSocketTransport", "webSocketURL"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io202 = (input, _exceptionable = true) => null !== input.warnings && (undefined === input.warnings || "function" === typeof input.warnings || "boolean" === typeof input.warnings) && (null !== input.errors && (undefined === input.errors || "function" === typeof input.errors || "boolean" === typeof input.errors)) && (null !== input.runtimeErrors && (undefined === input.runtimeErrors || "function" === typeof input.runtimeErrors || "boolean" === typeof input.runtimeErrors)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["warnings", "errors", "runtimeErrors"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io203 = (input, _exceptionable = true) => (undefined === input.hostname || "string" === typeof input.hostname) && (undefined === input.password || "string" === typeof input.password) && (undefined === input.pathname || "string" === typeof input.pathname) && (undefined === input.port || "string" === typeof input.port || "number" === typeof input.port) && (undefined === input.protocol || "string" === typeof input.protocol) && (undefined === input.username || "string" === typeof input.username) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hostname", "password", "pathname", "port", "protocol", "username"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io204 = (input, _exceptionable = true) => "string" === typeof input.key && "string" === typeof input.value && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["key", "value"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io205 = (input, _exceptionable = true) => (undefined === input.defaultRules || Array.isArray(input.defaultRules) && input.defaultRules.every((elem, _index165) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io206(elem, true && _exceptionable))) && (undefined === input.rules || Array.isArray(input.rules) && input.rules.every((elem, _index166) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io206(elem, true && _exceptionable))) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) && _iu17(input.parser, true && _exceptionable)) && (undefined === input.generator || "object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) && _iu18(input.generator, true && _exceptionable)) && (null !== input.noParse && (undefined === input.noParse || "function" === typeof input.noParse || "string" === typeof input.noParse || input.noParse instanceof RegExp || Array.isArray(input.noParse) && input.noParse.every((elem, _index167) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["defaultRules", "rules", "parser", "generator", "noParse"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io206 = (input, _exceptionable = true) => null !== input.test && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) && (_ia0(input.test, true && _exceptionable) || false) || "object" === typeof input.test && null !== input.test && false === Array.isArray(input.test) && _io207(input.test, true && _exceptionable))) && (null !== input.exclude && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) && (_ia0(input.exclude, true && _exceptionable) || false) || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _io207(input.exclude, true && _exceptionable)))) && (null !== input.include && (undefined === input.include || "function" === typeof input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) && (_ia0(input.include, true && _exceptionable) || false) || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _io207(input.include, true && _exceptionable)))) && (null !== input.issuer && (undefined === input.issuer || "function" === typeof input.issuer || "string" === typeof input.issuer || input.issuer instanceof RegExp || (Array.isArray(input.issuer) && (_ia0(input.issuer, true && _exceptionable) || false) || "object" === typeof input.issuer && null !== input.issuer && false === Array.isArray(input.issuer) && _io207(input.issuer, true && _exceptionable)))) && (null !== input.issuerLayer && (undefined === input.issuerLayer || "function" === typeof input.issuerLayer || "string" === typeof input.issuerLayer || input.issuerLayer instanceof RegExp || (Array.isArray(input.issuerLayer) && (_ia0(input.issuerLayer, true && _exceptionable) || false) || "object" === typeof input.issuerLayer && null !== input.issuerLayer && false === Array.isArray(input.issuerLayer) && _io207(input.issuerLayer, true && _exceptionable)))) && (null !== input.dependency && (undefined === input.dependency || "function" === typeof input.dependency || "string" === typeof input.dependency || input.dependency instanceof RegExp || (Array.isArray(input.dependency) && (_ia0(input.dependency, true && _exceptionable) || false) || "object" === typeof input.dependency && null !== input.dependency && false === Array.isArray(input.dependency) && _io207(input.dependency, true && _exceptionable)))) && (null !== input.resource && (undefined === input.resource || "function" === typeof input.resource || "string" === typeof input.resource || input.resource instanceof RegExp || (Array.isArray(input.resource) && (_ia0(input.resource, true && _exceptionable) || false) || "object" === typeof input.resource && null !== input.resource && false === Array.isArray(input.resource) && _io207(input.resource, true && _exceptionable)))) && (null !== input.resourceFragment && (undefined === input.resourceFragment || "function" === typeof input.resourceFragment || "string" === typeof input.resourceFragment || input.resourceFragment instanceof RegExp || (Array.isArray(input.resourceFragment) && (_ia0(input.resourceFragment, true && _exceptionable) || false) || "object" === typeof input.resourceFragment && null !== input.resourceFragment && false === Array.isArray(input.resourceFragment) && _io207(input.resourceFragment, true && _exceptionable)))) && (null !== input.resourceQuery && (undefined === input.resourceQuery || "function" === typeof input.resourceQuery || "string" === typeof input.resourceQuery || input.resourceQuery instanceof RegExp || (Array.isArray(input.resourceQuery) && (_ia0(input.resourceQuery, true && _exceptionable) || false) || "object" === typeof input.resourceQuery && null !== input.resourceQuery && false === Array.isArray(input.resourceQuery) && _io207(input.resourceQuery, true && _exceptionable)))) && (null !== input.mimetype && (undefined === input.mimetype || "function" === typeof input.mimetype || "string" === typeof input.mimetype || input.mimetype instanceof RegExp || (Array.isArray(input.mimetype) && (_ia0(input.mimetype, true && _exceptionable) || false) || "object" === typeof input.mimetype && null !== input.mimetype && false === Array.isArray(input.mimetype) && _io207(input.mimetype, true && _exceptionable)))) && (null !== input.scheme && (undefined === input.scheme || "function" === typeof input.scheme || "string" === typeof input.scheme || input.scheme instanceof RegExp || (Array.isArray(input.scheme) && (_ia0(input.scheme, true && _exceptionable) || false) || "object" === typeof input.scheme && null !== input.scheme && false === Array.isArray(input.scheme) && _io207(input.scheme, true && _exceptionable)))) && (undefined === input.descriptionData || "object" === typeof input.descriptionData && null !== input.descriptionData && false === Array.isArray(input.descriptionData) && _io208(input.descriptionData, true && _exceptionable)) && (undefined === input["with"] || "object" === typeof input["with"] && null !== input["with"] && false === Array.isArray(input["with"]) && _io208(input["with"], true && _exceptionable)) && (undefined === input.type || "string" === typeof input.type) && (undefined === input.layer || "string" === typeof input.layer) && (undefined === input.loader || "string" === typeof input.loader) && (null !== input.options && (undefined === input.options || "string" === typeof input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io85(input.options, true && _exceptionable))) && (null !== input.use && (undefined === input.use || "function" === typeof input.use || "string" === typeof input.use || (Array.isArray(input.use) && input.use.every((elem, _index168) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io209(elem, true && _exceptionable))) || "object" === typeof input.use && null !== input.use && _io209(input.use, true && _exceptionable)))) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) && _io85(input.parser, true && _exceptionable)) && (undefined === input.generator || "object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) && _io85(input.generator, true && _exceptionable)) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io150(input.resolve, true && _exceptionable)) && (undefined === input.sideEffects || "boolean" === typeof input.sideEffects) && (undefined === input.enforce || "pre" === input.enforce || "post" === input.enforce) && (undefined === input.oneOf || Array.isArray(input.oneOf) && input.oneOf.every((elem, _index169) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io206(elem, true && _exceptionable))) && (undefined === input.rules || Array.isArray(input.rules) && input.rules.every((elem, _index170) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io206(elem, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["test", "exclude", "include", "issuer", "issuerLayer", "dependency", "resource", "resourceFragment", "resourceQuery", "mimetype", "scheme", "descriptionData", "with", "type", "layer", "loader", "options", "use", "parser", "generator", "resolve", "sideEffects", "enforce", "oneOf", "rules"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io207 = (input, _exceptionable = true) => (undefined === input.and || Array.isArray(input.and) && (_ia0(input.and, true && _exceptionable) || false)) && (undefined === input.or || Array.isArray(input.or) && (_ia0(input.or, true && _exceptionable) || false)) && (null !== input.not && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && (_ia0(input.not, true && _exceptionable) || false) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _io207(input.not, true && _exceptionable)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["and", "or", "not"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io208 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && (_ia0(value, true && _exceptionable) || false) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io207(value, true && _exceptionable)));
}); const _io209 = (input, _exceptionable = true) => (undefined === input.ident || "string" === typeof input.ident) && "string" === typeof input.loader && (null !== input.options && (undefined === input.options || "string" === typeof input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io85(input.options, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ident", "loader", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io210 = (input, _exceptionable = true) => (undefined === input.asset || "object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) && _io211(input.asset, true && _exceptionable)) && (undefined === input.css || "object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) && _io213(input.css, true && _exceptionable)) && (undefined === input["css/auto"] || "object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) && _io214(input["css/auto"], true && _exceptionable)) && (undefined === input["css/module"] || "object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) && _io215(input["css/module"], true && _exceptionable)) && (undefined === input.javascript || "object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) && _io216(input.javascript, true && _exceptionable)) && (undefined === input["javascript/auto"] || "object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) && _io216(input["javascript/auto"], true && _exceptionable)) && (undefined === input["javascript/dynamic"] || "object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) && _io216(input["javascript/dynamic"], true && _exceptionable)) && (undefined === input["javascript/esm"] || "object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) && _io216(input["javascript/esm"], true && _exceptionable)) && (undefined === input.json || "object" === typeof input.json && null !== input.json && false === Array.isArray(input.json) && _io217(input.json, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asset", "css", "css/auto", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm", "json"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io211 = (input, _exceptionable = true) => (undefined === input.dataUrlCondition || "object" === typeof input.dataUrlCondition && null !== input.dataUrlCondition && false === Array.isArray(input.dataUrlCondition) && _io212(input.dataUrlCondition, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dataUrlCondition"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io212 = (input, _exceptionable = true) => (undefined === input.maxSize || "number" === typeof input.maxSize) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["maxSize"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io213 = (input, _exceptionable = true) => (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["namedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io214 = (input, _exceptionable = true) => (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["namedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io215 = (input, _exceptionable = true) => (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["namedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io216 = (input, _exceptionable = true) => (undefined === input.dynamicImportMode || "lazy" === input.dynamicImportMode || "weak" === input.dynamicImportMode || "eager" === input.dynamicImportMode || "lazy-once" === input.dynamicImportMode) && (undefined === input.dynamicImportPreload || "number" === typeof input.dynamicImportPreload || "boolean" === typeof input.dynamicImportPreload) && (undefined === input.dynamicImportPrefetch || "number" === typeof input.dynamicImportPrefetch || "boolean" === typeof input.dynamicImportPrefetch) && (undefined === input.dynamicImportFetchPriority || "auto" === input.dynamicImportFetchPriority || "low" === input.dynamicImportFetchPriority || "high" === input.dynamicImportFetchPriority) && (undefined === input.importMeta || "boolean" === typeof input.importMeta) && (undefined === input.url || "relative" === input.url || "boolean" === typeof input.url) && (undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical) && (undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical) && (undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp) && (undefined === input.exportsPresence || false === input.exportsPresence || "warn" === input.exportsPresence || "error" === input.exportsPresence || "auto" === input.exportsPresence) && (undefined === input.importExportsPresence || false === input.importExportsPresence || "warn" === input.importExportsPresence || "error" === input.importExportsPresence || "auto" === input.importExportsPresence) && (undefined === input.reexportExportsPresence || false === input.reexportExportsPresence || "warn" === input.reexportExportsPresence || "error" === input.reexportExportsPresence || "auto" === input.reexportExportsPresence) && (undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence) && (null !== input.worker && (undefined === input.worker || "boolean" === typeof input.worker || Array.isArray(input.worker) && input.worker.every((elem, _index171) => "string" === typeof elem))) && (undefined === input.overrideStrict || "strict" === input.overrideStrict || "non-strict" === input.overrideStrict) && (undefined === input.requireAsExpression || "boolean" === typeof input.requireAsExpression) && (undefined === input.requireDynamic || "boolean" === typeof input.requireDynamic) && (undefined === input.requireResolve || "boolean" === typeof input.requireResolve) && (undefined === input.importDynamic || "boolean" === typeof input.importDynamic) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dynamicImportMode", "dynamicImportPreload", "dynamicImportPrefetch", "dynamicImportFetchPriority", "importMeta", "url", "exprContextCritical", "wrappedContextCritical", "wrappedContextRegExp", "exportsPresence", "importExportsPresence", "reexportExportsPresence", "strictExportPresence", "worker", "overrideStrict", "requireAsExpression", "requireDynamic", "requireResolve", "importDynamic"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io217 = (input, _exceptionable = true) => (undefined === input.exportsDepth || "number" === typeof input.exportsDepth) && (undefined === input.parse || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["exportsDepth", "parse"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io218 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io85(value, true && _exceptionable);
}); const _io219 = (input, _exceptionable = true) => (undefined === input.asset || "object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) && _io220(input.asset, true && _exceptionable)) && (undefined === input["asset/inline"] || "object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) && _io222(input["asset/inline"], true && _exceptionable)) && (undefined === input["asset/resource"] || "object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) && _io223(input["asset/resource"], true && _exceptionable)) && (undefined === input.css || "object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) && _io224(input.css, true && _exceptionable)) && (undefined === input["css/auto"] || "object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) && _io225(input["css/auto"], true && _exceptionable)) && (undefined === input["css/module"] || "object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) && _io225(input["css/module"], true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asset", "asset/inline", "asset/resource", "css", "css/auto", "css/module"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io220 = (input, _exceptionable = true) => null !== input.dataUrl && (undefined === input.dataUrl || "function" === typeof input.dataUrl || "object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) && _io221(input.dataUrl, true && _exceptionable)) && (undefined === input.emit || "boolean" === typeof input.emit) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.outputPath && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.importMode || "url" === input.importMode || "preserve" === input.importMode) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dataUrl", "emit", "filename", "outputPath", "publicPath", "importMode"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io221 = (input, _exceptionable = true) => (undefined === input.encoding || false === input.encoding || "base64" === input.encoding) && (undefined === input.mimetype || "string" === typeof input.mimetype) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["encoding", "mimetype"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io222 = (input, _exceptionable = true) => null !== input.dataUrl && (undefined === input.dataUrl || "function" === typeof input.dataUrl || "object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) && _io221(input.dataUrl, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dataUrl"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io223 = (input, _exceptionable = true) => (undefined === input.emit || "boolean" === typeof input.emit) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.outputPath && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.importMode || "url" === input.importMode || "preserve" === input.importMode) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["emit", "filename", "outputPath", "publicPath", "importMode"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io224 = (input, _exceptionable = true) => (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (undefined === input.esModule || "boolean" === typeof input.esModule) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["exportsOnly", "esModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io225 = (input, _exceptionable = true) => (undefined === input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention) && (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (undefined === input.esModule || "boolean" === typeof input.esModule) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["exportsConvention", "exportsOnly", "localIdentName", "esModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io226 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io85(value, true && _exceptionable);
}); const _io227 = (input, _exceptionable = true) => (undefined === input.assetFilter || true) && (undefined === input.hints || false === input.hints || "error" === input.hints || "warning" === input.hints) && (undefined === input.maxAssetSize || "number" === typeof input.maxAssetSize) && (undefined === input.maxEntrypointSize || "number" === typeof input.maxEntrypointSize) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assetFilter", "hints", "maxAssetSize", "maxEntrypointSize"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io228 = (input, _exceptionable = true) => null !== input.amd && (undefined === input.amd || false === input.amd || "object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) && _io229(input.amd, true && _exceptionable)) && (undefined === input.bail || "boolean" === typeof input.bail) && (null !== input.cache && (undefined === input.cache || "boolean" === typeof input.cache || "object" === typeof input.cache && null !== input.cache && _iu19(input.cache, true && _exceptionable))) && (undefined === input.context || "string" === typeof input.context) && (undefined === input.dependencies || Array.isArray(input.dependencies) && input.dependencies.every((elem, _index172) => "string" === typeof elem)) && (undefined === input.devtool || false === input.devtool || "string" === typeof input.devtool) && (null !== input.entry && (undefined === input.entry || "function" === typeof input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.every((elem, _index173) => "string" === typeof elem) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _io233(input.entry, true && _exceptionable)))) && (undefined === input.experiments || "object" === typeof input.experiments && null !== input.experiments && false === Array.isArray(input.experiments) && _io238(input.experiments, true && _exceptionable)) && (null !== input["extends"] && (undefined === input["extends"] || "string" === typeof input["extends"] || Array.isArray(input["extends"]) && input["extends"].every((elem, _index174) => "string" === typeof elem))) && (null !== input.externals && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.every((elem, _index175) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io243(elem, true && _exceptionable))) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _io243(input.externals, true && _exceptionable)))) && (undefined === input.externalsPresets || "object" === typeof input.externalsPresets && null !== input.externalsPresets && false === Array.isArray(input.externalsPresets) && _io246(input.externalsPresets, true && _exceptionable)) && (undefined === input.externalsType || true === _iv176.has(input.externalsType)) && (undefined === input.ignoreWarnings || Array.isArray(input.ignoreWarnings) && input.ignoreWarnings.every((elem, _index177) => null !== elem && undefined !== elem && ("function" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io247(elem, true && _exceptionable)))) && (undefined === input.infrastructureLogging || "object" === typeof input.infrastructureLogging && null !== input.infrastructureLogging && false === Array.isArray(input.infrastructureLogging) && _io248(input.infrastructureLogging, true && _exceptionable)) && (undefined === input.loader || "object" === typeof input.loader && null !== input.loader && false === Array.isArray(input.loader) && _io249(input.loader, true && _exceptionable)) && (undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode) && (undefined === input["module"] || "object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) && _io250(input["module"], true && _exceptionable)) && (undefined === input.name || "string" === typeof input.name) && (null !== input.node && (undefined === input.node || false === input.node || "object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) && _io323(input.node, true && _exceptionable))) && (undefined === input.optimization || "object" === typeof input.optimization && null !== input.optimization && false === Array.isArray(input.optimization) && _io325(input.optimization, true && _exceptionable)) && (undefined === input.output || "object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) && _io351(input.output, true && _exceptionable)) && (undefined === input.parallelism || "number" === typeof input.parallelism) && (null !== input.performance && (undefined === input.performance || false === input.performance || "object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) && _io357(input.performance, true && _exceptionable))) && (undefined === input.plugins || Array.isArray(input.plugins) && input.plugins.every((elem, _index178) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && _io326(elem, true && _exceptionable))) && (undefined === input.profile || "boolean" === typeof input.profile) && (undefined === input.recordsInputPath || false === input.recordsInputPath || "string" === typeof input.recordsInputPath) && (undefined === input.recordsOutputPath || false === input.recordsOutputPath || "string" === typeof input.recordsOutputPath) && (undefined === input.recordsPath || false === input.recordsPath || "string" === typeof input.recordsPath) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io259(input.resolve, true && _exceptionable)) && (undefined === input.resolveLoader || "object" === typeof input.resolveLoader && null !== input.resolveLoader && false === Array.isArray(input.resolveLoader) && _io259(input.resolveLoader, true && _exceptionable)) && (undefined === input.snapshot || "object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) && _io358(input.snapshot, true && _exceptionable)) && (null !== input.stats && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || "object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) && _io160(input.stats, true && _exceptionable))) && (null !== input.target && (undefined === input.target || false === input.target || "string" === typeof input.target || Array.isArray(input.target) && input.target.every((elem, _index179) => "string" === typeof elem))) && (undefined === input.watch || "boolean" === typeof input.watch) && (undefined === input.watchOptions || "object" === typeof input.watchOptions && null !== input.watchOptions && false === Array.isArray(input.watchOptions) && _io363(input.watchOptions, true && _exceptionable)) && (undefined === input.devServer || "object" === typeof input.devServer && null !== input.devServer && false === Array.isArray(input.devServer) && _io364(input.devServer, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amd", "bail", "cache", "context", "dependencies", "devtool", "entry", "experiments", "extends", "externals", "externalsPresets", "externalsType", "ignoreWarnings", "infrastructureLogging", "loader", "mode", "module", "name", "node", "optimization", "output", "parallelism", "performance", "plugins", "profile", "recordsInputPath", "recordsOutputPath", "recordsPath", "resolve", "resolveLoader", "snapshot", "stats", "target", "watch", "watchOptions", "devServer"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io229 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io230 = (input, _exceptionable = true) => (undefined === input.allowCollectingMemory || "boolean" === typeof input.allowCollectingMemory) && (undefined === input.buildDependencies || "object" === typeof input.buildDependencies && null !== input.buildDependencies && false === Array.isArray(input.buildDependencies) && _io231(input.buildDependencies, true && _exceptionable)) && (undefined === input.cacheDirectory || "string" === typeof input.cacheDirectory) && (undefined === input.cacheLocation || "string" === typeof input.cacheLocation) && (undefined === input.compression || false === input.compression || "gzip" === input.compression || "brotli" === input.compression) && (undefined === input.hashAlgorithm || "string" === typeof input.hashAlgorithm) && (undefined === input.idleTimeout || "number" === typeof input.idleTimeout) && (undefined === input.idleTimeoutAfterLargeChanges || "number" === typeof input.idleTimeoutAfterLargeChanges) && (undefined === input.idleTimeoutForInitialStore || "number" === typeof input.idleTimeoutForInitialStore) && (undefined === input.immutablePaths || Array.isArray(input.immutablePaths) && input.immutablePaths.every((elem, _index180) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.managedPaths || Array.isArray(input.managedPaths) && input.managedPaths.every((elem, _index181) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.maxAge || "number" === typeof input.maxAge) && (undefined === input.maxMemoryGenerations || "number" === typeof input.maxMemoryGenerations) && (undefined === input.memoryCacheUnaffected || "boolean" === typeof input.memoryCacheUnaffected) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.profile || "boolean" === typeof input.profile) && (undefined === input.readonly || "boolean" === typeof input.readonly) && (undefined === input.store || "pack" === input.store) && "filesystem" === input.type && (undefined === input.version || "string" === typeof input.version) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["allowCollectingMemory", "buildDependencies", "cacheDirectory", "cacheLocation", "compression", "hashAlgorithm", "idleTimeout", "idleTimeoutAfterLargeChanges", "idleTimeoutForInitialStore", "immutablePaths", "managedPaths", "maxAge", "maxMemoryGenerations", "memoryCacheUnaffected", "name", "profile", "readonly", "store", "type", "version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io231 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return Array.isArray(value) && value.every((elem, _index182) => "string" === typeof elem);
}); const _io232 = (input, _exceptionable = true) => (undefined === input.cacheUnaffected || "boolean" === typeof input.cacheUnaffected) && (undefined === input.maxGenerations || "number" === typeof input.maxGenerations) && "memory" === input.type && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["cacheUnaffected", "maxGenerations", "type"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io233 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index183) => "string" === typeof elem) || "object" === typeof value && null !== value && _io234(value, true && _exceptionable)));
}); const _io234 = (input, _exceptionable = true) => (undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks) && (undefined === input.baseUri || "string" === typeof input.baseUri) && (undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading) && (null !== input.dependOn && (undefined === input.dependOn || "string" === typeof input.dependOn || Array.isArray(input.dependOn) && input.dependOn.every((elem, _index184) => "string" === typeof elem))) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input["import"] && undefined !== input["import"] && ("string" === typeof input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index185) => "string" === typeof elem))) && (null === input.layer || undefined === input.layer || "string" === typeof input.layer) && (undefined === input.library || "object" === typeof input.library && null !== input.library && _io235(input.library, true && _exceptionable)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime) && (undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asyncChunks", "baseUri", "chunkLoading", "dependOn", "filename", "import", "layer", "library", "publicPath", "runtime", "wasmLoading"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io235 = (input, _exceptionable = true) => (undefined === input.amdContainer || "string" === typeof input.amdContainer) && (null !== input.auxiliaryComment && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || "object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) && _io236(input.auxiliaryComment, true && _exceptionable))) && (null !== input["export"] && (undefined === input["export"] || "string" === typeof input["export"] || Array.isArray(input["export"]) && input["export"].every((elem, _index186) => "string" === typeof elem))) && (null !== input.name && (undefined === input.name || "string" === typeof input.name || (Array.isArray(input.name) && input.name.every((elem, _index187) => "string" === typeof elem) || "object" === typeof input.name && null !== input.name && false === Array.isArray(input.name) && _io237(input.name, true && _exceptionable)))) && "string" === typeof input.type && (undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amdContainer", "auxiliaryComment", "export", "name", "type", "umdNamedDefine"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io236 = (input, _exceptionable = true) => (undefined === input.amd || "string" === typeof input.amd) && (undefined === input.commonjs || "string" === typeof input.commonjs) && (undefined === input.commonjs2 || "string" === typeof input.commonjs2) && (undefined === input.root || "string" === typeof input.root) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amd", "commonjs", "commonjs2", "root"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io237 = (input, _exceptionable = true) => (undefined === input.amd || "string" === typeof input.amd) && (undefined === input.commonjs || "string" === typeof input.commonjs) && (null !== input.root && (undefined === input.root || "string" === typeof input.root || Array.isArray(input.root) && input.root.every((elem, _index188) => "string" === typeof elem))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amd", "commonjs", "root"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io238 = (input, _exceptionable = true) => (undefined === input.asyncWebAssembly || "boolean" === typeof input.asyncWebAssembly) && (undefined === input.backCompat || "boolean" === typeof input.backCompat) && (undefined === input.cacheUnaffected || "boolean" === typeof input.cacheUnaffected) && (undefined === input.futureDefaults || "boolean" === typeof input.futureDefaults) && (undefined === input.layers || "boolean" === typeof input.layers) && (undefined === input.outputModule || "boolean" === typeof input.outputModule) && (undefined === input.syncWebAssembly || "boolean" === typeof input.syncWebAssembly) && (undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait) && (null !== input.buildHttp && (undefined === input.buildHttp || (Array.isArray(input.buildHttp) && input.buildHttp.every((elem, _index189) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)) || "object" === typeof input.buildHttp && null !== input.buildHttp && _io239(input.buildHttp, true && _exceptionable)))) && (undefined === input.css || "boolean" === typeof input.css) && (null !== input.lazyCompilation && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || "object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) && _io240(input.lazyCompilation, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asyncWebAssembly", "backCompat", "cacheUnaffected", "futureDefaults", "layers", "outputModule", "syncWebAssembly", "topLevelAwait", "buildHttp", "css", "lazyCompilation"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io239 = (input, _exceptionable = true) => Array.isArray(input.allowedUris) && input.allowedUris.every((elem, _index190) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)) && (undefined === input.cacheLocation || false === input.cacheLocation || "string" === typeof input.cacheLocation) && (undefined === input.frozen || "boolean" === typeof input.frozen) && (undefined === input.lockfileLocation || "string" === typeof input.lockfileLocation) && (undefined === input.proxy || "string" === typeof input.proxy) && (undefined === input.upgrade || "boolean" === typeof input.upgrade) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["allowedUris", "cacheLocation", "frozen", "lockfileLocation", "proxy", "upgrade"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io240 = (input, _exceptionable = true) => null !== input.backend && (undefined === input.backend || "function" === typeof input.backend || "object" === typeof input.backend && null !== input.backend && false === Array.isArray(input.backend) && _io241(input.backend, true && _exceptionable)) && (undefined === input.entries || "boolean" === typeof input.entries) && (undefined === input.imports || "boolean" === typeof input.imports) && (null !== input.test && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["backend", "entries", "imports", "test"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io241 = (input, _exceptionable = true) => (undefined === input.client || "string" === typeof input.client) && (null !== input.listen && (undefined === input.listen || "function" === typeof input.listen || "number" === typeof input.listen || "object" === typeof input.listen && null !== input.listen && false === Array.isArray(input.listen) && _io13(input.listen, true && _exceptionable))) && (undefined === input.protocol || "https" === input.protocol || "http" === input.protocol) && (null !== input.server && (undefined === input.server || "function" === typeof input.server || "object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) && _iu20(input.server, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["client", "listen", "protocol", "server"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io242 = (input, _exceptionable = true) => (undefined === input.ALPNCallback || true) && (undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain) && (null !== input.ca && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.every((elem, _index191) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.ca && null !== input.ca && _io27(input.ca, true && _exceptionable)))) && (null !== input.cert && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.every((elem, _index192) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.cert && null !== input.cert && _io27(input.cert, true && _exceptionable)))) && (undefined === input.sigalgs || "string" === typeof input.sigalgs) && (undefined === input.ciphers || "string" === typeof input.ciphers) && (undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine) && (null !== input.crl && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.every((elem, _index193) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io27(elem, true && _exceptionable))) || "object" === typeof input.crl && null !== input.crl && _io27(input.crl, true && _exceptionable)))) && (null !== input.dhparam && (undefined === input.dhparam || "string" === typeof input.dhparam || "object" === typeof input.dhparam && null !== input.dhparam && _io27(input.dhparam, true && _exceptionable))) && (undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve) && (undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder) && (null !== input.key && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.every((elem, _index194) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu0(elem, true && _exceptionable))) || "object" === typeof input.key && null !== input.key && _io27(input.key, true && _exceptionable)))) && (undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine) && (undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier) && (undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion) && (undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion) && (undefined === input.passphrase || "string" === typeof input.passphrase) && (null !== input.pfx && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.every((elem, _index195) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _iu1(elem, true && _exceptionable))) || "object" === typeof input.pfx && null !== input.pfx && _io27(input.pfx, true && _exceptionable)))) && (undefined === input.secureOptions || "number" === typeof input.secureOptions) && (undefined === input.secureProtocol || "string" === typeof input.secureProtocol) && (undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext) && (undefined === input.ticketKeys || "object" === typeof input.ticketKeys && null !== input.ticketKeys && _io27(input.ticketKeys, true && _exceptionable)) && (undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout) && (undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout) && (undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint) && (undefined === input.secureContext || "object" === typeof input.secureContext && null !== input.secureContext && _io30(input.secureContext, true && _exceptionable)) && (undefined === input.enableTrace || "boolean" === typeof input.enableTrace) && (undefined === input.requestCert || "boolean" === typeof input.requestCert) && (null !== input.ALPNProtocols && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || Array.isArray(input.ALPNProtocols) && (_ip0(input.ALPNProtocols, true && _exceptionable) || false))) && (undefined === input.SNICallback || true) && (undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized) && (undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen) && (undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect) && (undefined === input.noDelay || "boolean" === typeof input.noDelay) && (undefined === input.keepAlive || "boolean" === typeof input.keepAlive) && (undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay) && (undefined === input.highWaterMark || "number" === typeof input.highWaterMark) && (undefined === input.blockList || "object" === typeof input.blockList && null !== input.blockList && _io31(input.blockList, true && _exceptionable)) && (undefined === input.IncomingMessage || "object" === typeof input.IncomingMessage && null !== input.IncomingMessage && _io16(input.IncomingMessage, true && _exceptionable)) && (undefined === input.ServerResponse || "object" === typeof input.ServerResponse && null !== input.ServerResponse && _io24(input.ServerResponse, true && _exceptionable)) && (undefined === input.requestTimeout || "number" === typeof input.requestTimeout) && (undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders) && (undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout) && (undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval) && (undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser) && (undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize) && (undefined === input.uniqueHeaders || Array.isArray(input.uniqueHeaders) && input.uniqueHeaders.every((elem, _index198) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index199) => "string" === typeof elem)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io243 = (input, _exceptionable = true) => null !== input.byLayer && (undefined === input.byLayer || "function" === typeof input.byLayer || "object" === typeof input.byLayer && null !== input.byLayer && false === Array.isArray(input.byLayer) && _io244(input.byLayer, true && _exceptionable)) && Object.keys(input).every(key => {
    if (["byLayer"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || "boolean" === typeof value || (Array.isArray(value) && value.every((elem, _index200) => "string" === typeof elem) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io245(value, true && _exceptionable)));
}); const _io244 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || "object" === typeof value && null !== value && false === Array.isArray(value) && _io243(value, true && _exceptionable));
}); const _io245 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io246 = (input, _exceptionable = true) => (undefined === input.electron || "boolean" === typeof input.electron) && (undefined === input.electronMain || "boolean" === typeof input.electronMain) && (undefined === input.electronPreload || "boolean" === typeof input.electronPreload) && (undefined === input.electronRenderer || "boolean" === typeof input.electronRenderer) && (undefined === input.node || "boolean" === typeof input.node) && (undefined === input.nwjs || "boolean" === typeof input.nwjs) && (undefined === input.web || "boolean" === typeof input.web) && (undefined === input.webAsync || "boolean" === typeof input.webAsync) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["electron", "electronMain", "electronPreload", "electronRenderer", "node", "nwjs", "web", "webAsync"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io247 = (input, _exceptionable = true) => (undefined === input.file || input.file instanceof RegExp) && (undefined === input.message || input.message instanceof RegExp) && (undefined === input["module"] || input["module"] instanceof RegExp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["file", "message", "module"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io248 = (input, _exceptionable = true) => (undefined === input.appendOnly || "boolean" === typeof input.appendOnly) && (undefined === input.colors || "boolean" === typeof input.colors) && (undefined === input.console || "object" === typeof input.console && null !== input.console && _io133(input.console, true && _exceptionable)) && (null !== input.debug && (undefined === input.debug || "function" === typeof input.debug || "string" === typeof input.debug || "boolean" === typeof input.debug || input.debug instanceof RegExp || Array.isArray(input.debug) && input.debug.every((elem, _index201) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.level || "none" === input.level || "log" === input.level || "warn" === input.level || "error" === input.level || "info" === input.level || "verbose" === input.level) && (undefined === input.stream || "object" === typeof input.stream && null !== input.stream && _io135(input.stream, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["appendOnly", "colors", "console", "debug", "level", "stream"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io249 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io250 = (input, _exceptionable = true) => (undefined === input.defaultRules || Array.isArray(input.defaultRules) && input.defaultRules.every((elem, _index202) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io251(elem, true && _exceptionable))) && (undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical) && (undefined === input.exprContextRecursive || "boolean" === typeof input.exprContextRecursive) && (null !== input.exprContextRegExp && (undefined === input.exprContextRegExp || "boolean" === typeof input.exprContextRegExp || input.exprContextRegExp instanceof RegExp)) && (undefined === input.exprContextRequest || "string" === typeof input.exprContextRequest) && (undefined === input.generator || "object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) && _io302(input.generator, true && _exceptionable)) && (null !== input.noParse && (undefined === input.noParse || "string" === typeof input.noParse || input.noParse instanceof RegExp || (Array.isArray(input.noParse) && input.noParse.every((elem, _index203) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && _io23(elem, true && _exceptionable))) || "object" === typeof input.noParse && null !== input.noParse && _io23(input.noParse, true && _exceptionable)))) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) && _io313(input.parser, true && _exceptionable)) && (undefined === input.rules || Array.isArray(input.rules) && input.rules.every((elem, _index204) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io251(elem, true && _exceptionable))) && (undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence) && (undefined === input.strictThisContextOnImports || "boolean" === typeof input.strictThisContextOnImports) && (undefined === input.unknownContextCritical || "boolean" === typeof input.unknownContextCritical) && (undefined === input.unknownContextRecursive || "boolean" === typeof input.unknownContextRecursive) && (null !== input.unknownContextRegExp && (undefined === input.unknownContextRegExp || "boolean" === typeof input.unknownContextRegExp || input.unknownContextRegExp instanceof RegExp)) && (undefined === input.unknownContextRequest || "string" === typeof input.unknownContextRequest) && (null !== input.unsafeCache && (undefined === input.unsafeCache || "boolean" === typeof input.unsafeCache || "object" === typeof input.unsafeCache && null !== input.unsafeCache && _io23(input.unsafeCache, true && _exceptionable))) && (undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical) && (undefined === input.wrappedContextRecursive || "boolean" === typeof input.wrappedContextRecursive) && (undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["defaultRules", "exprContextCritical", "exprContextRecursive", "exprContextRegExp", "exprContextRequest", "generator", "noParse", "parser", "rules", "strictExportPresence", "strictThisContextOnImports", "unknownContextCritical", "unknownContextRecursive", "unknownContextRegExp", "unknownContextRequest", "unsafeCache", "wrappedContextCritical", "wrappedContextRecursive", "wrappedContextRegExp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io251 = (input, _exceptionable = true) => (undefined === input.assert || "object" === typeof input.assert && null !== input.assert && false === Array.isArray(input.assert) && _io252(input.assert, true && _exceptionable)) && (null !== input.compiler && (undefined === input.compiler || "function" === typeof input.compiler || "string" === typeof input.compiler || input.compiler instanceof RegExp || (Array.isArray(input.compiler) && input.compiler.every((elem, _index205) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.compiler && null !== input.compiler && false === Array.isArray(input.compiler) && _io253(input.compiler, true && _exceptionable)))) && (null !== input.dependency && (undefined === input.dependency || "function" === typeof input.dependency || "string" === typeof input.dependency || input.dependency instanceof RegExp || (Array.isArray(input.dependency) && input.dependency.every((elem, _index206) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.dependency && null !== input.dependency && false === Array.isArray(input.dependency) && _io253(input.dependency, true && _exceptionable)))) && (undefined === input.descriptionData || "object" === typeof input.descriptionData && null !== input.descriptionData && false === Array.isArray(input.descriptionData) && _io254(input.descriptionData, true && _exceptionable)) && (undefined === input.enforce || "pre" === input.enforce || "post" === input.enforce) && (null !== input.exclude && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) && input.exclude.every((elem, _index207) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _io255(input.exclude, true && _exceptionable)))) && (undefined === input.generator || "object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) && _io256(input.generator, true && _exceptionable)) && (null !== input.include && (undefined === input.include || "function" === typeof input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) && input.include.every((elem, _index208) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _io255(input.include, true && _exceptionable)))) && (null !== input.issuer && (undefined === input.issuer || "function" === typeof input.issuer || "string" === typeof input.issuer || input.issuer instanceof RegExp || (Array.isArray(input.issuer) && input.issuer.every((elem, _index209) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.issuer && null !== input.issuer && false === Array.isArray(input.issuer) && _io255(input.issuer, true && _exceptionable)))) && (null !== input.issuerLayer && (undefined === input.issuerLayer || "function" === typeof input.issuerLayer || "string" === typeof input.issuerLayer || input.issuerLayer instanceof RegExp || (Array.isArray(input.issuerLayer) && input.issuerLayer.every((elem, _index210) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.issuerLayer && null !== input.issuerLayer && false === Array.isArray(input.issuerLayer) && _io253(input.issuerLayer, true && _exceptionable)))) && (undefined === input.layer || "string" === typeof input.layer) && (undefined === input.loader || "string" === typeof input.loader) && (null !== input.mimetype && (undefined === input.mimetype || "function" === typeof input.mimetype || "string" === typeof input.mimetype || input.mimetype instanceof RegExp || (Array.isArray(input.mimetype) && input.mimetype.every((elem, _index211) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.mimetype && null !== input.mimetype && false === Array.isArray(input.mimetype) && _io253(input.mimetype, true && _exceptionable)))) && (undefined === input.oneOf || Array.isArray(input.oneOf) && input.oneOf.every((elem, _index212) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io251(elem, true && _exceptionable))) && (null !== input.options && (undefined === input.options || "string" === typeof input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io257(input.options, true && _exceptionable))) && (undefined === input.parser || "object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) && _io258(input.parser, true && _exceptionable)) && (null !== input.realResource && (undefined === input.realResource || "function" === typeof input.realResource || "string" === typeof input.realResource || input.realResource instanceof RegExp || (Array.isArray(input.realResource) && input.realResource.every((elem, _index213) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.realResource && null !== input.realResource && false === Array.isArray(input.realResource) && _io255(input.realResource, true && _exceptionable)))) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io259(input.resolve, true && _exceptionable)) && (null !== input.resource && (undefined === input.resource || "function" === typeof input.resource || "string" === typeof input.resource || input.resource instanceof RegExp || (Array.isArray(input.resource) && input.resource.every((elem, _index214) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.resource && null !== input.resource && false === Array.isArray(input.resource) && _io255(input.resource, true && _exceptionable)))) && (null !== input.resourceFragment && (undefined === input.resourceFragment || "function" === typeof input.resourceFragment || "string" === typeof input.resourceFragment || input.resourceFragment instanceof RegExp || (Array.isArray(input.resourceFragment) && input.resourceFragment.every((elem, _index215) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.resourceFragment && null !== input.resourceFragment && false === Array.isArray(input.resourceFragment) && _io253(input.resourceFragment, true && _exceptionable)))) && (null !== input.resourceQuery && (undefined === input.resourceQuery || "function" === typeof input.resourceQuery || "string" === typeof input.resourceQuery || input.resourceQuery instanceof RegExp || (Array.isArray(input.resourceQuery) && input.resourceQuery.every((elem, _index216) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.resourceQuery && null !== input.resourceQuery && false === Array.isArray(input.resourceQuery) && _io253(input.resourceQuery, true && _exceptionable)))) && (undefined === input.rules || Array.isArray(input.rules) && input.rules.every((elem, _index217) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io251(elem, true && _exceptionable))) && (null !== input.scheme && (undefined === input.scheme || "function" === typeof input.scheme || "string" === typeof input.scheme || input.scheme instanceof RegExp || (Array.isArray(input.scheme) && input.scheme.every((elem, _index218) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.scheme && null !== input.scheme && false === Array.isArray(input.scheme) && _io253(input.scheme, true && _exceptionable)))) && (undefined === input.sideEffects || "boolean" === typeof input.sideEffects) && (null !== input.test && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) && input.test.every((elem, _index219) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.test && null !== input.test && false === Array.isArray(input.test) && _io255(input.test, true && _exceptionable)))) && (undefined === input.type || "string" === typeof input.type) && (null !== input.use && (undefined === input.use || "function" === typeof input.use || "string" === typeof input.use || (Array.isArray(input.use) && input.use.every((elem, _index220) => null === elem || undefined === elem || "function" === typeof elem || false === elem || 0 === elem || "string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io297(elem, true && _exceptionable)) || "object" === typeof input.use && null !== input.use && false === Array.isArray(input.use) && _io299(input.use, true && _exceptionable)))) && (undefined === input["with"] || "object" === typeof input["with"] && null !== input["with"] && false === Array.isArray(input["with"]) && _io301(input["with"], true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assert", "compiler", "dependency", "descriptionData", "enforce", "exclude", "generator", "include", "issuer", "issuerLayer", "layer", "loader", "mimetype", "oneOf", "options", "parser", "realResource", "resolve", "resource", "resourceFragment", "resourceQuery", "rules", "scheme", "sideEffects", "test", "type", "use", "with"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io252 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.every((elem, _index221) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io253(value, true && _exceptionable)));
}); const _io253 = (input, _exceptionable = true) => (undefined === input.and || Array.isArray(input.and) && input.and.every((elem, _index222) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable))))) && (null !== input.not && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && input.not.every((elem, _index223) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _io253(input.not, true && _exceptionable)))) && (undefined === input.or || Array.isArray(input.or) && input.or.every((elem, _index224) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable))))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["and", "not", "or"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io254 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.every((elem, _index225) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io253(value, true && _exceptionable)));
}); const _io255 = (input, _exceptionable = true) => (undefined === input.and || Array.isArray(input.and) && input.and.every((elem, _index226) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable))))) && (null !== input.not && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && input.not.every((elem, _index227) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _io255(input.not, true && _exceptionable)))) && (undefined === input.or || Array.isArray(input.or) && input.or.every((elem, _index228) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable))))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["and", "not", "or"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io256 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io257 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io258 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io259 = (input, _exceptionable = true) => null !== input.alias && (undefined === input.alias || (Array.isArray(input.alias) && input.alias.every((elem, _index229) => "object" === typeof elem && null !== elem && _io260(elem, true && _exceptionable)) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _io261(input.alias, true && _exceptionable))) && (undefined === input.aliasFields || Array.isArray(input.aliasFields) && input.aliasFields.every((elem, _index230) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index231) => "string" === typeof elem)))) && (undefined === input.byDependency || "object" === typeof input.byDependency && null !== input.byDependency && false === Array.isArray(input.byDependency) && _io262(input.byDependency, true && _exceptionable)) && (undefined === input.cache || "boolean" === typeof input.cache) && (undefined === input.cachePredicate || true) && (undefined === input.cacheWithContext || "boolean" === typeof input.cacheWithContext) && (undefined === input.conditionNames || Array.isArray(input.conditionNames) && input.conditionNames.every((elem, _index232) => "string" === typeof elem)) && (undefined === input.descriptionFiles || Array.isArray(input.descriptionFiles) && input.descriptionFiles.every((elem, _index233) => "string" === typeof elem)) && (undefined === input.enforceExtension || "boolean" === typeof input.enforceExtension) && (undefined === input.exportsFields || Array.isArray(input.exportsFields) && input.exportsFields.every((elem, _index234) => "string" === typeof elem)) && (undefined === input.extensionAlias || "object" === typeof input.extensionAlias && null !== input.extensionAlias && false === Array.isArray(input.extensionAlias) && _io263(input.extensionAlias, true && _exceptionable)) && (undefined === input.extensions || Array.isArray(input.extensions) && input.extensions.every((elem, _index235) => "string" === typeof elem)) && (null !== input.fallback && (undefined === input.fallback || (Array.isArray(input.fallback) && input.fallback.every((elem, _index236) => "object" === typeof elem && null !== elem && _io264(elem, true && _exceptionable)) || "object" === typeof input.fallback && null !== input.fallback && false === Array.isArray(input.fallback) && _io265(input.fallback, true && _exceptionable)))) && (undefined === input.fileSystem || "object" === typeof input.fileSystem && null !== input.fileSystem && _io266(input.fileSystem, true && _exceptionable)) && (undefined === input.fullySpecified || "boolean" === typeof input.fullySpecified) && (undefined === input.importsFields || Array.isArray(input.importsFields) && input.importsFields.every((elem, _index237) => "string" === typeof elem)) && (undefined === input.mainFields || Array.isArray(input.mainFields) && input.mainFields.every((elem, _index238) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index239) => "string" === typeof elem)))) && (undefined === input.mainFiles || Array.isArray(input.mainFiles) && input.mainFiles.every((elem, _index240) => "string" === typeof elem)) && (undefined === input.modules || Array.isArray(input.modules) && input.modules.every((elem, _index241) => "string" === typeof elem)) && (undefined === input.plugins || Array.isArray(input.plugins) && input.plugins.every((elem, _index242) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && _io275(elem, true && _exceptionable))) && (undefined === input.preferAbsolute || "boolean" === typeof input.preferAbsolute) && (undefined === input.preferRelative || "boolean" === typeof input.preferRelative) && (undefined === input.resolver || "object" === typeof input.resolver && null !== input.resolver && _io276(input.resolver, true && _exceptionable)) && (undefined === input.restrictions || Array.isArray(input.restrictions) && input.restrictions.every((elem, _index243) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.roots || Array.isArray(input.roots) && input.roots.every((elem, _index244) => "string" === typeof elem)) && (undefined === input.symlinks || "boolean" === typeof input.symlinks) && (null !== input.unsafeCache && (undefined === input.unsafeCache || "boolean" === typeof input.unsafeCache || "object" === typeof input.unsafeCache && null !== input.unsafeCache && false === Array.isArray(input.unsafeCache) && _io296(input.unsafeCache, true && _exceptionable))) && (undefined === input.useSyncFileSystemCalls || "boolean" === typeof input.useSyncFileSystemCalls) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "aliasFields", "byDependency", "cache", "cachePredicate", "cacheWithContext", "conditionNames", "descriptionFiles", "enforceExtension", "exportsFields", "extensionAlias", "extensions", "fallback", "fileSystem", "fullySpecified", "importsFields", "mainFields", "mainFiles", "modules", "plugins", "preferAbsolute", "preferRelative", "resolver", "restrictions", "roots", "symlinks", "unsafeCache", "useSyncFileSystemCalls"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io260 = (input, _exceptionable = true) => null !== input.alias && undefined !== input.alias && (false === input.alias || "string" === typeof input.alias || Array.isArray(input.alias) && input.alias.every((elem, _index245) => "string" === typeof elem)) && "string" === typeof input.name && (undefined === input.onlyModule || "boolean" === typeof input.onlyModule) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "name", "onlyModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io261 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index246) => "string" === typeof elem));
}); const _io262 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io259(value, true && _exceptionable);
}); const _io263 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || Array.isArray(value) && value.every((elem, _index247) => "string" === typeof elem));
}); const _io264 = (input, _exceptionable = true) => null !== input.alias && undefined !== input.alias && (false === input.alias || "string" === typeof input.alias || Array.isArray(input.alias) && input.alias.every((elem, _index248) => "string" === typeof elem)) && "string" === typeof input.name && (undefined === input.onlyModule || "boolean" === typeof input.onlyModule) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "name", "onlyModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io265 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index249) => "string" === typeof elem));
}); const _io266 = (input, _exceptionable = true) => "object" === typeof input.readFile && null !== input.readFile && _io169(input.readFile, true && _exceptionable) && (undefined === input.readFileSync || "object" === typeof input.readFileSync && null !== input.readFileSync && _io267(input.readFileSync, true && _exceptionable)) && ("object" === typeof input.readlink && null !== input.readlink && _io268(input.readlink, true && _exceptionable)) && (undefined === input.readlinkSync || "object" === typeof input.readlinkSync && null !== input.readlinkSync && _io269(input.readlinkSync, true && _exceptionable)) && ("object" === typeof input.readdir && null !== input.readdir && _io165(input.readdir, true && _exceptionable)) && (undefined === input.readdirSync || "object" === typeof input.readdirSync && null !== input.readdirSync && _io270(input.readdirSync, true && _exceptionable)) && ("object" === typeof input.stat && null !== input.stat && _io167(input.stat, true && _exceptionable)) && (undefined === input.statSync || "object" === typeof input.statSync && null !== input.statSync && _io271(input.statSync, true && _exceptionable)) && (undefined === input.lstat || "object" === typeof input.lstat && null !== input.lstat && _io168(input.lstat, true && _exceptionable)) && (undefined === input.lstatSync || "object" === typeof input.lstatSync && null !== input.lstatSync && _io272(input.lstatSync, true && _exceptionable)) && (undefined === input.realpath || "object" === typeof input.realpath && null !== input.realpath && _io273(input.realpath, true && _exceptionable)) && (undefined === input.realpathSync || "object" === typeof input.realpathSync && null !== input.realpathSync && _io274(input.realpathSync, true && _exceptionable)) && (undefined === input.readJson || true) && (undefined === input.readJsonSync || true) && (undefined === input.purge || true) && (undefined === input.join || true) && (undefined === input.relative || true) && (undefined === input.dirname || true) && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["readFile", "readFileSync", "readlink", "readlinkSync", "readdir", "readdirSync", "stat", "statSync", "lstat", "lstatSync", "realpath", "realpathSync", "readJson", "readJsonSync", "purge", "join", "relative", "dirname"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io267 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io268 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io269 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io270 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io271 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io272 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io273 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io274 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io275 = (input, _exceptionable = true) => true && Object.keys(input).every(key => {
    if (["apply"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io276 = (input, _exceptionable = true) => "object" === typeof input.fileSystem && null !== input.fileSystem && _io277(input.fileSystem, true && _exceptionable) && ("object" === typeof input.options && null !== input.options && _io284(input.options, true && _exceptionable)) && ("object" === typeof input.hooks && null !== input.hooks && _io290(input.hooks, true && _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["fileSystem", "options", "hooks"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io277 = (input, _exceptionable = true) => "object" === typeof input.readFile && null !== input.readFile && _io278(input.readFile, true && _exceptionable) && ("object" === typeof input.readdir && null !== input.readdir && _io279(input.readdir, true && _exceptionable)) && (undefined === input.readJson || true) && ("object" === typeof input.readlink && null !== input.readlink && _io280(input.readlink, true && _exceptionable)) && (undefined === input.lstat || "object" === typeof input.lstat && null !== input.lstat && _io281(input.lstat, true && _exceptionable)) && ("object" === typeof input.stat && null !== input.stat && _io282(input.stat, true && _exceptionable)) && (undefined === input.realpath || "object" === typeof input.realpath && null !== input.realpath && _io283(input.realpath, true && _exceptionable)) && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["readFile", "readdir", "readJson", "readlink", "lstat", "stat", "realpath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io278 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io279 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io280 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io281 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io282 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io283 = (input, _exceptionable = true) => true && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io284 = (input, _exceptionable = true) => Array.isArray(input.alias) && input.alias.every((elem, _index250) => "object" === typeof elem && null !== elem && _io285(elem, true && _exceptionable)) && (Array.isArray(input.fallback) && input.fallback.every((elem, _index251) => "object" === typeof elem && null !== elem && _io285(elem, true && _exceptionable))) && (input.aliasFields instanceof Set && (() => [...input.aliasFields].every((elem, _index252) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index253) => "string" === typeof elem))))()) && (Array.isArray(input.extensionAlias) && input.extensionAlias.every((elem, _index254) => "object" === typeof elem && null !== elem && _io286(elem, true && _exceptionable))) && true && "boolean" === typeof input.cacheWithContext && (input.conditionNames instanceof Set && (() => [...input.conditionNames].every((elem, _index255) => "string" === typeof elem))()) && (Array.isArray(input.descriptionFiles) && input.descriptionFiles.every((elem, _index256) => "string" === typeof elem)) && "boolean" === typeof input.enforceExtension && (input.exportsFields instanceof Set && (() => [...input.exportsFields].every((elem, _index257) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index258) => "string" === typeof elem))))()) && (input.importsFields instanceof Set && (() => [...input.importsFields].every((elem, _index259) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index260) => "string" === typeof elem))))()) && (input.extensions instanceof Set && (() => [...input.extensions].every((elem, _index261) => "string" === typeof elem))()) && ("object" === typeof input.fileSystem && null !== input.fileSystem && _io277(input.fileSystem, true && _exceptionable)) && (null !== input.unsafeCache && undefined !== input.unsafeCache && (false === input.unsafeCache || "object" === typeof input.unsafeCache && null !== input.unsafeCache && false === Array.isArray(input.unsafeCache) && _io48(input.unsafeCache, true && _exceptionable))) && "boolean" === typeof input.symlinks && (undefined === input.resolver || "object" === typeof input.resolver && null !== input.resolver && _io276(input.resolver, true && _exceptionable)) && (Array.isArray(input.modules) && input.modules.every((elem, _index262) => null !== elem && undefined !== elem && ("string" === typeof elem || Array.isArray(elem) && elem.every((elem, _index263) => "string" === typeof elem)))) && (Array.isArray(input.mainFields) && input.mainFields.every((elem, _index264) => "object" === typeof elem && null !== elem && _io287(elem, true && _exceptionable))) && (input.mainFiles instanceof Set && (() => [...input.mainFiles].every((elem, _index265) => "string" === typeof elem))()) && (Array.isArray(input.plugins) && input.plugins.every((elem, _index266) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || "object" === typeof elem && null !== elem && _io288(elem, true && _exceptionable))) && (null === input.pnpApi || "object" === typeof input.pnpApi && null !== input.pnpApi && _io289(input.pnpApi, true && _exceptionable)) && (input.roots instanceof Set && (() => [...input.roots].every((elem, _index267) => "string" === typeof elem))()) && "boolean" === typeof input.fullySpecified && "boolean" === typeof input.resolveToContext && (input.restrictions instanceof Set && (() => [...input.restrictions].every((elem, _index268) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))()) && "boolean" === typeof input.preferRelative && "boolean" === typeof input.preferAbsolute && (26 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "fallback", "aliasFields", "extensionAlias", "cachePredicate", "cacheWithContext", "conditionNames", "descriptionFiles", "enforceExtension", "exportsFields", "importsFields", "extensions", "fileSystem", "unsafeCache", "symlinks", "resolver", "modules", "mainFields", "mainFiles", "plugins", "pnpApi", "roots", "fullySpecified", "resolveToContext", "restrictions", "preferRelative", "preferAbsolute"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io285 = (input, _exceptionable = true) => null !== input.alias && undefined !== input.alias && (false === input.alias || "string" === typeof input.alias || Array.isArray(input.alias) && input.alias.every((elem, _index269) => "string" === typeof elem)) && "string" === typeof input.name && (undefined === input.onlyModule || "boolean" === typeof input.onlyModule) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "name", "onlyModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io286 = (input, _exceptionable = true) => null !== input.alias && undefined !== input.alias && ("string" === typeof input.alias || Array.isArray(input.alias) && input.alias.every((elem, _index270) => "string" === typeof elem)) && "string" === typeof input.extension && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "extension"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io287 = (input, _exceptionable = true) => Array.isArray(input.name) && input.name.every((elem, _index271) => "string" === typeof elem) && "boolean" === typeof input.forceRelative && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "forceRelative"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io288 = (input, _exceptionable = true) => true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["apply"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io289 = (input, _exceptionable = true) => true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["resolveToUnqualified"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io290 = (input, _exceptionable = true) => "object" === typeof input.resolveStep && null !== input.resolveStep && _io291(input.resolveStep, true && _exceptionable) && ("object" === typeof input.noResolve && null !== input.noResolve && _io293(input.noResolve, true && _exceptionable)) && ("object" === typeof input.resolve && null !== input.resolve && _io294(input.resolve, true && _exceptionable)) && ("object" === typeof input.result && null !== input.result && _io295(input.result, true && _exceptionable)) && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["resolveStep", "noResolve", "resolve", "result"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io291 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.taps) && input.taps.every((elem, _index272) => "object" === typeof elem && null !== elem && _io292(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "taps"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io292 = (input, _exceptionable = true) => (undefined === input.before || "string" === typeof input.before) && (undefined === input.stage || "number" === typeof input.stage) && "string" === typeof input.name && ("promise" === input.type || "async" === input.type || "sync" === input.type) && ("object" === typeof input.fn && null !== input.fn && _io23(input.fn, true && _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["before", "stage", "name", "type", "fn"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io293 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.taps) && input.taps.every((elem, _index273) => "object" === typeof elem && null !== elem && _io292(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "taps"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io294 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.taps) && input.taps.every((elem, _index274) => "object" === typeof elem && null !== elem && _io292(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "taps"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io295 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.taps) && input.taps.every((elem, _index275) => "object" === typeof elem && null !== elem && _io292(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "taps"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io296 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io297 = (input, _exceptionable = true) => (undefined === input.ident || "string" === typeof input.ident) && (undefined === input.loader || "string" === typeof input.loader) && (null !== input.options && (undefined === input.options || "string" === typeof input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io298(input.options, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ident", "loader", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io298 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io299 = (input, _exceptionable = true) => (undefined === input.ident || "string" === typeof input.ident) && (undefined === input.loader || "string" === typeof input.loader) && (null !== input.options && (undefined === input.options || "string" === typeof input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io300(input.options, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ident", "loader", "options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io300 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io301 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.every((elem, _index276) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io253(value, true && _exceptionable)));
}); const _io302 = (input, _exceptionable = true) => (undefined === input.asset || "object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) && _io303(input.asset, true && _exceptionable)) && (undefined === input["asset/inline"] || "object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) && _io305(input["asset/inline"], true && _exceptionable)) && (undefined === input["asset/resource"] || "object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) && _io306(input["asset/resource"], true && _exceptionable)) && (undefined === input.css || "object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) && _io307(input.css, true && _exceptionable)) && (undefined === input["css/auto"] || "object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) && _io308(input["css/auto"], true && _exceptionable)) && (undefined === input["css/global"] || "object" === typeof input["css/global"] && null !== input["css/global"] && false === Array.isArray(input["css/global"]) && _io309(input["css/global"], true && _exceptionable)) && (undefined === input["css/module"] || "object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) && _io310(input["css/module"], true && _exceptionable)) && (undefined === input.javascript || "object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) && _io311(input.javascript, true && _exceptionable)) && (undefined === input["javascript/auto"] || "object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) && _io311(input["javascript/auto"], true && _exceptionable)) && (undefined === input["javascript/dynamic"] || "object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) && _io311(input["javascript/dynamic"], true && _exceptionable)) && (undefined === input["javascript/esm"] || "object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) && _io311(input["javascript/esm"], true && _exceptionable)) && Object.keys(input).every(key => {
    if (["asset", "asset/inline", "asset/resource", "css", "css/auto", "css/global", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io312(value, true && _exceptionable);
}); const _io303 = (input, _exceptionable = true) => (undefined === input.binary || "boolean" === typeof input.binary) && (null !== input.dataUrl && (undefined === input.dataUrl || "function" === typeof input.dataUrl || "object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) && _io304(input.dataUrl, true && _exceptionable))) && (undefined === input.emit || "boolean" === typeof input.emit) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.outputPath && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["binary", "dataUrl", "emit", "filename", "outputPath", "publicPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io304 = (input, _exceptionable = true) => (undefined === input.encoding || false === input.encoding || "base64" === input.encoding) && (undefined === input.mimetype || "string" === typeof input.mimetype) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["encoding", "mimetype"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io305 = (input, _exceptionable = true) => (undefined === input.binary || "boolean" === typeof input.binary) && (null !== input.dataUrl && (undefined === input.dataUrl || "function" === typeof input.dataUrl || "object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) && _io304(input.dataUrl, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["binary", "dataUrl"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io306 = (input, _exceptionable = true) => (undefined === input.binary || "boolean" === typeof input.binary) && (undefined === input.emit || "boolean" === typeof input.emit) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (null !== input.outputPath && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath)) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["binary", "emit", "filename", "outputPath", "publicPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io307 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule", "exportsOnly"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io308 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (null !== input.exportsConvention && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention)) && (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io309 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (null !== input.exportsConvention && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention)) && (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io310 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (null !== input.exportsConvention && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention)) && (undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io311 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io312 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io313 = (input, _exceptionable = true) => (undefined === input.asset || "object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) && _io314(input.asset, true && _exceptionable)) && (undefined === input["asset/inline"] || "object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) && _io316(input["asset/inline"], true && _exceptionable)) && (undefined === input["asset/resource"] || "object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) && _io316(input["asset/resource"], true && _exceptionable)) && (undefined === input["asset/source"] || "object" === typeof input["asset/source"] && null !== input["asset/source"] && false === Array.isArray(input["asset/source"]) && _io316(input["asset/source"], true && _exceptionable)) && (undefined === input.css || "object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) && _io317(input.css, true && _exceptionable)) && (undefined === input["css/auto"] || "object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) && _io318(input["css/auto"], true && _exceptionable)) && (undefined === input["css/global"] || "object" === typeof input["css/global"] && null !== input["css/global"] && false === Array.isArray(input["css/global"]) && _io319(input["css/global"], true && _exceptionable)) && (undefined === input["css/module"] || "object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) && _io320(input["css/module"], true && _exceptionable)) && (undefined === input.javascript || "object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) && _io321(input.javascript, true && _exceptionable)) && (undefined === input["javascript/auto"] || "object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) && _io321(input["javascript/auto"], true && _exceptionable)) && (undefined === input["javascript/dynamic"] || "object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) && _io321(input["javascript/dynamic"], true && _exceptionable)) && (undefined === input["javascript/esm"] || "object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) && _io321(input["javascript/esm"], true && _exceptionable)) && Object.keys(input).every(key => {
    if (["asset", "asset/inline", "asset/resource", "asset/source", "css", "css/auto", "css/global", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return "object" === typeof value && null !== value && false === Array.isArray(value) && _io324(value, true && _exceptionable);
}); const _io314 = (input, _exceptionable = true) => null !== input.dataUrlCondition && (undefined === input.dataUrlCondition || "function" === typeof input.dataUrlCondition || "object" === typeof input.dataUrlCondition && null !== input.dataUrlCondition && false === Array.isArray(input.dataUrlCondition) && _io315(input.dataUrlCondition, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dataUrlCondition"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io315 = (input, _exceptionable = true) => (undefined === input.maxSize || "number" === typeof input.maxSize) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["maxSize"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io316 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io317 = (input, _exceptionable = true) => (undefined === input["import"] || "boolean" === typeof input["import"]) && (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (undefined === input.url || "boolean" === typeof input.url) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "namedExports", "url"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io318 = (input, _exceptionable = true) => (undefined === input["import"] || "boolean" === typeof input["import"]) && (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (undefined === input.url || "boolean" === typeof input.url) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "namedExports", "url"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io319 = (input, _exceptionable = true) => (undefined === input["import"] || "boolean" === typeof input["import"]) && (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (undefined === input.url || "boolean" === typeof input.url) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "namedExports", "url"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io320 = (input, _exceptionable = true) => (undefined === input["import"] || "boolean" === typeof input["import"]) && (undefined === input.namedExports || "boolean" === typeof input.namedExports) && (undefined === input.url || "boolean" === typeof input.url) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "namedExports", "url"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io321 = (input, _exceptionable = true) => null !== input.amd && (undefined === input.amd || false === input.amd || "object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) && _io322(input.amd, true && _exceptionable)) && (undefined === input.browserify || "boolean" === typeof input.browserify) && (undefined === input.commonjs || "boolean" === typeof input.commonjs) && (undefined === input.commonjsMagicComments || "boolean" === typeof input.commonjsMagicComments) && (undefined === input.createRequire || "string" === typeof input.createRequire || "boolean" === typeof input.createRequire) && (undefined === input.dynamicImportFetchPriority || false === input.dynamicImportFetchPriority || "auto" === input.dynamicImportFetchPriority || "low" === input.dynamicImportFetchPriority || "high" === input.dynamicImportFetchPriority) && (undefined === input.dynamicImportMode || "lazy" === input.dynamicImportMode || "weak" === input.dynamicImportMode || "eager" === input.dynamicImportMode || "lazy-once" === input.dynamicImportMode) && (undefined === input.dynamicImportPrefetch || "number" === typeof input.dynamicImportPrefetch || "boolean" === typeof input.dynamicImportPrefetch) && (undefined === input.dynamicImportPreload || "number" === typeof input.dynamicImportPreload || "boolean" === typeof input.dynamicImportPreload) && (undefined === input.exportsPresence || false === input.exportsPresence || "warn" === input.exportsPresence || "error" === input.exportsPresence || "auto" === input.exportsPresence) && (undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical) && (undefined === input.exprContextRecursive || "boolean" === typeof input.exprContextRecursive) && (null !== input.exprContextRegExp && (undefined === input.exprContextRegExp || "boolean" === typeof input.exprContextRegExp || input.exprContextRegExp instanceof RegExp)) && (undefined === input.exprContextRequest || "string" === typeof input.exprContextRequest) && (undefined === input.harmony || "boolean" === typeof input.harmony) && (undefined === input["import"] || "boolean" === typeof input["import"]) && (undefined === input.importExportsPresence || false === input.importExportsPresence || "warn" === input.importExportsPresence || "error" === input.importExportsPresence || "auto" === input.importExportsPresence) && (undefined === input.importMeta || "boolean" === typeof input.importMeta) && (undefined === input.importMetaContext || "boolean" === typeof input.importMetaContext) && (null !== input.node && (undefined === input.node || false === input.node || "object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) && _io323(input.node, true && _exceptionable))) && (undefined === input.overrideStrict || "strict" === input.overrideStrict || "non-strict" === input.overrideStrict) && (undefined === input.reexportExportsPresence || false === input.reexportExportsPresence || "warn" === input.reexportExportsPresence || "error" === input.reexportExportsPresence || "auto" === input.reexportExportsPresence) && (undefined === input.requireContext || "boolean" === typeof input.requireContext) && (undefined === input.requireEnsure || "boolean" === typeof input.requireEnsure) && (undefined === input.requireInclude || "boolean" === typeof input.requireInclude) && (undefined === input.requireJs || "boolean" === typeof input.requireJs) && (undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence) && (undefined === input.strictThisContextOnImports || "boolean" === typeof input.strictThisContextOnImports) && (undefined === input.system || "boolean" === typeof input.system) && (undefined === input.unknownContextCritical || "boolean" === typeof input.unknownContextCritical) && (undefined === input.unknownContextRecursive || "boolean" === typeof input.unknownContextRecursive) && (null !== input.unknownContextRegExp && (undefined === input.unknownContextRegExp || "boolean" === typeof input.unknownContextRegExp || input.unknownContextRegExp instanceof RegExp)) && (undefined === input.unknownContextRequest || "string" === typeof input.unknownContextRequest) && (undefined === input.url || "relative" === input.url || "boolean" === typeof input.url) && (null !== input.worker && (undefined === input.worker || "boolean" === typeof input.worker || Array.isArray(input.worker) && input.worker.every((elem, _index277) => "string" === typeof elem))) && (undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical) && (undefined === input.wrappedContextRecursive || "boolean" === typeof input.wrappedContextRecursive) && (undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp) && Object.keys(input).every(key => {
    if (["amd", "browserify", "commonjs", "commonjsMagicComments", "createRequire", "dynamicImportFetchPriority", "dynamicImportMode", "dynamicImportPrefetch", "dynamicImportPreload", "exportsPresence", "exprContextCritical", "exprContextRecursive", "exprContextRegExp", "exprContextRequest", "harmony", "import", "importExportsPresence", "importMeta", "importMetaContext", "node", "overrideStrict", "reexportExportsPresence", "requireContext", "requireEnsure", "requireInclude", "requireJs", "strictExportPresence", "strictThisContextOnImports", "system", "unknownContextCritical", "unknownContextRecursive", "unknownContextRegExp", "unknownContextRequest", "url", "worker", "wrappedContextCritical", "wrappedContextRecursive", "wrappedContextRegExp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io322 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io323 = (input, _exceptionable = true) => (undefined === input.__dirname || "warn-mock" === input.__dirname || "mock" === input.__dirname || "eval-only" === input.__dirname || "node-module" === input.__dirname || "boolean" === typeof input.__dirname) && (undefined === input.__filename || "warn-mock" === input.__filename || "mock" === input.__filename || "eval-only" === input.__filename || "node-module" === input.__filename || "boolean" === typeof input.__filename) && (undefined === input.global || "warn" === input.global || "boolean" === typeof input.global) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["__dirname", "__filename", "global"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io324 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io325 = (input, _exceptionable = true) => (undefined === input.avoidEntryIife || "boolean" === typeof input.avoidEntryIife) && (undefined === input.checkWasmTypes || "boolean" === typeof input.checkWasmTypes) && (undefined === input.chunkIds || false === input.chunkIds || "size" === input.chunkIds || "named" === input.chunkIds || "natural" === input.chunkIds || "deterministic" === input.chunkIds || "total-size" === input.chunkIds) && (undefined === input.concatenateModules || "boolean" === typeof input.concatenateModules) && (undefined === input.emitOnErrors || "boolean" === typeof input.emitOnErrors) && (undefined === input.flagIncludedChunks || "boolean" === typeof input.flagIncludedChunks) && (undefined === input.innerGraph || "boolean" === typeof input.innerGraph) && (undefined === input.mangleExports || "size" === input.mangleExports || "deterministic" === input.mangleExports || "boolean" === typeof input.mangleExports) && (undefined === input.mangleWasmImports || "boolean" === typeof input.mangleWasmImports) && (undefined === input.mergeDuplicateChunks || "boolean" === typeof input.mergeDuplicateChunks) && (undefined === input.minimize || "boolean" === typeof input.minimize) && (undefined === input.minimizer || Array.isArray(input.minimizer) && input.minimizer.every((elem, _index278) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || "object" === typeof elem && null !== elem && _io326(elem, true && _exceptionable))) && (undefined === input.moduleIds || false === input.moduleIds || "size" === input.moduleIds || "named" === input.moduleIds || "natural" === input.moduleIds || "deterministic" === input.moduleIds || "hashed" === input.moduleIds) && (undefined === input.noEmitOnErrors || "boolean" === typeof input.noEmitOnErrors) && (undefined === input.nodeEnv || false === input.nodeEnv || "string" === typeof input.nodeEnv) && (undefined === input.portableRecords || "boolean" === typeof input.portableRecords) && (undefined === input.providedExports || "boolean" === typeof input.providedExports) && (undefined === input.realContentHash || "boolean" === typeof input.realContentHash) && (undefined === input.removeAvailableModules || "boolean" === typeof input.removeAvailableModules) && (undefined === input.removeEmptyChunks || "boolean" === typeof input.removeEmptyChunks) && (null !== input.runtimeChunk && (undefined === input.runtimeChunk || "single" === input.runtimeChunk || "multiple" === input.runtimeChunk || "boolean" === typeof input.runtimeChunk || "object" === typeof input.runtimeChunk && null !== input.runtimeChunk && false === Array.isArray(input.runtimeChunk) && _io327(input.runtimeChunk, true && _exceptionable))) && (undefined === input.sideEffects || "flag" === input.sideEffects || "boolean" === typeof input.sideEffects) && (null !== input.splitChunks && (undefined === input.splitChunks || false === input.splitChunks || "object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) && _io328(input.splitChunks, true && _exceptionable))) && (undefined === input.usedExports || "global" === input.usedExports || "boolean" === typeof input.usedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["avoidEntryIife", "checkWasmTypes", "chunkIds", "concatenateModules", "emitOnErrors", "flagIncludedChunks", "innerGraph", "mangleExports", "mangleWasmImports", "mergeDuplicateChunks", "minimize", "minimizer", "moduleIds", "noEmitOnErrors", "nodeEnv", "portableRecords", "providedExports", "realContentHash", "removeAvailableModules", "removeEmptyChunks", "runtimeChunk", "sideEffects", "splitChunks", "usedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io326 = (input, _exceptionable = true) => true && Object.keys(input).every(key => {
    if (["apply"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io327 = (input, _exceptionable = true) => null !== input.name && (undefined === input.name || "string" === typeof input.name || "object" === typeof input.name && null !== input.name && _io23(input.name, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io328 = (input, _exceptionable = true) => (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (undefined === input.cacheGroups || "object" === typeof input.cacheGroups && null !== input.cacheGroups && false === Array.isArray(input.cacheGroups) && _io329(input.cacheGroups, true && _exceptionable)) && (null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp)) && (undefined === input.defaultSizeTypes || Array.isArray(input.defaultSizeTypes) && input.defaultSizeTypes.every((elem, _index279) => "string" === typeof elem)) && (null !== input.enforceSizeThreshold && (undefined === input.enforceSizeThreshold || "number" === typeof input.enforceSizeThreshold || "object" === typeof input.enforceSizeThreshold && null !== input.enforceSizeThreshold && false === Array.isArray(input.enforceSizeThreshold) && _io338(input.enforceSizeThreshold, true && _exceptionable))) && (undefined === input.fallbackCacheGroup || "object" === typeof input.fallbackCacheGroup && null !== input.fallbackCacheGroup && false === Array.isArray(input.fallbackCacheGroup) && _io339(input.fallbackCacheGroup, true && _exceptionable)) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.hidePathInfo || "boolean" === typeof input.hidePathInfo) && (undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests) && (null !== input.maxAsyncSize && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || "object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) && _io345(input.maxAsyncSize, true && _exceptionable))) && (undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests) && (null !== input.maxInitialSize && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || "object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) && _io346(input.maxInitialSize, true && _exceptionable))) && (null !== input.maxSize && (undefined === input.maxSize || "number" === typeof input.maxSize || "object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) && _io347(input.maxSize, true && _exceptionable))) && (undefined === input.minChunks || "number" === typeof input.minChunks) && (null !== input.minRemainingSize && (undefined === input.minRemainingSize || "number" === typeof input.minRemainingSize || "object" === typeof input.minRemainingSize && null !== input.minRemainingSize && false === Array.isArray(input.minRemainingSize) && _io348(input.minRemainingSize, true && _exceptionable))) && (null !== input.minSize && (undefined === input.minSize || "number" === typeof input.minSize || "object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) && _io349(input.minSize, true && _exceptionable))) && (null !== input.minSizeReduction && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || "object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) && _io350(input.minSizeReduction, true && _exceptionable))) && (null !== input.name && (undefined === input.name || false === input.name || "string" === typeof input.name || "object" === typeof input.name && null !== input.name && _io23(input.name, true && _exceptionable))) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["automaticNameDelimiter", "cacheGroups", "chunks", "defaultSizeTypes", "enforceSizeThreshold", "fallbackCacheGroup", "filename", "hidePathInfo", "maxAsyncRequests", "maxAsyncSize", "maxInitialRequests", "maxInitialSize", "maxSize", "minChunks", "minRemainingSize", "minSize", "minSizeReduction", "name", "usedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io329 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || value instanceof RegExp || "object" === typeof value && null !== value && false === Array.isArray(value) && _iu21(value, true && _exceptionable));
}); const _io330 = (input, _exceptionable = true) => (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp)) && (undefined === input.enforce || "boolean" === typeof input.enforce) && (null !== input.enforceSizeThreshold && (undefined === input.enforceSizeThreshold || "number" === typeof input.enforceSizeThreshold || "object" === typeof input.enforceSizeThreshold && null !== input.enforceSizeThreshold && false === Array.isArray(input.enforceSizeThreshold) && _io331(input.enforceSizeThreshold, true && _exceptionable))) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.idHint || "string" === typeof input.idHint) && (null !== input.layer && (undefined === input.layer || "string" === typeof input.layer || input.layer instanceof RegExp || "object" === typeof input.layer && null !== input.layer && _io23(input.layer, true && _exceptionable))) && (undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests) && (null !== input.maxAsyncSize && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || "object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) && _io332(input.maxAsyncSize, true && _exceptionable))) && (undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests) && (null !== input.maxInitialSize && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || "object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) && _io333(input.maxInitialSize, true && _exceptionable))) && (null !== input.maxSize && (undefined === input.maxSize || "number" === typeof input.maxSize || "object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) && _io334(input.maxSize, true && _exceptionable))) && (undefined === input.minChunks || "number" === typeof input.minChunks) && (null !== input.minRemainingSize && (undefined === input.minRemainingSize || "number" === typeof input.minRemainingSize || "object" === typeof input.minRemainingSize && null !== input.minRemainingSize && false === Array.isArray(input.minRemainingSize) && _io335(input.minRemainingSize, true && _exceptionable))) && (null !== input.minSize && (undefined === input.minSize || "number" === typeof input.minSize || "object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) && _io336(input.minSize, true && _exceptionable))) && (null !== input.minSizeReduction && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || "object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) && _io337(input.minSizeReduction, true && _exceptionable))) && (null !== input.name && (undefined === input.name || false === input.name || "string" === typeof input.name || "object" === typeof input.name && null !== input.name && _io23(input.name, true && _exceptionable))) && (undefined === input.priority || "number" === typeof input.priority) && (undefined === input.reuseExistingChunk || "boolean" === typeof input.reuseExistingChunk) && (null !== input.test && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || "object" === typeof input.test && null !== input.test && _io23(input.test, true && _exceptionable))) && (null !== input.type && (undefined === input.type || "string" === typeof input.type || input.type instanceof RegExp || "object" === typeof input.type && null !== input.type && _io23(input.type, true && _exceptionable))) && (undefined === input.usedExports || "boolean" === typeof input.usedExports) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["automaticNameDelimiter", "chunks", "enforce", "enforceSizeThreshold", "filename", "idHint", "layer", "maxAsyncRequests", "maxAsyncSize", "maxInitialRequests", "maxInitialSize", "maxSize", "minChunks", "minRemainingSize", "minSize", "minSizeReduction", "name", "priority", "reuseExistingChunk", "test", "type", "usedExports"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io331 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io332 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io333 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io334 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io335 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io336 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io337 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io338 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io339 = (input, _exceptionable = true) => (undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter) && (null !== input.chunks && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp)) && (null !== input.maxAsyncSize && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || "object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) && _io340(input.maxAsyncSize, true && _exceptionable))) && (null !== input.maxInitialSize && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || "object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) && _io341(input.maxInitialSize, true && _exceptionable))) && (null !== input.maxSize && (undefined === input.maxSize || "number" === typeof input.maxSize || "object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) && _io342(input.maxSize, true && _exceptionable))) && (null !== input.minSize && (undefined === input.minSize || "number" === typeof input.minSize || "object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) && _io343(input.minSize, true && _exceptionable))) && (null !== input.minSizeReduction && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || "object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) && _io344(input.minSizeReduction, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["automaticNameDelimiter", "chunks", "maxAsyncSize", "maxInitialSize", "maxSize", "minSize", "minSizeReduction"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io340 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io341 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io342 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io343 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io344 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io345 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io346 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io347 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io348 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io349 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io350 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "number" === typeof value;
}); const _io351 = (input, _exceptionable = true) => (undefined === input.amdContainer || "string" === typeof input.amdContainer) && (null !== input.assetModuleFilename && (undefined === input.assetModuleFilename || "function" === typeof input.assetModuleFilename || "string" === typeof input.assetModuleFilename)) && (undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks) && (null !== input.auxiliaryComment && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || "object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) && _io236(input.auxiliaryComment, true && _exceptionable))) && (undefined === input.charset || "boolean" === typeof input.charset) && (null !== input.chunkFilename && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename)) && (undefined === input.chunkFormat || false === input.chunkFormat || "string" === typeof input.chunkFormat) && (undefined === input.chunkLoadTimeout || "number" === typeof input.chunkLoadTimeout) && (undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading) && (undefined === input.chunkLoadingGlobal || "string" === typeof input.chunkLoadingGlobal) && (null !== input.clean && (undefined === input.clean || "boolean" === typeof input.clean || "object" === typeof input.clean && null !== input.clean && false === Array.isArray(input.clean) && _io352(input.clean, true && _exceptionable))) && (undefined === input.compareBeforeEmit || "boolean" === typeof input.compareBeforeEmit) && (undefined === input.crossOriginLoading || false === input.crossOriginLoading || "anonymous" === input.crossOriginLoading || "use-credentials" === input.crossOriginLoading) && (null !== input.cssChunkFilename && (undefined === input.cssChunkFilename || "function" === typeof input.cssChunkFilename || "string" === typeof input.cssChunkFilename)) && (null !== input.cssFilename && (undefined === input.cssFilename || "function" === typeof input.cssFilename || "string" === typeof input.cssFilename)) && (null !== input.devtoolFallbackModuleFilenameTemplate && (undefined === input.devtoolFallbackModuleFilenameTemplate || "string" === typeof input.devtoolFallbackModuleFilenameTemplate || "object" === typeof input.devtoolFallbackModuleFilenameTemplate && null !== input.devtoolFallbackModuleFilenameTemplate && _io23(input.devtoolFallbackModuleFilenameTemplate, true && _exceptionable))) && (null !== input.devtoolModuleFilenameTemplate && (undefined === input.devtoolModuleFilenameTemplate || "string" === typeof input.devtoolModuleFilenameTemplate || "object" === typeof input.devtoolModuleFilenameTemplate && null !== input.devtoolModuleFilenameTemplate && _io23(input.devtoolModuleFilenameTemplate, true && _exceptionable))) && (undefined === input.devtoolNamespace || "string" === typeof input.devtoolNamespace) && (undefined === input.enabledChunkLoadingTypes || Array.isArray(input.enabledChunkLoadingTypes) && input.enabledChunkLoadingTypes.every((elem, _index280) => "string" === typeof elem)) && (undefined === input.enabledLibraryTypes || Array.isArray(input.enabledLibraryTypes) && input.enabledLibraryTypes.every((elem, _index281) => "string" === typeof elem)) && (undefined === input.enabledWasmLoadingTypes || Array.isArray(input.enabledWasmLoadingTypes) && input.enabledWasmLoadingTypes.every((elem, _index282) => "string" === typeof elem)) && (undefined === input.environment || "object" === typeof input.environment && null !== input.environment && false === Array.isArray(input.environment) && _io353(input.environment, true && _exceptionable)) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.globalObject || "string" === typeof input.globalObject) && (undefined === input.hashDigest || "string" === typeof input.hashDigest) && (undefined === input.hashDigestLength || "number" === typeof input.hashDigestLength) && (null !== input.hashFunction && (undefined === input.hashFunction || "string" === typeof input.hashFunction || "object" === typeof input.hashFunction && null !== input.hashFunction && _io354(input.hashFunction, true && _exceptionable))) && (undefined === input.hashSalt || "string" === typeof input.hashSalt) && (undefined === input.hotUpdateChunkFilename || "string" === typeof input.hotUpdateChunkFilename) && (undefined === input.hotUpdateGlobal || "string" === typeof input.hotUpdateGlobal) && (undefined === input.hotUpdateMainFilename || "string" === typeof input.hotUpdateMainFilename) && (undefined === input.ignoreBrowserWarnings || "boolean" === typeof input.ignoreBrowserWarnings) && (undefined === input.iife || "boolean" === typeof input.iife) && (undefined === input.importFunctionName || "string" === typeof input.importFunctionName) && (undefined === input.importMetaName || "string" === typeof input.importMetaName) && (null !== input.library && (undefined === input.library || "string" === typeof input.library || (Array.isArray(input.library) && input.library.every((elem, _index283) => "string" === typeof elem) || "object" === typeof input.library && null !== input.library && false === Array.isArray(input.library) && _iu22(input.library, true && _exceptionable)))) && (null !== input.libraryExport && (undefined === input.libraryExport || "string" === typeof input.libraryExport || Array.isArray(input.libraryExport) && input.libraryExport.every((elem, _index284) => "string" === typeof elem))) && (undefined === input.libraryTarget || "string" === typeof input.libraryTarget) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (undefined === input.path || "string" === typeof input.path) && (undefined === input.pathinfo || "verbose" === input.pathinfo || "boolean" === typeof input.pathinfo) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.scriptType || false === input.scriptType || "module" === input.scriptType || "text/javascript" === input.scriptType) && (undefined === input.sourceMapFilename || "string" === typeof input.sourceMapFilename) && (undefined === input.sourcePrefix || "string" === typeof input.sourcePrefix) && (undefined === input.strictModuleErrorHandling || "boolean" === typeof input.strictModuleErrorHandling) && (undefined === input.strictModuleExceptionHandling || "boolean" === typeof input.strictModuleExceptionHandling) && (null !== input.trustedTypes && (undefined === input.trustedTypes || true === input.trustedTypes || "string" === typeof input.trustedTypes || "object" === typeof input.trustedTypes && null !== input.trustedTypes && false === Array.isArray(input.trustedTypes) && _io356(input.trustedTypes, true && _exceptionable))) && (undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine) && (undefined === input.uniqueName || "string" === typeof input.uniqueName) && (undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading) && (undefined === input.webassemblyModuleFilename || "string" === typeof input.webassemblyModuleFilename) && (undefined === input.workerChunkLoading || false === input.workerChunkLoading || "string" === typeof input.workerChunkLoading) && (undefined === input.workerPublicPath || "string" === typeof input.workerPublicPath) && (undefined === input.workerWasmLoading || false === input.workerWasmLoading || "string" === typeof input.workerWasmLoading) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["amdContainer", "assetModuleFilename", "asyncChunks", "auxiliaryComment", "charset", "chunkFilename", "chunkFormat", "chunkLoadTimeout", "chunkLoading", "chunkLoadingGlobal", "clean", "compareBeforeEmit", "crossOriginLoading", "cssChunkFilename", "cssFilename", "devtoolFallbackModuleFilenameTemplate", "devtoolModuleFilenameTemplate", "devtoolNamespace", "enabledChunkLoadingTypes", "enabledLibraryTypes", "enabledWasmLoadingTypes", "environment", "filename", "globalObject", "hashDigest", "hashDigestLength", "hashFunction", "hashSalt", "hotUpdateChunkFilename", "hotUpdateGlobal", "hotUpdateMainFilename", "ignoreBrowserWarnings", "iife", "importFunctionName", "importMetaName", "library", "libraryExport", "libraryTarget", "module", "path", "pathinfo", "publicPath", "scriptType", "sourceMapFilename", "sourcePrefix", "strictModuleErrorHandling", "strictModuleExceptionHandling", "trustedTypes", "umdNamedDefine", "uniqueName", "wasmLoading", "webassemblyModuleFilename", "workerChunkLoading", "workerPublicPath", "workerWasmLoading"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io352 = (input, _exceptionable = true) => (undefined === input.dry || "boolean" === typeof input.dry) && (null !== input.keep && (undefined === input.keep || "function" === typeof input.keep || "string" === typeof input.keep || input.keep instanceof RegExp)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dry", "keep"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io353 = (input, _exceptionable = true) => (undefined === input.arrowFunction || "boolean" === typeof input.arrowFunction) && (undefined === input.asyncFunction || "boolean" === typeof input.asyncFunction) && (undefined === input.bigIntLiteral || "boolean" === typeof input.bigIntLiteral) && (undefined === input["const"] || "boolean" === typeof input["const"]) && (undefined === input.destructuring || "boolean" === typeof input.destructuring) && (undefined === input.document || "boolean" === typeof input.document) && (undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport) && (undefined === input.dynamicImportInWorker || "boolean" === typeof input.dynamicImportInWorker) && (undefined === input.forOf || "boolean" === typeof input.forOf) && (undefined === input.globalThis || "boolean" === typeof input.globalThis) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (undefined === input.nodePrefixForCoreModules || "boolean" === typeof input.nodePrefixForCoreModules) && (undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining) && (undefined === input.templateLiteral || "boolean" === typeof input.templateLiteral) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["arrowFunction", "asyncFunction", "bigIntLiteral", "const", "destructuring", "document", "dynamicImport", "dynamicImportInWorker", "forOf", "globalThis", "module", "nodePrefixForCoreModules", "optionalChaining", "templateLiteral"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io354 = (input, _exceptionable = true) => "object" === typeof input.prototype && null !== input.prototype && false === Array.isArray(input.prototype) && _io355(input.prototype, true && _exceptionable) && "number" === typeof input.length && true && ("object" === typeof input.caller && null !== input.caller && _io23(input.caller, true && _exceptionable)) && "string" === typeof input.name && (5 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io355 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io356 = (input, _exceptionable = true) => (undefined === input.onPolicyCreationFailure || "continue" === input.onPolicyCreationFailure || "stop" === input.onPolicyCreationFailure) && (undefined === input.policyName || "string" === typeof input.policyName) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["onPolicyCreationFailure", "policyName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io357 = (input, _exceptionable = true) => (undefined === input.assetFilter || "object" === typeof input.assetFilter && null !== input.assetFilter && _io23(input.assetFilter, true && _exceptionable)) && (undefined === input.hints || false === input.hints || "error" === input.hints || "warning" === input.hints) && (undefined === input.maxAssetSize || "number" === typeof input.maxAssetSize) && (undefined === input.maxEntrypointSize || "number" === typeof input.maxEntrypointSize) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assetFilter", "hints", "maxAssetSize", "maxEntrypointSize"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io358 = (input, _exceptionable = true) => (undefined === input.buildDependencies || "object" === typeof input.buildDependencies && null !== input.buildDependencies && false === Array.isArray(input.buildDependencies) && _io359(input.buildDependencies, true && _exceptionable)) && (undefined === input.immutablePaths || Array.isArray(input.immutablePaths) && input.immutablePaths.every((elem, _index285) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input.managedPaths || Array.isArray(input.managedPaths) && input.managedPaths.every((elem, _index286) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (undefined === input["module"] || "object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) && _io360(input["module"], true && _exceptionable)) && (undefined === input.resolve || "object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) && _io361(input.resolve, true && _exceptionable)) && (undefined === input.resolveBuildDependencies || "object" === typeof input.resolveBuildDependencies && null !== input.resolveBuildDependencies && false === Array.isArray(input.resolveBuildDependencies) && _io362(input.resolveBuildDependencies, true && _exceptionable)) && (undefined === input.unmanagedPaths || Array.isArray(input.unmanagedPaths) && input.unmanagedPaths.every((elem, _index287) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["buildDependencies", "immutablePaths", "managedPaths", "module", "resolve", "resolveBuildDependencies", "unmanagedPaths"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io359 = (input, _exceptionable = true) => (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.timestamp || "boolean" === typeof input.timestamp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hash", "timestamp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io360 = (input, _exceptionable = true) => (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.timestamp || "boolean" === typeof input.timestamp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hash", "timestamp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io361 = (input, _exceptionable = true) => (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.timestamp || "boolean" === typeof input.timestamp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hash", "timestamp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io362 = (input, _exceptionable = true) => (undefined === input.hash || "boolean" === typeof input.hash) && (undefined === input.timestamp || "boolean" === typeof input.timestamp) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["hash", "timestamp"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io363 = (input, _exceptionable = true) => (undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout) && (undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks) && (null !== input.ignored && (undefined === input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || Array.isArray(input.ignored) && input.ignored.every((elem, _index288) => "string" === typeof elem))) && (undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll) && (undefined === input.stdin || "boolean" === typeof input.stdin) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["aggregateTimeout", "followSymlinks", "ignored", "poll", "stdin"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io364 = (input, _exceptionable = true) => (undefined === input.ipc || "string" === typeof input.ipc || "boolean" === typeof input.ipc) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.port || "string" === typeof input.port || "number" === typeof input.port) && (undefined === input.hot || "only" === input.hot || "boolean" === typeof input.hot) && (undefined === input.liveReload || "boolean" === typeof input.liveReload) && (undefined === input.devMiddleware || "object" === typeof input.devMiddleware && null !== input.devMiddleware && false === Array.isArray(input.devMiddleware) && _io156(input.devMiddleware, true && _exceptionable)) && (undefined === input.compress || "boolean" === typeof input.compress) && (null !== input.allowedHosts && (undefined === input.allowedHosts || "string" === typeof input.allowedHosts || Array.isArray(input.allowedHosts) && input.allowedHosts.every((elem, _index289) => "string" === typeof elem))) && (null !== input.historyApiFallback && (undefined === input.historyApiFallback || "boolean" === typeof input.historyApiFallback || "object" === typeof input.historyApiFallback && null !== input.historyApiFallback && false === Array.isArray(input.historyApiFallback) && _io172(input.historyApiFallback, true && _exceptionable))) && (null !== input.bonjour && (undefined === input.bonjour || "boolean" === typeof input.bonjour || "object" === typeof input.bonjour && null !== input.bonjour && false === Array.isArray(input.bonjour) && _iu15(input.bonjour, true && _exceptionable))) && (null !== input.watchFiles && (undefined === input.watchFiles || "string" === typeof input.watchFiles || (Array.isArray(input.watchFiles) && (_ip1(input.watchFiles, true && _exceptionable) || false) || "object" === typeof input.watchFiles && null !== input.watchFiles && _io178(input.watchFiles, true && _exceptionable)))) && (null !== input.static && (undefined === input.static || "string" === typeof input.static || "boolean" === typeof input.static || (Array.isArray(input.static) && input.static.every((elem, _index292) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io181(elem, true && _exceptionable))) || "object" === typeof input.static && null !== input.static && false === Array.isArray(input.static) && _io181(input.static, true && _exceptionable)))) && (null !== input.https && (undefined === input.https || "boolean" === typeof input.https || "object" === typeof input.https && null !== input.https && false === Array.isArray(input.https) && _io185(input.https, true && _exceptionable))) && (undefined === input.http2 || "boolean" === typeof input.http2) && (null !== input.server && (undefined === input.server || "string" === typeof input.server || "object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) && _io187(input.server, true && _exceptionable))) && (null !== input.webSocketServer && (undefined === input.webSocketServer || "string" === typeof input.webSocketServer || "boolean" === typeof input.webSocketServer || "object" === typeof input.webSocketServer && null !== input.webSocketServer && false === Array.isArray(input.webSocketServer) && _io188(input.webSocketServer, true && _exceptionable))) && (undefined === input.proxy || Array.isArray(input.proxy) && input.proxy.every((elem, _index293) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io189(elem, true && _exceptionable)))) && (null !== input.open && (undefined === input.open || "string" === typeof input.open || "boolean" === typeof input.open || (Array.isArray(input.open) && input.open.every((elem, _index294) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io199(elem, true && _exceptionable))) || "object" === typeof input.open && null !== input.open && false === Array.isArray(input.open) && _io199(input.open, true && _exceptionable)))) && (undefined === input.setupExitSignals || "boolean" === typeof input.setupExitSignals) && (null !== input.client && (undefined === input.client || "boolean" === typeof input.client || "object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) && _io201(input.client, true && _exceptionable))) && (null !== input.headers && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.every((elem, _index295) => "object" === typeof elem && null !== elem && _io204(elem, true && _exceptionable)) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io153(input.headers, true && _exceptionable)))) && (undefined === input.onListening || true) && (undefined === input.setupMiddlewares || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ipc", "host", "port", "hot", "liveReload", "devMiddleware", "compress", "allowedHosts", "historyApiFallback", "bonjour", "watchFiles", "static", "https", "http2", "server", "webSocketServer", "proxy", "open", "setupExitSignals", "client", "headers", "onListening", "setupMiddlewares"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io365 = (input, _exceptionable = true) => (undefined === input.dedupe || Array.isArray(input.dedupe) && input.dedupe.every((elem, _index296) => "string" === typeof elem)) && (null !== input.alias && (undefined === input.alias || "function" === typeof input.alias || (Array.isArray(input.alias) && input.alias.every((elem, _index297) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io366(elem, true && _exceptionable))) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _io366(input.alias, true && _exceptionable)))) && (undefined === input.aliasStrategy || "prefer-tsconfig" === input.aliasStrategy || "prefer-alias" === input.aliasStrategy) && (undefined === input.extensions || Array.isArray(input.extensions) && input.extensions.every((elem, _index298) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["dedupe", "alias", "aliasStrategy", "extensions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io366 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index299) => false === elem || "string" === typeof elem));
}); const _io367 = (input, _exceptionable = true) => null !== input.alias && (undefined === input.alias || "function" === typeof input.alias || (Array.isArray(input.alias) && input.alias.every((elem, _index300) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io366(elem, true && _exceptionable))) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _io366(input.alias, true && _exceptionable))) && (undefined === input.aliasStrategy || "prefer-tsconfig" === input.aliasStrategy || "prefer-alias" === input.aliasStrategy) && (null !== input.assetsInclude && (undefined === input.assetsInclude || "function" === typeof input.assetsInclude || "string" === typeof input.assetsInclude || input.assetsInclude instanceof RegExp || (Array.isArray(input.assetsInclude) && (_ia0(input.assetsInclude, true && _exceptionable) || false) || "object" === typeof input.assetsInclude && null !== input.assetsInclude && false === Array.isArray(input.assetsInclude) && _io207(input.assetsInclude, true && _exceptionable)))) && (undefined === input.include || Array.isArray(input.include) && input.include.every((elem, _index301) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia0(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io207(elem, true && _exceptionable))))) && (undefined === input.entry || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _io368(input.entry, true && _exceptionable)) && (undefined === input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index302) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia0(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io207(elem, true && _exceptionable))))) && (null !== input.preEntry && (undefined === input.preEntry || "string" === typeof input.preEntry || Array.isArray(input.preEntry) && input.preEntry.every((elem, _index303) => "string" === typeof elem))) && (undefined === input.define || "object" === typeof input.define && null !== input.define && false === Array.isArray(input.define) && _io370(input.define, true && _exceptionable)) && (undefined === input.decorators || "object" === typeof input.decorators && null !== input.decorators && false === Array.isArray(input.decorators) && _io371(input.decorators, true && _exceptionable)) && (null !== input.transformImport && (undefined === input.transformImport || "function" === typeof input.transformImport || Array.isArray(input.transformImport) && input.transformImport.every((elem, _index304) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && _io372(elem, true && _exceptionable))))) && (undefined === input.tsconfigPath || "string" === typeof input.tsconfigPath) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "aliasStrategy", "assetsInclude", "include", "entry", "exclude", "preEntry", "define", "decorators", "transformImport", "tsconfigPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io368 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index305) => "string" === typeof elem) || "object" === typeof value && null !== value && _io369(value, true && _exceptionable)));
}); const _io369 = (input, _exceptionable = true) => null !== input["import"] && undefined !== input["import"] && ("string" === typeof input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index306) => "string" === typeof elem)) && (undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime) && (null !== input.publicPath && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath)) && (undefined === input.baseUri || "string" === typeof input.baseUri) && (undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading) && (undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks) && (undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading) && (null !== input.filename && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename)) && (undefined === input.library || "object" === typeof input.library && null !== input.library && _io113(input.library, true && _exceptionable)) && (null !== input.dependOn && (undefined === input.dependOn || "string" === typeof input.dependOn || Array.isArray(input.dependOn) && input.dependOn.every((elem, _index307) => "string" === typeof elem))) && (null === input.layer || undefined === input.layer || "string" === typeof input.layer) && (undefined === input.html || "boolean" === typeof input.html) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "runtime", "publicPath", "baseUri", "chunkLoading", "asyncChunks", "wasmLoading", "filename", "library", "dependOn", "layer", "html"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io370 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return true;
}); const _io371 = (input, _exceptionable = true) => (undefined === input.version || "legacy" === input.version || "2022-03" === input.version) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io372 = (input, _exceptionable = true) => "string" === typeof input.libraryName && (undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory) && (undefined === input.style || "string" === typeof input.style || "boolean" === typeof input.style) && (undefined === input.styleLibraryDirectory || "string" === typeof input.styleLibraryDirectory) && (undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName) && (undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport) && true && true && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["libraryName", "libraryDirectory", "style", "styleLibraryDirectory", "camelToDashComponentName", "transformToDefaultImport", "customName", "customStyleName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io373 = (input, _exceptionable = true) => (undefined === input.target || "node" === input.target || "web" === input.target || "web-worker" === input.target) && (null !== input.externals && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.every((elem, _index308) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io128(elem, true && _exceptionable))) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _io128(input.externals, true && _exceptionable)))) && (undefined === input.distPath || "object" === typeof input.distPath && null !== input.distPath && false === Array.isArray(input.distPath) && _io374(input.distPath, true && _exceptionable)) && (undefined === input.filename || "object" === typeof input.filename && null !== input.filename && false === Array.isArray(input.filename) && _io375(input.filename, true && _exceptionable)) && (undefined === input.charset || "ascii" === input.charset || "utf8" === input.charset) && (undefined === input.polyfill || "entry" === input.polyfill || "usage" === input.polyfill || "off" === input.polyfill) && (undefined === input.assetPrefix || "string" === typeof input.assetPrefix) && (null !== input.dataUriLimit && (undefined === input.dataUriLimit || "number" === typeof input.dataUriLimit || "object" === typeof input.dataUriLimit && null !== input.dataUriLimit && false === Array.isArray(input.dataUriLimit) && _io376(input.dataUriLimit, true && _exceptionable))) && (undefined === input.legalComments || "none" === input.legalComments || "inline" === input.legalComments || "linked" === input.legalComments) && (null !== input.cleanDistPath && (undefined === input.cleanDistPath || "auto" === input.cleanDistPath || "boolean" === typeof input.cleanDistPath || "object" === typeof input.cleanDistPath && null !== input.cleanDistPath && false === Array.isArray(input.cleanDistPath) && _io377(input.cleanDistPath, true && _exceptionable))) && (undefined === input.cssModules || "object" === typeof input.cssModules && null !== input.cssModules && false === Array.isArray(input.cssModules) && _io378(input.cssModules, true && _exceptionable)) && (null !== input.minify && (undefined === input.minify || "boolean" === typeof input.minify || "object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) && _io379(input.minify, true && _exceptionable))) && (null !== input.manifest && (undefined === input.manifest || "string" === typeof input.manifest || "boolean" === typeof input.manifest || "object" === typeof input.manifest && null !== input.manifest && false === Array.isArray(input.manifest) && _io389(input.manifest, true && _exceptionable))) && (null !== input.sourceMap && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap || "object" === typeof input.sourceMap && null !== input.sourceMap && false === Array.isArray(input.sourceMap) && _io390(input.sourceMap, true && _exceptionable))) && (undefined === input.filenameHash || "string" === typeof input.filenameHash || "boolean" === typeof input.filenameHash) && (null !== input.inlineScripts && (undefined === input.inlineScripts || "function" === typeof input.inlineScripts || "boolean" === typeof input.inlineScripts || input.inlineScripts instanceof RegExp || "object" === typeof input.inlineScripts && null !== input.inlineScripts && _io391(input.inlineScripts, true && _exceptionable))) && (null !== input.inlineStyles && (undefined === input.inlineStyles || "function" === typeof input.inlineStyles || "boolean" === typeof input.inlineStyles || input.inlineStyles instanceof RegExp || "object" === typeof input.inlineStyles && null !== input.inlineStyles && _io391(input.inlineStyles, true && _exceptionable))) && (undefined === input.injectStyles || "boolean" === typeof input.injectStyles) && (undefined === input.overrideBrowserslist || Array.isArray(input.overrideBrowserslist) && input.overrideBrowserslist.every((elem, _index309) => "string" === typeof elem)) && (null !== input.copy && (undefined === input.copy || (Array.isArray(input.copy) && input.copy.every((elem, _index310) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io393(elem, true && _exceptionable))) || "object" === typeof input.copy && null !== input.copy && _io392(input.copy, true && _exceptionable)))) && (undefined === input.emitAssets || "boolean" === typeof input.emitAssets) && (undefined === input.emitCss || "boolean" === typeof input.emitCss) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["target", "externals", "distPath", "filename", "charset", "polyfill", "assetPrefix", "dataUriLimit", "legalComments", "cleanDistPath", "cssModules", "minify", "manifest", "sourceMap", "filenameHash", "inlineScripts", "inlineStyles", "injectStyles", "overrideBrowserslist", "copy", "emitAssets", "emitCss"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io374 = (input, _exceptionable = true) => (undefined === input.root || "string" === typeof input.root) && (undefined === input.js || "string" === typeof input.js) && (undefined === input.jsAsync || "string" === typeof input.jsAsync) && (undefined === input.css || "string" === typeof input.css) && (undefined === input.cssAsync || "string" === typeof input.cssAsync) && (undefined === input.svg || "string" === typeof input.svg) && (undefined === input.font || "string" === typeof input.font) && (undefined === input.html || "string" === typeof input.html) && (undefined === input.wasm || "string" === typeof input.wasm) && (undefined === input.image || "string" === typeof input.image) && (undefined === input.media || "string" === typeof input.media) && (undefined === input.assets || "string" === typeof input.assets) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["root", "js", "jsAsync", "css", "cssAsync", "svg", "font", "html", "wasm", "image", "media", "assets"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io375 = (input, _exceptionable = true) => (undefined === input.html || "string" === typeof input.html) && (null !== input.js && (undefined === input.js || "function" === typeof input.js || "string" === typeof input.js)) && (null !== input.css && (undefined === input.css || "function" === typeof input.css || "string" === typeof input.css)) && (null !== input.svg && (undefined === input.svg || "function" === typeof input.svg || "string" === typeof input.svg)) && (null !== input.font && (undefined === input.font || "function" === typeof input.font || "string" === typeof input.font)) && (null !== input.image && (undefined === input.image || "function" === typeof input.image || "string" === typeof input.image)) && (null !== input.media && (undefined === input.media || "function" === typeof input.media || "string" === typeof input.media)) && (null !== input.assets && (undefined === input.assets || "function" === typeof input.assets || "string" === typeof input.assets)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["html", "js", "css", "svg", "font", "image", "media", "assets"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io376 = (input, _exceptionable = true) => (undefined === input.svg || "number" === typeof input.svg) && (undefined === input.font || "number" === typeof input.font) && (undefined === input.image || "number" === typeof input.image) && (undefined === input.media || "number" === typeof input.media) && (undefined === input.assets || "number" === typeof input.assets) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["svg", "font", "image", "media", "assets"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io377 = (input, _exceptionable = true) => (undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable) && (undefined === input.keep || Array.isArray(input.keep) && input.keep.every((elem, _index311) => elem instanceof RegExp)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["enable", "keep"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io378 = (input, _exceptionable = true) => null !== input.auto && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp) && (undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals) && (undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (null !== input.mode && (undefined === input.mode || "function" === typeof input.mode || "local" === input.mode || "global" === input.mode || "pure" === input.mode || "icss" === input.mode)) && (undefined === input.namedExport || "boolean" === typeof input.namedExport) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["auto", "exportGlobals", "exportLocalsConvention", "localIdentName", "mode", "namedExport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io379 = (input, _exceptionable = true) => (undefined === input.js || "boolean" === typeof input.js) && (undefined === input.jsOptions || "object" === typeof input.jsOptions && null !== input.jsOptions && false === Array.isArray(input.jsOptions) && _io380(input.jsOptions, true && _exceptionable)) && (undefined === input.css || "boolean" === typeof input.css) && (undefined === input.cssOptions || "object" === typeof input.cssOptions && null !== input.cssOptions && false === Array.isArray(input.cssOptions) && _io387(input.cssOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["js", "jsOptions", "css", "cssOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io380 = (input, _exceptionable = true) => null !== input.test && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || Array.isArray(input.test) && input.test.every((elem, _index312) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (null !== input.exclude && (undefined === input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || Array.isArray(input.exclude) && input.exclude.every((elem, _index313) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (null !== input.include && (undefined === input.include || "string" === typeof input.include || input.include instanceof RegExp || Array.isArray(input.include) && input.include.every((elem, _index314) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (null !== input.extractComments && (undefined === input.extractComments || "boolean" === typeof input.extractComments || input.extractComments instanceof RegExp || "object" === typeof input.extractComments && null !== input.extractComments && false === Array.isArray(input.extractComments) && _io381(input.extractComments, true && _exceptionable))) && (undefined === input.minimizerOptions || "object" === typeof input.minimizerOptions && null !== input.minimizerOptions && false === Array.isArray(input.minimizerOptions) && _io382(input.minimizerOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["test", "exclude", "include", "extractComments", "minimizerOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io381 = (input, _exceptionable = true) => null !== input.condition && (undefined === input.condition || "boolean" === typeof input.condition || input.condition instanceof RegExp) && (undefined === input.banner || "string" === typeof input.banner || "boolean" === typeof input.banner) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["condition", "banner"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io382 = (input, _exceptionable = true) => (undefined === input.minify || "boolean" === typeof input.minify) && (null !== input.compress && (undefined === input.compress || "boolean" === typeof input.compress || "object" === typeof input.compress && null !== input.compress && false === Array.isArray(input.compress) && _io383(input.compress, true && _exceptionable))) && (null !== input.mangle && (undefined === input.mangle || "boolean" === typeof input.mangle || "object" === typeof input.mangle && null !== input.mangle && false === Array.isArray(input.mangle) && _io384(input.mangle, true && _exceptionable))) && (undefined === input.format || "object" === typeof input.format && null !== input.format && false === Array.isArray(input.format) && _io386(input.format, true && _exceptionable)) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["minify", "compress", "mangle", "format", "module"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io383 = (input, _exceptionable = true) => (undefined === input.arguments || "boolean" === typeof input.arguments) && (undefined === input.arrows || "boolean" === typeof input.arrows) && (undefined === input.booleans || "boolean" === typeof input.booleans) && (undefined === input.booleans_as_integers || "boolean" === typeof input.booleans_as_integers) && (undefined === input.collapse_vars || "boolean" === typeof input.collapse_vars) && (undefined === input.comparisons || "boolean" === typeof input.comparisons) && (undefined === input.computed_props || "boolean" === typeof input.computed_props) && (undefined === input.conditionals || "boolean" === typeof input.conditionals) && (undefined === input.dead_code || "boolean" === typeof input.dead_code) && (undefined === input.defaults || "boolean" === typeof input.defaults) && (undefined === input.directives || "boolean" === typeof input.directives) && (undefined === input.drop_console || "boolean" === typeof input.drop_console) && (undefined === input.drop_debugger || "boolean" === typeof input.drop_debugger) && (undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma) && (undefined === input.evaluate || "boolean" === typeof input.evaluate) && (undefined === input.expression || "boolean" === typeof input.expression) && true && (undefined === input.hoist_funs || "boolean" === typeof input.hoist_funs) && (undefined === input.hoist_props || "boolean" === typeof input.hoist_props) && (undefined === input.hoist_vars || "boolean" === typeof input.hoist_vars) && (undefined === input.ie8 || "boolean" === typeof input.ie8) && (undefined === input.if_return || "boolean" === typeof input.if_return) && (undefined === input.inline || 0 === input.inline || 1 === input.inline || 2 === input.inline || 3 === input.inline) && (undefined === input.join_vars || "boolean" === typeof input.join_vars) && (undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames) && (undefined === input.keep_fargs || "boolean" === typeof input.keep_fargs) && (undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames) && (undefined === input.keep_infinity || "boolean" === typeof input.keep_infinity) && (undefined === input.loops || "boolean" === typeof input.loops) && (undefined === input.negate_iife || "boolean" === typeof input.negate_iife) && (undefined === input.passes || "number" === typeof input.passes) && (undefined === input.properties || "boolean" === typeof input.properties) && true && (undefined === input.pure_funcs || Array.isArray(input.pure_funcs) && input.pure_funcs.every((elem, _index315) => "string" === typeof elem)) && (undefined === input.reduce_funcs || "boolean" === typeof input.reduce_funcs) && (undefined === input.reduce_vars || "boolean" === typeof input.reduce_vars) && true && (undefined === input.side_effects || "boolean" === typeof input.side_effects) && (undefined === input.switches || "boolean" === typeof input.switches) && true && true && (undefined === input.typeofs || "boolean" === typeof input.typeofs) && (undefined === input.unsafe || "boolean" === typeof input.unsafe) && (undefined === input.unsafe_passes || "boolean" === typeof input.unsafe_passes) && (undefined === input.unsafe_arrows || "boolean" === typeof input.unsafe_arrows) && (undefined === input.unsafe_comps || "boolean" === typeof input.unsafe_comps) && (undefined === input.unsafe_function || "boolean" === typeof input.unsafe_function) && (undefined === input.unsafe_math || "boolean" === typeof input.unsafe_math) && (undefined === input.unsafe_symbols || "boolean" === typeof input.unsafe_symbols) && (undefined === input.unsafe_methods || "boolean" === typeof input.unsafe_methods) && (undefined === input.unsafe_proto || "boolean" === typeof input.unsafe_proto) && (undefined === input.unsafe_regexp || "boolean" === typeof input.unsafe_regexp) && (undefined === input.unsafe_undefined || "boolean" === typeof input.unsafe_undefined) && (undefined === input.unused || "boolean" === typeof input.unused) && (undefined === input.const_to_let || "boolean" === typeof input.const_to_let) && (undefined === input["module"] || "boolean" === typeof input["module"]) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["arguments", "arrows", "booleans", "booleans_as_integers", "collapse_vars", "comparisons", "computed_props", "conditionals", "dead_code", "defaults", "directives", "drop_console", "drop_debugger", "ecma", "evaluate", "expression", "global_defs", "hoist_funs", "hoist_props", "hoist_vars", "ie8", "if_return", "inline", "join_vars", "keep_classnames", "keep_fargs", "keep_fnames", "keep_infinity", "loops", "negate_iife", "passes", "properties", "pure_getters", "pure_funcs", "reduce_funcs", "reduce_vars", "sequences", "side_effects", "switches", "top_retain", "toplevel", "typeofs", "unsafe", "unsafe_passes", "unsafe_arrows", "unsafe_comps", "unsafe_function", "unsafe_math", "unsafe_symbols", "unsafe_methods", "unsafe_proto", "unsafe_regexp", "unsafe_undefined", "unused", "const_to_let", "module"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io384 = (input, _exceptionable = true) => (undefined === input.props || "object" === typeof input.props && null !== input.props && false === Array.isArray(input.props) && _io385(input.props, true && _exceptionable)) && (undefined === input.toplevel || "boolean" === typeof input.toplevel) && (undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames) && (undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames) && (undefined === input.keep_private_props || "boolean" === typeof input.keep_private_props) && (undefined === input.ie8 || "boolean" === typeof input.ie8) && (undefined === input.safari10 || "boolean" === typeof input.safari10) && (undefined === input.reserved || Array.isArray(input.reserved) && input.reserved.every((elem, _index316) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["props", "toplevel", "keep_classnames", "keep_fnames", "keep_private_props", "ie8", "safari10", "reserved"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io385 = (input, _exceptionable = true) => 0 === Object.keys(input).length || Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
}); const _io386 = (input, _exceptionable = true) => (undefined === input.asciiOnly || "boolean" === typeof input.asciiOnly) && (undefined === input.beautify || "boolean" === typeof input.beautify) && (undefined === input.braces || "boolean" === typeof input.braces) && (undefined === input.comments || false === input.comments || "some" === input.comments || "all" === input.comments) && (undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma) && (undefined === input.indentLevel || "number" === typeof input.indentLevel) && (undefined === input.indentStart || "number" === typeof input.indentStart) && (undefined === input.inlineScript || "number" === typeof input.inlineScript) && (undefined === input.keepNumbers || "number" === typeof input.keepNumbers) && (undefined === input.keepQuotedProps || "boolean" === typeof input.keepQuotedProps) && (undefined === input.maxLineLen || false === input.maxLineLen || "number" === typeof input.maxLineLen) && (undefined === input.preamble || "string" === typeof input.preamble) && (undefined === input.quoteKeys || "boolean" === typeof input.quoteKeys) && (undefined === input.quoteStyle || "boolean" === typeof input.quoteStyle) && (undefined === input.preserveAnnotations || "boolean" === typeof input.preserveAnnotations) && (undefined === input.safari10 || "boolean" === typeof input.safari10) && (undefined === input.semicolons || "boolean" === typeof input.semicolons) && (undefined === input.shebang || "boolean" === typeof input.shebang) && (undefined === input.webkit || "boolean" === typeof input.webkit) && (undefined === input.wrapIife || "boolean" === typeof input.wrapIife) && (undefined === input.wrapFuncArgs || "boolean" === typeof input.wrapFuncArgs) && (undefined === input.ascii_only || "boolean" === typeof input.ascii_only) && (undefined === input.indent_level || "number" === typeof input.indent_level) && (undefined === input.indent_start || "number" === typeof input.indent_start) && (undefined === input.inline_script || "number" === typeof input.inline_script) && (undefined === input.keep_numbers || "number" === typeof input.keep_numbers) && (undefined === input.keep_quoted_props || "boolean" === typeof input.keep_quoted_props) && (undefined === input.max_line_len || false === input.max_line_len || "number" === typeof input.max_line_len) && (undefined === input.quote_keys || "boolean" === typeof input.quote_keys) && (undefined === input.quote_style || "boolean" === typeof input.quote_style) && (undefined === input.preserve_annotations || "boolean" === typeof input.preserve_annotations) && (undefined === input.wrap_iife || "boolean" === typeof input.wrap_iife) && (undefined === input.wrap_func_args || "boolean" === typeof input.wrap_func_args) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["asciiOnly", "beautify", "braces", "comments", "ecma", "indentLevel", "indentStart", "inlineScript", "keepNumbers", "keepQuotedProps", "maxLineLen", "preamble", "quoteKeys", "quoteStyle", "preserveAnnotations", "safari10", "semicolons", "shebang", "webkit", "wrapIife", "wrapFuncArgs", "ascii_only", "indent_level", "indent_start", "inline_script", "keep_numbers", "keep_quoted_props", "max_line_len", "quote_keys", "quote_style", "preserve_annotations", "wrap_iife", "wrap_func_args"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io387 = (input, _exceptionable = true) => null !== input.test && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || Array.isArray(input.test) && input.test.every((elem, _index317) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (null !== input.include && (undefined === input.include || "string" === typeof input.include || input.include instanceof RegExp || Array.isArray(input.include) && input.include.every((elem, _index318) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (null !== input.exclude && (undefined === input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || Array.isArray(input.exclude) && input.exclude.every((elem, _index319) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.removeUnusedLocalIdents || "boolean" === typeof input.removeUnusedLocalIdents) && (undefined === input.minimizerOptions || "object" === typeof input.minimizerOptions && null !== input.minimizerOptions && false === Array.isArray(input.minimizerOptions) && _io388(input.minimizerOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["test", "include", "exclude", "removeUnusedLocalIdents", "minimizerOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io388 = (input, _exceptionable = true) => (undefined === input.errorRecovery || "boolean" === typeof input.errorRecovery) && (null !== input.targets && (undefined === input.targets || "string" === typeof input.targets || Array.isArray(input.targets) && input.targets.every((elem, _index320) => "string" === typeof elem))) && (undefined === input.include || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _io103(input.include, true && _exceptionable)) && (undefined === input.exclude || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _io103(input.exclude, true && _exceptionable)) && (undefined === input.draft || "object" === typeof input.draft && null !== input.draft && false === Array.isArray(input.draft) && _io104(input.draft, true && _exceptionable)) && (undefined === input.drafts || "object" === typeof input.drafts && null !== input.drafts && false === Array.isArray(input.drafts) && _io104(input.drafts, true && _exceptionable)) && (undefined === input.nonStandard || "object" === typeof input.nonStandard && null !== input.nonStandard && false === Array.isArray(input.nonStandard) && _io105(input.nonStandard, true && _exceptionable)) && (undefined === input.pseudoClasses || "object" === typeof input.pseudoClasses && null !== input.pseudoClasses && false === Array.isArray(input.pseudoClasses) && _io106(input.pseudoClasses, true && _exceptionable)) && (undefined === input.unusedSymbols || Array.isArray(input.unusedSymbols) && input.unusedSymbols.every((elem, _index321) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["errorRecovery", "targets", "include", "exclude", "draft", "drafts", "nonStandard", "pseudoClasses", "unusedSymbols"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io389 = (input, _exceptionable = true) => (undefined === input.filename || "string" === typeof input.filename) && (undefined === input.generate || true) && (undefined === input.filter || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["filename", "generate", "filter"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io390 = (input, _exceptionable = true) => (undefined === input.js || true === _iv322.has(input.js)) && (undefined === input.css || "boolean" === typeof input.css) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["js", "css"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io391 = (input, _exceptionable = true) => (undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable) && (null !== input.test && undefined !== input.test && ("function" === typeof input.test || input.test instanceof RegExp)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["enable", "test"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io392 = (input, _exceptionable = true) => Array.isArray(input.patterns) && input.patterns.every((elem, _index323) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io393(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["patterns"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io393 = (input, _exceptionable = true) => "string" === typeof input.from && (null !== input.to && (undefined === input.to || "function" === typeof input.to || "string" === typeof input.to)) && (undefined === input.context || "string" === typeof input.context) && (undefined === input.toType || "string" === typeof input.toType) && (undefined === input.noErrorOnMissing || "boolean" === typeof input.noErrorOnMissing) && (undefined === input.force || "boolean" === typeof input.force) && (undefined === input.priority || "number" === typeof input.priority) && (undefined === input.globOptions || "object" === typeof input.globOptions && null !== input.globOptions && false === Array.isArray(input.globOptions) && _io394(input.globOptions, true && _exceptionable)) && (undefined === input.info || "object" === typeof input.info && null !== input.info && false === Array.isArray(input.info) && _io395(input.info, true && _exceptionable)) && (undefined === input.transform || true) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["from", "to", "context", "toType", "noErrorOnMissing", "force", "priority", "globOptions", "info", "transform"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io394 = (input, _exceptionable = true) => (undefined === input.caseSensitiveMatch || "boolean" === typeof input.caseSensitiveMatch) && (undefined === input.dot || "boolean" === typeof input.dot) && (undefined === input.ignore || Array.isArray(input.ignore) && input.ignore.every((elem, _index324) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["caseSensitiveMatch", "dot", "ignore"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io395 = (input, _exceptionable = true) => (undefined === input.immutable || "boolean" === typeof input.immutable) && (undefined === input.minimized || "boolean" === typeof input.minimized) && (undefined === input.chunkHash || Array.isArray(input.chunkHash) && input.chunkHash.every((elem, _index325) => "string" === typeof elem)) && (undefined === input.contentHash || Array.isArray(input.contentHash) && input.contentHash.every((elem, _index326) => "string" === typeof elem)) && (undefined === input.development || "boolean" === typeof input.development) && (undefined === input.hotModuleReplacement || "boolean" === typeof input.hotModuleReplacement) && (undefined === input.related || "object" === typeof input.related && null !== input.related && false === Array.isArray(input.related) && _io396(input.related, true && _exceptionable)) && (undefined === input.version || "string" === typeof input.version) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["immutable", "minimized", "chunkHash", "contentHash", "development", "hotModuleReplacement", "related", "version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io396 = (input, _exceptionable = true) => (undefined === input.sourceMap || "string" === typeof input.sourceMap) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["sourceMap"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io397 = (input, _exceptionable = true) => (undefined === input.nonce || "string" === typeof input.nonce) && (undefined === input.sri || "object" === typeof input.sri && null !== input.sri && false === Array.isArray(input.sri) && _io398(input.sri, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["nonce", "sri"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io398 = (input, _exceptionable = true) => (undefined === input.algorithm || "sha256" === input.algorithm || "sha384" === input.algorithm || "sha512" === input.algorithm) && (undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["algorithm", "enable"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io399 = (input, _exceptionable = true) => null !== input.removeConsole && (undefined === input.removeConsole || "boolean" === typeof input.removeConsole || Array.isArray(input.removeConsole) && input.removeConsole.every((elem, _index327) => "log" === elem || "warn" === elem || "error" === elem || "info" === elem || "table" === elem || "group" === elem)) && (undefined === input.removeMomentLocale || "boolean" === typeof input.removeMomentLocale) && (null !== input.buildCache && (undefined === input.buildCache || "boolean" === typeof input.buildCache || "object" === typeof input.buildCache && null !== input.buildCache && false === Array.isArray(input.buildCache) && _io400(input.buildCache, true && _exceptionable))) && (null !== input.printFileSize && (undefined === input.printFileSize || "boolean" === typeof input.printFileSize || "object" === typeof input.printFileSize && null !== input.printFileSize && false === Array.isArray(input.printFileSize) && _io401(input.printFileSize, true && _exceptionable))) && (undefined === input.chunkSplit || "object" === typeof input.chunkSplit && null !== input.chunkSplit && false === Array.isArray(input.chunkSplit) && _iu23(input.chunkSplit, true && _exceptionable)) && (undefined === input.bundleAnalyze || "object" === typeof input.bundleAnalyze && null !== input.bundleAnalyze && false === Array.isArray(input.bundleAnalyze) && _io406(input.bundleAnalyze, true && _exceptionable)) && (undefined === input.preconnect || Array.isArray(input.preconnect) && input.preconnect.every((elem, _index328) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io407(elem, true && _exceptionable)))) && (undefined === input.dnsPrefetch || Array.isArray(input.dnsPrefetch) && input.dnsPrefetch.every((elem, _index329) => "string" === typeof elem)) && (null !== input.preload && (undefined === input.preload || true === input.preload || "object" === typeof input.preload && null !== input.preload && false === Array.isArray(input.preload) && _io408(input.preload, true && _exceptionable))) && (null !== input.prefetch && (undefined === input.prefetch || true === input.prefetch || "object" === typeof input.prefetch && null !== input.prefetch && false === Array.isArray(input.prefetch) && _io409(input.prefetch, true && _exceptionable))) && (undefined === input.profile || "boolean" === typeof input.profile) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["removeConsole", "removeMomentLocale", "buildCache", "printFileSize", "chunkSplit", "bundleAnalyze", "preconnect", "dnsPrefetch", "preload", "prefetch", "profile"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io400 = (input, _exceptionable = true) => (undefined === input.cacheDirectory || "string" === typeof input.cacheDirectory) && (undefined === input.cacheDigest || Array.isArray(input.cacheDigest) && input.cacheDigest.every((elem, _index330) => undefined === elem || "string" === typeof elem)) && (undefined === input.buildDependencies || Array.isArray(input.buildDependencies) && input.buildDependencies.every((elem, _index331) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["cacheDirectory", "cacheDigest", "buildDependencies"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io401 = (input, _exceptionable = true) => (undefined === input.total || "boolean" === typeof input.total) && (undefined === input.detail || "boolean" === typeof input.detail) && (undefined === input.compressed || "boolean" === typeof input.compressed) && (undefined === input.include || true) && (undefined === input.exclude || true) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["total", "detail", "compressed", "include", "exclude"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io402 = (input, _exceptionable = true) => (undefined === input.strategy || "all-in-one" === input.strategy || "split-by-module" === input.strategy || "split-by-experience" === input.strategy || "single-vendor" === input.strategy) && (null !== input.forceSplitting && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.every((elem, _index332) => elem instanceof RegExp) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _io403(input.forceSplitting, true && _exceptionable)))) && (null !== input.override && (undefined === input.override || false === input.override || "object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) && _io144(input.override, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "forceSplitting", "override"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io403 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return value instanceof RegExp;
}); const _io404 = (input, _exceptionable = true) => "split-by-size" === input.strategy && (undefined === input.minSize || "number" === typeof input.minSize) && (undefined === input.maxSize || "number" === typeof input.maxSize) && (null !== input.forceSplitting && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.every((elem, _index333) => elem instanceof RegExp) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _io403(input.forceSplitting, true && _exceptionable)))) && (null !== input.override && (undefined === input.override || false === input.override || "object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) && _io144(input.override, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "minSize", "maxSize", "forceSplitting", "override"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io405 = (input, _exceptionable = true) => "custom" === input.strategy && (null !== input.splitChunks && (undefined === input.splitChunks || false === input.splitChunks || "object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) && _io144(input.splitChunks, true && _exceptionable))) && (null !== input.forceSplitting && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.every((elem, _index334) => elem instanceof RegExp) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _io403(input.forceSplitting, true && _exceptionable)))) && (null !== input.override && (undefined === input.override || false === input.override || "object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) && _io144(input.override, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "splitChunks", "forceSplitting", "override"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io406 = (input, _exceptionable = true) => (undefined === input.analyzerMode || "server" === input.analyzerMode || "static" === input.analyzerMode || "json" === input.analyzerMode || "disabled" === input.analyzerMode) && (undefined === input.analyzerHost || "string" === typeof input.analyzerHost) && (undefined === input.analyzerPort || "auto" === input.analyzerPort || "number" === typeof input.analyzerPort) && (undefined === input.analyzerUrl || true) && (undefined === input.reportFilename || "string" === typeof input.reportFilename) && (null !== input.reportTitle && (undefined === input.reportTitle || "function" === typeof input.reportTitle || "string" === typeof input.reportTitle)) && (undefined === input.defaultSizes || "stat" === input.defaultSizes || "gzip" === input.defaultSizes || "parsed" === input.defaultSizes) && (undefined === input.openAnalyzer || "boolean" === typeof input.openAnalyzer) && (undefined === input.generateStatsFile || "boolean" === typeof input.generateStatsFile) && (undefined === input.statsFilename || "string" === typeof input.statsFilename) && (null === input.statsOptions || undefined === input.statsOptions || "none" === input.statsOptions || "verbose" === input.statsOptions || "normal" === input.statsOptions || "errors-only" === input.statsOptions || "errors-warnings" === input.statsOptions || "minimal" === input.statsOptions || "boolean" === typeof input.statsOptions || "object" === typeof input.statsOptions && null !== input.statsOptions && false === Array.isArray(input.statsOptions) && _io160(input.statsOptions, true && _exceptionable)) && (null === input.excludeAssets || undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || Array.isArray(input.excludeAssets) && input.excludeAssets.every((elem, _index335) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp))) && (undefined === input.logLevel || "warn" === input.logLevel || "error" === input.logLevel || "info" === input.logLevel || "silent" === input.logLevel) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["analyzerMode", "analyzerHost", "analyzerPort", "analyzerUrl", "reportFilename", "reportTitle", "defaultSizes", "openAnalyzer", "generateStatsFile", "statsFilename", "statsOptions", "excludeAssets", "logLevel"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io407 = (input, _exceptionable = true) => "string" === typeof input.href && (undefined === input.crossorigin || "boolean" === typeof input.crossorigin) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["href", "crossorigin"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io408 = (input, _exceptionable = true) => (undefined === input.type || "initial" === input.type || "async-chunks" === input.type || "all-assets" === input.type || "all-chunks" === input.type) && (null !== input.include && (undefined === input.include || "function" === typeof input.include || Array.isArray(input.include) && input.include.every((elem, _index336) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (null !== input.exclude && (undefined === input.exclude || "function" === typeof input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index337) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (undefined === input.dedupe || "boolean" === typeof input.dedupe) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "include", "exclude", "dedupe"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io409 = (input, _exceptionable = true) => (undefined === input.type || "initial" === input.type || "async-chunks" === input.type || "all-assets" === input.type || "all-chunks" === input.type) && (null !== input.include && (undefined === input.include || "function" === typeof input.include || Array.isArray(input.include) && input.include.every((elem, _index338) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (null !== input.exclude && (undefined === input.exclude || "function" === typeof input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index339) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "include", "exclude"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io410 = (input, _exceptionable = true) => "object" === typeof input.options && null !== input.options && _io411(input.options, true && _exceptionable) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["options"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io411 = (input, _exceptionable = true) => (undefined === input.runtimePlugins || Array.isArray(input.runtimePlugins) && input.runtimePlugins.every((elem, _index340) => "string" === typeof elem)) && (undefined === input.implementation || "string" === typeof input.implementation) && (undefined === input.shareStrategy || "version-first" === input.shareStrategy || "loaded-first" === input.shareStrategy) && "string" === typeof input.name && (undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime) && (undefined === input.filename || "string" === typeof input.filename) && (undefined === input.library || "object" === typeof input.library && null !== input.library && _io113(input.library, true && _exceptionable)) && (null !== input.exposes && (undefined === input.exposes || (Array.isArray(input.exposes) && input.exposes.every((elem, _index341) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io412(elem, true && _exceptionable))) || "object" === typeof input.exposes && null !== input.exposes && false === Array.isArray(input.exposes) && _io412(input.exposes, true && _exceptionable)))) && (undefined === input.remoteType || true === _iv342.has(input.remoteType)) && (null !== input.remotes && (undefined === input.remotes || (Array.isArray(input.remotes) && input.remotes.every((elem, _index343) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io414(elem, true && _exceptionable))) || "object" === typeof input.remotes && null !== input.remotes && false === Array.isArray(input.remotes) && _io414(input.remotes, true && _exceptionable)))) && (undefined === input.shareScope || "string" === typeof input.shareScope) && (null !== input.shared && (undefined === input.shared || (Array.isArray(input.shared) && input.shared.every((elem, _index344) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io416(elem, true && _exceptionable))) || "object" === typeof input.shared && null !== input.shared && false === Array.isArray(input.shared) && _io416(input.shared, true && _exceptionable)))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["runtimePlugins", "implementation", "shareStrategy", "name", "runtime", "filename", "library", "exposes", "remoteType", "remotes", "shareScope", "shared"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io412 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index345) => "string" === typeof elem) || "object" === typeof value && null !== value && _io413(value, true && _exceptionable)));
}); const _io413 = (input, _exceptionable = true) => null !== input["import"] && undefined !== input["import"] && ("string" === typeof input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index346) => "string" === typeof elem)) && (undefined === input.name || "string" === typeof input.name) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io414 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index347) => "string" === typeof elem) || "object" === typeof value && null !== value && _io415(value, true && _exceptionable)));
}); const _io415 = (input, _exceptionable = true) => null !== input.external && undefined !== input.external && ("string" === typeof input.external || Array.isArray(input.external) && input.external.every((elem, _index348) => "string" === typeof elem)) && (undefined === input.shareScope || "string" === typeof input.shareScope) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["external", "shareScope"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io416 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io417(value, true && _exceptionable));
}); const _io417 = (input, _exceptionable = true) => (undefined === input.eager || "boolean" === typeof input.eager) && (undefined === input["import"] || false === input["import"] || "string" === typeof input["import"]) && (undefined === input.packageName || "string" === typeof input.packageName) && (undefined === input.requiredVersion || false === input.requiredVersion || "string" === typeof input.requiredVersion) && (undefined === input.shareKey || "string" === typeof input.shareKey) && (undefined === input.shareScope || "string" === typeof input.shareScope) && (undefined === input.singleton || "boolean" === typeof input.singleton) && (undefined === input.strictVersion || "boolean" === typeof input.strictVersion) && (undefined === input.version || false === input.version || "string" === typeof input.version) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["eager", "import", "packageName", "requiredVersion", "shareKey", "shareScope", "singleton", "strictVersion", "version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io418 = (input, _exceptionable = true) => "string" === typeof input.name && (undefined === input.pre || Array.isArray(input.pre) && input.pre.every((elem, _index349) => "string" === typeof elem)) && (undefined === input.post || Array.isArray(input.post) && input.post.every((elem, _index350) => "string" === typeof elem)) && (undefined === input.remove || Array.isArray(input.remove) && input.remove.every((elem, _index351) => "string" === typeof elem)) && true && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "pre", "post", "remove", "setup"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io419 = (input, _exceptionable = true) => "string" === typeof input["__@toStringTag@729"] && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["__@toStringTag@729"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io420 = (input, _exceptionable = true) => (undefined === input.assetPrefix || "string" === typeof input.assetPrefix) && (undefined === input.cleanDistPath || "boolean" === typeof input.cleanDistPath) && (null !== input.copy && (undefined === input.copy || (Array.isArray(input.copy) && input.copy.every((elem, _index352) => null !== elem && undefined !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && _io393(elem, true && _exceptionable))) || "object" === typeof input.copy && null !== input.copy && _io392(input.copy, true && _exceptionable)))) && (undefined === input.cssModules || "object" === typeof input.cssModules && null !== input.cssModules && false === Array.isArray(input.cssModules) && _io421(input.cssModules, true && _exceptionable)) && (undefined === input.dataUriLimit || "number" === typeof input.dataUriLimit) && (undefined === input.distPath || "object" === typeof input.distPath && null !== input.distPath && false === Array.isArray(input.distPath) && _io422(input.distPath, true && _exceptionable)) && (null !== input.filename && (undefined === input.filename || "string" === typeof input.filename || "object" === typeof input.filename && null !== input.filename && false === Array.isArray(input.filename) && _io423(input.filename, true && _exceptionable))) && (undefined === input.filenameHash || "string" === typeof input.filenameHash || "boolean" === typeof input.filenameHash) && (undefined === input.legalComments || "none" === input.legalComments || "inline" === input.legalComments || "linked" === input.legalComments) && (null !== input.minify && (undefined === input.minify || "boolean" === typeof input.minify || "object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) && _io424(input.minify, true && _exceptionable))) && (null !== input.sourceMap && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap || "object" === typeof input.sourceMap && null !== input.sourceMap && false === Array.isArray(input.sourceMap) && _io425(input.sourceMap, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["assetPrefix", "cleanDistPath", "copy", "cssModules", "dataUriLimit", "distPath", "filename", "filenameHash", "legalComments", "minify", "sourceMap"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io421 = (input, _exceptionable = true) => null !== input.auto && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp) && (undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals) && (undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["auto", "exportGlobals", "exportLocalsConvention", "localIdentName"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io422 = (input, _exceptionable = true) => (undefined === input.root || "string" === typeof input.root) && (undefined === input.css || "string" === typeof input.css) && (undefined === input.cssAsync || "string" === typeof input.cssAsync) && (undefined === input.intermediate || "string" === typeof input.intermediate) && (undefined === input.js || "string" === typeof input.js) && (undefined === input.jsAsync || "string" === typeof input.jsAsync) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["root", "css", "cssAsync", "intermediate", "js", "jsAsync"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io423 = (input, _exceptionable = true) => (undefined === input.bundle || "string" === typeof input.bundle) && (undefined === input.template || "string" === typeof input.template) && (undefined === input.js || "string" === typeof input.js) && (undefined === input.css || "string" === typeof input.css) && (undefined === input.svg || "string" === typeof input.svg) && (undefined === input.font || "string" === typeof input.font) && (undefined === input.image || "string" === typeof input.image) && (undefined === input.media || "string" === typeof input.media) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["bundle", "template", "js", "css", "svg", "font", "image", "media"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io424 = (input, _exceptionable = true) => (undefined === input.css || "boolean" === typeof input.css) && (undefined === input.js || "boolean" === typeof input.js) && (undefined === input.jsOptions || "object" === typeof input.jsOptions && null !== input.jsOptions && false === Array.isArray(input.jsOptions) && _io380(input.jsOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["css", "js", "jsOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io425 = (input, _exceptionable = true) => (undefined === input.js || true === _iv353.has(input.js)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["js"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io426 = (input, _exceptionable = true) => (undefined === input.chunkSplit || "object" === typeof input.chunkSplit && null !== input.chunkSplit && false === Array.isArray(input.chunkSplit) && _iu24(input.chunkSplit, true && _exceptionable)) && (null !== input.removeConsole && (undefined === input.removeConsole || "boolean" === typeof input.removeConsole || Array.isArray(input.removeConsole) && input.removeConsole.every((elem, _index354) => "string" === typeof elem))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["chunkSplit", "removeConsole"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io427 = (input, _exceptionable = true) => (undefined === input.strategy || "all-in-one" === input.strategy || "split-by-module" === input.strategy || "split-by-experience" === input.strategy || "single-vendor" === input.strategy) && (null !== input.override && (undefined === input.override || false === input.override || "object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) && _io144(input.override, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "override"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io428 = (input, _exceptionable = true) => "split-by-size" === input.strategy && (undefined === input.minSize || "number" === typeof input.minSize) && (undefined === input.maxSize || "number" === typeof input.maxSize) && (null !== input.override && (undefined === input.override || false === input.override || "object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) && _io144(input.override, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "minSize", "maxSize", "override"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io429 = (input, _exceptionable = true) => "custom" === input.strategy && (null !== input.splitChunks && (undefined === input.splitChunks || false === input.splitChunks || "object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) && _io144(input.splitChunks, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["strategy", "splitChunks"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io430 = (input, _exceptionable = true) => (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io153(input.headers, true && _exceptionable)) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.port || "number" === typeof input.port) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["headers", "host", "port"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io431 = (input, _exceptionable = true) => (undefined === input.alias || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _io432(input.alias, true && _exceptionable)) && (null !== input.assetsInclude && (undefined === input.assetsInclude || "function" === typeof input.assetsInclude || "string" === typeof input.assetsInclude || input.assetsInclude instanceof RegExp || (Array.isArray(input.assetsInclude) && (_ia0(input.assetsInclude, true && _exceptionable) || false) || "object" === typeof input.assetsInclude && null !== input.assetsInclude && false === Array.isArray(input.assetsInclude) && _io207(input.assetsInclude, true && _exceptionable)))) && (undefined === input.decorators || "object" === typeof input.decorators && null !== input.decorators && false === Array.isArray(input.decorators) && _io433(input.decorators, true && _exceptionable)) && (undefined === input.define || "object" === typeof input.define && null !== input.define && false === Array.isArray(input.define) && _io434(input.define, true && _exceptionable)) && (null !== input.entry && (undefined === input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.every((elem, _index355) => "string" === typeof elem) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _io435(input.entry, true && _exceptionable)))) && (undefined === input.exclude || Array.isArray(input.exclude) && input.exclude.every((elem, _index356) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia0(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io207(elem, true && _exceptionable))))) && (undefined === input.include || Array.isArray(input.include) && input.include.every((elem, _index357) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia0(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io207(elem, true && _exceptionable))))) && (undefined === input.transformImport || Array.isArray(input.transformImport) && input.transformImport.every((elem, _index358) => "object" === typeof elem && null !== elem && _io437(elem, true && _exceptionable))) && (undefined === input.tsconfigPath || "string" === typeof input.tsconfigPath) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["alias", "assetsInclude", "decorators", "define", "entry", "exclude", "include", "transformImport", "tsconfigPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io432 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && (false === value || "string" === typeof value || Array.isArray(value) && value.every((elem, _index359) => "string" === typeof elem));
}); const _io433 = (input, _exceptionable = true) => (undefined === input.version || "legacy" === input.version || "2022-03" === input.version) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["version"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io434 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && (undefined === value || "string" === typeof value || "number" === typeof value || "boolean" === typeof value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io39(value, true && _exceptionable));
}); const _io435 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || (Array.isArray(value) && value.every((elem, _index360) => "string" === typeof elem) || "object" === typeof value && null !== value && false === Array.isArray(value) && _io436(value, true && _exceptionable)));
}); const _io436 = (input, _exceptionable = true) => null !== input["import"] && (undefined === input["import"] || "string" === typeof input["import"] || Array.isArray(input["import"]) && input["import"].every((elem, _index361) => "string" === typeof elem)) && (undefined === input.publicPath || "string" === typeof input.publicPath) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["import", "publicPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io437 = (input, _exceptionable = true) => (undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName) && (undefined === input.customName || "string" === typeof input.customName) && "string" === typeof input.libraryName && (undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory) && (undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["camelToDashComponentName", "customName", "libraryName", "libraryDirectory", "transformToDefaultImport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io438 = (input, _exceptionable = true) => null !== input.bundlerChain && (undefined === input.bundlerChain || "function" === typeof input.bundlerChain || Array.isArray(input.bundlerChain) && input.bundlerChain.every((elem, _index362) => true)) && (undefined === input.cssLoader || "object" === typeof input.cssLoader && null !== input.cssLoader && false === Array.isArray(input.cssLoader) && _io439(input.cssLoader, true && _exceptionable)) && (undefined === input.cssExtract || "object" === typeof input.cssExtract && null !== input.cssExtract && false === Array.isArray(input.cssExtract) && _io441(input.cssExtract, true && _exceptionable)) && (undefined === input.rsdoctor || "object" === typeof input.rsdoctor && null !== input.rsdoctor && false === Array.isArray(input.rsdoctor) && _io444(input.rsdoctor, true && _exceptionable)) && (null !== input.rspack && (undefined === input.rspack || "function" === typeof input.rspack || (Array.isArray(input.rspack) && input.rspack.every((elem, _index363) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io110(elem, true && _exceptionable))) || "object" === typeof input.rspack && null !== input.rspack && false === Array.isArray(input.rspack) && _io110(input.rspack, true && _exceptionable)))) && (null !== input.swc && (undefined === input.swc || "function" === typeof input.swc || (Array.isArray(input.swc) && input.swc.every((elem, _index364) => null !== elem && undefined !== elem && ("function" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io70(elem, true && _exceptionable))) || "object" === typeof input.swc && null !== input.swc && false === Array.isArray(input.swc) && _io70(input.swc, true && _exceptionable)))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["bundlerChain", "cssLoader", "cssExtract", "rsdoctor", "rspack", "swc"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io439 = (input, _exceptionable = true) => (undefined === input.importLoaders || 0 === input.importLoaders || 1 === input.importLoaders || 2 === input.importLoaders) && (null !== input.modules && (undefined === input.modules || "boolean" === typeof input.modules || "object" === typeof input.modules && null !== input.modules && false === Array.isArray(input.modules) && _io440(input.modules, true && _exceptionable))) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["importLoaders", "modules"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io440 = (input, _exceptionable = true) => null !== input.auto && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp) && (undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention) && (undefined === input.localIdentName || "string" === typeof input.localIdentName) && (undefined === input.namedExport || "boolean" === typeof input.namedExport) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["auto", "exportLocalsConvention", "localIdentName", "namedExport"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io441 = (input, _exceptionable = true) => (undefined === input.loaderOptions || "object" === typeof input.loaderOptions && null !== input.loaderOptions && false === Array.isArray(input.loaderOptions) && _io442(input.loaderOptions, true && _exceptionable)) && (undefined === input.pluginOptions || "object" === typeof input.pluginOptions && null !== input.pluginOptions && false === Array.isArray(input.pluginOptions) && _io443(input.pluginOptions, true && _exceptionable)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["loaderOptions", "pluginOptions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io442 = (input, _exceptionable = true) => (undefined === input.esModule || "boolean" === typeof input.esModule) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["esModule"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io443 = (input, _exceptionable = true) => (undefined === input.ignoreOrder || "boolean" === typeof input.ignoreOrder) && (undefined === input.pathinfo || "boolean" === typeof input.pathinfo) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ignoreOrder", "pathinfo"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io444 = (input, _exceptionable = true) => (undefined === input.linter || "object" === typeof input.linter && null !== input.linter && false === Array.isArray(input.linter) && _io445(input.linter, true && _exceptionable)) && (null !== input.features && (undefined === input.features || (Array.isArray(input.features) && input.features.every((elem, _index365) => "loader" === elem || "bundle" === elem || "plugins" === elem || "resolver" === elem || "treeShaking" === elem || "lite" === elem) || "object" === typeof input.features && null !== input.features && false === Array.isArray(input.features) && _io451(input.features, true && _exceptionable)))) && (undefined === input.mode || "normal" === input.mode || "lite" === input.mode || "brief" === input.mode) && (undefined === input.loaderInterceptorOptions || "object" === typeof input.loaderInterceptorOptions && null !== input.loaderInterceptorOptions && false === Array.isArray(input.loaderInterceptorOptions) && _io452(input.loaderInterceptorOptions, true && _exceptionable)) && (undefined === input.disableClientServer || "boolean" === typeof input.disableClientServer) && (undefined === input.sdkInstance || "object" === typeof input.sdkInstance && null !== input.sdkInstance && _io453(input.sdkInstance, true && _exceptionable)) && (undefined === input.supports || "object" === typeof input.supports && null !== input.supports && false === Array.isArray(input.supports) && _io465(input.supports, true && _exceptionable)) && (undefined === input.reportDir || "string" === typeof input.reportDir) && (undefined === input.reportCodeType || "object" === typeof input.reportCodeType && null !== input.reportCodeType && false === Array.isArray(input.reportCodeType) && _io466(input.reportCodeType, true && _exceptionable)) && (undefined === input.port || "number" === typeof input.port) && (undefined === input.printLog || "object" === typeof input.printLog && null !== input.printLog && _io456(input.printLog, true && _exceptionable)) && (undefined === input.brief || "object" === typeof input.brief && null !== input.brief && _io457(input.brief, true && _exceptionable)) && (undefined === input.disableTOSUpload || "boolean" === typeof input.disableTOSUpload) && (undefined === input.innerClientPath || "string" === typeof input.innerClientPath) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["linter", "features", "mode", "loaderInterceptorOptions", "disableClientServer", "sdkInstance", "supports", "reportDir", "reportCodeType", "port", "printLog", "brief", "disableTOSUpload", "innerClientPath"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io445 = (input, _exceptionable = true) => (undefined === input.rules || "object" === typeof input.rules && null !== input.rules && false === Array.isArray(input.rules) && _io446(input.rules, true && _exceptionable)) && (undefined === input.level || "Ignore" === input.level || "Warn" === input.level || "Error" === input.level) && (undefined === input["extends"] || Array.isArray(input["extends"]) && input["extends"].length === 0) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["rules", "level", "extends"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io446 = (input, _exceptionable = true) => null !== input["duplicate-package"] && (undefined === input["duplicate-package"] || "off" === input["duplicate-package"] || "on" === input["duplicate-package"] || "Ignore" === input["duplicate-package"] || "Warn" === input["duplicate-package"] || "Error" === input["duplicate-package"] || Array.isArray(input["duplicate-package"]) && (input["duplicate-package"].length === 2 && ("off" === input["duplicate-package"][0] || "on" === input["duplicate-package"][0] || "Ignore" === input["duplicate-package"][0] || "Warn" === input["duplicate-package"][0] || "Error" === input["duplicate-package"][0]) && ("object" === typeof input["duplicate-package"][1] && null !== input["duplicate-package"][1] && _io447(input["duplicate-package"][1], true && _exceptionable)))) && (null !== input["default-import-check"] && (undefined === input["default-import-check"] || "off" === input["default-import-check"] || "on" === input["default-import-check"] || "Ignore" === input["default-import-check"] || "Warn" === input["default-import-check"] || "Error" === input["default-import-check"] || Array.isArray(input["default-import-check"]) && (input["default-import-check"].length === 2 && ("off" === input["default-import-check"][0] || "on" === input["default-import-check"][0] || "Ignore" === input["default-import-check"][0] || "Warn" === input["default-import-check"][0] || "Error" === input["default-import-check"][0]) && ("object" === typeof input["default-import-check"][1] && null !== input["default-import-check"][1] && _io448(input["default-import-check"][1], true && _exceptionable))))) && (null !== input["loader-performance-optimization"] && (undefined === input["loader-performance-optimization"] || "off" === input["loader-performance-optimization"] || "on" === input["loader-performance-optimization"] || "Ignore" === input["loader-performance-optimization"] || "Warn" === input["loader-performance-optimization"] || "Error" === input["loader-performance-optimization"] || Array.isArray(input["loader-performance-optimization"]) && (input["loader-performance-optimization"].length === 2 && ("off" === input["loader-performance-optimization"][0] || "on" === input["loader-performance-optimization"][0] || "Ignore" === input["loader-performance-optimization"][0] || "Warn" === input["loader-performance-optimization"][0] || "Error" === input["loader-performance-optimization"][0]) && ("object" === typeof input["loader-performance-optimization"][1] && null !== input["loader-performance-optimization"][1] && _io449(input["loader-performance-optimization"][1], true && _exceptionable))))) && (null !== input["ecma-version-check"] && (undefined === input["ecma-version-check"] || "off" === input["ecma-version-check"] || "on" === input["ecma-version-check"] || "Ignore" === input["ecma-version-check"] || "Warn" === input["ecma-version-check"] || "Error" === input["ecma-version-check"] || Array.isArray(input["ecma-version-check"]) && (input["ecma-version-check"].length === 2 && ("off" === input["ecma-version-check"][0] || "on" === input["ecma-version-check"][0] || "Ignore" === input["ecma-version-check"][0] || "Warn" === input["ecma-version-check"][0] || "Error" === input["ecma-version-check"][0]) && ("object" === typeof input["ecma-version-check"][1] && null !== input["ecma-version-check"][1] && _io450(input["ecma-version-check"][1], true && _exceptionable))))) && Object.keys(input).every(key => {
    if (["duplicate-package", "default-import-check", "loader-performance-optimization", "ecma-version-check"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("off" === value || "on" === value || "Ignore" === value || "Warn" === value || "Error" === value || Array.isArray(value) && (value.length === 2 && ("off" === value[0] || "on" === value[0] || "Ignore" === value[0] || "Warn" === value[0] || "Error" === value[0]) && true));
}); const _io447 = (input, _exceptionable = true) => ("null" === input.checkVersion || "prerelease" === input.checkVersion || "prepatch" === input.checkVersion || "patch" === input.checkVersion || "preminor" === input.checkVersion || "minor" === input.checkVersion || "premajor" === input.checkVersion || "major" === input.checkVersion) && (Array.isArray(input.ignore) && input.ignore.every((elem, _index366) => "string" === typeof elem)) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["checkVersion", "ignore"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io448 = (input, _exceptionable = true) => Array.isArray(input.ignore) && input.ignore.every((elem, _index367) => "string" === typeof elem) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ignore"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io449 = (input, _exceptionable = true) => Array.isArray(input.ignore) && input.ignore.every((elem, _index368) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp)) && "number" === typeof input.threshold && (Array.isArray(input.extensions) && input.extensions.every((elem, _index369) => null !== elem && undefined !== elem && ("string" === typeof elem || elem instanceof RegExp))) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["ignore", "threshold", "extensions"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io450 = (input, _exceptionable = true) => ("ES5" === input.highestVersion || "ES6" === input.highestVersion || "ES7+" === input.highestVersion) && (Array.isArray(input.ignore) && input.ignore.every((elem, _index370) => "string" === typeof elem)) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["highestVersion", "ignore"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io451 = (input, _exceptionable = true) => (undefined === input.loader || "boolean" === typeof input.loader) && (undefined === input.plugins || "boolean" === typeof input.plugins) && (undefined === input.resolver || "boolean" === typeof input.resolver) && (undefined === input.bundle || "boolean" === typeof input.bundle) && (undefined === input.treeShaking || "boolean" === typeof input.treeShaking) && (undefined === input.lite || "boolean" === typeof input.lite) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["loader", "plugins", "resolver", "bundle", "treeShaking", "lite"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io452 = (input, _exceptionable = true) => (undefined === input.skipLoaders || Array.isArray(input.skipLoaders) && input.skipLoaders.every((elem, _index371) => "string" === typeof elem)) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["skipLoaders"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io453 = (input, _exceptionable = true) => "object" === typeof input.server && null !== input.server && _io454(input.server, true && _exceptionable) && (undefined === input.extraConfig || "object" === typeof input.extraConfig && null !== input.extraConfig && _io455(input.extraConfig, true && _exceptionable)) && (0 === input.type || 1 === input.type || 2 === input.type || 3 === input.type || 4 === input.type) && true && true && true && true && true && true && true && true && true && true && true && true && true && "string" === typeof input._name && "string" === typeof input.hash && "string" === typeof input.root && "number" === typeof input.pid && ("object" === typeof input.hooks && null !== input.hooks && _io458(input.hooks, true && _exceptionable)) && ("object" === typeof input._envinfo && null !== input._envinfo && _io460(input._envinfo, true && _exceptionable)) && true && true && "string" === typeof input.diskManifestPath && (undefined === input.cloudData || "object" === typeof input.cloudData && null !== input.cloudData && _io461(input.cloudData, true && _exceptionable)) && (24 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["server", "extraConfig", "type", "_summary", "_configs", "_errors", "_loader", "_loaderStart", "_resolver", "_plugin", "_moduleGraph", "_chunkGraph", "_rawSourceMapCache", "_sourceMap", "_packageGraph", "_tileReportHtml", "_name", "hash", "root", "pid", "hooks", "_envinfo", "_clientRoutes", "_outputDir", "diskManifestPath", "cloudData"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io454 = (input, _exceptionable = true) => "number" === typeof input.port && true && true && true && (4 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["port", "get", "post", "dispose"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io455 = (input, _exceptionable = true) => "boolean" === typeof input.disableTOSUpload && (undefined === input.innerClientPath || "string" === typeof input.innerClientPath) && (undefined === input.disableClientServer || "boolean" === typeof input.disableClientServer) && (undefined === input.noServer || "boolean" === typeof input.noServer) && (undefined === input.printLog || "object" === typeof input.printLog && null !== input.printLog && _io456(input.printLog, true && _exceptionable)) && (undefined === input.mode || "normal" === input.mode || "lite" === input.mode || "brief" === input.mode) && (undefined === input.brief || "object" === typeof input.brief && null !== input.brief && _io457(input.brief, true && _exceptionable)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["disableTOSUpload", "innerClientPath", "disableClientServer", "noServer", "printLog", "mode", "brief"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io456 = (input, _exceptionable = true) => "boolean" === typeof input.serverUrls && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["serverUrls"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io457 = (input, _exceptionable = true) => (undefined === input.reportHtmlName || "string" === typeof input.reportHtmlName) && "boolean" === typeof input.writeDataJson && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["reportHtmlName", "writeDataJson"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io458 = (input, _exceptionable = true) => "object" === typeof input.afterSaveManifest && null !== input.afterSaveManifest && _io459(input.afterSaveManifest, true && _exceptionable) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["afterSaveManifest"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io459 = (input, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name) && (Array.isArray(input.taps) && input.taps.every((elem, _index372) => "object" === typeof elem && null !== elem && _io292(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "taps"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io460 = (input, _exceptionable = true) => "string" === typeof input.os && "string" === typeof input.cpu && "string" === typeof input.memory && "string" === typeof input.nodeVersion && "string" === typeof input.yarnVersion && "string" === typeof input.npmVersion && "string" === typeof input.pnpmVersion && Object.keys(input).every(key => {
    if (["os", "cpu", "memory", "nodeVersion", "yarnVersion", "npmVersion", "pnpmVersion"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io461 = (input, _exceptionable = true) => "object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) && _io462(input.data, true && _exceptionable) && (undefined === input.cloudData || "object" === typeof input.cloudData && null !== input.cloudData && false === Array.isArray(input.cloudData) && _io462(input.cloudData, true && _exceptionable)) && (undefined === input.__LOCAL__SERVER__ || "boolean" === typeof input.__LOCAL__SERVER__) && (undefined === input.__SOCKET__PORT__ || "string" === typeof input.__SOCKET__PORT__) && (undefined === input.__SOCKET__URL__ || "string" === typeof input.__SOCKET__URL__) && (undefined === input.name || "string" === typeof input.name) && ("object" === typeof input.client && null !== input.client && _io463(input.client, true && _exceptionable)) && (undefined === input.cloudManifestUrl || "string" === typeof input.cloudManifestUrl) && (undefined === input.series || Array.isArray(input.series) && input.series.every((elem, _index373) => "object" === typeof elem && null !== elem && _io464(elem, true && _exceptionable))) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["data", "cloudData", "__LOCAL__SERVER__", "__SOCKET__PORT__", "__SOCKET__URL__", "name", "client", "cloudManifestUrl", "series"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io462 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || Array.isArray(value) && value.every((elem, _index374) => "string" === typeof elem));
}); const _io463 = (input, _exceptionable = true) => Array.isArray(input.enableRoutes) && input.enableRoutes.every((elem, _index376) => "Overall" === elem || "Compile.WebpackLoaders" === elem || "Compile.ModuleResolve" === elem || "Compile.WebpackPlugins" === elem || "Bundle.BundleSize" === elem || "Bundle.ModuleGraph" === elem || "Bundle.TreeShaking" === elem) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["enableRoutes"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io464 = (input, _exceptionable = true) => "string" === typeof input.name && "string" === typeof input.path && "number" === typeof input.stage && (undefined === input.origin || "string" === typeof input.origin) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "path", "stage", "origin"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io465 = (input, _exceptionable = true) => (undefined === input.banner || "boolean" === typeof input.banner) && (undefined === input.parseBundle || "boolean" === typeof input.parseBundle) && (undefined === input.generateTileGraph || "boolean" === typeof input.generateTileGraph) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["banner", "parseBundle", "generateTileGraph"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _io466 = (input, _exceptionable = true) => (undefined === input.noModuleSource || "boolean" === typeof input.noModuleSource) && (undefined === input.noAssetsAndModuleSource || "boolean" === typeof input.noAssetsAndModuleSource) && (undefined === input.noCode || "boolean" === typeof input.noCode) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["noModuleSource", "noAssetsAndModuleSource", "noCode"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const _iu0 = (input, _exceptionable = true) => (() => {
    if (undefined !== input["__@toStringTag@729"])
        return _io27(input, true && _exceptionable);
    else if (undefined !== input.pem)
        return _io28(input, true && _exceptionable);
    else
        return false;
})(); const _iu1 = (input, _exceptionable = true) => (() => {
    if (undefined !== input["__@toStringTag@729"])
        return _io27(input, true && _exceptionable);
    else if (undefined !== input.buf)
        return _io29(input, true && _exceptionable);
    else
        return false;
})(); const _iu2 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.plugins)
        return _io52(input, true && _exceptionable);
    else if (undefined !== input.postcssVersion)
        return _io61(input, true && _exceptionable);
    else if (true === input.postcss)
        return _io62(input, true && _exceptionable);
    else
        return (() => {
            if (undefined !== input.postcss)
                return _io60(input, true && _exceptionable);
            else if (undefined !== input.postcssPlugin)
                return _io53(input, true && _exceptionable);
            else if (undefined !== input.prototype)
                return _io58(input, true && _exceptionable);
            else
                return false;
        })();
})(); const _iu3 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.postcssVersion)
        return _io59(input, true && _exceptionable);
    else
        return (() => {
            if (undefined !== input.postcssPlugin)
                return _io53(input, true && _exceptionable);
            else if (undefined !== input.prototype)
                return _io58(input, true && _exceptionable);
            else
                return false;
        })();
})(); const _iu4 = (input, _exceptionable = true) => (() => {
    if (_io143(input, false && _exceptionable))
        return _io143(input, true && _exceptionable);
    if (_io142(input, false && _exceptionable))
        return _io142(input, true && _exceptionable);
    return false;
})(); const _iu5 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.name)
        return _io418(input, true && _exceptionable);
    else if (undefined !== input["__@toStringTag@729"])
        return _io419(input, true && _exceptionable);
    else
        return false;
})(); const _iu6 = (input, _exceptionable = true) => (() => {
    if (_io15(input, false && _exceptionable))
        return _io15(input, true && _exceptionable);
    if (_io26(input, false && _exceptionable))
        return _io26(input, true && _exceptionable);
    return false;
})(); const _iu7 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _io49(input, true && _exceptionable);
    else
        return _io50(input, true && _exceptionable);
})(); const _iu8 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _io51(input, true && _exceptionable);
    else
        return _io50(input, true && _exceptionable);
})(); const _iu9 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.plugins)
        return _io52(input, true && _exceptionable);
    else if (undefined !== input.prototype)
        return _io58(input, true && _exceptionable);
    else
        return false;
})(); const _iu10 = (input, _exceptionable = true) => (() => {
    if ("commonjs" === input.type)
        return _io93(input, true && _exceptionable);
    else if ("es6" === input.type)
        return _io92(input, true && _exceptionable);
    else if ("umd" === input.type)
        return _io94(input, true && _exceptionable);
    else if ("amd" === input.type)
        return _io96(input, true && _exceptionable);
    else if ("nodenext" === input.type)
        return _io97(input, true && _exceptionable);
    else if ("systemjs" === input.type)
        return _io98(input, true && _exceptionable);
    else
        return false;
})(); const _iu11 = (input, _exceptionable = true) => (() => {
    if ("typescript" === input.syntax)
        return _io74(input, true && _exceptionable);
    else if ("ecmascript" === input.syntax)
        return _io75(input, true && _exceptionable);
    else
        return false;
})(); const _iu12 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.type)
        return _io113(input, true && _exceptionable);
    else
        return _io115(input, true && _exceptionable);
})(); const _iu13 = (input, _exceptionable = true) => (() => {
    if ("memory" === input.type)
        return _io121(input, true && _exceptionable);
    else if ("persistent" === input.type)
        return _io122(input, true && _exceptionable);
    else
        return false;
})(); const _iu14 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.root)
        return _io129(input, true && _exceptionable);
    else
        return _io130(input, true && _exceptionable);
})(); const _iu15 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.protocol)
        return _io175(input, true && _exceptionable);
    else
        return _io174(input, true && _exceptionable);
})(); const _iu16 = (input, _exceptionable = true) => (() => {
    if ("number" === typeof input.port)
        return _io194(input, true && _exceptionable);
    else
        return _io192(input, true && _exceptionable);
})(); const _iu17 = (input, _exceptionable = true) => (() => {
    if (_io210(input, false && _exceptionable))
        return _io210(input, true && _exceptionable);
    if (_io218(input, false && _exceptionable))
        return _io218(input, true && _exceptionable);
    return false;
})(); const _iu18 = (input, _exceptionable = true) => (() => {
    if (_io219(input, false && _exceptionable))
        return _io219(input, true && _exceptionable);
    if (_io226(input, false && _exceptionable))
        return _io226(input, true && _exceptionable);
    return false;
})(); const _iu19 = (input, _exceptionable = true) => (() => {
    if ("filesystem" === input.type)
        return _io230(input, true && _exceptionable);
    else if ("memory" === input.type)
        return _io232(input, true && _exceptionable);
    else
        return false;
})(); const _iu20 = (input, _exceptionable = true) => (() => {
    if (_io15(input, false && _exceptionable))
        return _io15(input, true && _exceptionable);
    if (_io242(input, false && _exceptionable))
        return _io242(input, true && _exceptionable);
    return false;
})(); const _iu21 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _io23(input, true && _exceptionable);
    else
        return _io330(input, true && _exceptionable);
})(); const _iu22 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.type)
        return _io235(input, true && _exceptionable);
    else
        return _io237(input, true && _exceptionable);
})(); const _iu23 = (input, _exceptionable = true) => (() => {
    if ("split-by-size" === input.strategy)
        return _io404(input, true && _exceptionable);
    else if ("custom" === input.strategy)
        return _io405(input, true && _exceptionable);
    else
        return _io402(input, true && _exceptionable);
})(); const _iu24 = (input, _exceptionable = true) => (() => {
    if ("split-by-size" === input.strategy)
        return _io428(input, true && _exceptionable);
    else if ("custom" === input.strategy)
        return _io429(input, true && _exceptionable);
    else
        return _io427(input, true && _exceptionable);
})(); const _ia0 = (input, _exceptionable = true) => input.every((elem, _index377) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia0(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io207(elem, true && _exceptionable)))); const _ia1 = (input, _exceptionable = true) => input.every((elem, _index378) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia1(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io253(elem, true && _exceptionable)))); const _ia2 = (input, _exceptionable = true) => input.every((elem, _index379) => null !== elem && undefined !== elem && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_ia2(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io255(elem, true && _exceptionable)))); const _ia3 = (input, _exceptionable = true) => input.every((elem, _index380) => null === elem || undefined === elem || false === elem || (Array.isArray(elem) && (_ia3(elem, true && _exceptionable) || false) || "object" === typeof elem && null !== elem && _iu5(elem, true && _exceptionable))); const _vo0 = (input, _path, _exceptionable = true) => [true, undefined === input.dev || ("object" === typeof input.dev && null !== input.dev && false === Array.isArray(input.dev) || _report(_exceptionable, {
        path: _path + ".dev",
        expected: "(Dev | undefined)",
        value: input.dev
    })) && _vo1(input.dev, _path + ".dev", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dev",
        expected: "(Dev | undefined)",
        value: input.dev
    }), undefined === input.environments || ("object" === typeof input.environments && null !== input.environments && false === Array.isArray(input.environments) || _report(_exceptionable, {
        path: _path + ".environments",
        expected: "(__type | undefined)",
        value: input.environments
    })) && _vo7(input.environments, _path + ".environments", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".environments",
        expected: "(__type | undefined)",
        value: input.environments
    }), undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"development\" | \"none\" | \"production\" | undefined)",
        value: input.mode
    }), undefined === input.output || ("object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output.o2 | undefined)",
        value: input.output
    })) && _vo420(input.output, _path + ".output", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output.o2 | undefined)",
        value: input.output
    }), undefined === input.performance || ("object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(Performance | undefined)",
        value: input.performance
    })) && _vo426(input.performance, _path + ".performance", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(Performance | undefined)",
        value: input.performance
    }), undefined === input.server || ("object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(Server | undefined)",
        value: input.server
    })) && _vo430(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(Server | undefined)",
        value: input.server
    }), undefined === input.source || ("object" === typeof input.source && null !== input.source && false === Array.isArray(input.source) || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(Source | undefined)",
        value: input.source
    })) && _vo431(input.source, _path + ".source", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(Source | undefined)",
        value: input.source
    }), undefined === input.tools || ("object" === typeof input.tools && null !== input.tools && false === Array.isArray(input.tools) || _report(_exceptionable, {
        path: _path + ".tools",
        expected: "(Tools | undefined)",
        value: input.tools
    })) && _vo438(input.tools, _path + ".tools", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".tools",
        expected: "(Tools | undefined)",
        value: input.tools
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(RsbuildPlugins | undefined)",
        value: input.plugins
    })) && (_va3(input.plugins, _path + ".plugins", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "RsbuildPlugins",
        value: input.plugins
    })) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(RsbuildPlugins | undefined)",
        value: input.plugins
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["provider", "dev", "environments", "mode", "output", "performance", "server", "source", "tools", "plugins"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo1 = (input, _path, _exceptionable = true) => [undefined === input.assetPrefix || "string" === typeof input.assetPrefix || "boolean" === typeof input.assetPrefix || _report(_exceptionable, {
        path: _path + ".assetPrefix",
        expected: "(boolean | string | undefined)",
        value: input.assetPrefix
    }), undefined === input.client || ("object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(Client | undefined)",
        value: input.client
    })) && _vo2(input.client, _path + ".client", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(Client | undefined)",
        value: input.client
    }), (null !== input.watchFiles || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<WatchFiles> | WatchFiles | undefined)",
        value: input.watchFiles
    })) && (undefined === input.watchFiles || (Array.isArray(input.watchFiles) && input.watchFiles.map((elem, _index381) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".watchFiles[" + _index381 + "]",
        expected: "WatchFiles",
        value: elem
    })) && _vo3(elem, _path + ".watchFiles[" + _index381 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles[" + _index381 + "]",
        expected: "WatchFiles",
        value: elem
    })).every(flag => flag) || "object" === typeof input.watchFiles && null !== input.watchFiles && _vo3(input.watchFiles, _path + ".watchFiles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<WatchFiles> | WatchFiles | undefined)",
        value: input.watchFiles
    })) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<WatchFiles> | WatchFiles | undefined)",
        value: input.watchFiles
    })), (null !== input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })) && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assetPrefix", "client", "watchFiles", "writeToDisk"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo2 = (input, _path, _exceptionable = true) => [undefined === input.websocketTransport || "string" === typeof input.websocketTransport || _report(_exceptionable, {
        path: _path + ".websocketTransport",
        expected: "(string | undefined)",
        value: input.websocketTransport
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["websocketTransport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo3 = (input, _path, _exceptionable = true) => [(null !== input.paths || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && (undefined !== input.paths || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && ("string" === typeof input.paths || (Array.isArray(input.paths) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && input.paths.map((elem, _index382) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".paths[" + _index382 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Partial<BasicOpts & { ignored: Matcher | Matcher[]; awaitWriteFinish: boolean | Partial<AWF>; }> | undefined)",
        value: input.options
    })) && _vo4(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Partial<BasicOpts & { ignored: Matcher | Matcher[]; awaitWriteFinish: boolean | Partial<AWF>; }> | undefined)",
        value: input.options
    }), undefined === input.type || "reload-page" === input.type || "reload-server" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(\"reload-page\" | \"reload-server\" | undefined)",
        value: input.type
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["paths", "options", "type"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo4 = (input, _path, _exceptionable = true) => [undefined === input.persistent || "boolean" === typeof input.persistent || _report(_exceptionable, {
        path: _path + ".persistent",
        expected: "(boolean | undefined)",
        value: input.persistent
    }), undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial || _report(_exceptionable, {
        path: _path + ".ignoreInitial",
        expected: "(boolean | undefined)",
        value: input.ignoreInitial
    }), undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks || _report(_exceptionable, {
        path: _path + ".followSymlinks",
        expected: "(boolean | undefined)",
        value: input.followSymlinks
    }), undefined === input.cwd || "string" === typeof input.cwd || _report(_exceptionable, {
        path: _path + ".cwd",
        expected: "(string | undefined)",
        value: input.cwd
    }), undefined === input.usePolling || "boolean" === typeof input.usePolling || _report(_exceptionable, {
        path: _path + ".usePolling",
        expected: "(boolean | undefined)",
        value: input.usePolling
    }), undefined === input.interval || "number" === typeof input.interval || _report(_exceptionable, {
        path: _path + ".interval",
        expected: "(number | undefined)",
        value: input.interval
    }), undefined === input.binaryInterval || "number" === typeof input.binaryInterval || _report(_exceptionable, {
        path: _path + ".binaryInterval",
        expected: "(number | undefined)",
        value: input.binaryInterval
    }), undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat || _report(_exceptionable, {
        path: _path + ".alwaysStat",
        expected: "(boolean | undefined)",
        value: input.alwaysStat
    }), undefined === input.depth || "number" === typeof input.depth || _report(_exceptionable, {
        path: _path + ".depth",
        expected: "(number | undefined)",
        value: input.depth
    }), undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors || _report(_exceptionable, {
        path: _path + ".ignorePermissionErrors",
        expected: "(boolean | undefined)",
        value: input.ignorePermissionErrors
    }), undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic || _report(_exceptionable, {
        path: _path + ".atomic",
        expected: "(boolean | number | undefined)",
        value: input.atomic
    }), (null !== input.ignored || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<Matcher> | MatcherObject | RegExp | string | undefined)",
        value: input.ignored
    })) && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) && input.ignored.map((elem, _index383) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index383 + "]",
        expected: "(MatcherObject | RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index383 + "]",
        expected: "(MatcherObject | RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index383 + "]",
        expected: "(MatcherObject | RegExp | string)",
        value: elem
    })) && _vo5(elem, _path + ".ignored[" + _index383 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ignored[" + _index383 + "]",
        expected: "(MatcherObject | RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.ignored && null !== input.ignored && _vo5(input.ignored, _path + ".ignored", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<Matcher> | MatcherObject | RegExp | string | undefined)",
        value: input.ignored
    })) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<Matcher> | MatcherObject | RegExp | string | undefined)",
        value: input.ignored
    })), (null !== input.awaitWriteFinish || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(Partial<AWF> | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || ("object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(Partial<AWF> | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && _vo6(input.awaitWriteFinish, _path + ".awaitWriteFinish", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(Partial<AWF> | boolean | undefined)",
        value: input.awaitWriteFinish
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["persistent", "ignoreInitial", "followSymlinks", "cwd", "usePolling", "interval", "binaryInterval", "alwaysStat", "depth", "ignorePermissionErrors", "atomic", "ignored", "awaitWriteFinish"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo5 = (input, _path, _exceptionable = true) => ["string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "string",
        value: input.path
    }), undefined === input.recursive || "boolean" === typeof input.recursive || _report(_exceptionable, {
        path: _path + ".recursive",
        expected: "(boolean | undefined)",
        value: input.recursive
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["path", "recursive"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo6 = (input, _path, _exceptionable = true) => [undefined === input.stabilityThreshold || "number" === typeof input.stabilityThreshold || _report(_exceptionable, {
        path: _path + ".stabilityThreshold",
        expected: "(number | undefined)",
        value: input.stabilityThreshold
    }), undefined === input.pollInterval || "number" === typeof input.pollInterval || _report(_exceptionable, {
        path: _path + ".pollInterval",
        expected: "(number | undefined)",
        value: input.pollInterval
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["stabilityThreshold", "pollInterval"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo7 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "EnvironmentConfig",
            value: value
        })) && _vo8(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "EnvironmentConfig",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo8 = (input, _path, _exceptionable = true) => [undefined === input.dev || ("object" === typeof input.dev && null !== input.dev && false === Array.isArray(input.dev) || _report(_exceptionable, {
        path: _path + ".dev",
        expected: "(Pick<DevConfig, \"hmr\" | \"assetPrefix\" | \"progressBar\" | \"writeToDisk\" | \"lazyCompilation\"> | undefined)",
        value: input.dev
    })) && _vo9(input.dev, _path + ".dev", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dev",
        expected: "(Pick<DevConfig, \"hmr\" | \"assetPrefix\" | \"progressBar\" | \"writeToDisk\" | \"lazyCompilation\"> | undefined)",
        value: input.dev
    }), undefined === input.html || ("object" === typeof input.html && null !== input.html && false === Array.isArray(input.html) || _report(_exceptionable, {
        path: _path + ".html",
        expected: "(HtmlConfig | undefined)",
        value: input.html
    })) && _vo32(input.html, _path + ".html", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".html",
        expected: "(HtmlConfig | undefined)",
        value: input.html
    }), undefined === input.tools || ("object" === typeof input.tools && null !== input.tools && false === Array.isArray(input.tools) || _report(_exceptionable, {
        path: _path + ".tools",
        expected: "(ToolsConfig | undefined)",
        value: input.tools
    })) && _vo40(input.tools, _path + ".tools", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".tools",
        expected: "(ToolsConfig | undefined)",
        value: input.tools
    }), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveConfig | undefined)",
        value: input.resolve
    })) && _vo365(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveConfig | undefined)",
        value: input.resolve
    }), undefined === input.source || ("object" === typeof input.source && null !== input.source && false === Array.isArray(input.source) || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(SourceConfig | undefined)",
        value: input.source
    })) && _vo367(input.source, _path + ".source", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(SourceConfig | undefined)",
        value: input.source
    }), undefined === input.output || ("object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(OutputConfig | undefined)",
        value: input.output
    })) && _vo373(input.output, _path + ".output", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(OutputConfig | undefined)",
        value: input.output
    }), undefined === input.security || ("object" === typeof input.security && null !== input.security && false === Array.isArray(input.security) || _report(_exceptionable, {
        path: _path + ".security",
        expected: "(SecurityConfig | undefined)",
        value: input.security
    })) && _vo397(input.security, _path + ".security", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".security",
        expected: "(SecurityConfig | undefined)",
        value: input.security
    }), undefined === input.performance || ("object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(PerformanceConfig | undefined)",
        value: input.performance
    })) && _vo399(input.performance, _path + ".performance", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(PerformanceConfig | undefined)",
        value: input.performance
    }), undefined === input.moduleFederation || ("object" === typeof input.moduleFederation && null !== input.moduleFederation || _report(_exceptionable, {
        path: _path + ".moduleFederation",
        expected: "(ModuleFederationConfig | undefined)",
        value: input.moduleFederation
    })) && _vo410(input.moduleFederation, _path + ".moduleFederation", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".moduleFederation",
        expected: "(ModuleFederationConfig | undefined)",
        value: input.moduleFederation
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(RsbuildPlugins | undefined)",
        value: input.plugins
    })) && (_va3(input.plugins, _path + ".plugins", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "RsbuildPlugins",
        value: input.plugins
    })) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(RsbuildPlugins | undefined)",
        value: input.plugins
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dev", "html", "tools", "resolve", "source", "output", "security", "performance", "moduleFederation", "plugins"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo9 = (input, _path, _exceptionable = true) => [undefined === input.hmr || "boolean" === typeof input.hmr || _report(_exceptionable, {
        path: _path + ".hmr",
        expected: "(boolean | undefined)",
        value: input.hmr
    }), undefined === input.assetPrefix || "string" === typeof input.assetPrefix || "boolean" === typeof input.assetPrefix || _report(_exceptionable, {
        path: _path + ".assetPrefix",
        expected: "(boolean | string | undefined)",
        value: input.assetPrefix
    }), (null !== input.progressBar || _report(_exceptionable, {
        path: _path + ".progressBar",
        expected: "(ProgressBarConfig | boolean | undefined)",
        value: input.progressBar
    })) && (undefined === input.progressBar || "boolean" === typeof input.progressBar || ("object" === typeof input.progressBar && null !== input.progressBar && false === Array.isArray(input.progressBar) || _report(_exceptionable, {
        path: _path + ".progressBar",
        expected: "(ProgressBarConfig | boolean | undefined)",
        value: input.progressBar
    })) && _vo10(input.progressBar, _path + ".progressBar", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".progressBar",
        expected: "(ProgressBarConfig | boolean | undefined)",
        value: input.progressBar
    })), (null !== input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })) && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })), (null !== input.lazyCompilation || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })) && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || ("object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })) && _vo11(input.lazyCompilation, _path + ".lazyCompilation", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hmr", "assetPrefix", "progressBar", "writeToDisk", "lazyCompilation"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo10 = (input, _path, _exceptionable = true) => [undefined === input.id || "string" === typeof input.id || _report(_exceptionable, {
        path: _path + ".id",
        expected: "(string | undefined)",
        value: input.id
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["id"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo11 = (input, _path, _exceptionable = true) => [undefined === input.backend || ("object" === typeof input.backend && null !== input.backend && false === Array.isArray(input.backend) || _report(_exceptionable, {
        path: _path + ".backend",
        expected: "(LazyCompilationDefaultBackendOptions | undefined)",
        value: input.backend
    })) && _vo12(input.backend, _path + ".backend", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".backend",
        expected: "(LazyCompilationDefaultBackendOptions | undefined)",
        value: input.backend
    }), undefined === input.imports || "boolean" === typeof input.imports || _report(_exceptionable, {
        path: _path + ".imports",
        expected: "(boolean | undefined)",
        value: input.imports
    }), undefined === input.entries || "boolean" === typeof input.entries || _report(_exceptionable, {
        path: _path + ".entries",
        expected: "(boolean | undefined)",
        value: input.entries
    }), (null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | undefined)",
        value: input.test
    })) && (undefined === input.test || "function" === typeof input.test || input.test instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | undefined)",
        value: input.test
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["backend", "imports", "entries", "test"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo12 = (input, _path, _exceptionable = true) => [undefined === input.client || "string" === typeof input.client || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(string | undefined)",
        value: input.client
    }), (null !== input.listen || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })) && (undefined === input.listen || "function" === typeof input.listen || "number" === typeof input.listen || ("object" === typeof input.listen && null !== input.listen && false === Array.isArray(input.listen) || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })) && _vo13(input.listen, _path + ".listen", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })), undefined === input.protocol || "https" === input.protocol || "http" === input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(\"http\" | \"https\" | undefined)",
        value: input.protocol
    }), (null !== input.server || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse> | undefined)",
        value: input.server
    })) && (undefined === input.server || "function" === typeof input.server || ("object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse> | undefined)",
        value: input.server
    })) && _vu6(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse> | undefined)",
        value: input.server
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["client", "listen", "protocol", "server"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo13 = (input, _path, _exceptionable = true) => [undefined === input.backlog || "number" === typeof input.backlog || _report(_exceptionable, {
        path: _path + ".backlog",
        expected: "(number | undefined)",
        value: input.backlog
    }), undefined === input.exclusive || "boolean" === typeof input.exclusive || _report(_exceptionable, {
        path: _path + ".exclusive",
        expected: "(boolean | undefined)",
        value: input.exclusive
    }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(string | undefined)",
        value: input.host
    }), undefined === input.ipv6Only || "boolean" === typeof input.ipv6Only || _report(_exceptionable, {
        path: _path + ".ipv6Only",
        expected: "(boolean | undefined)",
        value: input.ipv6Only
    }), undefined === input.reusePort || "boolean" === typeof input.reusePort || _report(_exceptionable, {
        path: _path + ".reusePort",
        expected: "(boolean | undefined)",
        value: input.reusePort
    }), undefined === input.path || "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(string | undefined)",
        value: input.path
    }), undefined === input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | undefined)",
        value: input.port
    }), undefined === input.readableAll || "boolean" === typeof input.readableAll || _report(_exceptionable, {
        path: _path + ".readableAll",
        expected: "(boolean | undefined)",
        value: input.readableAll
    }), undefined === input.writableAll || "boolean" === typeof input.writableAll || _report(_exceptionable, {
        path: _path + ".writableAll",
        expected: "(boolean | undefined)",
        value: input.writableAll
    }), undefined === input.signal || ("object" === typeof input.signal && null !== input.signal || _report(_exceptionable, {
        path: _path + ".signal",
        expected: "(global.AbortSignal | undefined)",
        value: input.signal
    })) && _vo14(input.signal, _path + ".signal", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".signal",
        expected: "(global.AbortSignal | undefined)",
        value: input.signal
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["backlog", "exclusive", "host", "ipv6Only", "reusePort", "path", "port", "readableAll", "writableAll", "signal"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo14 = (input, _path, _exceptionable = true) => ["boolean" === typeof input.aborted || _report(_exceptionable, {
        path: _path + ".aborted",
        expected: "boolean",
        value: input.aborted
    }), true, null === input.onabort || true || _report(_exceptionable, {
        path: _path + ".onabort",
        expected: "null",
        value: input.onabort
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["aborted", "reason", "onabort"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo15 = (input, _path, _exceptionable = true) => [undefined === input.IncomingMessage || ("object" === typeof input.IncomingMessage && null !== input.IncomingMessage || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    })) && _vo16(input.IncomingMessage, _path + ".IncomingMessage", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    }), undefined === input.ServerResponse || ("object" === typeof input.ServerResponse && null !== input.ServerResponse || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    })) && _vo24(input.ServerResponse, _path + ".ServerResponse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    }), undefined === input.requestTimeout || "number" === typeof input.requestTimeout || _report(_exceptionable, {
        path: _path + ".requestTimeout",
        expected: "(number | undefined)",
        value: input.requestTimeout
    }), undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders || _report(_exceptionable, {
        path: _path + ".joinDuplicateHeaders",
        expected: "(boolean | undefined)",
        value: input.joinDuplicateHeaders
    }), undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout || _report(_exceptionable, {
        path: _path + ".keepAliveTimeout",
        expected: "(number | undefined)",
        value: input.keepAliveTimeout
    }), undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval || _report(_exceptionable, {
        path: _path + ".connectionsCheckingInterval",
        expected: "(number | undefined)",
        value: input.connectionsCheckingInterval
    }), undefined === input.highWaterMark || "number" === typeof input.highWaterMark || _report(_exceptionable, {
        path: _path + ".highWaterMark",
        expected: "(number | undefined)",
        value: input.highWaterMark
    }), undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser || _report(_exceptionable, {
        path: _path + ".insecureHTTPParser",
        expected: "(boolean | undefined)",
        value: input.insecureHTTPParser
    }), undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize || _report(_exceptionable, {
        path: _path + ".maxHeaderSize",
        expected: "(number | undefined)",
        value: input.maxHeaderSize
    }), undefined === input.noDelay || "boolean" === typeof input.noDelay || _report(_exceptionable, {
        path: _path + ".noDelay",
        expected: "(boolean | undefined)",
        value: input.noDelay
    }), undefined === input.keepAlive || "boolean" === typeof input.keepAlive || _report(_exceptionable, {
        path: _path + ".keepAlive",
        expected: "(boolean | undefined)",
        value: input.keepAlive
    }), undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay || _report(_exceptionable, {
        path: _path + ".keepAliveInitialDelay",
        expected: "(number | undefined)",
        value: input.keepAliveInitialDelay
    }), undefined === input.uniqueHeaders || (Array.isArray(input.uniqueHeaders) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    })) && input.uniqueHeaders.map((elem, _index384) => (null !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index384 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index384 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index384 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index385) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index384 + "][" + _index385 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index384 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "highWaterMark", "insecureHTTPParser", "maxHeaderSize", "noDelay", "keepAlive", "keepAliveInitialDelay", "uniqueHeaders"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo16 = (input, _path, _exceptionable = true) => [("object" === typeof input.prototype && null !== input.prototype || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"http\".IncomingMessage.o1",
        value: input.prototype
    })) && _vo17(input.prototype, _path + ".prototype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"http\".IncomingMessage.o1",
        value: input.prototype
    }), true, true, "boolean" === typeof input.captureRejections || _report(_exceptionable, {
        path: _path + ".captureRejections",
        expected: "boolean",
        value: input.captureRejections
    }), "number" === typeof input.defaultMaxListeners || _report(_exceptionable, {
        path: _path + ".defaultMaxListeners",
        expected: "number",
        value: input.defaultMaxListeners
    }), "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 9 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "errorMonitor", "captureRejectionSymbol", "captureRejections", "defaultMaxListeners", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo17 = (input, _path, _exceptionable = true) => ["boolean" === typeof input.aborted || _report(_exceptionable, {
        path: _path + ".aborted",
        expected: "boolean",
        value: input.aborted
    }), "string" === typeof input.httpVersion || _report(_exceptionable, {
        path: _path + ".httpVersion",
        expected: "string",
        value: input.httpVersion
    }), "number" === typeof input.httpVersionMajor || _report(_exceptionable, {
        path: _path + ".httpVersionMajor",
        expected: "number",
        value: input.httpVersionMajor
    }), "number" === typeof input.httpVersionMinor || _report(_exceptionable, {
        path: _path + ".httpVersionMinor",
        expected: "number",
        value: input.httpVersionMinor
    }), "boolean" === typeof input.complete || _report(_exceptionable, {
        path: _path + ".complete",
        expected: "boolean",
        value: input.complete
    }), ("object" === typeof input.connection && null !== input.connection || _report(_exceptionable, {
        path: _path + ".connection",
        expected: "\"net\".Socket",
        value: input.connection
    })) && _vo18(input.connection, _path + ".connection", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".connection",
        expected: "\"net\".Socket",
        value: input.connection
    }), ("object" === typeof input.socket && null !== input.socket || _report(_exceptionable, {
        path: _path + ".socket",
        expected: "\"net\".Socket",
        value: input.socket
    })) && _vo18(input.socket, _path + ".socket", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".socket",
        expected: "\"net\".Socket",
        value: input.socket
    }), ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "\"http\".IncomingHttpHeaders",
        value: input.headers
    })) && _vo20(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "\"http\".IncomingHttpHeaders",
        value: input.headers
    }), ("object" === typeof input.headersDistinct && null !== input.headersDistinct && false === Array.isArray(input.headersDistinct) || _report(_exceptionable, {
        path: _path + ".headersDistinct",
        expected: "global.NodeJS.Dict<Array<string>>",
        value: input.headersDistinct
    })) && _vo21(input.headersDistinct, _path + ".headersDistinct", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headersDistinct",
        expected: "global.NodeJS.Dict<Array<string>>",
        value: input.headersDistinct
    }), (Array.isArray(input.rawHeaders) || _report(_exceptionable, {
        path: _path + ".rawHeaders",
        expected: "Array<string>",
        value: input.rawHeaders
    })) && input.rawHeaders.map((elem, _index386) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".rawHeaders[" + _index386 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rawHeaders",
        expected: "Array<string>",
        value: input.rawHeaders
    }), ("object" === typeof input.trailers && null !== input.trailers && false === Array.isArray(input.trailers) || _report(_exceptionable, {
        path: _path + ".trailers",
        expected: "global.NodeJS.Dict<string>",
        value: input.trailers
    })) && _vo22(input.trailers, _path + ".trailers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".trailers",
        expected: "global.NodeJS.Dict<string>",
        value: input.trailers
    }), ("object" === typeof input.trailersDistinct && null !== input.trailersDistinct && false === Array.isArray(input.trailersDistinct) || _report(_exceptionable, {
        path: _path + ".trailersDistinct",
        expected: "global.NodeJS.Dict<Array<string>>",
        value: input.trailersDistinct
    })) && _vo21(input.trailersDistinct, _path + ".trailersDistinct", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".trailersDistinct",
        expected: "global.NodeJS.Dict<Array<string>>",
        value: input.trailersDistinct
    }), (Array.isArray(input.rawTrailers) || _report(_exceptionable, {
        path: _path + ".rawTrailers",
        expected: "Array<string>",
        value: input.rawTrailers
    })) && input.rawTrailers.map((elem, _index387) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".rawTrailers[" + _index387 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rawTrailers",
        expected: "Array<string>",
        value: input.rawTrailers
    }), undefined === input.method || "string" === typeof input.method || _report(_exceptionable, {
        path: _path + ".method",
        expected: "(string | undefined)",
        value: input.method
    }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(string | undefined)",
        value: input.url
    }), undefined === input.statusCode || "number" === typeof input.statusCode || _report(_exceptionable, {
        path: _path + ".statusCode",
        expected: "(number | undefined)",
        value: input.statusCode
    }), undefined === input.statusMessage || "string" === typeof input.statusMessage || _report(_exceptionable, {
        path: _path + ".statusMessage",
        expected: "(string | undefined)",
        value: input.statusMessage
    }), "boolean" === typeof input.readableAborted || _report(_exceptionable, {
        path: _path + ".readableAborted",
        expected: "boolean",
        value: input.readableAborted
    }), "boolean" === typeof input.readable || _report(_exceptionable, {
        path: _path + ".readable",
        expected: "boolean",
        value: input.readable
    }), "boolean" === typeof input.readableDidRead || _report(_exceptionable, {
        path: _path + ".readableDidRead",
        expected: "boolean",
        value: input.readableDidRead
    }), null === input.readableEncoding || true === _vv388.has(input.readableEncoding) || _report(_exceptionable, {
        path: _path + ".readableEncoding",
        expected: "(\"ascii\" | \"base64\" | \"base64url\" | \"binary\" | \"hex\" | \"latin1\" | \"ucs-2\" | \"ucs2\" | \"utf-16le\" | \"utf-8\" | \"utf16le\" | \"utf8\" | null)",
        value: input.readableEncoding
    }), "boolean" === typeof input.readableEnded || _report(_exceptionable, {
        path: _path + ".readableEnded",
        expected: "boolean",
        value: input.readableEnded
    }), null === input.readableFlowing || "boolean" === typeof input.readableFlowing || _report(_exceptionable, {
        path: _path + ".readableFlowing",
        expected: "(boolean | null)",
        value: input.readableFlowing
    }), "number" === typeof input.readableHighWaterMark || _report(_exceptionable, {
        path: _path + ".readableHighWaterMark",
        expected: "number",
        value: input.readableHighWaterMark
    }), "number" === typeof input.readableLength || _report(_exceptionable, {
        path: _path + ".readableLength",
        expected: "number",
        value: input.readableLength
    }), "boolean" === typeof input.readableObjectMode || _report(_exceptionable, {
        path: _path + ".readableObjectMode",
        expected: "boolean",
        value: input.readableObjectMode
    }), "boolean" === typeof input.destroyed || _report(_exceptionable, {
        path: _path + ".destroyed",
        expected: "boolean",
        value: input.destroyed
    }), "boolean" === typeof input.closed || _report(_exceptionable, {
        path: _path + ".closed",
        expected: "boolean",
        value: input.closed
    }), null === input.errored || ("object" === typeof input.errored && null !== input.errored || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    })) && _vo19(input.errored, _path + ".errored", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    }), 25 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["aborted", "httpVersion", "httpVersionMajor", "httpVersionMinor", "complete", "connection", "socket", "headers", "headersDistinct", "rawHeaders", "trailers", "trailersDistinct", "rawTrailers", "method", "url", "statusCode", "statusMessage", "readableAborted", "readable", "readableDidRead", "readableEncoding", "readableEnded", "readableFlowing", "readableHighWaterMark", "readableLength", "readableObjectMode", "destroyed", "closed", "errored"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo18 = (input, _path, _exceptionable = true) => [(Array.isArray(input.autoSelectFamilyAttemptedAddresses) || _report(_exceptionable, {
        path: _path + ".autoSelectFamilyAttemptedAddresses",
        expected: "Array<string>",
        value: input.autoSelectFamilyAttemptedAddresses
    })) && input.autoSelectFamilyAttemptedAddresses.map((elem, _index389) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".autoSelectFamilyAttemptedAddresses[" + _index389 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".autoSelectFamilyAttemptedAddresses",
        expected: "Array<string>",
        value: input.autoSelectFamilyAttemptedAddresses
    }), "number" === typeof input.bufferSize || _report(_exceptionable, {
        path: _path + ".bufferSize",
        expected: "number",
        value: input.bufferSize
    }), "number" === typeof input.bytesRead || _report(_exceptionable, {
        path: _path + ".bytesRead",
        expected: "number",
        value: input.bytesRead
    }), "number" === typeof input.bytesWritten || _report(_exceptionable, {
        path: _path + ".bytesWritten",
        expected: "number",
        value: input.bytesWritten
    }), "boolean" === typeof input.connecting || _report(_exceptionable, {
        path: _path + ".connecting",
        expected: "boolean",
        value: input.connecting
    }), "boolean" === typeof input.pending || _report(_exceptionable, {
        path: _path + ".pending",
        expected: "boolean",
        value: input.pending
    }), "boolean" === typeof input.destroyed || _report(_exceptionable, {
        path: _path + ".destroyed",
        expected: "boolean",
        value: input.destroyed
    }), undefined === input.localAddress || "string" === typeof input.localAddress || _report(_exceptionable, {
        path: _path + ".localAddress",
        expected: "(string | undefined)",
        value: input.localAddress
    }), undefined === input.localPort || "number" === typeof input.localPort || _report(_exceptionable, {
        path: _path + ".localPort",
        expected: "(number | undefined)",
        value: input.localPort
    }), undefined === input.localFamily || "string" === typeof input.localFamily || _report(_exceptionable, {
        path: _path + ".localFamily",
        expected: "(string | undefined)",
        value: input.localFamily
    }), "open" === input.readyState || "opening" === input.readyState || "readOnly" === input.readyState || "writeOnly" === input.readyState || "closed" === input.readyState || _report(_exceptionable, {
        path: _path + ".readyState",
        expected: "(\"closed\" | \"open\" | \"opening\" | \"readOnly\" | \"writeOnly\")",
        value: input.readyState
    }), undefined === input.remoteAddress || "string" === typeof input.remoteAddress || _report(_exceptionable, {
        path: _path + ".remoteAddress",
        expected: "(string | undefined)",
        value: input.remoteAddress
    }), undefined === input.remoteFamily || "string" === typeof input.remoteFamily || _report(_exceptionable, {
        path: _path + ".remoteFamily",
        expected: "(string | undefined)",
        value: input.remoteFamily
    }), undefined === input.remotePort || "number" === typeof input.remotePort || _report(_exceptionable, {
        path: _path + ".remotePort",
        expected: "(number | undefined)",
        value: input.remotePort
    }), undefined === input.timeout || "number" === typeof input.timeout || _report(_exceptionable, {
        path: _path + ".timeout",
        expected: "(number | undefined)",
        value: input.timeout
    }), "boolean" === typeof input.writable || _report(_exceptionable, {
        path: _path + ".writable",
        expected: "boolean",
        value: input.writable
    }), "boolean" === typeof input.writableEnded || _report(_exceptionable, {
        path: _path + ".writableEnded",
        expected: "boolean",
        value: input.writableEnded
    }), "boolean" === typeof input.writableFinished || _report(_exceptionable, {
        path: _path + ".writableFinished",
        expected: "boolean",
        value: input.writableFinished
    }), "number" === typeof input.writableHighWaterMark || _report(_exceptionable, {
        path: _path + ".writableHighWaterMark",
        expected: "number",
        value: input.writableHighWaterMark
    }), "number" === typeof input.writableLength || _report(_exceptionable, {
        path: _path + ".writableLength",
        expected: "number",
        value: input.writableLength
    }), "boolean" === typeof input.writableObjectMode || _report(_exceptionable, {
        path: _path + ".writableObjectMode",
        expected: "boolean",
        value: input.writableObjectMode
    }), "number" === typeof input.writableCorked || _report(_exceptionable, {
        path: _path + ".writableCorked",
        expected: "number",
        value: input.writableCorked
    }), "boolean" === typeof input.writableNeedDrain || _report(_exceptionable, {
        path: _path + ".writableNeedDrain",
        expected: "boolean",
        value: input.writableNeedDrain
    }), "boolean" === typeof input.closed || _report(_exceptionable, {
        path: _path + ".closed",
        expected: "boolean",
        value: input.closed
    }), null === input.errored || ("object" === typeof input.errored && null !== input.errored || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    })) && _vo19(input.errored, _path + ".errored", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    }), "boolean" === typeof input.allowHalfOpen || _report(_exceptionable, {
        path: _path + ".allowHalfOpen",
        expected: "boolean",
        value: input.allowHalfOpen
    }), "boolean" === typeof input.readableAborted || _report(_exceptionable, {
        path: _path + ".readableAborted",
        expected: "boolean",
        value: input.readableAborted
    }), "boolean" === typeof input.readable || _report(_exceptionable, {
        path: _path + ".readable",
        expected: "boolean",
        value: input.readable
    }), "boolean" === typeof input.readableDidRead || _report(_exceptionable, {
        path: _path + ".readableDidRead",
        expected: "boolean",
        value: input.readableDidRead
    }), null === input.readableEncoding || true === _vv390.has(input.readableEncoding) || _report(_exceptionable, {
        path: _path + ".readableEncoding",
        expected: "(\"ascii\" | \"base64\" | \"base64url\" | \"binary\" | \"hex\" | \"latin1\" | \"ucs-2\" | \"ucs2\" | \"utf-16le\" | \"utf-8\" | \"utf16le\" | \"utf8\" | null)",
        value: input.readableEncoding
    }), "boolean" === typeof input.readableEnded || _report(_exceptionable, {
        path: _path + ".readableEnded",
        expected: "boolean",
        value: input.readableEnded
    }), null === input.readableFlowing || "boolean" === typeof input.readableFlowing || _report(_exceptionable, {
        path: _path + ".readableFlowing",
        expected: "(boolean | null)",
        value: input.readableFlowing
    }), "number" === typeof input.readableHighWaterMark || _report(_exceptionable, {
        path: _path + ".readableHighWaterMark",
        expected: "number",
        value: input.readableHighWaterMark
    }), "number" === typeof input.readableLength || _report(_exceptionable, {
        path: _path + ".readableLength",
        expected: "number",
        value: input.readableLength
    }), "boolean" === typeof input.readableObjectMode || _report(_exceptionable, {
        path: _path + ".readableObjectMode",
        expected: "boolean",
        value: input.readableObjectMode
    }), 28 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["autoSelectFamilyAttemptedAddresses", "bufferSize", "bytesRead", "bytesWritten", "connecting", "pending", "destroyed", "localAddress", "localPort", "localFamily", "readyState", "remoteAddress", "remoteFamily", "remotePort", "timeout", "writable", "writableEnded", "writableFinished", "writableHighWaterMark", "writableLength", "writableObjectMode", "writableCorked", "writableNeedDrain", "closed", "errored", "allowHalfOpen", "readableAborted", "readable", "readableDidRead", "readableEncoding", "readableEnded", "readableFlowing", "readableHighWaterMark", "readableLength", "readableObjectMode"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo19 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), "string" === typeof input.message || _report(_exceptionable, {
        path: _path + ".message",
        expected: "string",
        value: input.message
    }), undefined === input.stack || "string" === typeof input.stack || _report(_exceptionable, {
        path: _path + ".stack",
        expected: "(string | undefined)",
        value: input.stack
    }), true, 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "message", "stack", "cause"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo20 = (input, _path, _exceptionable = true) => [undefined === input.accept || "string" === typeof input.accept || _report(_exceptionable, {
        path: _path + ".accept",
        expected: "(string | undefined)",
        value: input.accept
    }), undefined === input["accept-language"] || "string" === typeof input["accept-language"] || _report(_exceptionable, {
        path: _path + "[\"accept-language\"]",
        expected: "(string | undefined)",
        value: input["accept-language"]
    }), undefined === input["accept-patch"] || "string" === typeof input["accept-patch"] || _report(_exceptionable, {
        path: _path + "[\"accept-patch\"]",
        expected: "(string | undefined)",
        value: input["accept-patch"]
    }), undefined === input["accept-ranges"] || "string" === typeof input["accept-ranges"] || _report(_exceptionable, {
        path: _path + "[\"accept-ranges\"]",
        expected: "(string | undefined)",
        value: input["accept-ranges"]
    }), undefined === input["access-control-allow-credentials"] || "string" === typeof input["access-control-allow-credentials"] || _report(_exceptionable, {
        path: _path + "[\"access-control-allow-credentials\"]",
        expected: "(string | undefined)",
        value: input["access-control-allow-credentials"]
    }), undefined === input["access-control-allow-headers"] || "string" === typeof input["access-control-allow-headers"] || _report(_exceptionable, {
        path: _path + "[\"access-control-allow-headers\"]",
        expected: "(string | undefined)",
        value: input["access-control-allow-headers"]
    }), undefined === input["access-control-allow-methods"] || "string" === typeof input["access-control-allow-methods"] || _report(_exceptionable, {
        path: _path + "[\"access-control-allow-methods\"]",
        expected: "(string | undefined)",
        value: input["access-control-allow-methods"]
    }), undefined === input["access-control-allow-origin"] || "string" === typeof input["access-control-allow-origin"] || _report(_exceptionable, {
        path: _path + "[\"access-control-allow-origin\"]",
        expected: "(string | undefined)",
        value: input["access-control-allow-origin"]
    }), undefined === input["access-control-expose-headers"] || "string" === typeof input["access-control-expose-headers"] || _report(_exceptionable, {
        path: _path + "[\"access-control-expose-headers\"]",
        expected: "(string | undefined)",
        value: input["access-control-expose-headers"]
    }), undefined === input["access-control-max-age"] || "string" === typeof input["access-control-max-age"] || _report(_exceptionable, {
        path: _path + "[\"access-control-max-age\"]",
        expected: "(string | undefined)",
        value: input["access-control-max-age"]
    }), undefined === input["access-control-request-headers"] || "string" === typeof input["access-control-request-headers"] || _report(_exceptionable, {
        path: _path + "[\"access-control-request-headers\"]",
        expected: "(string | undefined)",
        value: input["access-control-request-headers"]
    }), undefined === input["access-control-request-method"] || "string" === typeof input["access-control-request-method"] || _report(_exceptionable, {
        path: _path + "[\"access-control-request-method\"]",
        expected: "(string | undefined)",
        value: input["access-control-request-method"]
    }), undefined === input.age || "string" === typeof input.age || _report(_exceptionable, {
        path: _path + ".age",
        expected: "(string | undefined)",
        value: input.age
    }), undefined === input.allow || "string" === typeof input.allow || _report(_exceptionable, {
        path: _path + ".allow",
        expected: "(string | undefined)",
        value: input.allow
    }), undefined === input["alt-svc"] || "string" === typeof input["alt-svc"] || _report(_exceptionable, {
        path: _path + "[\"alt-svc\"]",
        expected: "(string | undefined)",
        value: input["alt-svc"]
    }), undefined === input.authorization || "string" === typeof input.authorization || _report(_exceptionable, {
        path: _path + ".authorization",
        expected: "(string | undefined)",
        value: input.authorization
    }), undefined === input["cache-control"] || "string" === typeof input["cache-control"] || _report(_exceptionable, {
        path: _path + "[\"cache-control\"]",
        expected: "(string | undefined)",
        value: input["cache-control"]
    }), undefined === input.connection || "string" === typeof input.connection || _report(_exceptionable, {
        path: _path + ".connection",
        expected: "(string | undefined)",
        value: input.connection
    }), undefined === input["content-disposition"] || "string" === typeof input["content-disposition"] || _report(_exceptionable, {
        path: _path + "[\"content-disposition\"]",
        expected: "(string | undefined)",
        value: input["content-disposition"]
    }), undefined === input["content-encoding"] || "string" === typeof input["content-encoding"] || _report(_exceptionable, {
        path: _path + "[\"content-encoding\"]",
        expected: "(string | undefined)",
        value: input["content-encoding"]
    }), undefined === input["content-language"] || "string" === typeof input["content-language"] || _report(_exceptionable, {
        path: _path + "[\"content-language\"]",
        expected: "(string | undefined)",
        value: input["content-language"]
    }), undefined === input["content-length"] || "string" === typeof input["content-length"] || _report(_exceptionable, {
        path: _path + "[\"content-length\"]",
        expected: "(string | undefined)",
        value: input["content-length"]
    }), undefined === input["content-location"] || "string" === typeof input["content-location"] || _report(_exceptionable, {
        path: _path + "[\"content-location\"]",
        expected: "(string | undefined)",
        value: input["content-location"]
    }), undefined === input["content-range"] || "string" === typeof input["content-range"] || _report(_exceptionable, {
        path: _path + "[\"content-range\"]",
        expected: "(string | undefined)",
        value: input["content-range"]
    }), undefined === input["content-type"] || "string" === typeof input["content-type"] || _report(_exceptionable, {
        path: _path + "[\"content-type\"]",
        expected: "(string | undefined)",
        value: input["content-type"]
    }), undefined === input.cookie || "string" === typeof input.cookie || _report(_exceptionable, {
        path: _path + ".cookie",
        expected: "(string | undefined)",
        value: input.cookie
    }), undefined === input.date || "string" === typeof input.date || _report(_exceptionable, {
        path: _path + ".date",
        expected: "(string | undefined)",
        value: input.date
    }), undefined === input.etag || "string" === typeof input.etag || _report(_exceptionable, {
        path: _path + ".etag",
        expected: "(string | undefined)",
        value: input.etag
    }), undefined === input.expect || "string" === typeof input.expect || _report(_exceptionable, {
        path: _path + ".expect",
        expected: "(string | undefined)",
        value: input.expect
    }), undefined === input.expires || "string" === typeof input.expires || _report(_exceptionable, {
        path: _path + ".expires",
        expected: "(string | undefined)",
        value: input.expires
    }), undefined === input.forwarded || "string" === typeof input.forwarded || _report(_exceptionable, {
        path: _path + ".forwarded",
        expected: "(string | undefined)",
        value: input.forwarded
    }), undefined === input.from || "string" === typeof input.from || _report(_exceptionable, {
        path: _path + ".from",
        expected: "(string | undefined)",
        value: input.from
    }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(string | undefined)",
        value: input.host
    }), undefined === input["if-match"] || "string" === typeof input["if-match"] || _report(_exceptionable, {
        path: _path + "[\"if-match\"]",
        expected: "(string | undefined)",
        value: input["if-match"]
    }), undefined === input["if-modified-since"] || "string" === typeof input["if-modified-since"] || _report(_exceptionable, {
        path: _path + "[\"if-modified-since\"]",
        expected: "(string | undefined)",
        value: input["if-modified-since"]
    }), undefined === input["if-none-match"] || "string" === typeof input["if-none-match"] || _report(_exceptionable, {
        path: _path + "[\"if-none-match\"]",
        expected: "(string | undefined)",
        value: input["if-none-match"]
    }), undefined === input["if-unmodified-since"] || "string" === typeof input["if-unmodified-since"] || _report(_exceptionable, {
        path: _path + "[\"if-unmodified-since\"]",
        expected: "(string | undefined)",
        value: input["if-unmodified-since"]
    }), undefined === input["last-modified"] || "string" === typeof input["last-modified"] || _report(_exceptionable, {
        path: _path + "[\"last-modified\"]",
        expected: "(string | undefined)",
        value: input["last-modified"]
    }), undefined === input.location || "string" === typeof input.location || _report(_exceptionable, {
        path: _path + ".location",
        expected: "(string | undefined)",
        value: input.location
    }), undefined === input.origin || "string" === typeof input.origin || _report(_exceptionable, {
        path: _path + ".origin",
        expected: "(string | undefined)",
        value: input.origin
    }), undefined === input.pragma || "string" === typeof input.pragma || _report(_exceptionable, {
        path: _path + ".pragma",
        expected: "(string | undefined)",
        value: input.pragma
    }), undefined === input["proxy-authenticate"] || "string" === typeof input["proxy-authenticate"] || _report(_exceptionable, {
        path: _path + "[\"proxy-authenticate\"]",
        expected: "(string | undefined)",
        value: input["proxy-authenticate"]
    }), undefined === input["proxy-authorization"] || "string" === typeof input["proxy-authorization"] || _report(_exceptionable, {
        path: _path + "[\"proxy-authorization\"]",
        expected: "(string | undefined)",
        value: input["proxy-authorization"]
    }), undefined === input["public-key-pins"] || "string" === typeof input["public-key-pins"] || _report(_exceptionable, {
        path: _path + "[\"public-key-pins\"]",
        expected: "(string | undefined)",
        value: input["public-key-pins"]
    }), undefined === input.range || "string" === typeof input.range || _report(_exceptionable, {
        path: _path + ".range",
        expected: "(string | undefined)",
        value: input.range
    }), undefined === input.referer || "string" === typeof input.referer || _report(_exceptionable, {
        path: _path + ".referer",
        expected: "(string | undefined)",
        value: input.referer
    }), undefined === input["retry-after"] || "string" === typeof input["retry-after"] || _report(_exceptionable, {
        path: _path + "[\"retry-after\"]",
        expected: "(string | undefined)",
        value: input["retry-after"]
    }), undefined === input["sec-websocket-accept"] || "string" === typeof input["sec-websocket-accept"] || _report(_exceptionable, {
        path: _path + "[\"sec-websocket-accept\"]",
        expected: "(string | undefined)",
        value: input["sec-websocket-accept"]
    }), undefined === input["sec-websocket-extensions"] || "string" === typeof input["sec-websocket-extensions"] || _report(_exceptionable, {
        path: _path + "[\"sec-websocket-extensions\"]",
        expected: "(string | undefined)",
        value: input["sec-websocket-extensions"]
    }), undefined === input["sec-websocket-key"] || "string" === typeof input["sec-websocket-key"] || _report(_exceptionable, {
        path: _path + "[\"sec-websocket-key\"]",
        expected: "(string | undefined)",
        value: input["sec-websocket-key"]
    }), undefined === input["sec-websocket-protocol"] || "string" === typeof input["sec-websocket-protocol"] || _report(_exceptionable, {
        path: _path + "[\"sec-websocket-protocol\"]",
        expected: "(string | undefined)",
        value: input["sec-websocket-protocol"]
    }), undefined === input["sec-websocket-version"] || "string" === typeof input["sec-websocket-version"] || _report(_exceptionable, {
        path: _path + "[\"sec-websocket-version\"]",
        expected: "(string | undefined)",
        value: input["sec-websocket-version"]
    }), undefined === input["set-cookie"] || (Array.isArray(input["set-cookie"]) || _report(_exceptionable, {
        path: _path + "[\"set-cookie\"]",
        expected: "(Array<string> | undefined)",
        value: input["set-cookie"]
    })) && input["set-cookie"].map((elem, _index391) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"set-cookie\"][" + _index391 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"set-cookie\"]",
        expected: "(Array<string> | undefined)",
        value: input["set-cookie"]
    }), undefined === input["strict-transport-security"] || "string" === typeof input["strict-transport-security"] || _report(_exceptionable, {
        path: _path + "[\"strict-transport-security\"]",
        expected: "(string | undefined)",
        value: input["strict-transport-security"]
    }), undefined === input.tk || "string" === typeof input.tk || _report(_exceptionable, {
        path: _path + ".tk",
        expected: "(string | undefined)",
        value: input.tk
    }), undefined === input.trailer || "string" === typeof input.trailer || _report(_exceptionable, {
        path: _path + ".trailer",
        expected: "(string | undefined)",
        value: input.trailer
    }), undefined === input["transfer-encoding"] || "string" === typeof input["transfer-encoding"] || _report(_exceptionable, {
        path: _path + "[\"transfer-encoding\"]",
        expected: "(string | undefined)",
        value: input["transfer-encoding"]
    }), undefined === input.upgrade || "string" === typeof input.upgrade || _report(_exceptionable, {
        path: _path + ".upgrade",
        expected: "(string | undefined)",
        value: input.upgrade
    }), undefined === input["user-agent"] || "string" === typeof input["user-agent"] || _report(_exceptionable, {
        path: _path + "[\"user-agent\"]",
        expected: "(string | undefined)",
        value: input["user-agent"]
    }), undefined === input.vary || "string" === typeof input.vary || _report(_exceptionable, {
        path: _path + ".vary",
        expected: "(string | undefined)",
        value: input.vary
    }), undefined === input.via || "string" === typeof input.via || _report(_exceptionable, {
        path: _path + ".via",
        expected: "(string | undefined)",
        value: input.via
    }), undefined === input.warning || "string" === typeof input.warning || _report(_exceptionable, {
        path: _path + ".warning",
        expected: "(string | undefined)",
        value: input.warning
    }), undefined === input["www-authenticate"] || "string" === typeof input["www-authenticate"] || _report(_exceptionable, {
        path: _path + "[\"www-authenticate\"]",
        expected: "(string | undefined)",
        value: input["www-authenticate"]
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["accept", "accept-language", "accept-patch", "accept-ranges", "access-control-allow-credentials", "access-control-allow-headers", "access-control-allow-methods", "access-control-allow-origin", "access-control-expose-headers", "access-control-max-age", "access-control-request-headers", "access-control-request-method", "age", "allow", "alt-svc", "authorization", "cache-control", "connection", "content-disposition", "content-encoding", "content-language", "content-length", "content-location", "content-range", "content-type", "cookie", "date", "etag", "expect", "expires", "forwarded", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-unmodified-since", "last-modified", "location", "origin", "pragma", "proxy-authenticate", "proxy-authorization", "public-key-pins", "range", "referer", "retry-after", "sec-websocket-accept", "sec-websocket-extensions", "sec-websocket-key", "sec-websocket-protocol", "sec-websocket-version", "set-cookie", "strict-transport-security", "tk", "trailer", "transfer-encoding", "upgrade", "user-agent", "vary", "via", "warning", "www-authenticate"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        })) && (undefined === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        })) && value.map((elem, _index392) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index392 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo21 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return undefined === value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | undefined)",
            value: value
        })) && value.map((elem, _index393) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index393 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | undefined)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo22 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return undefined === value || "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(string | undefined)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo23 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo24 = (input, _path, _exceptionable = true) => [("object" === typeof input.prototype && null !== input.prototype || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"http\".ServerResponse<any>",
        value: input.prototype
    })) && _vo25(input.prototype, _path + ".prototype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"http\".ServerResponse<any>",
        value: input.prototype
    }), true, true, "boolean" === typeof input.captureRejections || _report(_exceptionable, {
        path: _path + ".captureRejections",
        expected: "boolean",
        value: input.captureRejections
    }), "number" === typeof input.defaultMaxListeners || _report(_exceptionable, {
        path: _path + ".defaultMaxListeners",
        expected: "number",
        value: input.defaultMaxListeners
    }), "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 9 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "errorMonitor", "captureRejectionSymbol", "captureRejections", "defaultMaxListeners", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo25 = (input, _path, _exceptionable = true) => ["number" === typeof input.statusCode || _report(_exceptionable, {
        path: _path + ".statusCode",
        expected: "number",
        value: input.statusCode
    }), "string" === typeof input.statusMessage || _report(_exceptionable, {
        path: _path + ".statusMessage",
        expected: "string",
        value: input.statusMessage
    }), "boolean" === typeof input.strictContentLength || _report(_exceptionable, {
        path: _path + ".strictContentLength",
        expected: "boolean",
        value: input.strictContentLength
    }), true, "boolean" === typeof input.chunkedEncoding || _report(_exceptionable, {
        path: _path + ".chunkedEncoding",
        expected: "boolean",
        value: input.chunkedEncoding
    }), "boolean" === typeof input.shouldKeepAlive || _report(_exceptionable, {
        path: _path + ".shouldKeepAlive",
        expected: "boolean",
        value: input.shouldKeepAlive
    }), "boolean" === typeof input.useChunkedEncodingByDefault || _report(_exceptionable, {
        path: _path + ".useChunkedEncodingByDefault",
        expected: "boolean",
        value: input.useChunkedEncodingByDefault
    }), "boolean" === typeof input.sendDate || _report(_exceptionable, {
        path: _path + ".sendDate",
        expected: "boolean",
        value: input.sendDate
    }), "boolean" === typeof input.finished || _report(_exceptionable, {
        path: _path + ".finished",
        expected: "boolean",
        value: input.finished
    }), "boolean" === typeof input.headersSent || _report(_exceptionable, {
        path: _path + ".headersSent",
        expected: "boolean",
        value: input.headersSent
    }), null === input.connection || ("object" === typeof input.connection && null !== input.connection || _report(_exceptionable, {
        path: _path + ".connection",
        expected: "(\"net\".Socket | null)",
        value: input.connection
    })) && _vo18(input.connection, _path + ".connection", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".connection",
        expected: "(\"net\".Socket | null)",
        value: input.connection
    }), null === input.socket || ("object" === typeof input.socket && null !== input.socket || _report(_exceptionable, {
        path: _path + ".socket",
        expected: "(\"net\".Socket | null)",
        value: input.socket
    })) && _vo18(input.socket, _path + ".socket", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".socket",
        expected: "(\"net\".Socket | null)",
        value: input.socket
    }), "boolean" === typeof input.writable || _report(_exceptionable, {
        path: _path + ".writable",
        expected: "boolean",
        value: input.writable
    }), "boolean" === typeof input.writableEnded || _report(_exceptionable, {
        path: _path + ".writableEnded",
        expected: "boolean",
        value: input.writableEnded
    }), "boolean" === typeof input.writableFinished || _report(_exceptionable, {
        path: _path + ".writableFinished",
        expected: "boolean",
        value: input.writableFinished
    }), "number" === typeof input.writableHighWaterMark || _report(_exceptionable, {
        path: _path + ".writableHighWaterMark",
        expected: "number",
        value: input.writableHighWaterMark
    }), "number" === typeof input.writableLength || _report(_exceptionable, {
        path: _path + ".writableLength",
        expected: "number",
        value: input.writableLength
    }), "boolean" === typeof input.writableObjectMode || _report(_exceptionable, {
        path: _path + ".writableObjectMode",
        expected: "boolean",
        value: input.writableObjectMode
    }), "number" === typeof input.writableCorked || _report(_exceptionable, {
        path: _path + ".writableCorked",
        expected: "number",
        value: input.writableCorked
    }), "boolean" === typeof input.destroyed || _report(_exceptionable, {
        path: _path + ".destroyed",
        expected: "boolean",
        value: input.destroyed
    }), "boolean" === typeof input.closed || _report(_exceptionable, {
        path: _path + ".closed",
        expected: "boolean",
        value: input.closed
    }), null === input.errored || ("object" === typeof input.errored && null !== input.errored || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    })) && _vo19(input.errored, _path + ".errored", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".errored",
        expected: "(Error | null)",
        value: input.errored
    }), "boolean" === typeof input.writableNeedDrain || _report(_exceptionable, {
        path: _path + ".writableNeedDrain",
        expected: "boolean",
        value: input.writableNeedDrain
    }), 23 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["statusCode", "statusMessage", "strictContentLength", "req", "chunkedEncoding", "shouldKeepAlive", "useChunkedEncodingByDefault", "sendDate", "finished", "headersSent", "connection", "socket", "writable", "writableEnded", "writableFinished", "writableHighWaterMark", "writableLength", "writableObjectMode", "writableCorked", "destroyed", "closed", "errored", "writableNeedDrain"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo26 = (input, _path, _exceptionable = true) => [undefined === input.ALPNCallback || true || _report(_exceptionable, {
        path: _path + ".ALPNCallback",
        expected: "undefined",
        value: input.ALPNCallback
    }), undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain || _report(_exceptionable, {
        path: _path + ".allowPartialTrustChain",
        expected: "(boolean | undefined)",
        value: input.allowPartialTrustChain
    }), (null !== input.ca || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.map((elem, _index394) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index394 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index394 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index394 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".ca[" + _index394 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca[" + _index394 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.ca && null !== input.ca && _vo27(input.ca, _path + ".ca", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })), (null !== input.cert || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.map((elem, _index395) => (null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index395 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index395 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index395 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".cert[" + _index395 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert[" + _index395 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.cert && null !== input.cert && _vo27(input.cert, _path + ".cert", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })), undefined === input.sigalgs || "string" === typeof input.sigalgs || _report(_exceptionable, {
        path: _path + ".sigalgs",
        expected: "(string | undefined)",
        value: input.sigalgs
    }), undefined === input.ciphers || "string" === typeof input.ciphers || _report(_exceptionable, {
        path: _path + ".ciphers",
        expected: "(string | undefined)",
        value: input.ciphers
    }), undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine || _report(_exceptionable, {
        path: _path + ".clientCertEngine",
        expected: "(string | undefined)",
        value: input.clientCertEngine
    }), (null !== input.crl || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.map((elem, _index396) => (null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index396 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index396 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index396 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".crl[" + _index396 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl[" + _index396 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.crl && null !== input.crl && _vo27(input.crl, _path + ".crl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })), (null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && (undefined === input.dhparam || "string" === typeof input.dhparam || ("object" === typeof input.dhparam && null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && _vo27(input.dhparam, _path + ".dhparam", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })), undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve || _report(_exceptionable, {
        path: _path + ".ecdhCurve",
        expected: "(string | undefined)",
        value: input.ecdhCurve
    }), undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder || _report(_exceptionable, {
        path: _path + ".honorCipherOrder",
        expected: "(boolean | undefined)",
        value: input.honorCipherOrder
    }), (null !== input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.map((elem, _index397) => (null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index397 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index397 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index397 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && _vu0(elem, _path + ".key[" + _index397 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key[" + _index397 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.key && null !== input.key && _vo27(input.key, _path + ".key", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })), undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine || _report(_exceptionable, {
        path: _path + ".privateKeyEngine",
        expected: "(string | undefined)",
        value: input.privateKeyEngine
    }), undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier || _report(_exceptionable, {
        path: _path + ".privateKeyIdentifier",
        expected: "(string | undefined)",
        value: input.privateKeyIdentifier
    }), undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion || _report(_exceptionable, {
        path: _path + ".maxVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.maxVersion
    }), undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion || _report(_exceptionable, {
        path: _path + ".minVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.minVersion
    }), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), (null !== input.pfx || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.map((elem, _index398) => (null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index398 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index398 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index398 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && _vu1(elem, _path + ".pfx[" + _index398 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx[" + _index398 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.pfx && null !== input.pfx && _vo27(input.pfx, _path + ".pfx", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })), undefined === input.secureOptions || "number" === typeof input.secureOptions || _report(_exceptionable, {
        path: _path + ".secureOptions",
        expected: "(number | undefined)",
        value: input.secureOptions
    }), undefined === input.secureProtocol || "string" === typeof input.secureProtocol || _report(_exceptionable, {
        path: _path + ".secureProtocol",
        expected: "(string | undefined)",
        value: input.secureProtocol
    }), undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext || _report(_exceptionable, {
        path: _path + ".sessionIdContext",
        expected: "(string | undefined)",
        value: input.sessionIdContext
    }), undefined === input.ticketKeys || ("object" === typeof input.ticketKeys && null !== input.ticketKeys || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    })) && _vo27(input.ticketKeys, _path + ".ticketKeys", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    }), undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout || _report(_exceptionable, {
        path: _path + ".sessionTimeout",
        expected: "(number | undefined)",
        value: input.sessionTimeout
    }), undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout || _report(_exceptionable, {
        path: _path + ".handshakeTimeout",
        expected: "(number | undefined)",
        value: input.handshakeTimeout
    }), undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint || _report(_exceptionable, {
        path: _path + ".pskIdentityHint",
        expected: "(string | undefined)",
        value: input.pskIdentityHint
    }), undefined === input.secureContext || ("object" === typeof input.secureContext && null !== input.secureContext || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    })) && _vo30(input.secureContext, _path + ".secureContext", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    }), undefined === input.enableTrace || "boolean" === typeof input.enableTrace || _report(_exceptionable, {
        path: _path + ".enableTrace",
        expected: "(boolean | undefined)",
        value: input.enableTrace
    }), undefined === input.requestCert || "boolean" === typeof input.requestCert || _report(_exceptionable, {
        path: _path + ".requestCert",
        expected: "(boolean | undefined)",
        value: input.requestCert
    }), (null !== input.ALPNProtocols || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || (Array.isArray(input.ALPNProtocols) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (_vp2(input.ALPNProtocols, _path + ".ALPNProtocols", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "Array<string> | Array<Uint8Array<ArrayBufferLike>>",
        value: input.ALPNProtocols
    })) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })), undefined === input.SNICallback || true || _report(_exceptionable, {
        path: _path + ".SNICallback",
        expected: "undefined",
        value: input.SNICallback
    }), undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized || _report(_exceptionable, {
        path: _path + ".rejectUnauthorized",
        expected: "(boolean | undefined)",
        value: input.rejectUnauthorized
    }), undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen || _report(_exceptionable, {
        path: _path + ".allowHalfOpen",
        expected: "(boolean | undefined)",
        value: input.allowHalfOpen
    }), undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect || _report(_exceptionable, {
        path: _path + ".pauseOnConnect",
        expected: "(boolean | undefined)",
        value: input.pauseOnConnect
    }), undefined === input.noDelay || "boolean" === typeof input.noDelay || _report(_exceptionable, {
        path: _path + ".noDelay",
        expected: "(boolean | undefined)",
        value: input.noDelay
    }), undefined === input.keepAlive || "boolean" === typeof input.keepAlive || _report(_exceptionable, {
        path: _path + ".keepAlive",
        expected: "(boolean | undefined)",
        value: input.keepAlive
    }), undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay || _report(_exceptionable, {
        path: _path + ".keepAliveInitialDelay",
        expected: "(number | undefined)",
        value: input.keepAliveInitialDelay
    }), undefined === input.highWaterMark || "number" === typeof input.highWaterMark || _report(_exceptionable, {
        path: _path + ".highWaterMark",
        expected: "(number | undefined)",
        value: input.highWaterMark
    }), undefined === input.blockList || ("object" === typeof input.blockList && null !== input.blockList || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    })) && _vo31(input.blockList, _path + ".blockList", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    }), undefined === input.IncomingMessage || ("object" === typeof input.IncomingMessage && null !== input.IncomingMessage || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    })) && _vo16(input.IncomingMessage, _path + ".IncomingMessage", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    }), undefined === input.ServerResponse || ("object" === typeof input.ServerResponse && null !== input.ServerResponse || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    })) && _vo24(input.ServerResponse, _path + ".ServerResponse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    }), undefined === input.requestTimeout || "number" === typeof input.requestTimeout || _report(_exceptionable, {
        path: _path + ".requestTimeout",
        expected: "(number | undefined)",
        value: input.requestTimeout
    }), undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders || _report(_exceptionable, {
        path: _path + ".joinDuplicateHeaders",
        expected: "(boolean | undefined)",
        value: input.joinDuplicateHeaders
    }), undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout || _report(_exceptionable, {
        path: _path + ".keepAliveTimeout",
        expected: "(number | undefined)",
        value: input.keepAliveTimeout
    }), undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval || _report(_exceptionable, {
        path: _path + ".connectionsCheckingInterval",
        expected: "(number | undefined)",
        value: input.connectionsCheckingInterval
    }), undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser || _report(_exceptionable, {
        path: _path + ".insecureHTTPParser",
        expected: "(boolean | undefined)",
        value: input.insecureHTTPParser
    }), undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize || _report(_exceptionable, {
        path: _path + ".maxHeaderSize",
        expected: "(number | undefined)",
        value: input.maxHeaderSize
    }), undefined === input.uniqueHeaders || (Array.isArray(input.uniqueHeaders) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    })) && input.uniqueHeaders.map((elem, _index403) => (null !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index403 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index403 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index403 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index404) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index403 + "][" + _index404 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index403 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo27 = (input, _path, _exceptionable = true) => ["number" === typeof input.BYTES_PER_ELEMENT || _report(_exceptionable, {
        path: _path + ".BYTES_PER_ELEMENT",
        expected: "number",
        value: input.BYTES_PER_ELEMENT
    }), input.buffer instanceof ArrayBuffer || input.buffer instanceof SharedArrayBuffer || _report(_exceptionable, {
        path: _path + ".buffer",
        expected: "(ArrayBuffer | SharedArrayBuffer)",
        value: input.buffer
    }), "number" === typeof input.byteLength || _report(_exceptionable, {
        path: _path + ".byteLength",
        expected: "number",
        value: input.byteLength
    }), "number" === typeof input.byteOffset || _report(_exceptionable, {
        path: _path + ".byteOffset",
        expected: "number",
        value: input.byteOffset
    }), "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), "Uint8Array" === input["__@toStringTag@729"] || _report(_exceptionable, {
        path: _path + "[\"__@toStringTag@729\"]",
        expected: "\"Uint8Array\"",
        value: input["__@toStringTag@729"]
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["BYTES_PER_ELEMENT", "buffer", "byteLength", "byteOffset", "length", "__@toStringTag@729"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        if ("number" === typeof Number(key))
            return "number" === typeof value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "number",
                value: value
            });
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo28 = (input, _path, _exceptionable = true) => [(null !== input.pem || _report(_exceptionable, {
        path: _path + ".pem",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.pem
    })) && (undefined !== input.pem || _report(_exceptionable, {
        path: _path + ".pem",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.pem
    })) && ("string" === typeof input.pem || ("object" === typeof input.pem && null !== input.pem || _report(_exceptionable, {
        path: _path + ".pem",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.pem
    })) && _vo27(input.pem, _path + ".pem", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pem",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.pem
    })), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["pem", "passphrase"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo29 = (input, _path, _exceptionable = true) => [(null !== input.buf || _report(_exceptionable, {
        path: _path + ".buf",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.buf
    })) && (undefined !== input.buf || _report(_exceptionable, {
        path: _path + ".buf",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.buf
    })) && ("string" === typeof input.buf || ("object" === typeof input.buf && null !== input.buf || _report(_exceptionable, {
        path: _path + ".buf",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.buf
    })) && _vo27(input.buf, _path + ".buf", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buf",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: input.buf
    })), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["buf", "passphrase"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo30 = (input, _path, _exceptionable = true) => [true, 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["context"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo31 = (input, _path, _exceptionable = true) => [(Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "ReadonlyArray<string>",
        value: input.rules
    })) && input.rules.map((elem, _index405) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".rules[" + _index405 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "ReadonlyArray<string>",
        value: input.rules
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["rules"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo32 = (input, _path, _exceptionable = true) => [(null !== input.meta || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(Array<MetaOptions | ((merged: { value: MetaOptions; } & { entryName: string; }) => void | MetaOptions)> | MetaOptions | undefined)",
        value: input.meta
    })) && (undefined === input.meta || "function" === typeof input.meta || (Array.isArray(input.meta) && input.meta.map((elem, _index406) => (null !== elem || _report(_exceptionable, {
        path: _path + ".meta[" + _index406 + "]",
        expected: "MetaOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".meta[" + _index406 + "]",
        expected: "MetaOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".meta[" + _index406 + "]",
        expected: "MetaOptions",
        value: elem
    })) && _vo33(elem, _path + ".meta[" + _index406 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".meta[" + _index406 + "]",
        expected: "MetaOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) && _vo33(input.meta, _path + ".meta", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(Array<MetaOptions | ((merged: { value: MetaOptions; } & { entryName: string; }) => void | MetaOptions)> | MetaOptions | undefined)",
        value: input.meta
    })) || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(Array<MetaOptions | ((merged: { value: MetaOptions; } & { entryName: string; }) => void | MetaOptions)> | MetaOptions | undefined)",
        value: input.meta
    })), (null !== input.title || _report(_exceptionable, {
        path: _path + ".title",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.title
    })) && (undefined === input.title || "function" === typeof input.title || "string" === typeof input.title || (Array.isArray(input.title) || _report(_exceptionable, {
        path: _path + ".title",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.title
    })) && input.title.map((elem, _index407) => (null !== elem || _report(_exceptionable, {
        path: _path + ".title[" + _index407 + "]",
        expected: "string",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".title[" + _index407 + "]",
        expected: "string",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".title[" + _index407 + "]",
        expected: "string",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".title",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.title
    })), (null !== input.inject || _report(_exceptionable, {
        path: _path + ".inject",
        expected: "(\"body\" | \"head\" | Array<ScriptInject | ((merged: { value: ScriptInject; } & { entryName: string; }) => void | ScriptInject)> | boolean | undefined)",
        value: input.inject
    })) && (undefined === input.inject || "function" === typeof input.inject || "body" === input.inject || "head" === input.inject || "boolean" === typeof input.inject || (Array.isArray(input.inject) || _report(_exceptionable, {
        path: _path + ".inject",
        expected: "(\"body\" | \"head\" | Array<ScriptInject | ((merged: { value: ScriptInject; } & { entryName: string; }) => void | ScriptInject)> | boolean | undefined)",
        value: input.inject
    })) && input.inject.map((elem, _index408) => (null !== elem || _report(_exceptionable, {
        path: _path + ".inject[" + _index408 + "]",
        expected: "(\"body\" | \"head\" | boolean)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".inject[" + _index408 + "]",
        expected: "(\"body\" | \"head\" | boolean)",
        value: elem
    })) && ("function" === typeof elem || "body" === elem || "head" === elem || "boolean" === typeof elem || _report(_exceptionable, {
        path: _path + ".inject[" + _index408 + "]",
        expected: "(\"body\" | \"head\" | boolean)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".inject",
        expected: "(\"body\" | \"head\" | Array<ScriptInject | ((merged: { value: ScriptInject; } & { entryName: string; }) => void | ScriptInject)> | boolean | undefined)",
        value: input.inject
    })), (null !== input.tags || _report(_exceptionable, {
        path: _path + ".tags",
        expected: "(Array<HtmlTagDescriptor> | HtmlTag | undefined)",
        value: input.tags
    })) && (undefined === input.tags || "function" === typeof input.tags || (Array.isArray(input.tags) && input.tags.map((elem, _index409) => (null !== elem || _report(_exceptionable, {
        path: _path + ".tags[" + _index409 + "]",
        expected: "HtmlTag",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".tags[" + _index409 + "]",
        expected: "HtmlTag",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".tags[" + _index409 + "]",
        expected: "HtmlTag",
        value: elem
    })) && _vo35(elem, _path + ".tags[" + _index409 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".tags[" + _index409 + "]",
        expected: "HtmlTag",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.tags && null !== input.tags && _vo35(input.tags, _path + ".tags", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".tags",
        expected: "(Array<HtmlTagDescriptor> | HtmlTag | undefined)",
        value: input.tags
    })) || _report(_exceptionable, {
        path: _path + ".tags",
        expected: "(Array<HtmlTagDescriptor> | HtmlTag | undefined)",
        value: input.tags
    })), (null !== input.favicon || _report(_exceptionable, {
        path: _path + ".favicon",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.favicon
    })) && (undefined === input.favicon || "function" === typeof input.favicon || "string" === typeof input.favicon || (Array.isArray(input.favicon) || _report(_exceptionable, {
        path: _path + ".favicon",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.favicon
    })) && input.favicon.map((elem, _index410) => (null !== elem || _report(_exceptionable, {
        path: _path + ".favicon[" + _index410 + "]",
        expected: "string",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".favicon[" + _index410 + "]",
        expected: "string",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".favicon[" + _index410 + "]",
        expected: "string",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".favicon",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.favicon
    })), undefined === input.appIcon || ("object" === typeof input.appIcon && null !== input.appIcon || _report(_exceptionable, {
        path: _path + ".appIcon",
        expected: "(AppIcon | undefined)",
        value: input.appIcon
    })) && _vo37(input.appIcon, _path + ".appIcon", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".appIcon",
        expected: "(AppIcon | undefined)",
        value: input.appIcon
    }), undefined === input.mountId || "string" === typeof input.mountId || _report(_exceptionable, {
        path: _path + ".mountId",
        expected: "(string | undefined)",
        value: input.mountId
    }), undefined === input.crossorigin || "anonymous" === input.crossorigin || "use-credentials" === input.crossorigin || "boolean" === typeof input.crossorigin || _report(_exceptionable, {
        path: _path + ".crossorigin",
        expected: "(\"anonymous\" | \"use-credentials\" | boolean | undefined)",
        value: input.crossorigin
    }), undefined === input.outputStructure || "flat" === input.outputStructure || "nested" === input.outputStructure || _report(_exceptionable, {
        path: _path + ".outputStructure",
        expected: "(\"flat\" | \"nested\" | undefined)",
        value: input.outputStructure
    }), (null !== input.template || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.template
    })) && (undefined === input.template || "function" === typeof input.template || "string" === typeof input.template || (Array.isArray(input.template) || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.template
    })) && input.template.map((elem, _index411) => (null !== elem || _report(_exceptionable, {
        path: _path + ".template[" + _index411 + "]",
        expected: "string",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".template[" + _index411 + "]",
        expected: "string",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".template[" + _index411 + "]",
        expected: "string",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(Array<string | ((merged: { value: string; } & { entryName: string; }) => string | void)> | string | undefined)",
        value: input.template
    })), (null !== input.templateParameters || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(Array<Record<string, unknown> | ((config: Record<string, unknown>, ctx: { entryName: string; }) => void | Record<string, unknown>)> | Record<string, unknown> | undefined)",
        value: input.templateParameters
    })) && (undefined === input.templateParameters || "function" === typeof input.templateParameters || (Array.isArray(input.templateParameters) && input.templateParameters.map((elem, _index412) => (null !== elem || _report(_exceptionable, {
        path: _path + ".templateParameters[" + _index412 + "]",
        expected: "Record<string, unknown>",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".templateParameters[" + _index412 + "]",
        expected: "Record<string, unknown>",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".templateParameters[" + _index412 + "]",
        expected: "Record<string, unknown>",
        value: elem
    })) && _vo39(elem, _path + ".templateParameters[" + _index412 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".templateParameters[" + _index412 + "]",
        expected: "Record<string, unknown>",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.templateParameters && null !== input.templateParameters && false === Array.isArray(input.templateParameters) && _vo39(input.templateParameters, _path + ".templateParameters", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(Array<Record<string, unknown> | ((config: Record<string, unknown>, ctx: { entryName: string; }) => void | Record<string, unknown>)> | Record<string, unknown> | undefined)",
        value: input.templateParameters
    })) || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(Array<Record<string, unknown> | ((config: Record<string, unknown>, ctx: { entryName: string; }) => void | Record<string, unknown>)> | Record<string, unknown> | undefined)",
        value: input.templateParameters
    })), undefined === input.scriptLoading || "module" === input.scriptLoading || "defer" === input.scriptLoading || "blocking" === input.scriptLoading || _report(_exceptionable, {
        path: _path + ".scriptLoading",
        expected: "(\"blocking\" | \"defer\" | \"module\" | undefined)",
        value: input.scriptLoading
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["meta", "title", "inject", "tags", "favicon", "appIcon", "mountId", "crossorigin", "outputStructure", "template", "templateParameters", "scriptLoading"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo33 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(MetaAttrs | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(MetaAttrs | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(MetaAttrs | false | string)",
            value: value
        })) && _vo34(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(MetaAttrs | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo34 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || "boolean" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(boolean | string)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo35 = (input, _path, _exceptionable = true) => ["string" === typeof input.tag || _report(_exceptionable, {
        path: _path + ".tag",
        expected: "string",
        value: input.tag
    }), undefined === input.attrs || ("object" === typeof input.attrs && null !== input.attrs && false === Array.isArray(input.attrs) || _report(_exceptionable, {
        path: _path + ".attrs",
        expected: "(Record<string, string | boolean | null | undefined> | undefined)",
        value: input.attrs
    })) && _vo36(input.attrs, _path + ".attrs", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".attrs",
        expected: "(Record<string, string | boolean | null | undefined> | undefined)",
        value: input.attrs
    }), undefined === input.children || "string" === typeof input.children || _report(_exceptionable, {
        path: _path + ".children",
        expected: "(string | undefined)",
        value: input.children
    }), (null !== input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | string | undefined)",
        value: input.hash
    })) && (undefined === input.hash || "function" === typeof input.hash || "string" === typeof input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | string | undefined)",
        value: input.hash
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(boolean | string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || "boolean" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(boolean | string | undefined)",
        value: input.publicPath
    })), undefined === input.append || "boolean" === typeof input.append || _report(_exceptionable, {
        path: _path + ".append",
        expected: "(boolean | undefined)",
        value: input.append
    }), undefined === input.head || "boolean" === typeof input.head || _report(_exceptionable, {
        path: _path + ".head",
        expected: "(boolean | undefined)",
        value: input.head
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["tag", "attrs", "children", "hash", "publicPath", "append", "head"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo36 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return null === value || undefined === value || "string" === typeof value || "boolean" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(boolean | null | string | undefined)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo37 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.icons) || _report(_exceptionable, {
        path: _path + ".icons",
        expected: "Array<AppIconItem>",
        value: input.icons
    })) && input.icons.map((elem, _index413) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".icons[" + _index413 + "]",
        expected: "AppIconItem",
        value: elem
    })) && _vo38(elem, _path + ".icons[" + _index413 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".icons[" + _index413 + "]",
        expected: "AppIconItem",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".icons",
        expected: "Array<AppIconItem>",
        value: input.icons
    }), undefined === input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "icons", "filename"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo38 = (input, _path, _exceptionable = true) => ["string" === typeof input.src || _report(_exceptionable, {
        path: _path + ".src",
        expected: "string",
        value: input.src
    }), "number" === typeof input.size || _report(_exceptionable, {
        path: _path + ".size",
        expected: "number",
        value: input.size
    }), undefined === input.target || "apple-touch-icon" === input.target || "web-app-manifest" === input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"apple-touch-icon\" | \"web-app-manifest\" | undefined)",
        value: input.target
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["src", "size", "target"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo39 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo40 = (input, _path, _exceptionable = true) => [(null !== input.bundlerChain || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })) && (undefined === input.bundlerChain || "function" === typeof input.bundlerChain || (Array.isArray(input.bundlerChain) || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })) && input.bundlerChain.map((elem, _index414) => true || _report(_exceptionable, {
        path: _path + ".bundlerChain[" + _index414 + "]",
        expected: "unknown",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })), (null !== input.cssLoader || _report(_exceptionable, {
        path: _path + ".cssLoader",
        expected: "(Array<CSSLoaderOptions | ((config: CSSLoaderOptions) => void | CSSLoaderOptions)> | CSSLoaderOptions | undefined)",
        value: input.cssLoader
    })) && (undefined === input.cssLoader || "function" === typeof input.cssLoader || (Array.isArray(input.cssLoader) && input.cssLoader.map((elem, _index415) => (null !== elem || _report(_exceptionable, {
        path: _path + ".cssLoader[" + _index415 + "]",
        expected: "CSSLoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".cssLoader[" + _index415 + "]",
        expected: "CSSLoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".cssLoader[" + _index415 + "]",
        expected: "CSSLoaderOptions",
        value: elem
    })) && _vo41(elem, _path + ".cssLoader[" + _index415 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssLoader[" + _index415 + "]",
        expected: "CSSLoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.cssLoader && null !== input.cssLoader && false === Array.isArray(input.cssLoader) && _vo41(input.cssLoader, _path + ".cssLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssLoader",
        expected: "(Array<CSSLoaderOptions | ((config: CSSLoaderOptions) => void | CSSLoaderOptions)> | CSSLoaderOptions | undefined)",
        value: input.cssLoader
    })) || _report(_exceptionable, {
        path: _path + ".cssLoader",
        expected: "(Array<CSSLoaderOptions | ((config: CSSLoaderOptions) => void | CSSLoaderOptions)> | CSSLoaderOptions | undefined)",
        value: input.cssLoader
    })), (null !== input.postcss || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "(Array<PostCSSLoaderOptions | ((config: PostCSSLoaderOptions, ctx: { addPlugins: (plugins: AcceptedPlugin | AcceptedPlugin[]) => void; }) => void | PostCSSLoaderOptions)> | PostCSSLoaderOptions | undefined)",
        value: input.postcss
    })) && (undefined === input.postcss || "function" === typeof input.postcss || (Array.isArray(input.postcss) && input.postcss.map((elem, _index416) => (null !== elem || _report(_exceptionable, {
        path: _path + ".postcss[" + _index416 + "]",
        expected: "PostCSSLoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".postcss[" + _index416 + "]",
        expected: "PostCSSLoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".postcss[" + _index416 + "]",
        expected: "PostCSSLoaderOptions",
        value: elem
    })) && _vo45(elem, _path + ".postcss[" + _index416 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".postcss[" + _index416 + "]",
        expected: "PostCSSLoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.postcss && null !== input.postcss && false === Array.isArray(input.postcss) && _vo45(input.postcss, _path + ".postcss", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "(Array<PostCSSLoaderOptions | ((config: PostCSSLoaderOptions, ctx: { addPlugins: (plugins: AcceptedPlugin | AcceptedPlugin[]) => void; }) => void | PostCSSLoaderOptions)> | PostCSSLoaderOptions | undefined)",
        value: input.postcss
    })) || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "(Array<PostCSSLoaderOptions | ((config: PostCSSLoaderOptions, ctx: { addPlugins: (plugins: AcceptedPlugin | AcceptedPlugin[]) => void; }) => void | PostCSSLoaderOptions)> | PostCSSLoaderOptions | undefined)",
        value: input.postcss
    })), (null !== input.styleLoader || _report(_exceptionable, {
        path: _path + ".styleLoader",
        expected: "(Array<StyleLoaderOptions | ((config: StyleLoaderOptions) => void | StyleLoaderOptions)> | StyleLoaderOptions | undefined)",
        value: input.styleLoader
    })) && (undefined === input.styleLoader || "function" === typeof input.styleLoader || (Array.isArray(input.styleLoader) && input.styleLoader.map((elem, _index417) => (null !== elem || _report(_exceptionable, {
        path: _path + ".styleLoader[" + _index417 + "]",
        expected: "StyleLoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".styleLoader[" + _index417 + "]",
        expected: "StyleLoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".styleLoader[" + _index417 + "]",
        expected: "StyleLoaderOptions",
        value: elem
    })) && _vo63(elem, _path + ".styleLoader[" + _index417 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".styleLoader[" + _index417 + "]",
        expected: "StyleLoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.styleLoader && null !== input.styleLoader && false === Array.isArray(input.styleLoader) && _vo63(input.styleLoader, _path + ".styleLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".styleLoader",
        expected: "(Array<StyleLoaderOptions | ((config: StyleLoaderOptions) => void | StyleLoaderOptions)> | StyleLoaderOptions | undefined)",
        value: input.styleLoader
    })) || _report(_exceptionable, {
        path: _path + ".styleLoader",
        expected: "(Array<StyleLoaderOptions | ((config: StyleLoaderOptions) => void | StyleLoaderOptions)> | StyleLoaderOptions | undefined)",
        value: input.styleLoader
    })), (null !== input.htmlPlugin || _report(_exceptionable, {
        path: _path + ".htmlPlugin",
        expected: "(Array<Options | ((config: Options, ctx: { entryName: string; entryValue: (string | string[] | EntryDescription)[]; }) => void | Options)> | HtmlRspackPlugin.Options | boolean | undefined)",
        value: input.htmlPlugin
    })) && (undefined === input.htmlPlugin || "function" === typeof input.htmlPlugin || "boolean" === typeof input.htmlPlugin || (Array.isArray(input.htmlPlugin) && input.htmlPlugin.map((elem, _index418) => (null !== elem || _report(_exceptionable, {
        path: _path + ".htmlPlugin[" + _index418 + "]",
        expected: "HtmlRspackPlugin.Options",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".htmlPlugin[" + _index418 + "]",
        expected: "HtmlRspackPlugin.Options",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".htmlPlugin[" + _index418 + "]",
        expected: "HtmlRspackPlugin.Options",
        value: elem
    })) && _vo65(elem, _path + ".htmlPlugin[" + _index418 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".htmlPlugin[" + _index418 + "]",
        expected: "HtmlRspackPlugin.Options",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.htmlPlugin && null !== input.htmlPlugin && false === Array.isArray(input.htmlPlugin) && _vo65(input.htmlPlugin, _path + ".htmlPlugin", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".htmlPlugin",
        expected: "(Array<Options | ((config: Options, ctx: { entryName: string; entryValue: (string | string[] | EntryDescription)[]; }) => void | Options)> | HtmlRspackPlugin.Options | boolean | undefined)",
        value: input.htmlPlugin
    })) || _report(_exceptionable, {
        path: _path + ".htmlPlugin",
        expected: "(Array<Options | ((config: Options, ctx: { entryName: string; entryValue: (string | string[] | EntryDescription)[]; }) => void | Options)> | HtmlRspackPlugin.Options | boolean | undefined)",
        value: input.htmlPlugin
    })), (null !== input.swc || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })) && (undefined === input.swc || "function" === typeof input.swc || (Array.isArray(input.swc) && input.swc.map((elem, _index419) => (null !== elem || _report(_exceptionable, {
        path: _path + ".swc[" + _index419 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".swc[" + _index419 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".swc[" + _index419 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && _vo70(elem, _path + ".swc[" + _index419 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".swc[" + _index419 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.swc && null !== input.swc && false === Array.isArray(input.swc) && _vo70(input.swc, _path + ".swc", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })) || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })), (null !== input.lightningcssLoader || _report(_exceptionable, {
        path: _path + ".lightningcssLoader",
        expected: "(Array<LoaderOptions | ((config: LoaderOptions) => void | LoaderOptions)> | LoaderOptions | boolean | undefined)",
        value: input.lightningcssLoader
    })) && (undefined === input.lightningcssLoader || "function" === typeof input.lightningcssLoader || "boolean" === typeof input.lightningcssLoader || (Array.isArray(input.lightningcssLoader) && input.lightningcssLoader.map((elem, _index420) => (null !== elem || _report(_exceptionable, {
        path: _path + ".lightningcssLoader[" + _index420 + "]",
        expected: "LoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".lightningcssLoader[" + _index420 + "]",
        expected: "LoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".lightningcssLoader[" + _index420 + "]",
        expected: "LoaderOptions",
        value: elem
    })) && _vo101(elem, _path + ".lightningcssLoader[" + _index420 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lightningcssLoader[" + _index420 + "]",
        expected: "LoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.lightningcssLoader && null !== input.lightningcssLoader && false === Array.isArray(input.lightningcssLoader) && _vo101(input.lightningcssLoader, _path + ".lightningcssLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lightningcssLoader",
        expected: "(Array<LoaderOptions | ((config: LoaderOptions) => void | LoaderOptions)> | LoaderOptions | boolean | undefined)",
        value: input.lightningcssLoader
    })) || _report(_exceptionable, {
        path: _path + ".lightningcssLoader",
        expected: "(Array<LoaderOptions | ((config: LoaderOptions) => void | LoaderOptions)> | LoaderOptions | boolean | undefined)",
        value: input.lightningcssLoader
    })), undefined === input.cssExtract || ("object" === typeof input.cssExtract && null !== input.cssExtract && false === Array.isArray(input.cssExtract) || _report(_exceptionable, {
        path: _path + ".cssExtract",
        expected: "(CSSExtractOptions | undefined)",
        value: input.cssExtract
    })) && _vo107(input.cssExtract, _path + ".cssExtract", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssExtract",
        expected: "(CSSExtractOptions | undefined)",
        value: input.cssExtract
    }), (null !== input.rspack || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })) && (undefined === input.rspack || "function" === typeof input.rspack || (Array.isArray(input.rspack) && input.rspack.map((elem, _index421) => (null !== elem || _report(_exceptionable, {
        path: _path + ".rspack[" + _index421 + "]",
        expected: "RspackOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".rspack[" + _index421 + "]",
        expected: "RspackOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rspack[" + _index421 + "]",
        expected: "RspackOptions",
        value: elem
    })) && _vo110(elem, _path + ".rspack[" + _index421 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspack[" + _index421 + "]",
        expected: "RspackOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.rspack && null !== input.rspack && false === Array.isArray(input.rspack) && _vo110(input.rspack, _path + ".rspack", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })) || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })), (null !== input.webpack || _report(_exceptionable, {
        path: _path + ".webpack",
        expected: "(Array<Configuration | ((config: Configuration, ctx: ModifyWebpackConfigUtils) => void | Configuration)> | Configuration | undefined)",
        value: input.webpack
    })) && (undefined === input.webpack || "function" === typeof input.webpack || (Array.isArray(input.webpack) && input.webpack.map((elem, _index422) => (null !== elem || _report(_exceptionable, {
        path: _path + ".webpack[" + _index422 + "]",
        expected: "Configuration",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".webpack[" + _index422 + "]",
        expected: "Configuration",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".webpack[" + _index422 + "]",
        expected: "Configuration",
        value: elem
    })) && _vo228(elem, _path + ".webpack[" + _index422 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".webpack[" + _index422 + "]",
        expected: "Configuration",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.webpack && null !== input.webpack && false === Array.isArray(input.webpack) && _vo228(input.webpack, _path + ".webpack", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".webpack",
        expected: "(Array<Configuration | ((config: Configuration, ctx: ModifyWebpackConfigUtils) => void | Configuration)> | Configuration | undefined)",
        value: input.webpack
    })) || _report(_exceptionable, {
        path: _path + ".webpack",
        expected: "(Array<Configuration | ((config: Configuration, ctx: ModifyWebpackConfigUtils) => void | Configuration)> | Configuration | undefined)",
        value: input.webpack
    })), (null !== input.webpackChain || _report(_exceptionable, {
        path: _path + ".webpackChain",
        expected: "(Array<__type>.o6 | undefined)",
        value: input.webpackChain
    })) && (undefined === input.webpackChain || "function" === typeof input.webpackChain || (Array.isArray(input.webpackChain) || _report(_exceptionable, {
        path: _path + ".webpackChain",
        expected: "(Array<__type>.o6 | undefined)",
        value: input.webpackChain
    })) && input.webpackChain.map((elem, _index423) => true || _report(_exceptionable, {
        path: _path + ".webpackChain[" + _index423 + "]",
        expected: "unknown",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".webpackChain",
        expected: "(Array<__type>.o6 | undefined)",
        value: input.webpackChain
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["bundlerChain", "cssLoader", "postcss", "styleLoader", "htmlPlugin", "swc", "lightningcssLoader", "cssExtract", "rspack", "webpack", "webpackChain"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo41 = (input, _path, _exceptionable = true) => [(null !== input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(__type.o2 | boolean | undefined)",
        value: input.url
    })) && (undefined === input.url || "boolean" === typeof input.url || ("object" === typeof input.url && null !== input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(__type.o2 | boolean | undefined)",
        value: input.url
    })) && _vo42(input.url, _path + ".url", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(__type.o2 | boolean | undefined)",
        value: input.url
    })), (null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(__type.o3 | boolean | undefined)",
        value: input["import"]
    })) && (undefined === input["import"] || "boolean" === typeof input["import"] || ("object" === typeof input["import"] && null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(__type.o3 | boolean | undefined)",
        value: input["import"]
    })) && _vo43(input["import"], _path + "[\"import\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(__type.o3 | boolean | undefined)",
        value: input["import"]
    })), (null !== input.modules || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CSSLoaderModulesOptions | boolean | string | undefined)",
        value: input.modules
    })) && (undefined === input.modules || "string" === typeof input.modules || "boolean" === typeof input.modules || ("object" === typeof input.modules && null !== input.modules && false === Array.isArray(input.modules) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CSSLoaderModulesOptions | boolean | string | undefined)",
        value: input.modules
    })) && _vo44(input.modules, _path + ".modules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CSSLoaderModulesOptions | boolean | string | undefined)",
        value: input.modules
    })), undefined === input.sourceMap || "boolean" === typeof input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(boolean | undefined)",
        value: input.sourceMap
    }), undefined === input.importLoaders || "number" === typeof input.importLoaders || _report(_exceptionable, {
        path: _path + ".importLoaders",
        expected: "(number | undefined)",
        value: input.importLoaders
    }), undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), undefined === input.exportType || "string" === input.exportType || "array" === input.exportType || "css-style-sheet" === input.exportType || _report(_exceptionable, {
        path: _path + ".exportType",
        expected: "(\"array\" | \"css-style-sheet\" | \"string\" | undefined)",
        value: input.exportType
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["url", "import", "modules", "sourceMap", "importLoaders", "esModule", "exportType"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo42 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".filter",
        expected: "unknown",
        value: input.filter
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["filter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo43 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".filter",
        expected: "unknown",
        value: input.filter
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["filter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo44 = (input, _path, _exceptionable = true) => [(null !== input.auto || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })) && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })), undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals || _report(_exceptionable, {
        path: _path + ".exportGlobals",
        expected: "(boolean | undefined)",
        value: input.exportGlobals
    }), (null !== input.exportLocalsConvention || _report(_exceptionable, {
        path: _path + ".exportLocalsConvention",
        expected: "(\"as-is\" | \"asIs\" | \"camel-case\" | \"camel-case-only\" | \"camelCase\" | \"camelCaseOnly\" | \"dashes\" | \"dashes-only\" | \"dashesOnly\" | undefined)",
        value: input.exportLocalsConvention
    })) && (undefined === input.exportLocalsConvention || "function" === typeof input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention || "as-is" === input.exportLocalsConvention || "camel-case" === input.exportLocalsConvention || "camel-case-only" === input.exportLocalsConvention || "dashes-only" === input.exportLocalsConvention || _report(_exceptionable, {
        path: _path + ".exportLocalsConvention",
        expected: "(\"as-is\" | \"asIs\" | \"camel-case\" | \"camel-case-only\" | \"camelCase\" | \"camelCaseOnly\" | \"dashes\" | \"dashes-only\" | \"dashesOnly\" | undefined)",
        value: input.exportLocalsConvention
    })), undefined === input.exportOnlyLocals || "boolean" === typeof input.exportOnlyLocals || _report(_exceptionable, {
        path: _path + ".exportOnlyLocals",
        expected: "(boolean | undefined)",
        value: input.exportOnlyLocals
    }), undefined === input.getLocalIdent || true || _report(_exceptionable, {
        path: _path + ".getLocalIdent",
        expected: "undefined",
        value: input.getLocalIdent
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), undefined === input.localIdentContext || "string" === typeof input.localIdentContext || _report(_exceptionable, {
        path: _path + ".localIdentContext",
        expected: "(string | undefined)",
        value: input.localIdentContext
    }), undefined === input.localIdentHashSalt || "string" === typeof input.localIdentHashSalt || _report(_exceptionable, {
        path: _path + ".localIdentHashSalt",
        expected: "(string | undefined)",
        value: input.localIdentHashSalt
    }), undefined === input.localIdentHashFunction || "string" === typeof input.localIdentHashFunction || _report(_exceptionable, {
        path: _path + ".localIdentHashFunction",
        expected: "(string | undefined)",
        value: input.localIdentHashFunction
    }), undefined === input.localIdentHashDigest || "string" === typeof input.localIdentHashDigest || _report(_exceptionable, {
        path: _path + ".localIdentHashDigest",
        expected: "(string | undefined)",
        value: input.localIdentHashDigest
    }), (null !== input.localIdentRegExp || _report(_exceptionable, {
        path: _path + ".localIdentRegExp",
        expected: "(RegExp | string | undefined)",
        value: input.localIdentRegExp
    })) && (undefined === input.localIdentRegExp || "string" === typeof input.localIdentRegExp || input.localIdentRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".localIdentRegExp",
        expected: "(RegExp | string | undefined)",
        value: input.localIdentRegExp
    })), (null !== input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"global\" | \"icss\" | \"local\" | \"pure\" | undefined)",
        value: input.mode
    })) && (undefined === input.mode || "function" === typeof input.mode || "local" === input.mode || "global" === input.mode || "pure" === input.mode || "icss" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"global\" | \"icss\" | \"local\" | \"pure\" | undefined)",
        value: input.mode
    })), undefined === input.namedExport || "boolean" === typeof input.namedExport || _report(_exceptionable, {
        path: _path + ".namedExport",
        expected: "(boolean | undefined)",
        value: input.namedExport
    }), undefined === input.getJSON || true || _report(_exceptionable, {
        path: _path + ".getJSON",
        expected: "undefined",
        value: input.getJSON
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["auto", "exportGlobals", "exportLocalsConvention", "exportOnlyLocals", "getLocalIdent", "localIdentName", "localIdentContext", "localIdentHashSalt", "localIdentHashFunction", "localIdentHashDigest", "localIdentRegExp", "mode", "namedExport", "getJSON"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo45 = (input, _path, _exceptionable = true) => [undefined === input.execute || "boolean" === typeof input.execute || _report(_exceptionable, {
        path: _path + ".execute",
        expected: "(boolean | undefined)",
        value: input.execute
    }), undefined === input.sourceMap || "boolean" === typeof input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(boolean | undefined)",
        value: input.sourceMap
    }), true, (null !== input.postcssOptions || _report(_exceptionable, {
        path: _path + ".postcssOptions",
        expected: "(PostCSSOptions | undefined)",
        value: input.postcssOptions
    })) && (undefined === input.postcssOptions || "function" === typeof input.postcssOptions || ("object" === typeof input.postcssOptions && null !== input.postcssOptions && false === Array.isArray(input.postcssOptions) || _report(_exceptionable, {
        path: _path + ".postcssOptions",
        expected: "(PostCSSOptions | undefined)",
        value: input.postcssOptions
    })) && _vo46(input.postcssOptions, _path + ".postcssOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".postcssOptions",
        expected: "(PostCSSOptions | undefined)",
        value: input.postcssOptions
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["execute", "sourceMap", "implementation", "postcssOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo46 = (input, _path, _exceptionable = true) => [undefined === input.document || "string" === typeof input.document || _report(_exceptionable, {
        path: _path + ".document",
        expected: "(string | undefined)",
        value: input.document
    }), undefined === input.from || "string" === typeof input.from || _report(_exceptionable, {
        path: _path + ".from",
        expected: "(string | undefined)",
        value: input.from
    }), (null !== input.map || _report(_exceptionable, {
        path: _path + ".map",
        expected: "(boolean | postcss.SourceMapOptions | undefined)",
        value: input.map
    })) && (undefined === input.map || "boolean" === typeof input.map || ("object" === typeof input.map && null !== input.map && false === Array.isArray(input.map) || _report(_exceptionable, {
        path: _path + ".map",
        expected: "(boolean | postcss.SourceMapOptions | undefined)",
        value: input.map
    })) && _vo47(input.map, _path + ".map", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".map",
        expected: "(boolean | postcss.SourceMapOptions | undefined)",
        value: input.map
    })), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(postcss.Parser<Document_ | Root_> | postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.parser
    })) && _vu7(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(postcss.Parser<Document_ | Root_> | postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.parser
    }), undefined === input.stringifier || ("object" === typeof input.stringifier && null !== input.stringifier && false === Array.isArray(input.stringifier) || _report(_exceptionable, {
        path: _path + ".stringifier",
        expected: "(postcss.Stringifier | postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.stringifier
    })) && _vu8(input.stringifier, _path + ".stringifier", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stringifier",
        expected: "(postcss.Stringifier | postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.stringifier
    }), undefined === input.syntax || ("object" === typeof input.syntax && null !== input.syntax && false === Array.isArray(input.syntax) || _report(_exceptionable, {
        path: _path + ".syntax",
        expected: "(postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.syntax
    })) && _vo50(input.syntax, _path + ".syntax", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".syntax",
        expected: "(postcss.Syntax<Document_ | Root_> | undefined)",
        value: input.syntax
    }), undefined === input.to || "string" === typeof input.to || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(string | undefined)",
        value: input.to
    }), undefined === input.config || "boolean" === typeof input.config || _report(_exceptionable, {
        path: _path + ".config",
        expected: "(boolean | undefined)",
        value: input.config
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<postcss.AcceptedPlugin> | undefined)",
        value: input.plugins
    })) && input.plugins.map((elem, _index424) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index424 + "]",
        expected: "(Processor_ | __type.o9 | postcss.OldPlugin<any> | postcss.Plugin | postcss.PluginCreator<any> | postcss.TransformCallback)",
        value: elem
    })) && _vu2(elem, _path + ".plugins[" + _index424 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index424 + "]",
        expected: "(Processor_ | __type.o9 | postcss.OldPlugin<any> | postcss.Plugin | postcss.PluginCreator<any> | postcss.TransformCallback)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<postcss.AcceptedPlugin> | undefined)",
        value: input.plugins
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["document", "from", "map", "parser", "stringifier", "syntax", "to", "config", "plugins"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo47 = (input, _path, _exceptionable = true) => [undefined === input.absolute || "boolean" === typeof input.absolute || _report(_exceptionable, {
        path: _path + ".absolute",
        expected: "(boolean | undefined)",
        value: input.absolute
    }), (null !== input.annotation || _report(_exceptionable, {
        path: _path + ".annotation",
        expected: "(boolean | string | undefined)",
        value: input.annotation
    })) && (undefined === input.annotation || "function" === typeof input.annotation || "string" === typeof input.annotation || "boolean" === typeof input.annotation || _report(_exceptionable, {
        path: _path + ".annotation",
        expected: "(boolean | string | undefined)",
        value: input.annotation
    })), undefined === input.from || "string" === typeof input.from || _report(_exceptionable, {
        path: _path + ".from",
        expected: "(string | undefined)",
        value: input.from
    }), undefined === input.inline || "boolean" === typeof input.inline || _report(_exceptionable, {
        path: _path + ".inline",
        expected: "(boolean | undefined)",
        value: input.inline
    }), (null !== input.prev || _report(_exceptionable, {
        path: _path + ".prev",
        expected: "(boolean | object | string | undefined)",
        value: input.prev
    })) && (undefined === input.prev || "function" === typeof input.prev || "string" === typeof input.prev || "boolean" === typeof input.prev || ("object" === typeof input.prev && null !== input.prev && false === Array.isArray(input.prev) || _report(_exceptionable, {
        path: _path + ".prev",
        expected: "(boolean | object | string | undefined)",
        value: input.prev
    })) && _vo48(input.prev, _path + ".prev", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prev",
        expected: "(boolean | object | string | undefined)",
        value: input.prev
    })), undefined === input.sourcesContent || "boolean" === typeof input.sourcesContent || _report(_exceptionable, {
        path: _path + ".sourcesContent",
        expected: "(boolean | undefined)",
        value: input.sourcesContent
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["absolute", "annotation", "from", "inline", "prev", "sourcesContent"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo48 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo49 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo50 = (input, _path, _exceptionable = true) => [undefined === input.parse || ("object" === typeof input.parse && null !== input.parse || _report(_exceptionable, {
        path: _path + ".parse",
        expected: "(postcss.Parser<Document_ | Root_> | undefined)",
        value: input.parse
    })) && _vo49(input.parse, _path + ".parse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parse",
        expected: "(postcss.Parser<Document_ | Root_> | undefined)",
        value: input.parse
    }), undefined === input.stringify || ("object" === typeof input.stringify && null !== input.stringify || _report(_exceptionable, {
        path: _path + ".stringify",
        expected: "(postcss.Stringifier | undefined)",
        value: input.stringify
    })) && _vo51(input.stringify, _path + ".stringify", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stringify",
        expected: "(postcss.Stringifier | undefined)",
        value: input.stringify
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["parse", "stringify"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo51 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo52 = (input, _path, _exceptionable = true) => [(Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "Array<Plugin | TransformCallback | Transformer>",
        value: input.plugins
    })) && input.plugins.map((elem, _index425) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index425 + "]",
        expected: "(postcss.Plugin | postcss.TransformCallback | postcss.Transformer)",
        value: elem
    })) && _vu3(elem, _path + ".plugins[" + _index425 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index425 + "]",
        expected: "(postcss.Plugin | postcss.TransformCallback | postcss.Transformer)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "Array<Plugin | TransformCallback | Transformer>",
        value: input.plugins
    }), "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "string",
        value: input.version
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["plugins", "version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo53 = (input, _path, _exceptionable = true) => ["string" === typeof input.postcssPlugin || _report(_exceptionable, {
        path: _path + ".postcssPlugin",
        expected: "string",
        value: input.postcssPlugin
    }), undefined === input.prepare || true || _report(_exceptionable, {
        path: _path + ".prepare",
        expected: "undefined",
        value: input.prepare
    }), (null !== input.AtRule || _report(_exceptionable, {
        path: _path + ".AtRule",
        expected: "(__type.o5 | undefined)",
        value: input.AtRule
    })) && (undefined === input.AtRule || "function" === typeof input.AtRule || ("object" === typeof input.AtRule && null !== input.AtRule && false === Array.isArray(input.AtRule) || _report(_exceptionable, {
        path: _path + ".AtRule",
        expected: "(__type.o5 | undefined)",
        value: input.AtRule
    })) && _vo54(input.AtRule, _path + ".AtRule", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".AtRule",
        expected: "(__type.o5 | undefined)",
        value: input.AtRule
    })), (null !== input.AtRuleExit || _report(_exceptionable, {
        path: _path + ".AtRuleExit",
        expected: "(__type.o6 | undefined)",
        value: input.AtRuleExit
    })) && (undefined === input.AtRuleExit || "function" === typeof input.AtRuleExit || ("object" === typeof input.AtRuleExit && null !== input.AtRuleExit && false === Array.isArray(input.AtRuleExit) || _report(_exceptionable, {
        path: _path + ".AtRuleExit",
        expected: "(__type.o6 | undefined)",
        value: input.AtRuleExit
    })) && _vo55(input.AtRuleExit, _path + ".AtRuleExit", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".AtRuleExit",
        expected: "(__type.o6 | undefined)",
        value: input.AtRuleExit
    })), undefined === input.Comment || true || _report(_exceptionable, {
        path: _path + ".Comment",
        expected: "undefined",
        value: input.Comment
    }), undefined === input.CommentExit || true || _report(_exceptionable, {
        path: _path + ".CommentExit",
        expected: "undefined",
        value: input.CommentExit
    }), (null !== input.Declaration || _report(_exceptionable, {
        path: _path + ".Declaration",
        expected: "(__type.o7 | undefined)",
        value: input.Declaration
    })) && (undefined === input.Declaration || "function" === typeof input.Declaration || ("object" === typeof input.Declaration && null !== input.Declaration && false === Array.isArray(input.Declaration) || _report(_exceptionable, {
        path: _path + ".Declaration",
        expected: "(__type.o7 | undefined)",
        value: input.Declaration
    })) && _vo56(input.Declaration, _path + ".Declaration", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".Declaration",
        expected: "(__type.o7 | undefined)",
        value: input.Declaration
    })), (null !== input.DeclarationExit || _report(_exceptionable, {
        path: _path + ".DeclarationExit",
        expected: "(__type.o8 | undefined)",
        value: input.DeclarationExit
    })) && (undefined === input.DeclarationExit || "function" === typeof input.DeclarationExit || ("object" === typeof input.DeclarationExit && null !== input.DeclarationExit && false === Array.isArray(input.DeclarationExit) || _report(_exceptionable, {
        path: _path + ".DeclarationExit",
        expected: "(__type.o8 | undefined)",
        value: input.DeclarationExit
    })) && _vo57(input.DeclarationExit, _path + ".DeclarationExit", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".DeclarationExit",
        expected: "(__type.o8 | undefined)",
        value: input.DeclarationExit
    })), undefined === input.Document || true || _report(_exceptionable, {
        path: _path + ".Document",
        expected: "undefined",
        value: input.Document
    }), undefined === input.DocumentExit || true || _report(_exceptionable, {
        path: _path + ".DocumentExit",
        expected: "undefined",
        value: input.DocumentExit
    }), undefined === input.Once || true || _report(_exceptionable, {
        path: _path + ".Once",
        expected: "undefined",
        value: input.Once
    }), undefined === input.OnceExit || true || _report(_exceptionable, {
        path: _path + ".OnceExit",
        expected: "undefined",
        value: input.OnceExit
    }), undefined === input.Root || true || _report(_exceptionable, {
        path: _path + ".Root",
        expected: "undefined",
        value: input.Root
    }), undefined === input.RootExit || true || _report(_exceptionable, {
        path: _path + ".RootExit",
        expected: "undefined",
        value: input.RootExit
    }), undefined === input.Rule || true || _report(_exceptionable, {
        path: _path + ".Rule",
        expected: "undefined",
        value: input.Rule
    }), undefined === input.RuleExit || true || _report(_exceptionable, {
        path: _path + ".RuleExit",
        expected: "undefined",
        value: input.RuleExit
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["postcssPlugin", "prepare", "AtRule", "AtRuleExit", "Comment", "CommentExit", "Declaration", "DeclarationExit", "Document", "DocumentExit", "Once", "OnceExit", "Root", "RootExit", "Rule", "RuleExit"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo54 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "unknown",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo55 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "unknown",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo56 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "unknown",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo57 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "unknown",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo58 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo59 = (input, _path, _exceptionable = true) => ["string" === typeof input.postcssPlugin || _report(_exceptionable, {
        path: _path + ".postcssPlugin",
        expected: "string",
        value: input.postcssPlugin
    }), "string" === typeof input.postcssVersion || _report(_exceptionable, {
        path: _path + ".postcssVersion",
        expected: "string",
        value: input.postcssVersion
    }), true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 7 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["postcssPlugin", "postcssVersion", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo60 = (input, _path, _exceptionable = true) => [("object" === typeof input.postcss && null !== input.postcss || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "(Processor_ | postcss.TransformCallback)",
        value: input.postcss
    })) && _vu9(input.postcss, _path + ".postcss", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "(Processor_ | postcss.TransformCallback)",
        value: input.postcss
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["postcss"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo61 = (input, _path, _exceptionable = true) => [("object" === typeof input.postcss && null !== input.postcss || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "postcss.Transformer",
        value: input.postcss
    })) && _vo59(input.postcss, _path + ".postcss", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "postcss.Transformer",
        value: input.postcss
    }), "string" === typeof input.postcssPlugin || _report(_exceptionable, {
        path: _path + ".postcssPlugin",
        expected: "string",
        value: input.postcssPlugin
    }), "string" === typeof input.postcssVersion || _report(_exceptionable, {
        path: _path + ".postcssVersion",
        expected: "string",
        value: input.postcssVersion
    }), true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 8 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["postcss", "postcssPlugin", "postcssVersion", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo62 = (input, _path, _exceptionable = true) => [true === input.postcss || _report(_exceptionable, {
        path: _path + ".postcss",
        expected: "true",
        value: input.postcss
    }), true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 6 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["postcss", "prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo63 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), undefined === input.injectType || "styleTag" === input.injectType || "singletonStyleTag" === input.injectType || "lazyStyleTag" === input.injectType || "lazySingletonStyleTag" === input.injectType || "linkTag" === input.injectType || _report(_exceptionable, {
        path: _path + ".injectType",
        expected: "(\"lazySingletonStyleTag\" | \"lazyStyleTag\" | \"linkTag\" | \"singletonStyleTag\" | \"styleTag\" | undefined)",
        value: input.injectType
    }), undefined === input.attributes || ("object" === typeof input.attributes && null !== input.attributes && false === Array.isArray(input.attributes) || _report(_exceptionable, {
        path: _path + ".attributes",
        expected: "(Record<string, string> | undefined)",
        value: input.attributes
    })) && _vo64(input.attributes, _path + ".attributes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".attributes",
        expected: "(Record<string, string> | undefined)",
        value: input.attributes
    }), (null !== input.insert || _report(_exceptionable, {
        path: _path + ".insert",
        expected: "(string | undefined)",
        value: input.insert
    })) && (undefined === input.insert || "function" === typeof input.insert || "string" === typeof input.insert || _report(_exceptionable, {
        path: _path + ".insert",
        expected: "(string | undefined)",
        value: input.insert
    })), (null !== input.styleTagTransform || _report(_exceptionable, {
        path: _path + ".styleTagTransform",
        expected: "(string | undefined)",
        value: input.styleTagTransform
    })) && (undefined === input.styleTagTransform || "function" === typeof input.styleTagTransform || "string" === typeof input.styleTagTransform || _report(_exceptionable, {
        path: _path + ".styleTagTransform",
        expected: "(string | undefined)",
        value: input.styleTagTransform
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule", "injectType", "attributes", "insert", "styleTagTransform"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo64 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo65 = (input, _path, _exceptionable = true) => [undefined === input.cache || "boolean" === typeof input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(boolean | undefined)",
        value: input.cache
    }), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | Array<string> | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "all" === input.chunks || (Array.isArray(input.chunks) || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | Array<string> | undefined)",
        value: input.chunks
    })) && input.chunks.map((elem, _index426) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".chunks[" + _index426 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | Array<string> | undefined)",
        value: input.chunks
    })), (null !== input.chunksSortMode || _report(_exceptionable, {
        path: _path + ".chunksSortMode",
        expected: "(\"auto\" | \"manual\" | \"none\" | undefined)",
        value: input.chunksSortMode
    })) && (undefined === input.chunksSortMode || "function" === typeof input.chunksSortMode || "none" === input.chunksSortMode || "auto" === input.chunksSortMode || "manual" === input.chunksSortMode || _report(_exceptionable, {
        path: _path + ".chunksSortMode",
        expected: "(\"auto\" | \"manual\" | \"none\" | undefined)",
        value: input.chunksSortMode
    })), undefined === input.excludeChunks || (Array.isArray(input.excludeChunks) || _report(_exceptionable, {
        path: _path + ".excludeChunks",
        expected: "(Array<string> | undefined)",
        value: input.excludeChunks
    })) && input.excludeChunks.map((elem, _index427) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".excludeChunks[" + _index427 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeChunks",
        expected: "(Array<string> | undefined)",
        value: input.excludeChunks
    }), undefined === input.favicon || false === input.favicon || "string" === typeof input.favicon || _report(_exceptionable, {
        path: _path + ".favicon",
        expected: "(false | string | undefined)",
        value: input.favicon
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    }), undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.inject || "body" === input.inject || "head" === input.inject || "boolean" === typeof input.inject || _report(_exceptionable, {
        path: _path + ".inject",
        expected: "(\"body\" | \"head\" | boolean | undefined)",
        value: input.inject
    }), undefined === input.scriptLoading || "module" === input.scriptLoading || "defer" === input.scriptLoading || "blocking" === input.scriptLoading || "systemjs-module" === input.scriptLoading || _report(_exceptionable, {
        path: _path + ".scriptLoading",
        expected: "(\"blocking\" | \"defer\" | \"module\" | \"systemjs-module\" | undefined)",
        value: input.scriptLoading
    }), (null !== input.meta || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(__type.o10 | false | undefined)",
        value: input.meta
    })) && (undefined === input.meta || false === input.meta || ("object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(__type.o10 | false | undefined)",
        value: input.meta
    })) && _vo66(input.meta, _path + ".meta", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".meta",
        expected: "(__type.o10 | false | undefined)",
        value: input.meta
    })), undefined === input.minify || true || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "undefined",
        value: input.minify
    }), undefined === input.showErrors || "boolean" === typeof input.showErrors || _report(_exceptionable, {
        path: _path + ".showErrors",
        expected: "(boolean | undefined)",
        value: input.showErrors
    }), undefined === input.template || "string" === typeof input.template || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(string | undefined)",
        value: input.template
    }), (null !== input.templateContent || _report(_exceptionable, {
        path: _path + ".templateContent",
        expected: "(false | string | string | undefined)",
        value: input.templateContent
    })) && (undefined === input.templateContent || "function" === typeof input.templateContent || false === input.templateContent || "string" === typeof input.templateContent || ("object" === typeof input.templateContent && null !== input.templateContent || _report(_exceptionable, {
        path: _path + ".templateContent",
        expected: "(false | string | string | undefined)",
        value: input.templateContent
    })) && _vo68(input.templateContent, _path + ".templateContent", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".templateContent",
        expected: "(false | string | string | undefined)",
        value: input.templateContent
    })), (null !== input.templateParameters || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(__type.o12 | false | undefined)",
        value: input.templateParameters
    })) && (undefined === input.templateParameters || "function" === typeof input.templateParameters || false === input.templateParameters || ("object" === typeof input.templateParameters && null !== input.templateParameters && false === Array.isArray(input.templateParameters) || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(__type.o12 | false | undefined)",
        value: input.templateParameters
    })) && _vo69(input.templateParameters, _path + ".templateParameters", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".templateParameters",
        expected: "(__type.o12 | false | undefined)",
        value: input.templateParameters
    })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
        path: _path + ".title",
        expected: "(string | undefined)",
        value: input.title
    }), undefined === input.xhtml || "boolean" === typeof input.xhtml || _report(_exceptionable, {
        path: _path + ".xhtml",
        expected: "(boolean | undefined)",
        value: input.xhtml
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["cache", "chunks", "chunksSortMode", "excludeChunks", "favicon", "filename", "publicPath", "hash", "inject", "scriptLoading", "meta", "minify", "showErrors", "template", "templateContent", "templateParameters", "title", "xhtml"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo66 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(__type.o11 | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(__type.o11 | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(__type.o11 | false | string)",
            value: value
        })) && _vo67(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(__type.o11 | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo67 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || "boolean" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(boolean | string)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo68 = (input, _path, _exceptionable = true) => ["string" === typeof input["__@toStringTag@729"] || _report(_exceptionable, {
        path: _path + "[\"__@toStringTag@729\"]",
        expected: "string",
        value: input["__@toStringTag@729"]
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["__@toStringTag@729"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo69 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo70 = (input, _path, _exceptionable = true) => [(null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<string> | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "string" === typeof input.test || (Array.isArray(input.test) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<string> | string | undefined)",
        value: input.test
    })) && input.test.map((elem, _index428) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".test[" + _index428 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<string> | string | undefined)",
        value: input.test
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string> | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "string" === typeof input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string> | string | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index429) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index429 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string> | string | undefined)",
        value: input.exclude
    })), undefined === input.env || ("object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) || _report(_exceptionable, {
        path: _path + ".env",
        expected: "(EnvConfig | undefined)",
        value: input.env
    })) && _vo71(input.env, _path + ".env", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".env",
        expected: "(EnvConfig | undefined)",
        value: input.env
    }), undefined === input.jsc || ("object" === typeof input.jsc && null !== input.jsc && false === Array.isArray(input.jsc) || _report(_exceptionable, {
        path: _path + ".jsc",
        expected: "(JscConfig | undefined)",
        value: input.jsc
    })) && _vo72(input.jsc, _path + ".jsc", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".jsc",
        expected: "(JscConfig | undefined)",
        value: input.jsc
    }), undefined === input["module"] || ("object" === typeof input["module"] && null !== input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(AmdConfig | CommonJsConfig | Es6Config | NodeNextConfig | SystemjsConfig | UmdConfig | undefined)",
        value: input["module"]
    })) && _vu10(input["module"], _path + "[\"module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(AmdConfig | CommonJsConfig | Es6Config | NodeNextConfig | SystemjsConfig | UmdConfig | undefined)",
        value: input["module"]
    }), undefined === input.minify || "boolean" === typeof input.minify || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(boolean | undefined)",
        value: input.minify
    }), undefined === input.sourceMaps || "inline" === input.sourceMaps || "boolean" === typeof input.sourceMaps || _report(_exceptionable, {
        path: _path + ".sourceMaps",
        expected: "(\"inline\" | boolean | undefined)",
        value: input.sourceMaps
    }), undefined === input.inlineSourcesContent || "boolean" === typeof input.inlineSourcesContent || _report(_exceptionable, {
        path: _path + ".inlineSourcesContent",
        expected: "(boolean | undefined)",
        value: input.inlineSourcesContent
    }), undefined === input.isModule || "unknown" === input.isModule || "boolean" === typeof input.isModule || _report(_exceptionable, {
        path: _path + ".isModule",
        expected: "(\"unknown\" | boolean | undefined)",
        value: input.isModule
    }), undefined === input.rspackExperiments || ("object" === typeof input.rspackExperiments && null !== input.rspackExperiments && false === Array.isArray(input.rspackExperiments) || _report(_exceptionable, {
        path: _path + ".rspackExperiments",
        expected: "(__type.o20 | undefined)",
        value: input.rspackExperiments
    })) && _vo99(input.rspackExperiments, _path + ".rspackExperiments", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspackExperiments",
        expected: "(__type.o20 | undefined)",
        value: input.rspackExperiments
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["test", "exclude", "env", "jsc", "module", "minify", "sourceMaps", "inlineSourcesContent", "isModule", "rspackExperiments"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo71 = (input, _path, _exceptionable = true) => [undefined === input.mode || "entry" === input.mode || "usage" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"entry\" | \"usage\" | undefined)",
        value: input.mode
    }), undefined === input.debug || "boolean" === typeof input.debug || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(boolean | undefined)",
        value: input.debug
    }), undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport || _report(_exceptionable, {
        path: _path + ".dynamicImport",
        expected: "(boolean | undefined)",
        value: input.dynamicImport
    }), undefined === input.loose || "boolean" === typeof input.loose || _report(_exceptionable, {
        path: _path + ".loose",
        expected: "(boolean | undefined)",
        value: input.loose
    }), undefined === input.bugfixes || "boolean" === typeof input.bugfixes || _report(_exceptionable, {
        path: _path + ".bugfixes",
        expected: "(boolean | undefined)",
        value: input.bugfixes
    }), undefined === input.skip || (Array.isArray(input.skip) || _report(_exceptionable, {
        path: _path + ".skip",
        expected: "(Array<string> | undefined)",
        value: input.skip
    })) && input.skip.map((elem, _index430) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".skip[" + _index430 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".skip",
        expected: "(Array<string> | undefined)",
        value: input.skip
    }), undefined === input.include || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string> | undefined)",
        value: input.include
    })) && input.include.map((elem, _index431) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".include[" + _index431 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string> | undefined)",
        value: input.include
    }), undefined === input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string> | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index432) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index432 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string> | undefined)",
        value: input.exclude
    }), undefined === input.coreJs || "string" === typeof input.coreJs || _report(_exceptionable, {
        path: _path + ".coreJs",
        expected: "(string | undefined)",
        value: input.coreJs
    }), true, undefined === input.path || "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(string | undefined)",
        value: input.path
    }), undefined === input.shippedProposals || "boolean" === typeof input.shippedProposals || _report(_exceptionable, {
        path: _path + ".shippedProposals",
        expected: "(boolean | undefined)",
        value: input.shippedProposals
    }), undefined === input.forceAllTransforms || "boolean" === typeof input.forceAllTransforms || _report(_exceptionable, {
        path: _path + ".forceAllTransforms",
        expected: "(boolean | undefined)",
        value: input.forceAllTransforms
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["mode", "debug", "dynamicImport", "loose", "bugfixes", "skip", "include", "exclude", "coreJs", "targets", "path", "shippedProposals", "forceAllTransforms"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo72 = (input, _path, _exceptionable = true) => [undefined === input.assumptions || ("object" === typeof input.assumptions && null !== input.assumptions && false === Array.isArray(input.assumptions) || _report(_exceptionable, {
        path: _path + ".assumptions",
        expected: "(Assumptions | undefined)",
        value: input.assumptions
    })) && _vo73(input.assumptions, _path + ".assumptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assumptions",
        expected: "(Assumptions | undefined)",
        value: input.assumptions
    }), undefined === input.loose || "boolean" === typeof input.loose || _report(_exceptionable, {
        path: _path + ".loose",
        expected: "(boolean | undefined)",
        value: input.loose
    }), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(EsParserConfig | TsParserConfig | undefined)",
        value: input.parser
    })) && _vu11(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(EsParserConfig | TsParserConfig | undefined)",
        value: input.parser
    }), undefined === input.transform || ("object" === typeof input.transform && null !== input.transform && false === Array.isArray(input.transform) || _report(_exceptionable, {
        path: _path + ".transform",
        expected: "(TransformConfig | undefined)",
        value: input.transform
    })) && _vo76(input.transform, _path + ".transform", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".transform",
        expected: "(TransformConfig | undefined)",
        value: input.transform
    }), undefined === input.externalHelpers || "boolean" === typeof input.externalHelpers || _report(_exceptionable, {
        path: _path + ".externalHelpers",
        expected: "(boolean | undefined)",
        value: input.externalHelpers
    }), undefined === input.target || true === _vv433.has(input.target) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es2023\" | \"es2024\" | \"es3\" | \"es5\" | \"esnext\" | undefined)",
        value: input.target
    }), undefined === input.keepClassNames || "boolean" === typeof input.keepClassNames || _report(_exceptionable, {
        path: _path + ".keepClassNames",
        expected: "(boolean | undefined)",
        value: input.keepClassNames
    }), undefined === input.experimental || ("object" === typeof input.experimental && null !== input.experimental && false === Array.isArray(input.experimental) || _report(_exceptionable, {
        path: _path + ".experimental",
        expected: "(__type.o16 | undefined)",
        value: input.experimental
    })) && _vo84(input.experimental, _path + ".experimental", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".experimental",
        expected: "(__type.o16 | undefined)",
        value: input.experimental
    }), undefined === input.baseUrl || "string" === typeof input.baseUrl || _report(_exceptionable, {
        path: _path + ".baseUrl",
        expected: "(string | undefined)",
        value: input.baseUrl
    }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(__type.o17 | undefined)",
        value: input.paths
    })) && _vo86(input.paths, _path + ".paths", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(__type.o17 | undefined)",
        value: input.paths
    }), undefined === input.minify || ("object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(JsMinifyOptions | undefined)",
        value: input.minify
    })) && _vo87(input.minify, _path + ".minify", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(JsMinifyOptions | undefined)",
        value: input.minify
    }), undefined === input.preserveAllComments || "boolean" === typeof input.preserveAllComments || _report(_exceptionable, {
        path: _path + ".preserveAllComments",
        expected: "(boolean | undefined)",
        value: input.preserveAllComments
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assumptions", "loose", "parser", "transform", "externalHelpers", "target", "keepClassNames", "experimental", "baseUrl", "paths", "minify", "preserveAllComments"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo73 = (input, _path, _exceptionable = true) => [undefined === input.arrayLikeIsIterable || "boolean" === typeof input.arrayLikeIsIterable || _report(_exceptionable, {
        path: _path + ".arrayLikeIsIterable",
        expected: "(boolean | undefined)",
        value: input.arrayLikeIsIterable
    }), undefined === input.constantReexports || "boolean" === typeof input.constantReexports || _report(_exceptionable, {
        path: _path + ".constantReexports",
        expected: "(boolean | undefined)",
        value: input.constantReexports
    }), undefined === input.constantSuper || "boolean" === typeof input.constantSuper || _report(_exceptionable, {
        path: _path + ".constantSuper",
        expected: "(boolean | undefined)",
        value: input.constantSuper
    }), undefined === input.enumerableModuleMeta || "boolean" === typeof input.enumerableModuleMeta || _report(_exceptionable, {
        path: _path + ".enumerableModuleMeta",
        expected: "(boolean | undefined)",
        value: input.enumerableModuleMeta
    }), undefined === input.ignoreFunctionLength || "boolean" === typeof input.ignoreFunctionLength || _report(_exceptionable, {
        path: _path + ".ignoreFunctionLength",
        expected: "(boolean | undefined)",
        value: input.ignoreFunctionLength
    }), undefined === input.ignoreFunctionName || "boolean" === typeof input.ignoreFunctionName || _report(_exceptionable, {
        path: _path + ".ignoreFunctionName",
        expected: "(boolean | undefined)",
        value: input.ignoreFunctionName
    }), undefined === input.ignoreToPrimitiveHint || "boolean" === typeof input.ignoreToPrimitiveHint || _report(_exceptionable, {
        path: _path + ".ignoreToPrimitiveHint",
        expected: "(boolean | undefined)",
        value: input.ignoreToPrimitiveHint
    }), undefined === input.iterableIsArray || "boolean" === typeof input.iterableIsArray || _report(_exceptionable, {
        path: _path + ".iterableIsArray",
        expected: "(boolean | undefined)",
        value: input.iterableIsArray
    }), undefined === input.mutableTemplateObject || "boolean" === typeof input.mutableTemplateObject || _report(_exceptionable, {
        path: _path + ".mutableTemplateObject",
        expected: "(boolean | undefined)",
        value: input.mutableTemplateObject
    }), undefined === input.noClassCalls || "boolean" === typeof input.noClassCalls || _report(_exceptionable, {
        path: _path + ".noClassCalls",
        expected: "(boolean | undefined)",
        value: input.noClassCalls
    }), undefined === input.noDocumentAll || "boolean" === typeof input.noDocumentAll || _report(_exceptionable, {
        path: _path + ".noDocumentAll",
        expected: "(boolean | undefined)",
        value: input.noDocumentAll
    }), undefined === input.noIncompleteNsImportDetection || "boolean" === typeof input.noIncompleteNsImportDetection || _report(_exceptionable, {
        path: _path + ".noIncompleteNsImportDetection",
        expected: "(boolean | undefined)",
        value: input.noIncompleteNsImportDetection
    }), undefined === input.noNewArrows || "boolean" === typeof input.noNewArrows || _report(_exceptionable, {
        path: _path + ".noNewArrows",
        expected: "(boolean | undefined)",
        value: input.noNewArrows
    }), undefined === input.objectRestNoSymbols || "boolean" === typeof input.objectRestNoSymbols || _report(_exceptionable, {
        path: _path + ".objectRestNoSymbols",
        expected: "(boolean | undefined)",
        value: input.objectRestNoSymbols
    }), undefined === input.privateFieldsAsProperties || "boolean" === typeof input.privateFieldsAsProperties || _report(_exceptionable, {
        path: _path + ".privateFieldsAsProperties",
        expected: "(boolean | undefined)",
        value: input.privateFieldsAsProperties
    }), undefined === input.pureGetters || "boolean" === typeof input.pureGetters || _report(_exceptionable, {
        path: _path + ".pureGetters",
        expected: "(boolean | undefined)",
        value: input.pureGetters
    }), undefined === input.setClassMethods || "boolean" === typeof input.setClassMethods || _report(_exceptionable, {
        path: _path + ".setClassMethods",
        expected: "(boolean | undefined)",
        value: input.setClassMethods
    }), undefined === input.setComputedProperties || "boolean" === typeof input.setComputedProperties || _report(_exceptionable, {
        path: _path + ".setComputedProperties",
        expected: "(boolean | undefined)",
        value: input.setComputedProperties
    }), undefined === input.setPublicClassFields || "boolean" === typeof input.setPublicClassFields || _report(_exceptionable, {
        path: _path + ".setPublicClassFields",
        expected: "(boolean | undefined)",
        value: input.setPublicClassFields
    }), undefined === input.setSpreadProperties || "boolean" === typeof input.setSpreadProperties || _report(_exceptionable, {
        path: _path + ".setSpreadProperties",
        expected: "(boolean | undefined)",
        value: input.setSpreadProperties
    }), undefined === input.skipForOfIteratorClosing || "boolean" === typeof input.skipForOfIteratorClosing || _report(_exceptionable, {
        path: _path + ".skipForOfIteratorClosing",
        expected: "(boolean | undefined)",
        value: input.skipForOfIteratorClosing
    }), undefined === input.superIsCallableConstructor || "boolean" === typeof input.superIsCallableConstructor || _report(_exceptionable, {
        path: _path + ".superIsCallableConstructor",
        expected: "(boolean | undefined)",
        value: input.superIsCallableConstructor
    }), undefined === input.tsEnumIsReadonly || "boolean" === typeof input.tsEnumIsReadonly || _report(_exceptionable, {
        path: _path + ".tsEnumIsReadonly",
        expected: "(boolean | undefined)",
        value: input.tsEnumIsReadonly
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreFunctionName", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor", "tsEnumIsReadonly"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo74 = (input, _path, _exceptionable = true) => ["typescript" === input.syntax || _report(_exceptionable, {
        path: _path + ".syntax",
        expected: "\"typescript\"",
        value: input.syntax
    }), undefined === input.tsx || "boolean" === typeof input.tsx || _report(_exceptionable, {
        path: _path + ".tsx",
        expected: "(boolean | undefined)",
        value: input.tsx
    }), undefined === input.decorators || "boolean" === typeof input.decorators || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(boolean | undefined)",
        value: input.decorators
    }), undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport || _report(_exceptionable, {
        path: _path + ".dynamicImport",
        expected: "(boolean | undefined)",
        value: input.dynamicImport
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["syntax", "tsx", "decorators", "dynamicImport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo75 = (input, _path, _exceptionable = true) => ["ecmascript" === input.syntax || _report(_exceptionable, {
        path: _path + ".syntax",
        expected: "\"ecmascript\"",
        value: input.syntax
    }), undefined === input.jsx || "boolean" === typeof input.jsx || _report(_exceptionable, {
        path: _path + ".jsx",
        expected: "(boolean | undefined)",
        value: input.jsx
    }), undefined === input.numericSeparator || "boolean" === typeof input.numericSeparator || _report(_exceptionable, {
        path: _path + ".numericSeparator",
        expected: "(boolean | undefined)",
        value: input.numericSeparator
    }), undefined === input.classPrivateProperty || "boolean" === typeof input.classPrivateProperty || _report(_exceptionable, {
        path: _path + ".classPrivateProperty",
        expected: "(boolean | undefined)",
        value: input.classPrivateProperty
    }), undefined === input.privateMethod || "boolean" === typeof input.privateMethod || _report(_exceptionable, {
        path: _path + ".privateMethod",
        expected: "(boolean | undefined)",
        value: input.privateMethod
    }), undefined === input.classProperty || "boolean" === typeof input.classProperty || _report(_exceptionable, {
        path: _path + ".classProperty",
        expected: "(boolean | undefined)",
        value: input.classProperty
    }), undefined === input.functionBind || "boolean" === typeof input.functionBind || _report(_exceptionable, {
        path: _path + ".functionBind",
        expected: "(boolean | undefined)",
        value: input.functionBind
    }), undefined === input.decorators || "boolean" === typeof input.decorators || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(boolean | undefined)",
        value: input.decorators
    }), undefined === input.decoratorsBeforeExport || "boolean" === typeof input.decoratorsBeforeExport || _report(_exceptionable, {
        path: _path + ".decoratorsBeforeExport",
        expected: "(boolean | undefined)",
        value: input.decoratorsBeforeExport
    }), undefined === input.exportDefaultFrom || "boolean" === typeof input.exportDefaultFrom || _report(_exceptionable, {
        path: _path + ".exportDefaultFrom",
        expected: "(boolean | undefined)",
        value: input.exportDefaultFrom
    }), undefined === input.exportNamespaceFrom || "boolean" === typeof input.exportNamespaceFrom || _report(_exceptionable, {
        path: _path + ".exportNamespaceFrom",
        expected: "(boolean | undefined)",
        value: input.exportNamespaceFrom
    }), undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport || _report(_exceptionable, {
        path: _path + ".dynamicImport",
        expected: "(boolean | undefined)",
        value: input.dynamicImport
    }), undefined === input.nullishCoalescing || "boolean" === typeof input.nullishCoalescing || _report(_exceptionable, {
        path: _path + ".nullishCoalescing",
        expected: "(boolean | undefined)",
        value: input.nullishCoalescing
    }), undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining || _report(_exceptionable, {
        path: _path + ".optionalChaining",
        expected: "(boolean | undefined)",
        value: input.optionalChaining
    }), undefined === input.importMeta || "boolean" === typeof input.importMeta || _report(_exceptionable, {
        path: _path + ".importMeta",
        expected: "(boolean | undefined)",
        value: input.importMeta
    }), undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait || _report(_exceptionable, {
        path: _path + ".topLevelAwait",
        expected: "(boolean | undefined)",
        value: input.topLevelAwait
    }), undefined === input.importAssertions || "boolean" === typeof input.importAssertions || _report(_exceptionable, {
        path: _path + ".importAssertions",
        expected: "(boolean | undefined)",
        value: input.importAssertions
    }), undefined === input.importAttributes || "boolean" === typeof input.importAttributes || _report(_exceptionable, {
        path: _path + ".importAttributes",
        expected: "(boolean | undefined)",
        value: input.importAttributes
    }), undefined === input.allowSuperOutsideMethod || "boolean" === typeof input.allowSuperOutsideMethod || _report(_exceptionable, {
        path: _path + ".allowSuperOutsideMethod",
        expected: "(boolean | undefined)",
        value: input.allowSuperOutsideMethod
    }), undefined === input.allowReturnOutsideFunction || "boolean" === typeof input.allowReturnOutsideFunction || _report(_exceptionable, {
        path: _path + ".allowReturnOutsideFunction",
        expected: "(boolean | undefined)",
        value: input.allowReturnOutsideFunction
    }), undefined === input.autoAccessors || "boolean" === typeof input.autoAccessors || _report(_exceptionable, {
        path: _path + ".autoAccessors",
        expected: "(boolean | undefined)",
        value: input.autoAccessors
    }), undefined === input.explicitResourceManagement || "boolean" === typeof input.explicitResourceManagement || _report(_exceptionable, {
        path: _path + ".explicitResourceManagement",
        expected: "(boolean | undefined)",
        value: input.explicitResourceManagement
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["syntax", "jsx", "numericSeparator", "classPrivateProperty", "privateMethod", "classProperty", "functionBind", "decorators", "decoratorsBeforeExport", "exportDefaultFrom", "exportNamespaceFrom", "dynamicImport", "nullishCoalescing", "optionalChaining", "importMeta", "topLevelAwait", "importAssertions", "importAttributes", "allowSuperOutsideMethod", "allowReturnOutsideFunction", "autoAccessors", "explicitResourceManagement"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo76 = (input, _path, _exceptionable = true) => [undefined === input.react || ("object" === typeof input.react && null !== input.react && false === Array.isArray(input.react) || _report(_exceptionable, {
        path: _path + ".react",
        expected: "(ReactConfig | undefined)",
        value: input.react
    })) && _vo77(input.react, _path + ".react", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".react",
        expected: "(ReactConfig | undefined)",
        value: input.react
    }), undefined === input.constModules || ("object" === typeof input.constModules && null !== input.constModules && false === Array.isArray(input.constModules) || _report(_exceptionable, {
        path: _path + ".constModules",
        expected: "(ConstModulesConfig | undefined)",
        value: input.constModules
    })) && _vo78(input.constModules, _path + ".constModules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".constModules",
        expected: "(ConstModulesConfig | undefined)",
        value: input.constModules
    }), undefined === input.optimizer || ("object" === typeof input.optimizer && null !== input.optimizer && false === Array.isArray(input.optimizer) || _report(_exceptionable, {
        path: _path + ".optimizer",
        expected: "(OptimizerConfig | undefined)",
        value: input.optimizer
    })) && _vo81(input.optimizer, _path + ".optimizer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".optimizer",
        expected: "(OptimizerConfig | undefined)",
        value: input.optimizer
    }), undefined === input.legacyDecorator || "boolean" === typeof input.legacyDecorator || _report(_exceptionable, {
        path: _path + ".legacyDecorator",
        expected: "(boolean | undefined)",
        value: input.legacyDecorator
    }), undefined === input.decoratorMetadata || "boolean" === typeof input.decoratorMetadata || _report(_exceptionable, {
        path: _path + ".decoratorMetadata",
        expected: "(boolean | undefined)",
        value: input.decoratorMetadata
    }), undefined === input.decoratorVersion || "2022-03" === input.decoratorVersion || "2021-12" === input.decoratorVersion || _report(_exceptionable, {
        path: _path + ".decoratorVersion",
        expected: "(\"2021-12\" | \"2022-03\" | undefined)",
        value: input.decoratorVersion
    }), undefined === input.treatConstEnumAsEnum || "boolean" === typeof input.treatConstEnumAsEnum || _report(_exceptionable, {
        path: _path + ".treatConstEnumAsEnum",
        expected: "(boolean | undefined)",
        value: input.treatConstEnumAsEnum
    }), undefined === input.useDefineForClassFields || "boolean" === typeof input.useDefineForClassFields || _report(_exceptionable, {
        path: _path + ".useDefineForClassFields",
        expected: "(boolean | undefined)",
        value: input.useDefineForClassFields
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["react", "constModules", "optimizer", "legacyDecorator", "decoratorMetadata", "decoratorVersion", "treatConstEnumAsEnum", "useDefineForClassFields"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo77 = (input, _path, _exceptionable = true) => [undefined === input.pragma || "string" === typeof input.pragma || _report(_exceptionable, {
        path: _path + ".pragma",
        expected: "(string | undefined)",
        value: input.pragma
    }), undefined === input.pragmaFrag || "string" === typeof input.pragmaFrag || _report(_exceptionable, {
        path: _path + ".pragmaFrag",
        expected: "(string | undefined)",
        value: input.pragmaFrag
    }), undefined === input.throwIfNamespace || "boolean" === typeof input.throwIfNamespace || _report(_exceptionable, {
        path: _path + ".throwIfNamespace",
        expected: "(boolean | undefined)",
        value: input.throwIfNamespace
    }), undefined === input.development || "boolean" === typeof input.development || _report(_exceptionable, {
        path: _path + ".development",
        expected: "(boolean | undefined)",
        value: input.development
    }), undefined === input.useBuiltins || "boolean" === typeof input.useBuiltins || _report(_exceptionable, {
        path: _path + ".useBuiltins",
        expected: "(boolean | undefined)",
        value: input.useBuiltins
    }), undefined === input.refresh || "boolean" === typeof input.refresh || _report(_exceptionable, {
        path: _path + ".refresh",
        expected: "(boolean | undefined)",
        value: input.refresh
    }), undefined === input.runtime || "automatic" === input.runtime || "classic" === input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(\"automatic\" | \"classic\" | undefined)",
        value: input.runtime
    }), undefined === input.importSource || "string" === typeof input.importSource || _report(_exceptionable, {
        path: _path + ".importSource",
        expected: "(string | undefined)",
        value: input.importSource
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["pragma", "pragmaFrag", "throwIfNamespace", "development", "useBuiltins", "refresh", "runtime", "importSource"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo78 = (input, _path, _exceptionable = true) => [undefined === input.globals || ("object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(__type.o13 | undefined)",
        value: input.globals
    })) && _vo79(input.globals, _path + ".globals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(__type.o13 | undefined)",
        value: input.globals
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["globals"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo79 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o14",
            value: value
        })) && _vo80(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o14",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo80 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo81 = (input, _path, _exceptionable = true) => [undefined === input.simplify || "boolean" === typeof input.simplify || _report(_exceptionable, {
        path: _path + ".simplify",
        expected: "(boolean | undefined)",
        value: input.simplify
    }), undefined === input.globals || ("object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(GlobalPassOption | undefined)",
        value: input.globals
    })) && _vo82(input.globals, _path + ".globals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(GlobalPassOption | undefined)",
        value: input.globals
    }), undefined === input.jsonify || ("object" === typeof input.jsonify && null !== input.jsonify || _report(_exceptionable, {
        path: _path + ".jsonify",
        expected: "(__type.o15 | undefined)",
        value: input.jsonify
    })) && _vo83(input.jsonify, _path + ".jsonify", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".jsonify",
        expected: "(__type.o15 | undefined)",
        value: input.jsonify
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["simplify", "globals", "jsonify"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo82 = (input, _path, _exceptionable = true) => [undefined === input.vars || ("object" === typeof input.vars && null !== input.vars && false === Array.isArray(input.vars) || _report(_exceptionable, {
        path: _path + ".vars",
        expected: "(Record<string, string> | undefined)",
        value: input.vars
    })) && _vo64(input.vars, _path + ".vars", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".vars",
        expected: "(Record<string, string> | undefined)",
        value: input.vars
    }), (null !== input.envs || _report(_exceptionable, {
        path: _path + ".envs",
        expected: "(Array<string> | Record<string, string> | undefined)",
        value: input.envs
    })) && (undefined === input.envs || (Array.isArray(input.envs) && input.envs.map((elem, _index434) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".envs[" + _index434 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.envs && null !== input.envs && false === Array.isArray(input.envs) && _vo64(input.envs, _path + ".envs", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".envs",
        expected: "(Array<string> | Record<string, string> | undefined)",
        value: input.envs
    })) || _report(_exceptionable, {
        path: _path + ".envs",
        expected: "(Array<string> | Record<string, string> | undefined)",
        value: input.envs
    })), undefined === input.typeofs || ("object" === typeof input.typeofs && null !== input.typeofs && false === Array.isArray(input.typeofs) || _report(_exceptionable, {
        path: _path + ".typeofs",
        expected: "(Record<string, string> | undefined)",
        value: input.typeofs
    })) && _vo64(input.typeofs, _path + ".typeofs", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".typeofs",
        expected: "(Record<string, string> | undefined)",
        value: input.typeofs
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["vars", "envs", "typeofs"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo83 = (input, _path, _exceptionable = true) => ["number" === typeof input.minCost || _report(_exceptionable, {
        path: _path + ".minCost",
        expected: "number",
        value: input.minCost
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["minCost"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo84 = (input, _path, _exceptionable = true) => [undefined === input.optimizeHygiene || "boolean" === typeof input.optimizeHygiene || _report(_exceptionable, {
        path: _path + ".optimizeHygiene",
        expected: "(boolean | undefined)",
        value: input.optimizeHygiene
    }), undefined === input.keepImportAttributes || "boolean" === typeof input.keepImportAttributes || _report(_exceptionable, {
        path: _path + ".keepImportAttributes",
        expected: "(boolean | undefined)",
        value: input.keepImportAttributes
    }), undefined === input.emitAssertForImportAttributes || "boolean" === typeof input.emitAssertForImportAttributes || _report(_exceptionable, {
        path: _path + ".emitAssertForImportAttributes",
        expected: "(boolean | undefined)",
        value: input.emitAssertForImportAttributes
    }), undefined === input.cacheRoot || "string" === typeof input.cacheRoot || _report(_exceptionable, {
        path: _path + ".cacheRoot",
        expected: "(string | undefined)",
        value: input.cacheRoot
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<[string, Record<string, any>]> | undefined)",
        value: input.plugins
    })) && input.plugins.map((elem, _index435) => (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index435 + "]",
        expected: "[string, Record<string, any>]",
        value: elem
    })) && ((elem.length === 2 || _report(_exceptionable, {
        path: _path + ".plugins[" + _index435 + "]",
        expected: "[string, Record<string, any>]",
        value: elem
    })) && [
        "string" === typeof elem[0] || _report(_exceptionable, {
            path: _path + ".plugins[" + _index435 + "][0]",
            expected: "string",
            value: elem[0]
        }),
        ("object" === typeof elem[1] && null !== elem[1] && false === Array.isArray(elem[1]) || _report(_exceptionable, {
            path: _path + ".plugins[" + _index435 + "][1]",
            expected: "Record<string, any>",
            value: elem[1]
        })) && _vo85(elem[1], _path + ".plugins[" + _index435 + "][1]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + ".plugins[" + _index435 + "][1]",
            expected: "Record<string, any>",
            value: elem[1]
        })
    ].every(flag => flag)) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index435 + "]",
        expected: "[string, Record<string, any>]",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<[string, Record<string, any>]> | undefined)",
        value: input.plugins
    }), undefined === input.runPluginFirst || "boolean" === typeof input.runPluginFirst || _report(_exceptionable, {
        path: _path + ".runPluginFirst",
        expected: "(boolean | undefined)",
        value: input.runPluginFirst
    }), undefined === input.disableBuiltinTransformsForInternalTesting || "boolean" === typeof input.disableBuiltinTransformsForInternalTesting || _report(_exceptionable, {
        path: _path + ".disableBuiltinTransformsForInternalTesting",
        expected: "(boolean | undefined)",
        value: input.disableBuiltinTransformsForInternalTesting
    }), undefined === input.emitIsolatedDts || "boolean" === typeof input.emitIsolatedDts || _report(_exceptionable, {
        path: _path + ".emitIsolatedDts",
        expected: "(boolean | undefined)",
        value: input.emitIsolatedDts
    }), undefined === input.disableAllLints || "boolean" === typeof input.disableAllLints || _report(_exceptionable, {
        path: _path + ".disableAllLints",
        expected: "(boolean | undefined)",
        value: input.disableAllLints
    }), undefined === input.keepImportAssertions || "boolean" === typeof input.keepImportAssertions || _report(_exceptionable, {
        path: _path + ".keepImportAssertions",
        expected: "(boolean | undefined)",
        value: input.keepImportAssertions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["optimizeHygiene", "keepImportAttributes", "emitAssertForImportAttributes", "cacheRoot", "plugins", "runPluginFirst", "disableBuiltinTransformsForInternalTesting", "emitIsolatedDts", "disableAllLints", "keepImportAssertions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo85 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo86 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Array<string>",
            value: value
        })) && value.map((elem, _index436) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index436 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Array<string>",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo87 = (input, _path, _exceptionable = true) => [(null !== input.compress || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions | boolean | undefined)",
        value: input.compress
    })) && (undefined === input.compress || "boolean" === typeof input.compress || ("object" === typeof input.compress && null !== input.compress && false === Array.isArray(input.compress) || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions | boolean | undefined)",
        value: input.compress
    })) && _vo88(input.compress, _path + ".compress", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions | boolean | undefined)",
        value: input.compress
    })), undefined === input.format || ("object" === typeof input.format && null !== input.format && false === Array.isArray(input.format) || _report(_exceptionable, {
        path: _path + ".format",
        expected: "(JsFormatOptions & ToSnakeCaseProperties<JsFormatOptions> | undefined)",
        value: input.format
    })) && _vo89(input.format, _path + ".format", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".format",
        expected: "(JsFormatOptions & ToSnakeCaseProperties<JsFormatOptions> | undefined)",
        value: input.format
    }), (null !== input.mangle || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions | boolean | undefined)",
        value: input.mangle
    })) && (undefined === input.mangle || "boolean" === typeof input.mangle || ("object" === typeof input.mangle && null !== input.mangle && false === Array.isArray(input.mangle) || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions | boolean | undefined)",
        value: input.mangle
    })) && _vo90(input.mangle, _path + ".mangle", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions | boolean | undefined)",
        value: input.mangle
    })), undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma || _report(_exceptionable, {
        path: _path + ".ecma",
        expected: "(number | string | undefined)",
        value: input.ecma
    }), undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames || _report(_exceptionable, {
        path: _path + ".keep_classnames",
        expected: "(boolean | undefined)",
        value: input.keep_classnames
    }), undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames || _report(_exceptionable, {
        path: _path + ".keep_fnames",
        expected: "(boolean | undefined)",
        value: input.keep_fnames
    }), undefined === input["module"] || "unknown" === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(\"unknown\" | boolean | undefined)",
        value: input["module"]
    }), undefined === input.safari10 || "boolean" === typeof input.safari10 || _report(_exceptionable, {
        path: _path + ".safari10",
        expected: "(boolean | undefined)",
        value: input.safari10
    }), undefined === input.toplevel || "boolean" === typeof input.toplevel || _report(_exceptionable, {
        path: _path + ".toplevel",
        expected: "(boolean | undefined)",
        value: input.toplevel
    }), undefined === input.sourceMap || "boolean" === typeof input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(boolean | undefined)",
        value: input.sourceMap
    }), undefined === input.outputPath || "string" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    }), undefined === input.inlineSourcesContent || "boolean" === typeof input.inlineSourcesContent || _report(_exceptionable, {
        path: _path + ".inlineSourcesContent",
        expected: "(boolean | undefined)",
        value: input.inlineSourcesContent
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["compress", "format", "mangle", "ecma", "keep_classnames", "keep_fnames", "module", "safari10", "toplevel", "sourceMap", "outputPath", "inlineSourcesContent"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo88 = (input, _path, _exceptionable = true) => [undefined === input.arguments || "boolean" === typeof input.arguments || _report(_exceptionable, {
        path: _path + ".arguments",
        expected: "(boolean | undefined)",
        value: input.arguments
    }), undefined === input.arrows || "boolean" === typeof input.arrows || _report(_exceptionable, {
        path: _path + ".arrows",
        expected: "(boolean | undefined)",
        value: input.arrows
    }), undefined === input.booleans || "boolean" === typeof input.booleans || _report(_exceptionable, {
        path: _path + ".booleans",
        expected: "(boolean | undefined)",
        value: input.booleans
    }), undefined === input.booleans_as_integers || "boolean" === typeof input.booleans_as_integers || _report(_exceptionable, {
        path: _path + ".booleans_as_integers",
        expected: "(boolean | undefined)",
        value: input.booleans_as_integers
    }), undefined === input.collapse_vars || "boolean" === typeof input.collapse_vars || _report(_exceptionable, {
        path: _path + ".collapse_vars",
        expected: "(boolean | undefined)",
        value: input.collapse_vars
    }), undefined === input.comparisons || "boolean" === typeof input.comparisons || _report(_exceptionable, {
        path: _path + ".comparisons",
        expected: "(boolean | undefined)",
        value: input.comparisons
    }), undefined === input.computed_props || "boolean" === typeof input.computed_props || _report(_exceptionable, {
        path: _path + ".computed_props",
        expected: "(boolean | undefined)",
        value: input.computed_props
    }), undefined === input.conditionals || "boolean" === typeof input.conditionals || _report(_exceptionable, {
        path: _path + ".conditionals",
        expected: "(boolean | undefined)",
        value: input.conditionals
    }), undefined === input.dead_code || "boolean" === typeof input.dead_code || _report(_exceptionable, {
        path: _path + ".dead_code",
        expected: "(boolean | undefined)",
        value: input.dead_code
    }), undefined === input.defaults || "boolean" === typeof input.defaults || _report(_exceptionable, {
        path: _path + ".defaults",
        expected: "(boolean | undefined)",
        value: input.defaults
    }), undefined === input.directives || "boolean" === typeof input.directives || _report(_exceptionable, {
        path: _path + ".directives",
        expected: "(boolean | undefined)",
        value: input.directives
    }), undefined === input.drop_console || "boolean" === typeof input.drop_console || _report(_exceptionable, {
        path: _path + ".drop_console",
        expected: "(boolean | undefined)",
        value: input.drop_console
    }), undefined === input.drop_debugger || "boolean" === typeof input.drop_debugger || _report(_exceptionable, {
        path: _path + ".drop_debugger",
        expected: "(boolean | undefined)",
        value: input.drop_debugger
    }), undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma || _report(_exceptionable, {
        path: _path + ".ecma",
        expected: "(number | string | undefined)",
        value: input.ecma
    }), undefined === input.evaluate || "boolean" === typeof input.evaluate || _report(_exceptionable, {
        path: _path + ".evaluate",
        expected: "(boolean | undefined)",
        value: input.evaluate
    }), undefined === input.expression || "boolean" === typeof input.expression || _report(_exceptionable, {
        path: _path + ".expression",
        expected: "(boolean | undefined)",
        value: input.expression
    }), true, undefined === input.hoist_funs || "boolean" === typeof input.hoist_funs || _report(_exceptionable, {
        path: _path + ".hoist_funs",
        expected: "(boolean | undefined)",
        value: input.hoist_funs
    }), undefined === input.hoist_props || "boolean" === typeof input.hoist_props || _report(_exceptionable, {
        path: _path + ".hoist_props",
        expected: "(boolean | undefined)",
        value: input.hoist_props
    }), undefined === input.hoist_vars || "boolean" === typeof input.hoist_vars || _report(_exceptionable, {
        path: _path + ".hoist_vars",
        expected: "(boolean | undefined)",
        value: input.hoist_vars
    }), undefined === input.ie8 || "boolean" === typeof input.ie8 || _report(_exceptionable, {
        path: _path + ".ie8",
        expected: "(boolean | undefined)",
        value: input.ie8
    }), undefined === input.if_return || "boolean" === typeof input.if_return || _report(_exceptionable, {
        path: _path + ".if_return",
        expected: "(boolean | undefined)",
        value: input.if_return
    }), undefined === input.inline || 0 === input.inline || 1 === input.inline || 2 === input.inline || 3 === input.inline || _report(_exceptionable, {
        path: _path + ".inline",
        expected: "(0 | 1 | 2 | 3 | undefined)",
        value: input.inline
    }), undefined === input.join_vars || "boolean" === typeof input.join_vars || _report(_exceptionable, {
        path: _path + ".join_vars",
        expected: "(boolean | undefined)",
        value: input.join_vars
    }), undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames || _report(_exceptionable, {
        path: _path + ".keep_classnames",
        expected: "(boolean | undefined)",
        value: input.keep_classnames
    }), undefined === input.keep_fargs || "boolean" === typeof input.keep_fargs || _report(_exceptionable, {
        path: _path + ".keep_fargs",
        expected: "(boolean | undefined)",
        value: input.keep_fargs
    }), undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames || _report(_exceptionable, {
        path: _path + ".keep_fnames",
        expected: "(boolean | undefined)",
        value: input.keep_fnames
    }), undefined === input.keep_infinity || "boolean" === typeof input.keep_infinity || _report(_exceptionable, {
        path: _path + ".keep_infinity",
        expected: "(boolean | undefined)",
        value: input.keep_infinity
    }), undefined === input.loops || "boolean" === typeof input.loops || _report(_exceptionable, {
        path: _path + ".loops",
        expected: "(boolean | undefined)",
        value: input.loops
    }), undefined === input.negate_iife || "boolean" === typeof input.negate_iife || _report(_exceptionable, {
        path: _path + ".negate_iife",
        expected: "(boolean | undefined)",
        value: input.negate_iife
    }), undefined === input.passes || "number" === typeof input.passes || _report(_exceptionable, {
        path: _path + ".passes",
        expected: "(number | undefined)",
        value: input.passes
    }), undefined === input.properties || "boolean" === typeof input.properties || _report(_exceptionable, {
        path: _path + ".properties",
        expected: "(boolean | undefined)",
        value: input.properties
    }), true, undefined === input.pure_funcs || (Array.isArray(input.pure_funcs) || _report(_exceptionable, {
        path: _path + ".pure_funcs",
        expected: "(Array<string> | undefined)",
        value: input.pure_funcs
    })) && input.pure_funcs.map((elem, _index437) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".pure_funcs[" + _index437 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".pure_funcs",
        expected: "(Array<string> | undefined)",
        value: input.pure_funcs
    }), undefined === input.reduce_funcs || "boolean" === typeof input.reduce_funcs || _report(_exceptionable, {
        path: _path + ".reduce_funcs",
        expected: "(boolean | undefined)",
        value: input.reduce_funcs
    }), undefined === input.reduce_vars || "boolean" === typeof input.reduce_vars || _report(_exceptionable, {
        path: _path + ".reduce_vars",
        expected: "(boolean | undefined)",
        value: input.reduce_vars
    }), true, undefined === input.side_effects || "boolean" === typeof input.side_effects || _report(_exceptionable, {
        path: _path + ".side_effects",
        expected: "(boolean | undefined)",
        value: input.side_effects
    }), undefined === input.switches || "boolean" === typeof input.switches || _report(_exceptionable, {
        path: _path + ".switches",
        expected: "(boolean | undefined)",
        value: input.switches
    }), true, true, undefined === input.typeofs || "boolean" === typeof input.typeofs || _report(_exceptionable, {
        path: _path + ".typeofs",
        expected: "(boolean | undefined)",
        value: input.typeofs
    }), undefined === input.unsafe || "boolean" === typeof input.unsafe || _report(_exceptionable, {
        path: _path + ".unsafe",
        expected: "(boolean | undefined)",
        value: input.unsafe
    }), undefined === input.unsafe_passes || "boolean" === typeof input.unsafe_passes || _report(_exceptionable, {
        path: _path + ".unsafe_passes",
        expected: "(boolean | undefined)",
        value: input.unsafe_passes
    }), undefined === input.unsafe_arrows || "boolean" === typeof input.unsafe_arrows || _report(_exceptionable, {
        path: _path + ".unsafe_arrows",
        expected: "(boolean | undefined)",
        value: input.unsafe_arrows
    }), undefined === input.unsafe_comps || "boolean" === typeof input.unsafe_comps || _report(_exceptionable, {
        path: _path + ".unsafe_comps",
        expected: "(boolean | undefined)",
        value: input.unsafe_comps
    }), undefined === input.unsafe_function || "boolean" === typeof input.unsafe_function || _report(_exceptionable, {
        path: _path + ".unsafe_function",
        expected: "(boolean | undefined)",
        value: input.unsafe_function
    }), undefined === input.unsafe_math || "boolean" === typeof input.unsafe_math || _report(_exceptionable, {
        path: _path + ".unsafe_math",
        expected: "(boolean | undefined)",
        value: input.unsafe_math
    }), undefined === input.unsafe_symbols || "boolean" === typeof input.unsafe_symbols || _report(_exceptionable, {
        path: _path + ".unsafe_symbols",
        expected: "(boolean | undefined)",
        value: input.unsafe_symbols
    }), undefined === input.unsafe_methods || "boolean" === typeof input.unsafe_methods || _report(_exceptionable, {
        path: _path + ".unsafe_methods",
        expected: "(boolean | undefined)",
        value: input.unsafe_methods
    }), undefined === input.unsafe_proto || "boolean" === typeof input.unsafe_proto || _report(_exceptionable, {
        path: _path + ".unsafe_proto",
        expected: "(boolean | undefined)",
        value: input.unsafe_proto
    }), undefined === input.unsafe_regexp || "boolean" === typeof input.unsafe_regexp || _report(_exceptionable, {
        path: _path + ".unsafe_regexp",
        expected: "(boolean | undefined)",
        value: input.unsafe_regexp
    }), undefined === input.unsafe_undefined || "boolean" === typeof input.unsafe_undefined || _report(_exceptionable, {
        path: _path + ".unsafe_undefined",
        expected: "(boolean | undefined)",
        value: input.unsafe_undefined
    }), undefined === input.unused || "boolean" === typeof input.unused || _report(_exceptionable, {
        path: _path + ".unused",
        expected: "(boolean | undefined)",
        value: input.unused
    }), undefined === input.const_to_let || "boolean" === typeof input.const_to_let || _report(_exceptionable, {
        path: _path + ".const_to_let",
        expected: "(boolean | undefined)",
        value: input.const_to_let
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["arguments", "arrows", "booleans", "booleans_as_integers", "collapse_vars", "comparisons", "computed_props", "conditionals", "dead_code", "defaults", "directives", "drop_console", "drop_debugger", "ecma", "evaluate", "expression", "global_defs", "hoist_funs", "hoist_props", "hoist_vars", "ie8", "if_return", "inline", "join_vars", "keep_classnames", "keep_fargs", "keep_fnames", "keep_infinity", "loops", "negate_iife", "passes", "properties", "pure_getters", "pure_funcs", "reduce_funcs", "reduce_vars", "sequences", "side_effects", "switches", "top_retain", "toplevel", "typeofs", "unsafe", "unsafe_passes", "unsafe_arrows", "unsafe_comps", "unsafe_function", "unsafe_math", "unsafe_symbols", "unsafe_methods", "unsafe_proto", "unsafe_regexp", "unsafe_undefined", "unused", "const_to_let", "module"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo89 = (input, _path, _exceptionable = true) => [undefined === input.asciiOnly || "boolean" === typeof input.asciiOnly || _report(_exceptionable, {
        path: _path + ".asciiOnly",
        expected: "(boolean | undefined)",
        value: input.asciiOnly
    }), undefined === input.beautify || "boolean" === typeof input.beautify || _report(_exceptionable, {
        path: _path + ".beautify",
        expected: "(boolean | undefined)",
        value: input.beautify
    }), undefined === input.braces || "boolean" === typeof input.braces || _report(_exceptionable, {
        path: _path + ".braces",
        expected: "(boolean | undefined)",
        value: input.braces
    }), undefined === input.comments || false === input.comments || "some" === input.comments || "all" === input.comments || _report(_exceptionable, {
        path: _path + ".comments",
        expected: "(\"all\" | \"some\" | false | undefined)",
        value: input.comments
    }), undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma || _report(_exceptionable, {
        path: _path + ".ecma",
        expected: "(number | string | undefined)",
        value: input.ecma
    }), undefined === input.indentLevel || "number" === typeof input.indentLevel || _report(_exceptionable, {
        path: _path + ".indentLevel",
        expected: "(number | undefined)",
        value: input.indentLevel
    }), undefined === input.indentStart || "number" === typeof input.indentStart || _report(_exceptionable, {
        path: _path + ".indentStart",
        expected: "(number | undefined)",
        value: input.indentStart
    }), undefined === input.inlineScript || "boolean" === typeof input.inlineScript || _report(_exceptionable, {
        path: _path + ".inlineScript",
        expected: "(boolean | undefined)",
        value: input.inlineScript
    }), undefined === input.keepNumbers || "number" === typeof input.keepNumbers || _report(_exceptionable, {
        path: _path + ".keepNumbers",
        expected: "(number | undefined)",
        value: input.keepNumbers
    }), undefined === input.keepQuotedProps || "boolean" === typeof input.keepQuotedProps || _report(_exceptionable, {
        path: _path + ".keepQuotedProps",
        expected: "(boolean | undefined)",
        value: input.keepQuotedProps
    }), undefined === input.maxLineLen || false === input.maxLineLen || "number" === typeof input.maxLineLen || _report(_exceptionable, {
        path: _path + ".maxLineLen",
        expected: "(false | number | undefined)",
        value: input.maxLineLen
    }), undefined === input.preamble || "string" === typeof input.preamble || _report(_exceptionable, {
        path: _path + ".preamble",
        expected: "(string | undefined)",
        value: input.preamble
    }), undefined === input.quoteKeys || "boolean" === typeof input.quoteKeys || _report(_exceptionable, {
        path: _path + ".quoteKeys",
        expected: "(boolean | undefined)",
        value: input.quoteKeys
    }), undefined === input.quoteStyle || "boolean" === typeof input.quoteStyle || _report(_exceptionable, {
        path: _path + ".quoteStyle",
        expected: "(boolean | undefined)",
        value: input.quoteStyle
    }), undefined === input.preserveAnnotations || "boolean" === typeof input.preserveAnnotations || _report(_exceptionable, {
        path: _path + ".preserveAnnotations",
        expected: "(boolean | undefined)",
        value: input.preserveAnnotations
    }), undefined === input.safari10 || "boolean" === typeof input.safari10 || _report(_exceptionable, {
        path: _path + ".safari10",
        expected: "(boolean | undefined)",
        value: input.safari10
    }), undefined === input.semicolons || "boolean" === typeof input.semicolons || _report(_exceptionable, {
        path: _path + ".semicolons",
        expected: "(boolean | undefined)",
        value: input.semicolons
    }), undefined === input.shebang || "boolean" === typeof input.shebang || _report(_exceptionable, {
        path: _path + ".shebang",
        expected: "(boolean | undefined)",
        value: input.shebang
    }), undefined === input.webkit || "boolean" === typeof input.webkit || _report(_exceptionable, {
        path: _path + ".webkit",
        expected: "(boolean | undefined)",
        value: input.webkit
    }), undefined === input.wrapIife || "boolean" === typeof input.wrapIife || _report(_exceptionable, {
        path: _path + ".wrapIife",
        expected: "(boolean | undefined)",
        value: input.wrapIife
    }), undefined === input.wrapFuncArgs || "boolean" === typeof input.wrapFuncArgs || _report(_exceptionable, {
        path: _path + ".wrapFuncArgs",
        expected: "(boolean | undefined)",
        value: input.wrapFuncArgs
    }), undefined === input.ascii_only || "boolean" === typeof input.ascii_only || _report(_exceptionable, {
        path: _path + ".ascii_only",
        expected: "(boolean | undefined)",
        value: input.ascii_only
    }), undefined === input.indent_level || "number" === typeof input.indent_level || _report(_exceptionable, {
        path: _path + ".indent_level",
        expected: "(number | undefined)",
        value: input.indent_level
    }), undefined === input.indent_start || "number" === typeof input.indent_start || _report(_exceptionable, {
        path: _path + ".indent_start",
        expected: "(number | undefined)",
        value: input.indent_start
    }), undefined === input.inline_script || "boolean" === typeof input.inline_script || _report(_exceptionable, {
        path: _path + ".inline_script",
        expected: "(boolean | undefined)",
        value: input.inline_script
    }), undefined === input.keep_numbers || "number" === typeof input.keep_numbers || _report(_exceptionable, {
        path: _path + ".keep_numbers",
        expected: "(number | undefined)",
        value: input.keep_numbers
    }), undefined === input.keep_quoted_props || "boolean" === typeof input.keep_quoted_props || _report(_exceptionable, {
        path: _path + ".keep_quoted_props",
        expected: "(boolean | undefined)",
        value: input.keep_quoted_props
    }), undefined === input.max_line_len || false === input.max_line_len || "number" === typeof input.max_line_len || _report(_exceptionable, {
        path: _path + ".max_line_len",
        expected: "(false | number | undefined)",
        value: input.max_line_len
    }), undefined === input.quote_keys || "boolean" === typeof input.quote_keys || _report(_exceptionable, {
        path: _path + ".quote_keys",
        expected: "(boolean | undefined)",
        value: input.quote_keys
    }), undefined === input.quote_style || "boolean" === typeof input.quote_style || _report(_exceptionable, {
        path: _path + ".quote_style",
        expected: "(boolean | undefined)",
        value: input.quote_style
    }), undefined === input.preserve_annotations || "boolean" === typeof input.preserve_annotations || _report(_exceptionable, {
        path: _path + ".preserve_annotations",
        expected: "(boolean | undefined)",
        value: input.preserve_annotations
    }), undefined === input.wrap_iife || "boolean" === typeof input.wrap_iife || _report(_exceptionable, {
        path: _path + ".wrap_iife",
        expected: "(boolean | undefined)",
        value: input.wrap_iife
    }), undefined === input.wrap_func_args || "boolean" === typeof input.wrap_func_args || _report(_exceptionable, {
        path: _path + ".wrap_func_args",
        expected: "(boolean | undefined)",
        value: input.wrap_func_args
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asciiOnly", "beautify", "braces", "comments", "ecma", "indentLevel", "indentStart", "inlineScript", "keepNumbers", "keepQuotedProps", "maxLineLen", "preamble", "quoteKeys", "quoteStyle", "preserveAnnotations", "safari10", "semicolons", "shebang", "webkit", "wrapIife", "wrapFuncArgs", "ascii_only", "indent_level", "indent_start", "inline_script", "keep_numbers", "keep_quoted_props", "max_line_len", "quote_keys", "quote_style", "preserve_annotations", "wrap_iife", "wrap_func_args"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo90 = (input, _path, _exceptionable = true) => [undefined === input.props || ("object" === typeof input.props && null !== input.props && false === Array.isArray(input.props) || _report(_exceptionable, {
        path: _path + ".props",
        expected: "(TerserManglePropertiesOptions | undefined)",
        value: input.props
    })) && _vo91(input.props, _path + ".props", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".props",
        expected: "(TerserManglePropertiesOptions | undefined)",
        value: input.props
    }), undefined === input.topLevel || "boolean" === typeof input.topLevel || _report(_exceptionable, {
        path: _path + ".topLevel",
        expected: "(boolean | undefined)",
        value: input.topLevel
    }), undefined === input.toplevel || "boolean" === typeof input.toplevel || _report(_exceptionable, {
        path: _path + ".toplevel",
        expected: "(boolean | undefined)",
        value: input.toplevel
    }), undefined === input.keepClassNames || "boolean" === typeof input.keepClassNames || _report(_exceptionable, {
        path: _path + ".keepClassNames",
        expected: "(boolean | undefined)",
        value: input.keepClassNames
    }), undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames || _report(_exceptionable, {
        path: _path + ".keep_classnames",
        expected: "(boolean | undefined)",
        value: input.keep_classnames
    }), undefined === input.keepFnNames || "boolean" === typeof input.keepFnNames || _report(_exceptionable, {
        path: _path + ".keepFnNames",
        expected: "(boolean | undefined)",
        value: input.keepFnNames
    }), undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames || _report(_exceptionable, {
        path: _path + ".keep_fnames",
        expected: "(boolean | undefined)",
        value: input.keep_fnames
    }), undefined === input.keepPrivateProps || "boolean" === typeof input.keepPrivateProps || _report(_exceptionable, {
        path: _path + ".keepPrivateProps",
        expected: "(boolean | undefined)",
        value: input.keepPrivateProps
    }), undefined === input.keep_private_props || "boolean" === typeof input.keep_private_props || _report(_exceptionable, {
        path: _path + ".keep_private_props",
        expected: "(boolean | undefined)",
        value: input.keep_private_props
    }), undefined === input.ie8 || "boolean" === typeof input.ie8 || _report(_exceptionable, {
        path: _path + ".ie8",
        expected: "(boolean | undefined)",
        value: input.ie8
    }), undefined === input.safari10 || "boolean" === typeof input.safari10 || _report(_exceptionable, {
        path: _path + ".safari10",
        expected: "(boolean | undefined)",
        value: input.safari10
    }), undefined === input.reserved || (Array.isArray(input.reserved) || _report(_exceptionable, {
        path: _path + ".reserved",
        expected: "(Array<string> | undefined)",
        value: input.reserved
    })) && input.reserved.map((elem, _index438) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".reserved[" + _index438 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".reserved",
        expected: "(Array<string> | undefined)",
        value: input.reserved
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["props", "topLevel", "toplevel", "keepClassNames", "keep_classnames", "keepFnNames", "keep_fnames", "keepPrivateProps", "keep_private_props", "ie8", "safari10", "reserved"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo91 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo92 = (input, _path, _exceptionable = true) => ["es6" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"es6\"",
        value: input.type
    }), undefined === input.strict || "boolean" === typeof input.strict || _report(_exceptionable, {
        path: _path + ".strict",
        expected: "(boolean | undefined)",
        value: input.strict
    }), undefined === input.strictMode || "boolean" === typeof input.strictMode || _report(_exceptionable, {
        path: _path + ".strictMode",
        expected: "(boolean | undefined)",
        value: input.strictMode
    }), (null !== input.lazy || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && (undefined === input.lazy || "boolean" === typeof input.lazy || (Array.isArray(input.lazy) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && input.lazy.map((elem, _index439) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".lazy[" + _index439 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })), undefined === input.noInterop || "boolean" === typeof input.noInterop || _report(_exceptionable, {
        path: _path + ".noInterop",
        expected: "(boolean | undefined)",
        value: input.noInterop
    }), undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop || _report(_exceptionable, {
        path: _path + ".importInterop",
        expected: "(\"babel\" | \"node\" | \"none\" | \"swc\" | undefined)",
        value: input.importInterop
    }), undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation || _report(_exceptionable, {
        path: _path + ".exportInteropAnnotation",
        expected: "(boolean | undefined)",
        value: input.exportInteropAnnotation
    }), undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic || _report(_exceptionable, {
        path: _path + ".ignoreDynamic",
        expected: "(boolean | undefined)",
        value: input.ignoreDynamic
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta || _report(_exceptionable, {
        path: _path + ".preserveImportMeta",
        expected: "(boolean | undefined)",
        value: input.preserveImportMeta
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo93 = (input, _path, _exceptionable = true) => ["commonjs" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"commonjs\"",
        value: input.type
    }), undefined === input.strict || "boolean" === typeof input.strict || _report(_exceptionable, {
        path: _path + ".strict",
        expected: "(boolean | undefined)",
        value: input.strict
    }), undefined === input.strictMode || "boolean" === typeof input.strictMode || _report(_exceptionable, {
        path: _path + ".strictMode",
        expected: "(boolean | undefined)",
        value: input.strictMode
    }), (null !== input.lazy || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && (undefined === input.lazy || "boolean" === typeof input.lazy || (Array.isArray(input.lazy) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && input.lazy.map((elem, _index440) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".lazy[" + _index440 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })), undefined === input.noInterop || "boolean" === typeof input.noInterop || _report(_exceptionable, {
        path: _path + ".noInterop",
        expected: "(boolean | undefined)",
        value: input.noInterop
    }), undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop || _report(_exceptionable, {
        path: _path + ".importInterop",
        expected: "(\"babel\" | \"node\" | \"none\" | \"swc\" | undefined)",
        value: input.importInterop
    }), undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation || _report(_exceptionable, {
        path: _path + ".exportInteropAnnotation",
        expected: "(boolean | undefined)",
        value: input.exportInteropAnnotation
    }), undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic || _report(_exceptionable, {
        path: _path + ".ignoreDynamic",
        expected: "(boolean | undefined)",
        value: input.ignoreDynamic
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta || _report(_exceptionable, {
        path: _path + ".preserveImportMeta",
        expected: "(boolean | undefined)",
        value: input.preserveImportMeta
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo94 = (input, _path, _exceptionable = true) => ["umd" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"umd\"",
        value: input.type
    }), undefined === input.globals || ("object" === typeof input.globals && null !== input.globals && false === Array.isArray(input.globals) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(__type.o18 | undefined)",
        value: input.globals
    })) && _vo95(input.globals, _path + ".globals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".globals",
        expected: "(__type.o18 | undefined)",
        value: input.globals
    }), undefined === input.strict || "boolean" === typeof input.strict || _report(_exceptionable, {
        path: _path + ".strict",
        expected: "(boolean | undefined)",
        value: input.strict
    }), undefined === input.strictMode || "boolean" === typeof input.strictMode || _report(_exceptionable, {
        path: _path + ".strictMode",
        expected: "(boolean | undefined)",
        value: input.strictMode
    }), (null !== input.lazy || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && (undefined === input.lazy || "boolean" === typeof input.lazy || (Array.isArray(input.lazy) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && input.lazy.map((elem, _index441) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".lazy[" + _index441 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })), undefined === input.noInterop || "boolean" === typeof input.noInterop || _report(_exceptionable, {
        path: _path + ".noInterop",
        expected: "(boolean | undefined)",
        value: input.noInterop
    }), undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop || _report(_exceptionable, {
        path: _path + ".importInterop",
        expected: "(\"babel\" | \"node\" | \"none\" | \"swc\" | undefined)",
        value: input.importInterop
    }), undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation || _report(_exceptionable, {
        path: _path + ".exportInteropAnnotation",
        expected: "(boolean | undefined)",
        value: input.exportInteropAnnotation
    }), undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic || _report(_exceptionable, {
        path: _path + ".ignoreDynamic",
        expected: "(boolean | undefined)",
        value: input.ignoreDynamic
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta || _report(_exceptionable, {
        path: _path + ".preserveImportMeta",
        expected: "(boolean | undefined)",
        value: input.preserveImportMeta
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "globals", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo95 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo96 = (input, _path, _exceptionable = true) => ["amd" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"amd\"",
        value: input.type
    }), undefined === input.moduleId || "string" === typeof input.moduleId || _report(_exceptionable, {
        path: _path + ".moduleId",
        expected: "(string | undefined)",
        value: input.moduleId
    }), undefined === input.strict || "boolean" === typeof input.strict || _report(_exceptionable, {
        path: _path + ".strict",
        expected: "(boolean | undefined)",
        value: input.strict
    }), undefined === input.strictMode || "boolean" === typeof input.strictMode || _report(_exceptionable, {
        path: _path + ".strictMode",
        expected: "(boolean | undefined)",
        value: input.strictMode
    }), (null !== input.lazy || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && (undefined === input.lazy || "boolean" === typeof input.lazy || (Array.isArray(input.lazy) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && input.lazy.map((elem, _index442) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".lazy[" + _index442 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })), undefined === input.noInterop || "boolean" === typeof input.noInterop || _report(_exceptionable, {
        path: _path + ".noInterop",
        expected: "(boolean | undefined)",
        value: input.noInterop
    }), undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop || _report(_exceptionable, {
        path: _path + ".importInterop",
        expected: "(\"babel\" | \"node\" | \"none\" | \"swc\" | undefined)",
        value: input.importInterop
    }), undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation || _report(_exceptionable, {
        path: _path + ".exportInteropAnnotation",
        expected: "(boolean | undefined)",
        value: input.exportInteropAnnotation
    }), undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic || _report(_exceptionable, {
        path: _path + ".ignoreDynamic",
        expected: "(boolean | undefined)",
        value: input.ignoreDynamic
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta || _report(_exceptionable, {
        path: _path + ".preserveImportMeta",
        expected: "(boolean | undefined)",
        value: input.preserveImportMeta
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "moduleId", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo97 = (input, _path, _exceptionable = true) => ["nodenext" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"nodenext\"",
        value: input.type
    }), undefined === input.strict || "boolean" === typeof input.strict || _report(_exceptionable, {
        path: _path + ".strict",
        expected: "(boolean | undefined)",
        value: input.strict
    }), undefined === input.strictMode || "boolean" === typeof input.strictMode || _report(_exceptionable, {
        path: _path + ".strictMode",
        expected: "(boolean | undefined)",
        value: input.strictMode
    }), (null !== input.lazy || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && (undefined === input.lazy || "boolean" === typeof input.lazy || (Array.isArray(input.lazy) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })) && input.lazy.map((elem, _index443) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".lazy[" + _index443 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".lazy",
        expected: "(Array<string> | boolean | undefined)",
        value: input.lazy
    })), undefined === input.noInterop || "boolean" === typeof input.noInterop || _report(_exceptionable, {
        path: _path + ".noInterop",
        expected: "(boolean | undefined)",
        value: input.noInterop
    }), undefined === input.importInterop || "none" === input.importInterop || "node" === input.importInterop || "swc" === input.importInterop || "babel" === input.importInterop || _report(_exceptionable, {
        path: _path + ".importInterop",
        expected: "(\"babel\" | \"node\" | \"none\" | \"swc\" | undefined)",
        value: input.importInterop
    }), undefined === input.exportInteropAnnotation || "boolean" === typeof input.exportInteropAnnotation || _report(_exceptionable, {
        path: _path + ".exportInteropAnnotation",
        expected: "(boolean | undefined)",
        value: input.exportInteropAnnotation
    }), undefined === input.ignoreDynamic || "boolean" === typeof input.ignoreDynamic || _report(_exceptionable, {
        path: _path + ".ignoreDynamic",
        expected: "(boolean | undefined)",
        value: input.ignoreDynamic
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), undefined === input.preserveImportMeta || "boolean" === typeof input.preserveImportMeta || _report(_exceptionable, {
        path: _path + ".preserveImportMeta",
        expected: "(boolean | undefined)",
        value: input.preserveImportMeta
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "strict", "strictMode", "lazy", "noInterop", "importInterop", "exportInteropAnnotation", "ignoreDynamic", "allowTopLevelThis", "preserveImportMeta"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo98 = (input, _path, _exceptionable = true) => ["systemjs" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"systemjs\"",
        value: input.type
    }), undefined === input.allowTopLevelThis || "boolean" === typeof input.allowTopLevelThis || _report(_exceptionable, {
        path: _path + ".allowTopLevelThis",
        expected: "(boolean | undefined)",
        value: input.allowTopLevelThis
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "allowTopLevelThis"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo99 = (input, _path, _exceptionable = true) => [undefined === input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<PluginImportConfig> | undefined)",
        value: input["import"]
    })) && input["import"].map((elem, _index444) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index444 + "]",
        expected: "PluginImportConfig",
        value: elem
    })) && _vo100(elem, _path + "[\"import\"][" + _index444 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index444 + "]",
        expected: "PluginImportConfig",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<PluginImportConfig> | undefined)",
        value: input["import"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo100 = (input, _path, _exceptionable = true) => ["string" === typeof input.libraryName || _report(_exceptionable, {
        path: _path + ".libraryName",
        expected: "string",
        value: input.libraryName
    }), undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory || _report(_exceptionable, {
        path: _path + ".libraryDirectory",
        expected: "(string | undefined)",
        value: input.libraryDirectory
    }), undefined === input.customName || "string" === typeof input.customName || _report(_exceptionable, {
        path: _path + ".customName",
        expected: "(string | undefined)",
        value: input.customName
    }), undefined === input.customStyleName || "string" === typeof input.customStyleName || _report(_exceptionable, {
        path: _path + ".customStyleName",
        expected: "(string | undefined)",
        value: input.customStyleName
    }), undefined === input.style || "string" === typeof input.style || "boolean" === typeof input.style || _report(_exceptionable, {
        path: _path + ".style",
        expected: "(boolean | string | undefined)",
        value: input.style
    }), undefined === input.styleLibraryDirectory || "string" === typeof input.styleLibraryDirectory || _report(_exceptionable, {
        path: _path + ".styleLibraryDirectory",
        expected: "(string | undefined)",
        value: input.styleLibraryDirectory
    }), undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName || _report(_exceptionable, {
        path: _path + ".camelToDashComponentName",
        expected: "(boolean | undefined)",
        value: input.camelToDashComponentName
    }), undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport || _report(_exceptionable, {
        path: _path + ".transformToDefaultImport",
        expected: "(boolean | undefined)",
        value: input.transformToDefaultImport
    }), undefined === input.ignoreEsComponent || (Array.isArray(input.ignoreEsComponent) || _report(_exceptionable, {
        path: _path + ".ignoreEsComponent",
        expected: "(Array<string> | undefined)",
        value: input.ignoreEsComponent
    })) && input.ignoreEsComponent.map((elem, _index445) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignoreEsComponent[" + _index445 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignoreEsComponent",
        expected: "(Array<string> | undefined)",
        value: input.ignoreEsComponent
    }), undefined === input.ignoreStyleComponent || (Array.isArray(input.ignoreStyleComponent) || _report(_exceptionable, {
        path: _path + ".ignoreStyleComponent",
        expected: "(Array<string> | undefined)",
        value: input.ignoreStyleComponent
    })) && input.ignoreStyleComponent.map((elem, _index446) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignoreStyleComponent[" + _index446 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignoreStyleComponent",
        expected: "(Array<string> | undefined)",
        value: input.ignoreStyleComponent
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["libraryName", "libraryDirectory", "customName", "customStyleName", "style", "styleLibraryDirectory", "camelToDashComponentName", "transformToDefaultImport", "ignoreEsComponent", "ignoreStyleComponent"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo101 = (input, _path, _exceptionable = true) => [undefined === input.minify || "boolean" === typeof input.minify || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(boolean | undefined)",
        value: input.minify
    }), undefined === input.errorRecovery || "boolean" === typeof input.errorRecovery || _report(_exceptionable, {
        path: _path + ".errorRecovery",
        expected: "(boolean | undefined)",
        value: input.errorRecovery
    }), (null !== input.targets || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | Targets | string | undefined)",
        value: input.targets
    })) && (undefined === input.targets || "string" === typeof input.targets || (Array.isArray(input.targets) && input.targets.map((elem, _index447) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".targets[" + _index447 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.targets && null !== input.targets && false === Array.isArray(input.targets) && _vo102(input.targets, _path + ".targets", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | Targets | string | undefined)",
        value: input.targets
    })) || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | Targets | string | undefined)",
        value: input.targets
    })), undefined === input.include || ("object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(FeatureOptions | undefined)",
        value: input.include
    })) && _vo103(input.include, _path + ".include", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(FeatureOptions | undefined)",
        value: input.include
    }), undefined === input.exclude || ("object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(FeatureOptions | undefined)",
        value: input.exclude
    })) && _vo103(input.exclude, _path + ".exclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(FeatureOptions | undefined)",
        value: input.exclude
    }), undefined === input.draft || ("object" === typeof input.draft && null !== input.draft && false === Array.isArray(input.draft) || _report(_exceptionable, {
        path: _path + ".draft",
        expected: "(Drafts | undefined)",
        value: input.draft
    })) && _vo104(input.draft, _path + ".draft", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".draft",
        expected: "(Drafts | undefined)",
        value: input.draft
    }), undefined === input.drafts || ("object" === typeof input.drafts && null !== input.drafts && false === Array.isArray(input.drafts) || _report(_exceptionable, {
        path: _path + ".drafts",
        expected: "(Drafts | undefined)",
        value: input.drafts
    })) && _vo104(input.drafts, _path + ".drafts", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".drafts",
        expected: "(Drafts | undefined)",
        value: input.drafts
    }), undefined === input.nonStandard || ("object" === typeof input.nonStandard && null !== input.nonStandard && false === Array.isArray(input.nonStandard) || _report(_exceptionable, {
        path: _path + ".nonStandard",
        expected: "(NonStandard | undefined)",
        value: input.nonStandard
    })) && _vo105(input.nonStandard, _path + ".nonStandard", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".nonStandard",
        expected: "(NonStandard | undefined)",
        value: input.nonStandard
    }), undefined === input.pseudoClasses || ("object" === typeof input.pseudoClasses && null !== input.pseudoClasses && false === Array.isArray(input.pseudoClasses) || _report(_exceptionable, {
        path: _path + ".pseudoClasses",
        expected: "(PseudoClasses | undefined)",
        value: input.pseudoClasses
    })) && _vo106(input.pseudoClasses, _path + ".pseudoClasses", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pseudoClasses",
        expected: "(PseudoClasses | undefined)",
        value: input.pseudoClasses
    }), undefined === input.unusedSymbols || (Array.isArray(input.unusedSymbols) || _report(_exceptionable, {
        path: _path + ".unusedSymbols",
        expected: "(Array<string> | undefined)",
        value: input.unusedSymbols
    })) && input.unusedSymbols.map((elem, _index448) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".unusedSymbols[" + _index448 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".unusedSymbols",
        expected: "(Array<string> | undefined)",
        value: input.unusedSymbols
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["minify", "errorRecovery", "targets", "include", "exclude", "draft", "drafts", "nonStandard", "pseudoClasses", "unusedSymbols"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo102 = (input, _path, _exceptionable = true) => [undefined === input.android || "number" === typeof input.android || _report(_exceptionable, {
        path: _path + ".android",
        expected: "(number | undefined)",
        value: input.android
    }), undefined === input.chrome || "number" === typeof input.chrome || _report(_exceptionable, {
        path: _path + ".chrome",
        expected: "(number | undefined)",
        value: input.chrome
    }), undefined === input.edge || "number" === typeof input.edge || _report(_exceptionable, {
        path: _path + ".edge",
        expected: "(number | undefined)",
        value: input.edge
    }), undefined === input.firefox || "number" === typeof input.firefox || _report(_exceptionable, {
        path: _path + ".firefox",
        expected: "(number | undefined)",
        value: input.firefox
    }), undefined === input.ie || "number" === typeof input.ie || _report(_exceptionable, {
        path: _path + ".ie",
        expected: "(number | undefined)",
        value: input.ie
    }), undefined === input.ios_saf || "number" === typeof input.ios_saf || _report(_exceptionable, {
        path: _path + ".ios_saf",
        expected: "(number | undefined)",
        value: input.ios_saf
    }), undefined === input.opera || "number" === typeof input.opera || _report(_exceptionable, {
        path: _path + ".opera",
        expected: "(number | undefined)",
        value: input.opera
    }), undefined === input.safari || "number" === typeof input.safari || _report(_exceptionable, {
        path: _path + ".safari",
        expected: "(number | undefined)",
        value: input.safari
    }), undefined === input.samsung || "number" === typeof input.samsung || _report(_exceptionable, {
        path: _path + ".samsung",
        expected: "(number | undefined)",
        value: input.samsung
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["android", "chrome", "edge", "firefox", "ie", "ios_saf", "opera", "safari", "samsung"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo103 = (input, _path, _exceptionable = true) => [undefined === input.nesting || "boolean" === typeof input.nesting || _report(_exceptionable, {
        path: _path + ".nesting",
        expected: "(boolean | undefined)",
        value: input.nesting
    }), undefined === input.notSelectorList || "boolean" === typeof input.notSelectorList || _report(_exceptionable, {
        path: _path + ".notSelectorList",
        expected: "(boolean | undefined)",
        value: input.notSelectorList
    }), undefined === input.dirSelector || "boolean" === typeof input.dirSelector || _report(_exceptionable, {
        path: _path + ".dirSelector",
        expected: "(boolean | undefined)",
        value: input.dirSelector
    }), undefined === input.langSelectorList || "boolean" === typeof input.langSelectorList || _report(_exceptionable, {
        path: _path + ".langSelectorList",
        expected: "(boolean | undefined)",
        value: input.langSelectorList
    }), undefined === input.isSelector || "boolean" === typeof input.isSelector || _report(_exceptionable, {
        path: _path + ".isSelector",
        expected: "(boolean | undefined)",
        value: input.isSelector
    }), undefined === input.textDecorationThicknessPercent || "boolean" === typeof input.textDecorationThicknessPercent || _report(_exceptionable, {
        path: _path + ".textDecorationThicknessPercent",
        expected: "(boolean | undefined)",
        value: input.textDecorationThicknessPercent
    }), undefined === input.mediaIntervalSyntax || "boolean" === typeof input.mediaIntervalSyntax || _report(_exceptionable, {
        path: _path + ".mediaIntervalSyntax",
        expected: "(boolean | undefined)",
        value: input.mediaIntervalSyntax
    }), undefined === input.mediaRangeSyntax || "boolean" === typeof input.mediaRangeSyntax || _report(_exceptionable, {
        path: _path + ".mediaRangeSyntax",
        expected: "(boolean | undefined)",
        value: input.mediaRangeSyntax
    }), undefined === input.customMediaQueries || "boolean" === typeof input.customMediaQueries || _report(_exceptionable, {
        path: _path + ".customMediaQueries",
        expected: "(boolean | undefined)",
        value: input.customMediaQueries
    }), undefined === input.clampFunction || "boolean" === typeof input.clampFunction || _report(_exceptionable, {
        path: _path + ".clampFunction",
        expected: "(boolean | undefined)",
        value: input.clampFunction
    }), undefined === input.colorFunction || "boolean" === typeof input.colorFunction || _report(_exceptionable, {
        path: _path + ".colorFunction",
        expected: "(boolean | undefined)",
        value: input.colorFunction
    }), undefined === input.oklabColors || "boolean" === typeof input.oklabColors || _report(_exceptionable, {
        path: _path + ".oklabColors",
        expected: "(boolean | undefined)",
        value: input.oklabColors
    }), undefined === input.labColors || "boolean" === typeof input.labColors || _report(_exceptionable, {
        path: _path + ".labColors",
        expected: "(boolean | undefined)",
        value: input.labColors
    }), undefined === input.p3Colors || "boolean" === typeof input.p3Colors || _report(_exceptionable, {
        path: _path + ".p3Colors",
        expected: "(boolean | undefined)",
        value: input.p3Colors
    }), undefined === input.hexAlphaColors || "boolean" === typeof input.hexAlphaColors || _report(_exceptionable, {
        path: _path + ".hexAlphaColors",
        expected: "(boolean | undefined)",
        value: input.hexAlphaColors
    }), undefined === input.spaceSeparatedColorNotation || "boolean" === typeof input.spaceSeparatedColorNotation || _report(_exceptionable, {
        path: _path + ".spaceSeparatedColorNotation",
        expected: "(boolean | undefined)",
        value: input.spaceSeparatedColorNotation
    }), undefined === input.fontFamilySystemUi || "boolean" === typeof input.fontFamilySystemUi || _report(_exceptionable, {
        path: _path + ".fontFamilySystemUi",
        expected: "(boolean | undefined)",
        value: input.fontFamilySystemUi
    }), undefined === input.doublePositionGradients || "boolean" === typeof input.doublePositionGradients || _report(_exceptionable, {
        path: _path + ".doublePositionGradients",
        expected: "(boolean | undefined)",
        value: input.doublePositionGradients
    }), undefined === input.vendorPrefixes || "boolean" === typeof input.vendorPrefixes || _report(_exceptionable, {
        path: _path + ".vendorPrefixes",
        expected: "(boolean | undefined)",
        value: input.vendorPrefixes
    }), undefined === input.logicalProperties || "boolean" === typeof input.logicalProperties || _report(_exceptionable, {
        path: _path + ".logicalProperties",
        expected: "(boolean | undefined)",
        value: input.logicalProperties
    }), undefined === input.selectors || "boolean" === typeof input.selectors || _report(_exceptionable, {
        path: _path + ".selectors",
        expected: "(boolean | undefined)",
        value: input.selectors
    }), undefined === input.mediaQueries || "boolean" === typeof input.mediaQueries || _report(_exceptionable, {
        path: _path + ".mediaQueries",
        expected: "(boolean | undefined)",
        value: input.mediaQueries
    }), undefined === input.color || "boolean" === typeof input.color || _report(_exceptionable, {
        path: _path + ".color",
        expected: "(boolean | undefined)",
        value: input.color
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["nesting", "notSelectorList", "dirSelector", "langSelectorList", "isSelector", "textDecorationThicknessPercent", "mediaIntervalSyntax", "mediaRangeSyntax", "customMediaQueries", "clampFunction", "colorFunction", "oklabColors", "labColors", "p3Colors", "hexAlphaColors", "spaceSeparatedColorNotation", "fontFamilySystemUi", "doublePositionGradients", "vendorPrefixes", "logicalProperties", "selectors", "mediaQueries", "color"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo104 = (input, _path, _exceptionable = true) => [undefined === input.customMedia || "boolean" === typeof input.customMedia || _report(_exceptionable, {
        path: _path + ".customMedia",
        expected: "(boolean | undefined)",
        value: input.customMedia
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["customMedia"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo105 = (input, _path, _exceptionable = true) => [undefined === input.deepSelectorCombinator || "boolean" === typeof input.deepSelectorCombinator || _report(_exceptionable, {
        path: _path + ".deepSelectorCombinator",
        expected: "(boolean | undefined)",
        value: input.deepSelectorCombinator
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["deepSelectorCombinator"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo106 = (input, _path, _exceptionable = true) => [undefined === input.hover || "string" === typeof input.hover || _report(_exceptionable, {
        path: _path + ".hover",
        expected: "(string | undefined)",
        value: input.hover
    }), undefined === input.active || "string" === typeof input.active || _report(_exceptionable, {
        path: _path + ".active",
        expected: "(string | undefined)",
        value: input.active
    }), undefined === input.focus || "string" === typeof input.focus || _report(_exceptionable, {
        path: _path + ".focus",
        expected: "(string | undefined)",
        value: input.focus
    }), undefined === input.focusVisible || "string" === typeof input.focusVisible || _report(_exceptionable, {
        path: _path + ".focusVisible",
        expected: "(string | undefined)",
        value: input.focusVisible
    }), undefined === input.focusWithin || "string" === typeof input.focusWithin || _report(_exceptionable, {
        path: _path + ".focusWithin",
        expected: "(string | undefined)",
        value: input.focusWithin
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hover", "active", "focus", "focusVisible", "focusWithin"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo107 = (input, _path, _exceptionable = true) => [undefined === input.pluginOptions || ("object" === typeof input.pluginOptions && null !== input.pluginOptions && false === Array.isArray(input.pluginOptions) || _report(_exceptionable, {
        path: _path + ".pluginOptions",
        expected: "(CssExtractRspackPluginOptions | undefined)",
        value: input.pluginOptions
    })) && _vo108(input.pluginOptions, _path + ".pluginOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pluginOptions",
        expected: "(CssExtractRspackPluginOptions | undefined)",
        value: input.pluginOptions
    }), undefined === input.loaderOptions || ("object" === typeof input.loaderOptions && null !== input.loaderOptions && false === Array.isArray(input.loaderOptions) || _report(_exceptionable, {
        path: _path + ".loaderOptions",
        expected: "(CssExtractRspackLoaderOptions | undefined)",
        value: input.loaderOptions
    })) && _vo109(input.loaderOptions, _path + ".loaderOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".loaderOptions",
        expected: "(CssExtractRspackLoaderOptions | undefined)",
        value: input.loaderOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["pluginOptions", "loaderOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo108 = (input, _path, _exceptionable = true) => [(null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })) && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })), undefined === input.ignoreOrder || "boolean" === typeof input.ignoreOrder || _report(_exceptionable, {
        path: _path + ".ignoreOrder",
        expected: "(boolean | undefined)",
        value: input.ignoreOrder
    }), (null !== input.insert || _report(_exceptionable, {
        path: _path + ".insert",
        expected: "(string | undefined)",
        value: input.insert
    })) && (undefined === input.insert || "function" === typeof input.insert || "string" === typeof input.insert || _report(_exceptionable, {
        path: _path + ".insert",
        expected: "(string | undefined)",
        value: input.insert
    })), undefined === input.attributes || ("object" === typeof input.attributes && null !== input.attributes && false === Array.isArray(input.attributes) || _report(_exceptionable, {
        path: _path + ".attributes",
        expected: "(Record<string, string> | undefined)",
        value: input.attributes
    })) && _vo64(input.attributes, _path + ".attributes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".attributes",
        expected: "(Record<string, string> | undefined)",
        value: input.attributes
    }), undefined === input.linkType || false === input.linkType || "string" === typeof input.linkType || _report(_exceptionable, {
        path: _path + ".linkType",
        expected: "(false | string | undefined)",
        value: input.linkType
    }), undefined === input.runtime || "boolean" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(boolean | undefined)",
        value: input.runtime
    }), undefined === input.pathinfo || "boolean" === typeof input.pathinfo || _report(_exceptionable, {
        path: _path + ".pathinfo",
        expected: "(boolean | undefined)",
        value: input.pathinfo
    }), undefined === input.enforceRelative || "boolean" === typeof input.enforceRelative || _report(_exceptionable, {
        path: _path + ".enforceRelative",
        expected: "(boolean | undefined)",
        value: input.enforceRelative
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["filename", "chunkFilename", "ignoreOrder", "insert", "attributes", "linkType", "runtime", "pathinfo", "enforceRelative"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo109 = (input, _path, _exceptionable = true) => [(null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.emit || "boolean" === typeof input.emit || _report(_exceptionable, {
        path: _path + ".emit",
        expected: "(boolean | undefined)",
        value: input.emit
    }), undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(string | undefined)",
        value: input.layer
    }), undefined === input.defaultExport || "boolean" === typeof input.defaultExport || _report(_exceptionable, {
        path: _path + ".defaultExport",
        expected: "(boolean | undefined)",
        value: input.defaultExport
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["publicPath", "emit", "esModule", "layer", "defaultExport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo110 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), undefined === input.dependencies || (Array.isArray(input.dependencies) || _report(_exceptionable, {
        path: _path + ".dependencies",
        expected: "(Dependencies | undefined)",
        value: input.dependencies
    })) && input.dependencies.map((elem, _index449) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dependencies[" + _index449 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dependencies",
        expected: "(Dependencies | undefined)",
        value: input.dependencies
    }), (null !== input.entry || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject | string | undefined)",
        value: input.entry
    })) && (undefined === input.entry || "function" === typeof input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.map((elem, _index450) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".entry[" + _index450 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _vo111(input.entry, _path + ".entry", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject | string | undefined)",
        value: input.entry
    })) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject | string | undefined)",
        value: input.entry
    })), undefined === input.output || ("object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output | undefined)",
        value: input.output
    })) && _vo116(input.output, _path + ".output", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output | undefined)",
        value: input.output
    }), (null !== input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | Array<AllowTarget> | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}` | false | undefined)",
        value: input.target
    })) && (undefined === input.target || true === _vv451.has(input.target) || "string" === typeof input.target && (RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(input.target) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(input.target) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.target) || RegExp(/^browserslist:(.*)/).test(input.target)) || (Array.isArray(input.target) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | Array<AllowTarget> | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}` | false | undefined)",
        value: input.target
    })) && input.target.map((elem, _index452) => (null !== elem || _report(_exceptionable, {
        path: _path + ".target[" + _index452 + "]",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}`)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".target[" + _index452 + "]",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}`)",
        value: elem
    })) && (true === _vv453.has(elem) || "string" === typeof elem && (RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^async\x2dnode[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dmain$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2drenderer$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(elem) || RegExp(/^electron[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\x2dpreload$/).test(elem) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^nwjs[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^node\x2dwebkit[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(elem) || RegExp(/^browserslist:(.*)/).test(elem)) || _report(_exceptionable, {
        path: _path + ".target[" + _index452 + "]",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}`)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"async-node\" | \"browserslist\" | \"electron-main\" | \"electron-preload\" | \"electron-renderer\" | \"es2015\" | \"es2016\" | \"es2017\" | \"es2018\" | \"es2019\" | \"es2020\" | \"es2021\" | \"es2022\" | \"es3\" | \"es5\" | \"node\" | \"node-webkit\" | \"nwjs\" | \"web\" | \"webworker\" | Array<AllowTarget> | `async-node${number}.${number}` | `async-node${number}` | `browserslist:${string}` | `electron${number}-main` | `electron${number}-preload` | `electron${number}-renderer` | `electron${number}.${number}-main` | `electron${number}.${number}-preload` | `electron${number}.${number}-renderer` | `node${number}.${number}` | `node${number}` | `node-webkit${number}.${number}` | `node-webkit${number}` | `nwjs${number}.${number}` | `nwjs${number}` | false | undefined)",
        value: input.target
    })), undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"development\" | \"none\" | \"production\" | undefined)",
        value: input.mode
    }), undefined === input.experiments || ("object" === typeof input.experiments && null !== input.experiments && false === Array.isArray(input.experiments) || _report(_exceptionable, {
        path: _path + ".experiments",
        expected: "(Experiments | undefined)",
        value: input.experiments
    })) && _vo120(input.experiments, _path + ".experiments", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".experiments",
        expected: "(Experiments | undefined)",
        value: input.experiments
    }), (null !== input.externals || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.map((elem, _index454) => (null !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index454 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index454 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".externals[" + _index454 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && _vo128(elem, _path + ".externals[" + _index454 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals[" + _index454 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _vo128(input.externals, _path + ".externals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })), undefined === input.externalsType || true === _vv455.has(input.externalsType) || _report(_exceptionable, {
        path: _path + ".externalsType",
        expected: "(\"amd\" | \"amd-require\" | \"assign\" | \"commonjs\" | \"commonjs-import\" | \"commonjs-module\" | \"commonjs-static\" | \"commonjs2\" | \"global\" | \"import\" | \"jsonp\" | \"module\" | \"module-import\" | \"node-commonjs\" | \"promise\" | \"script\" | \"self\" | \"system\" | \"this\" | \"umd\" | \"umd2\" | \"var\" | \"window\" | undefined)",
        value: input.externalsType
    }), undefined === input.externalsPresets || ("object" === typeof input.externalsPresets && null !== input.externalsPresets && false === Array.isArray(input.externalsPresets) || _report(_exceptionable, {
        path: _path + ".externalsPresets",
        expected: "(ExternalsPresets | undefined)",
        value: input.externalsPresets
    })) && _vo131(input.externalsPresets, _path + ".externalsPresets", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externalsPresets",
        expected: "(ExternalsPresets | undefined)",
        value: input.externalsPresets
    }), undefined === input.infrastructureLogging || ("object" === typeof input.infrastructureLogging && null !== input.infrastructureLogging && false === Array.isArray(input.infrastructureLogging) || _report(_exceptionable, {
        path: _path + ".infrastructureLogging",
        expected: "(InfrastructureLogging | undefined)",
        value: input.infrastructureLogging
    })) && _vo132(input.infrastructureLogging, _path + ".infrastructureLogging", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".infrastructureLogging",
        expected: "(InfrastructureLogging | undefined)",
        value: input.infrastructureLogging
    }), undefined === input.cache || "boolean" === typeof input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(boolean | undefined)",
        value: input.cache
    }), undefined === input.context || "string" === typeof input.context || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(string | undefined)",
        value: input.context
    }), undefined === input.devtool || true === _vv456.has(input.devtool) || _report(_exceptionable, {
        path: _path + ".devtool",
        expected: "(\"cheap-module-source-map\" | \"cheap-source-map\" | \"eval\" | \"eval-cheap-module-source-map\" | \"eval-cheap-source-map\" | \"eval-nosources-cheap-module-source-map\" | \"eval-nosources-cheap-source-map\" | \"eval-nosources-source-map\" | \"eval-source-map\" | \"hidden-cheap-module-source-map\" | \"hidden-cheap-source-map\" | \"hidden-nosources-cheap-module-source-map\" | \"hidden-nosources-cheap-source-map\" | \"hidden-nosources-source-map\" | \"hidden-source-map\" | \"inline-cheap-module-source-map\" | \"inline-cheap-source-map\" | \"inline-nosources-cheap-module-source-map\" | \"inline-nosources-cheap-source-map\" | \"inline-nosources-source-map\" | \"inline-source-map\" | \"nosources-cheap-module-source-map\" | \"nosources-cheap-source-map\" | \"nosources-source-map\" | \"source-map\" | false | undefined)",
        value: input.devtool
    }), (null !== input.node || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions | false | undefined)",
        value: input.node
    })) && (undefined === input.node || false === input.node || ("object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions | false | undefined)",
        value: input.node
    })) && _vo136(input.node, _path + ".node", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions | false | undefined)",
        value: input.node
    })), undefined === input.loader || ("object" === typeof input.loader && null !== input.loader && false === Array.isArray(input.loader) || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(Loader | undefined)",
        value: input.loader
    })) && _vo137(input.loader, _path + ".loader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(Loader | undefined)",
        value: input.loader
    }), undefined === input.ignoreWarnings || (Array.isArray(input.ignoreWarnings) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings",
        expected: "(IgnoreWarnings | undefined)",
        value: input.ignoreWarnings
    })) && input.ignoreWarnings.map((elem, _index457) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index457 + "]",
        expected: "RegExp",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index457 + "]",
        expected: "RegExp",
        value: elem
    })) && ("function" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index457 + "]",
        expected: "RegExp",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings",
        expected: "(IgnoreWarnings | undefined)",
        value: input.ignoreWarnings
    }), undefined === input.watchOptions || ("object" === typeof input.watchOptions && null !== input.watchOptions && false === Array.isArray(input.watchOptions) || _report(_exceptionable, {
        path: _path + ".watchOptions",
        expected: "(WatchOptions | undefined)",
        value: input.watchOptions
    })) && _vo138(input.watchOptions, _path + ".watchOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchOptions",
        expected: "(WatchOptions | undefined)",
        value: input.watchOptions
    }), undefined === input.watch || "boolean" === typeof input.watch || _report(_exceptionable, {
        path: _path + ".watch",
        expected: "(boolean | undefined)",
        value: input.watch
    }), (null !== input.stats || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions | boolean | undefined)",
        value: input.stats
    })) && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || ("object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions | boolean | undefined)",
        value: input.stats
    })) && _vo139(input.stats, _path + ".stats", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions | boolean | undefined)",
        value: input.stats
    })), undefined === input.snapshot || ("object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(SnapshotOptions | undefined)",
        value: input.snapshot
    })) && _vo140(input.snapshot, _path + ".snapshot", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(SnapshotOptions | undefined)",
        value: input.snapshot
    }), undefined === input.optimization || ("object" === typeof input.optimization && null !== input.optimization && false === Array.isArray(input.optimization) || _report(_exceptionable, {
        path: _path + ".optimization",
        expected: "(Optimization | undefined)",
        value: input.optimization
    })) && _vo141(input.optimization, _path + ".optimization", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".optimization",
        expected: "(Optimization | undefined)",
        value: input.optimization
    }), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions | undefined)",
        value: input.resolve
    })) && _vo150(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions | undefined)",
        value: input.resolve
    }), undefined === input.resolveLoader || ("object" === typeof input.resolveLoader && null !== input.resolveLoader && false === Array.isArray(input.resolveLoader) || _report(_exceptionable, {
        path: _path + ".resolveLoader",
        expected: "(ResolveOptions | undefined)",
        value: input.resolveLoader
    })) && _vo150(input.resolveLoader, _path + ".resolveLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolveLoader",
        expected: "(ResolveOptions | undefined)",
        value: input.resolveLoader
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Plugins | undefined)",
        value: input.plugins
    })) && input.plugins.map((elem, _index458) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index458 + "]",
        expected: "(\"\" | 0 | RspackPluginInstance | WebpackPluginInstance | false | null | undefined)",
        value: elem
    })) && _vu4(elem, _path + ".plugins[" + _index458 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index458 + "]",
        expected: "(\"\" | 0 | RspackPluginInstance | WebpackPluginInstance | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Plugins | undefined)",
        value: input.plugins
    }), undefined === input.devServer || ("object" === typeof input.devServer && null !== input.devServer && false === Array.isArray(input.devServer) || _report(_exceptionable, {
        path: _path + ".devServer",
        expected: "(DevServer | undefined)",
        value: input.devServer
    })) && _vo155(input.devServer, _path + ".devServer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devServer",
        expected: "(DevServer | undefined)",
        value: input.devServer
    }), undefined === input["module"] || ("object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(ModuleOptions | undefined)",
        value: input["module"]
    })) && _vo205(input["module"], _path + "[\"module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(ModuleOptions | undefined)",
        value: input["module"]
    }), undefined === input.profile || "boolean" === typeof input.profile || _report(_exceptionable, {
        path: _path + ".profile",
        expected: "(boolean | undefined)",
        value: input.profile
    }), (null !== input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Record<string, any> | false | undefined)",
        value: input.amd
    })) && (undefined === input.amd || false === input.amd || ("object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Record<string, any> | false | undefined)",
        value: input.amd
    })) && _vo85(input.amd, _path + ".amd", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Record<string, any> | false | undefined)",
        value: input.amd
    })), undefined === input.bail || "boolean" === typeof input.bail || _report(_exceptionable, {
        path: _path + ".bail",
        expected: "(boolean | undefined)",
        value: input.bail
    }), (null !== input.performance || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(__type.o50 | false | undefined)",
        value: input.performance
    })) && (undefined === input.performance || false === input.performance || ("object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(__type.o50 | false | undefined)",
        value: input.performance
    })) && _vo227(input.performance, _path + ".performance", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(__type.o50 | false | undefined)",
        value: input.performance
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "dependencies", "entry", "output", "target", "mode", "experiments", "externals", "externalsType", "externalsPresets", "infrastructureLogging", "cache", "context", "devtool", "node", "loader", "ignoreWarnings", "watchOptions", "watch", "stats", "snapshot", "optimization", "resolve", "resolveLoader", "plugins", "devServer", "module", "profile", "amd", "bail", "performance"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo111 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index459) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index459 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && _vo112(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo112 = (input, _path, _exceptionable = true) => [(null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && (undefined !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && ("string" === typeof input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && input["import"].map((elem, _index460) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index460 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })), undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(false | string | undefined)",
        value: input.runtime
    }), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.baseUri || "string" === typeof input.baseUri || _report(_exceptionable, {
        path: _path + ".baseUri",
        expected: "(string | undefined)",
        value: input.baseUri
    }), undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading || _report(_exceptionable, {
        path: _path + ".chunkLoading",
        expected: "(false | string | undefined)",
        value: input.chunkLoading
    }), undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks || _report(_exceptionable, {
        path: _path + ".asyncChunks",
        expected: "(boolean | undefined)",
        value: input.asyncChunks
    }), undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading || _report(_exceptionable, {
        path: _path + ".wasmLoading",
        expected: "(false | string | undefined)",
        value: input.wasmLoading
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.library || ("object" === typeof input.library && null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    })) && _vo113(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    }), (null !== input.dependOn || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && (undefined === input.dependOn || "string" === typeof input.dependOn || (Array.isArray(input.dependOn) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && input.dependOn.map((elem, _index461) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dependOn[" + _index461 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })), null === input.layer || undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(null | string | undefined)",
        value: input.layer
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "runtime", "publicPath", "baseUri", "chunkLoading", "asyncChunks", "wasmLoading", "filename", "library", "dependOn", "layer"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo113 = (input, _path, _exceptionable = true) => [undefined === input.amdContainer || "string" === typeof input.amdContainer || _report(_exceptionable, {
        path: _path + ".amdContainer",
        expected: "(string | undefined)",
        value: input.amdContainer
    }), (null !== input.auxiliaryComment || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })) && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || ("object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })) && _vo114(input.auxiliaryComment, _path + ".auxiliaryComment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })), (null !== input["export"] || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })) && (undefined === input["export"] || "string" === typeof input["export"] || (Array.isArray(input["export"]) || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })) && input["export"].map((elem, _index462) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"export\"][" + _index462 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject | string | undefined)",
        value: input.name
    })) && (undefined === input.name || "string" === typeof input.name || (Array.isArray(input.name) && input.name.map((elem, _index463) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".name[" + _index463 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.name && null !== input.name && false === Array.isArray(input.name) && _vo115(input.name, _path + ".name", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject | string | undefined)",
        value: input.name
    })) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject | string | undefined)",
        value: input.name
    })), "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "string",
        value: input.type
    }), undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine || _report(_exceptionable, {
        path: _path + ".umdNamedDefine",
        expected: "(boolean | undefined)",
        value: input.umdNamedDefine
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amdContainer", "auxiliaryComment", "export", "name", "type", "umdNamedDefine"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo114 = (input, _path, _exceptionable = true) => [undefined === input.amd || "string" === typeof input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(string | undefined)",
        value: input.amd
    }), undefined === input.commonjs || "string" === typeof input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(string | undefined)",
        value: input.commonjs
    }), undefined === input.commonjs2 || "string" === typeof input.commonjs2 || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(string | undefined)",
        value: input.commonjs2
    }), undefined === input.root || "string" === typeof input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(string | undefined)",
        value: input.root
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "commonjs", "commonjs2", "root"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo115 = (input, _path, _exceptionable = true) => [undefined === input.amd || "string" === typeof input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(string | undefined)",
        value: input.amd
    }), undefined === input.commonjs || "string" === typeof input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(string | undefined)",
        value: input.commonjs
    }), (null !== input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })) && (undefined === input.root || "string" === typeof input.root || (Array.isArray(input.root) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })) && input.root.map((elem, _index464) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".root[" + _index464 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "commonjs", "root"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo116 = (input, _path, _exceptionable = true) => [undefined === input.path || "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(string | undefined)",
        value: input.path
    }), undefined === input.pathinfo || "verbose" === input.pathinfo || "boolean" === typeof input.pathinfo || _report(_exceptionable, {
        path: _path + ".pathinfo",
        expected: "(\"verbose\" | boolean | undefined)",
        value: input.pathinfo
    }), (null !== input.clean || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(__type.o21 | boolean | undefined)",
        value: input.clean
    })) && (undefined === input.clean || "boolean" === typeof input.clean || ("object" === typeof input.clean && null !== input.clean && false === Array.isArray(input.clean) || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(__type.o21 | boolean | undefined)",
        value: input.clean
    })) && _vo117(input.clean, _path + ".clean", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(__type.o21 | boolean | undefined)",
        value: input.clean
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })) && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })), undefined === input.crossOriginLoading || false === input.crossOriginLoading || "anonymous" === input.crossOriginLoading || "use-credentials" === input.crossOriginLoading || _report(_exceptionable, {
        path: _path + ".crossOriginLoading",
        expected: "(\"anonymous\" | \"use-credentials\" | false | undefined)",
        value: input.crossOriginLoading
    }), (null !== input.cssFilename || _report(_exceptionable, {
        path: _path + ".cssFilename",
        expected: "(string | undefined)",
        value: input.cssFilename
    })) && (undefined === input.cssFilename || "function" === typeof input.cssFilename || "string" === typeof input.cssFilename || _report(_exceptionable, {
        path: _path + ".cssFilename",
        expected: "(string | undefined)",
        value: input.cssFilename
    })), undefined === input.cssHeadDataCompression || "boolean" === typeof input.cssHeadDataCompression || _report(_exceptionable, {
        path: _path + ".cssHeadDataCompression",
        expected: "(boolean | undefined)",
        value: input.cssHeadDataCompression
    }), (null !== input.cssChunkFilename || _report(_exceptionable, {
        path: _path + ".cssChunkFilename",
        expected: "(string | undefined)",
        value: input.cssChunkFilename
    })) && (undefined === input.cssChunkFilename || "function" === typeof input.cssChunkFilename || "string" === typeof input.cssChunkFilename || _report(_exceptionable, {
        path: _path + ".cssChunkFilename",
        expected: "(string | undefined)",
        value: input.cssChunkFilename
    })), undefined === input.hotUpdateMainFilename || "string" === typeof input.hotUpdateMainFilename || _report(_exceptionable, {
        path: _path + ".hotUpdateMainFilename",
        expected: "(string | undefined)",
        value: input.hotUpdateMainFilename
    }), undefined === input.hotUpdateChunkFilename || "string" === typeof input.hotUpdateChunkFilename || _report(_exceptionable, {
        path: _path + ".hotUpdateChunkFilename",
        expected: "(string | undefined)",
        value: input.hotUpdateChunkFilename
    }), undefined === input.hotUpdateGlobal || "string" === typeof input.hotUpdateGlobal || _report(_exceptionable, {
        path: _path + ".hotUpdateGlobal",
        expected: "(string | undefined)",
        value: input.hotUpdateGlobal
    }), (null !== input.assetModuleFilename || _report(_exceptionable, {
        path: _path + ".assetModuleFilename",
        expected: "(string | undefined)",
        value: input.assetModuleFilename
    })) && (undefined === input.assetModuleFilename || "function" === typeof input.assetModuleFilename || "string" === typeof input.assetModuleFilename || _report(_exceptionable, {
        path: _path + ".assetModuleFilename",
        expected: "(string | undefined)",
        value: input.assetModuleFilename
    })), undefined === input.uniqueName || "string" === typeof input.uniqueName || _report(_exceptionable, {
        path: _path + ".uniqueName",
        expected: "(string | undefined)",
        value: input.uniqueName
    }), undefined === input.chunkLoadingGlobal || "string" === typeof input.chunkLoadingGlobal || _report(_exceptionable, {
        path: _path + ".chunkLoadingGlobal",
        expected: "(string | undefined)",
        value: input.chunkLoadingGlobal
    }), undefined === input.enabledLibraryTypes || (Array.isArray(input.enabledLibraryTypes) || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes",
        expected: "(EnabledLibraryTypes | undefined)",
        value: input.enabledLibraryTypes
    })) && input.enabledLibraryTypes.map((elem, _index465) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes[" + _index465 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes",
        expected: "(EnabledLibraryTypes | undefined)",
        value: input.enabledLibraryTypes
    }), (null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject | LibraryOptions | string | undefined)",
        value: input.library
    })) && (undefined === input.library || "string" === typeof input.library || (Array.isArray(input.library) && input.library.map((elem, _index466) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".library[" + _index466 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.library && null !== input.library && false === Array.isArray(input.library) && _vu12(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject | LibraryOptions | string | undefined)",
        value: input.library
    })) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject | LibraryOptions | string | undefined)",
        value: input.library
    })), (null !== input.libraryExport || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })) && (undefined === input.libraryExport || "string" === typeof input.libraryExport || (Array.isArray(input.libraryExport) || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })) && input.libraryExport.map((elem, _index467) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".libraryExport[" + _index467 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })), undefined === input.libraryTarget || "string" === typeof input.libraryTarget || _report(_exceptionable, {
        path: _path + ".libraryTarget",
        expected: "(string | undefined)",
        value: input.libraryTarget
    }), undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine || _report(_exceptionable, {
        path: _path + ".umdNamedDefine",
        expected: "(boolean | undefined)",
        value: input.umdNamedDefine
    }), (null !== input.auxiliaryComment || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })) && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || ("object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })) && _vo114(input.auxiliaryComment, _path + ".auxiliaryComment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject | string | undefined)",
        value: input.auxiliaryComment
    })), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), undefined === input.strictModuleExceptionHandling || "boolean" === typeof input.strictModuleExceptionHandling || _report(_exceptionable, {
        path: _path + ".strictModuleExceptionHandling",
        expected: "(boolean | undefined)",
        value: input.strictModuleExceptionHandling
    }), undefined === input.strictModuleErrorHandling || "boolean" === typeof input.strictModuleErrorHandling || _report(_exceptionable, {
        path: _path + ".strictModuleErrorHandling",
        expected: "(boolean | undefined)",
        value: input.strictModuleErrorHandling
    }), undefined === input.globalObject || "string" === typeof input.globalObject || _report(_exceptionable, {
        path: _path + ".globalObject",
        expected: "(string | undefined)",
        value: input.globalObject
    }), undefined === input.importFunctionName || "string" === typeof input.importFunctionName || _report(_exceptionable, {
        path: _path + ".importFunctionName",
        expected: "(string | undefined)",
        value: input.importFunctionName
    }), undefined === input.importMetaName || "string" === typeof input.importMetaName || _report(_exceptionable, {
        path: _path + ".importMetaName",
        expected: "(string | undefined)",
        value: input.importMetaName
    }), undefined === input.iife || "boolean" === typeof input.iife || _report(_exceptionable, {
        path: _path + ".iife",
        expected: "(boolean | undefined)",
        value: input.iife
    }), undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading || _report(_exceptionable, {
        path: _path + ".wasmLoading",
        expected: "(false | string | undefined)",
        value: input.wasmLoading
    }), undefined === input.enabledWasmLoadingTypes || (Array.isArray(input.enabledWasmLoadingTypes) || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes",
        expected: "(EnabledWasmLoadingTypes | undefined)",
        value: input.enabledWasmLoadingTypes
    })) && input.enabledWasmLoadingTypes.map((elem, _index468) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes[" + _index468 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes",
        expected: "(EnabledWasmLoadingTypes | undefined)",
        value: input.enabledWasmLoadingTypes
    }), undefined === input.webassemblyModuleFilename || "string" === typeof input.webassemblyModuleFilename || _report(_exceptionable, {
        path: _path + ".webassemblyModuleFilename",
        expected: "(string | undefined)",
        value: input.webassemblyModuleFilename
    }), undefined === input.chunkFormat || false === input.chunkFormat || "string" === typeof input.chunkFormat || _report(_exceptionable, {
        path: _path + ".chunkFormat",
        expected: "(false | string | undefined)",
        value: input.chunkFormat
    }), undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading || _report(_exceptionable, {
        path: _path + ".chunkLoading",
        expected: "(false | string | undefined)",
        value: input.chunkLoading
    }), undefined === input.enabledChunkLoadingTypes || (Array.isArray(input.enabledChunkLoadingTypes) || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes",
        expected: "(EnabledChunkLoadingTypes | undefined)",
        value: input.enabledChunkLoadingTypes
    })) && input.enabledChunkLoadingTypes.map((elem, _index469) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes[" + _index469 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes",
        expected: "(EnabledChunkLoadingTypes | undefined)",
        value: input.enabledChunkLoadingTypes
    }), (null !== input.trustedTypes || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes | string | true | undefined)",
        value: input.trustedTypes
    })) && (undefined === input.trustedTypes || true === input.trustedTypes || "string" === typeof input.trustedTypes || ("object" === typeof input.trustedTypes && null !== input.trustedTypes && false === Array.isArray(input.trustedTypes) || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes | string | true | undefined)",
        value: input.trustedTypes
    })) && _vo118(input.trustedTypes, _path + ".trustedTypes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes | string | true | undefined)",
        value: input.trustedTypes
    })), undefined === input.sourceMapFilename || "string" === typeof input.sourceMapFilename || _report(_exceptionable, {
        path: _path + ".sourceMapFilename",
        expected: "(string | undefined)",
        value: input.sourceMapFilename
    }), undefined === input.hashDigest || "string" === typeof input.hashDigest || _report(_exceptionable, {
        path: _path + ".hashDigest",
        expected: "(string | undefined)",
        value: input.hashDigest
    }), undefined === input.hashDigestLength || "number" === typeof input.hashDigestLength || _report(_exceptionable, {
        path: _path + ".hashDigestLength",
        expected: "(number | undefined)",
        value: input.hashDigestLength
    }), undefined === input.hashFunction || "md4" === input.hashFunction || "xxhash64" === input.hashFunction || _report(_exceptionable, {
        path: _path + ".hashFunction",
        expected: "(\"md4\" | \"xxhash64\" | undefined)",
        value: input.hashFunction
    }), undefined === input.hashSalt || "string" === typeof input.hashSalt || _report(_exceptionable, {
        path: _path + ".hashSalt",
        expected: "(string | undefined)",
        value: input.hashSalt
    }), undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks || _report(_exceptionable, {
        path: _path + ".asyncChunks",
        expected: "(boolean | undefined)",
        value: input.asyncChunks
    }), undefined === input.workerChunkLoading || false === input.workerChunkLoading || "string" === typeof input.workerChunkLoading || _report(_exceptionable, {
        path: _path + ".workerChunkLoading",
        expected: "(false | string | undefined)",
        value: input.workerChunkLoading
    }), undefined === input.workerWasmLoading || false === input.workerWasmLoading || "string" === typeof input.workerWasmLoading || _report(_exceptionable, {
        path: _path + ".workerWasmLoading",
        expected: "(false | string | undefined)",
        value: input.workerWasmLoading
    }), undefined === input.workerPublicPath || "string" === typeof input.workerPublicPath || _report(_exceptionable, {
        path: _path + ".workerPublicPath",
        expected: "(string | undefined)",
        value: input.workerPublicPath
    }), undefined === input.scriptType || false === input.scriptType || "module" === input.scriptType || "text/javascript" === input.scriptType || _report(_exceptionable, {
        path: _path + ".scriptType",
        expected: "(\"module\" | \"text/javascript\" | false | undefined)",
        value: input.scriptType
    }), undefined === input.devtoolNamespace || "string" === typeof input.devtoolNamespace || _report(_exceptionable, {
        path: _path + ".devtoolNamespace",
        expected: "(string | undefined)",
        value: input.devtoolNamespace
    }), (null !== input.devtoolModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolModuleFilenameTemplate",
        expected: "(string | undefined)",
        value: input.devtoolModuleFilenameTemplate
    })) && (undefined === input.devtoolModuleFilenameTemplate || "function" === typeof input.devtoolModuleFilenameTemplate || "string" === typeof input.devtoolModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolModuleFilenameTemplate",
        expected: "(string | undefined)",
        value: input.devtoolModuleFilenameTemplate
    })), (null !== input.devtoolFallbackModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolFallbackModuleFilenameTemplate",
        expected: "(string | undefined)",
        value: input.devtoolFallbackModuleFilenameTemplate
    })) && (undefined === input.devtoolFallbackModuleFilenameTemplate || "function" === typeof input.devtoolFallbackModuleFilenameTemplate || "string" === typeof input.devtoolFallbackModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolFallbackModuleFilenameTemplate",
        expected: "(string | undefined)",
        value: input.devtoolFallbackModuleFilenameTemplate
    })), undefined === input.chunkLoadTimeout || "number" === typeof input.chunkLoadTimeout || _report(_exceptionable, {
        path: _path + ".chunkLoadTimeout",
        expected: "(number | undefined)",
        value: input.chunkLoadTimeout
    }), undefined === input.charset || "boolean" === typeof input.charset || _report(_exceptionable, {
        path: _path + ".charset",
        expected: "(boolean | undefined)",
        value: input.charset
    }), undefined === input.environment || ("object" === typeof input.environment && null !== input.environment && false === Array.isArray(input.environment) || _report(_exceptionable, {
        path: _path + ".environment",
        expected: "(Environment | undefined)",
        value: input.environment
    })) && _vo119(input.environment, _path + ".environment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".environment",
        expected: "(Environment | undefined)",
        value: input.environment
    }), undefined === input.compareBeforeEmit || "boolean" === typeof input.compareBeforeEmit || _report(_exceptionable, {
        path: _path + ".compareBeforeEmit",
        expected: "(boolean | undefined)",
        value: input.compareBeforeEmit
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["path", "pathinfo", "clean", "publicPath", "filename", "chunkFilename", "crossOriginLoading", "cssFilename", "cssHeadDataCompression", "cssChunkFilename", "hotUpdateMainFilename", "hotUpdateChunkFilename", "hotUpdateGlobal", "assetModuleFilename", "uniqueName", "chunkLoadingGlobal", "enabledLibraryTypes", "library", "libraryExport", "libraryTarget", "umdNamedDefine", "auxiliaryComment", "module", "strictModuleExceptionHandling", "strictModuleErrorHandling", "globalObject", "importFunctionName", "importMetaName", "iife", "wasmLoading", "enabledWasmLoadingTypes", "webassemblyModuleFilename", "chunkFormat", "chunkLoading", "enabledChunkLoadingTypes", "trustedTypes", "sourceMapFilename", "hashDigest", "hashDigestLength", "hashFunction", "hashSalt", "asyncChunks", "workerChunkLoading", "workerWasmLoading", "workerPublicPath", "scriptType", "devtoolNamespace", "devtoolModuleFilenameTemplate", "devtoolFallbackModuleFilenameTemplate", "chunkLoadTimeout", "charset", "environment", "compareBeforeEmit"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo117 = (input, _path, _exceptionable = true) => [undefined === input.keep || "string" === typeof input.keep || _report(_exceptionable, {
        path: _path + ".keep",
        expected: "(string | undefined)",
        value: input.keep
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["keep"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo118 = (input, _path, _exceptionable = true) => [undefined === input.policyName || "string" === typeof input.policyName || _report(_exceptionable, {
        path: _path + ".policyName",
        expected: "(string | undefined)",
        value: input.policyName
    }), undefined === input.onPolicyCreationFailure || "continue" === input.onPolicyCreationFailure || "stop" === input.onPolicyCreationFailure || _report(_exceptionable, {
        path: _path + ".onPolicyCreationFailure",
        expected: "(\"continue\" | \"stop\" | undefined)",
        value: input.onPolicyCreationFailure
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["policyName", "onPolicyCreationFailure"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo119 = (input, _path, _exceptionable = true) => [undefined === input.arrowFunction || "boolean" === typeof input.arrowFunction || _report(_exceptionable, {
        path: _path + ".arrowFunction",
        expected: "(boolean | undefined)",
        value: input.arrowFunction
    }), undefined === input.asyncFunction || "boolean" === typeof input.asyncFunction || _report(_exceptionable, {
        path: _path + ".asyncFunction",
        expected: "(boolean | undefined)",
        value: input.asyncFunction
    }), undefined === input.bigIntLiteral || "boolean" === typeof input.bigIntLiteral || _report(_exceptionable, {
        path: _path + ".bigIntLiteral",
        expected: "(boolean | undefined)",
        value: input.bigIntLiteral
    }), undefined === input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
        path: _path + "[\"const\"]",
        expected: "(boolean | undefined)",
        value: input["const"]
    }), undefined === input.destructuring || "boolean" === typeof input.destructuring || _report(_exceptionable, {
        path: _path + ".destructuring",
        expected: "(boolean | undefined)",
        value: input.destructuring
    }), undefined === input.document || "boolean" === typeof input.document || _report(_exceptionable, {
        path: _path + ".document",
        expected: "(boolean | undefined)",
        value: input.document
    }), undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport || _report(_exceptionable, {
        path: _path + ".dynamicImport",
        expected: "(boolean | undefined)",
        value: input.dynamicImport
    }), undefined === input.dynamicImportInWorker || "boolean" === typeof input.dynamicImportInWorker || _report(_exceptionable, {
        path: _path + ".dynamicImportInWorker",
        expected: "(boolean | undefined)",
        value: input.dynamicImportInWorker
    }), undefined === input.forOf || "boolean" === typeof input.forOf || _report(_exceptionable, {
        path: _path + ".forOf",
        expected: "(boolean | undefined)",
        value: input.forOf
    }), undefined === input.globalThis || "boolean" === typeof input.globalThis || _report(_exceptionable, {
        path: _path + ".globalThis",
        expected: "(boolean | undefined)",
        value: input.globalThis
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), undefined === input.nodePrefixForCoreModules || "boolean" === typeof input.nodePrefixForCoreModules || _report(_exceptionable, {
        path: _path + ".nodePrefixForCoreModules",
        expected: "(boolean | undefined)",
        value: input.nodePrefixForCoreModules
    }), undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining || _report(_exceptionable, {
        path: _path + ".optionalChaining",
        expected: "(boolean | undefined)",
        value: input.optionalChaining
    }), undefined === input.templateLiteral || "boolean" === typeof input.templateLiteral || _report(_exceptionable, {
        path: _path + ".templateLiteral",
        expected: "(boolean | undefined)",
        value: input.templateLiteral
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["arrowFunction", "asyncFunction", "bigIntLiteral", "const", "destructuring", "document", "dynamicImport", "dynamicImportInWorker", "forOf", "globalThis", "module", "nodePrefixForCoreModules", "optionalChaining", "templateLiteral"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo120 = (input, _path, _exceptionable = true) => [(null !== input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(__type.o22 | __type.o23 | boolean | undefined)",
        value: input.cache
    })) && (undefined === input.cache || "boolean" === typeof input.cache || ("object" === typeof input.cache && null !== input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(__type.o22 | __type.o23 | boolean | undefined)",
        value: input.cache
    })) && _vu13(input.cache, _path + ".cache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(__type.o22 | __type.o23 | boolean | undefined)",
        value: input.cache
    })), (null !== input.lazyCompilation || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })) && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || ("object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })) && _vo11(input.lazyCompilation, _path + ".lazyCompilation", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions | boolean | undefined)",
        value: input.lazyCompilation
    })), undefined === input.asyncWebAssembly || "boolean" === typeof input.asyncWebAssembly || _report(_exceptionable, {
        path: _path + ".asyncWebAssembly",
        expected: "(boolean | undefined)",
        value: input.asyncWebAssembly
    }), undefined === input.outputModule || "boolean" === typeof input.outputModule || _report(_exceptionable, {
        path: _path + ".outputModule",
        expected: "(boolean | undefined)",
        value: input.outputModule
    }), undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait || _report(_exceptionable, {
        path: _path + ".topLevelAwait",
        expected: "(boolean | undefined)",
        value: input.topLevelAwait
    }), undefined === input.css || "boolean" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(boolean | undefined)",
        value: input.css
    }), undefined === input.layers || "boolean" === typeof input.layers || _report(_exceptionable, {
        path: _path + ".layers",
        expected: "(boolean | undefined)",
        value: input.layers
    }), (null !== input.incremental || _report(_exceptionable, {
        path: _path + ".incremental",
        expected: "(Incremental | boolean | undefined)",
        value: input.incremental
    })) && (undefined === input.incremental || "boolean" === typeof input.incremental || ("object" === typeof input.incremental && null !== input.incremental && false === Array.isArray(input.incremental) || _report(_exceptionable, {
        path: _path + ".incremental",
        expected: "(Incremental | boolean | undefined)",
        value: input.incremental
    })) && _vo125(input.incremental, _path + ".incremental", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".incremental",
        expected: "(Incremental | boolean | undefined)",
        value: input.incremental
    })), undefined === input.parallelCodeSplitting || "boolean" === typeof input.parallelCodeSplitting || _report(_exceptionable, {
        path: _path + ".parallelCodeSplitting",
        expected: "(boolean | undefined)",
        value: input.parallelCodeSplitting
    }), undefined === input.futureDefaults || "boolean" === typeof input.futureDefaults || _report(_exceptionable, {
        path: _path + ".futureDefaults",
        expected: "(boolean | undefined)",
        value: input.futureDefaults
    }), undefined === input.rspackFuture || ("object" === typeof input.rspackFuture && null !== input.rspackFuture && false === Array.isArray(input.rspackFuture) || _report(_exceptionable, {
        path: _path + ".rspackFuture",
        expected: "(RspackFutureOptions | undefined)",
        value: input.rspackFuture
    })) && _vo126(input.rspackFuture, _path + ".rspackFuture", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspackFuture",
        expected: "(RspackFutureOptions | undefined)",
        value: input.rspackFuture
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["cache", "lazyCompilation", "asyncWebAssembly", "outputModule", "topLevelAwait", "css", "layers", "incremental", "parallelCodeSplitting", "futureDefaults", "rspackFuture"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo121 = (input, _path, _exceptionable = true) => ["memory" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"memory\"",
        value: input.type
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo122 = (input, _path, _exceptionable = true) => ["persistent" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"persistent\"",
        value: input.type
    }), undefined === input.buildDependencies || (Array.isArray(input.buildDependencies) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(Array<string> | undefined)",
        value: input.buildDependencies
    })) && input.buildDependencies.map((elem, _index470) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".buildDependencies[" + _index470 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(Array<string> | undefined)",
        value: input.buildDependencies
    }), undefined === input.version || "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(string | undefined)",
        value: input.version
    }), undefined === input.snapshot || ("object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(__type.o24 | undefined)",
        value: input.snapshot
    })) && _vo123(input.snapshot, _path + ".snapshot", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(__type.o24 | undefined)",
        value: input.snapshot
    }), undefined === input.storage || ("object" === typeof input.storage && null !== input.storage || _report(_exceptionable, {
        path: _path + ".storage",
        expected: "(__type.o25 | undefined)",
        value: input.storage
    })) && _vo124(input.storage, _path + ".storage", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".storage",
        expected: "(__type.o25 | undefined)",
        value: input.storage
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "buildDependencies", "version", "snapshot", "storage"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo123 = (input, _path, _exceptionable = true) => [undefined === input.immutablePaths || (Array.isArray(input.immutablePaths) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    })) && input.immutablePaths.map((elem, _index471) => (null !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index471 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index471 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index471 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    }), undefined === input.unmanagedPaths || (Array.isArray(input.unmanagedPaths) || _report(_exceptionable, {
        path: _path + ".unmanagedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.unmanagedPaths
    })) && input.unmanagedPaths.map((elem, _index472) => (null !== elem || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index472 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index472 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index472 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".unmanagedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.unmanagedPaths
    }), undefined === input.managedPaths || (Array.isArray(input.managedPaths) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    })) && input.managedPaths.map((elem, _index473) => (null !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index473 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index473 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index473 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["immutablePaths", "unmanagedPaths", "managedPaths"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo124 = (input, _path, _exceptionable = true) => ["filesystem" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"filesystem\"",
        value: input.type
    }), undefined === input.directory || "string" === typeof input.directory || _report(_exceptionable, {
        path: _path + ".directory",
        expected: "(string | undefined)",
        value: input.directory
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "directory"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo125 = (input, _path, _exceptionable = true) => [undefined === input.make || "boolean" === typeof input.make || _report(_exceptionable, {
        path: _path + ".make",
        expected: "(boolean | undefined)",
        value: input.make
    }), undefined === input.inferAsyncModules || "boolean" === typeof input.inferAsyncModules || _report(_exceptionable, {
        path: _path + ".inferAsyncModules",
        expected: "(boolean | undefined)",
        value: input.inferAsyncModules
    }), undefined === input.providedExports || "boolean" === typeof input.providedExports || _report(_exceptionable, {
        path: _path + ".providedExports",
        expected: "(boolean | undefined)",
        value: input.providedExports
    }), undefined === input.dependenciesDiagnostics || "boolean" === typeof input.dependenciesDiagnostics || _report(_exceptionable, {
        path: _path + ".dependenciesDiagnostics",
        expected: "(boolean | undefined)",
        value: input.dependenciesDiagnostics
    }), undefined === input.sideEffects || "boolean" === typeof input.sideEffects || _report(_exceptionable, {
        path: _path + ".sideEffects",
        expected: "(boolean | undefined)",
        value: input.sideEffects
    }), undefined === input.buildChunkGraph || "boolean" === typeof input.buildChunkGraph || _report(_exceptionable, {
        path: _path + ".buildChunkGraph",
        expected: "(boolean | undefined)",
        value: input.buildChunkGraph
    }), undefined === input.moduleIds || "boolean" === typeof input.moduleIds || _report(_exceptionable, {
        path: _path + ".moduleIds",
        expected: "(boolean | undefined)",
        value: input.moduleIds
    }), undefined === input.chunkIds || "boolean" === typeof input.chunkIds || _report(_exceptionable, {
        path: _path + ".chunkIds",
        expected: "(boolean | undefined)",
        value: input.chunkIds
    }), undefined === input.modulesHashes || "boolean" === typeof input.modulesHashes || _report(_exceptionable, {
        path: _path + ".modulesHashes",
        expected: "(boolean | undefined)",
        value: input.modulesHashes
    }), undefined === input.modulesCodegen || "boolean" === typeof input.modulesCodegen || _report(_exceptionable, {
        path: _path + ".modulesCodegen",
        expected: "(boolean | undefined)",
        value: input.modulesCodegen
    }), undefined === input.modulesRuntimeRequirements || "boolean" === typeof input.modulesRuntimeRequirements || _report(_exceptionable, {
        path: _path + ".modulesRuntimeRequirements",
        expected: "(boolean | undefined)",
        value: input.modulesRuntimeRequirements
    }), undefined === input.chunksRuntimeRequirements || "boolean" === typeof input.chunksRuntimeRequirements || _report(_exceptionable, {
        path: _path + ".chunksRuntimeRequirements",
        expected: "(boolean | undefined)",
        value: input.chunksRuntimeRequirements
    }), undefined === input.chunksHashes || "boolean" === typeof input.chunksHashes || _report(_exceptionable, {
        path: _path + ".chunksHashes",
        expected: "(boolean | undefined)",
        value: input.chunksHashes
    }), undefined === input.chunksRender || "boolean" === typeof input.chunksRender || _report(_exceptionable, {
        path: _path + ".chunksRender",
        expected: "(boolean | undefined)",
        value: input.chunksRender
    }), undefined === input.emitAssets || "boolean" === typeof input.emitAssets || _report(_exceptionable, {
        path: _path + ".emitAssets",
        expected: "(boolean | undefined)",
        value: input.emitAssets
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["make", "inferAsyncModules", "providedExports", "dependenciesDiagnostics", "sideEffects", "buildChunkGraph", "moduleIds", "chunkIds", "modulesHashes", "modulesCodegen", "modulesRuntimeRequirements", "chunksRuntimeRequirements", "chunksHashes", "chunksRender", "emitAssets"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo126 = (input, _path, _exceptionable = true) => [undefined === input.bundlerInfo || ("object" === typeof input.bundlerInfo && null !== input.bundlerInfo && false === Array.isArray(input.bundlerInfo) || _report(_exceptionable, {
        path: _path + ".bundlerInfo",
        expected: "(__type.o26 | undefined)",
        value: input.bundlerInfo
    })) && _vo127(input.bundlerInfo, _path + ".bundlerInfo", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".bundlerInfo",
        expected: "(__type.o26 | undefined)",
        value: input.bundlerInfo
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["bundlerInfo"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo127 = (input, _path, _exceptionable = true) => [undefined === input.version || "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(string | undefined)",
        value: input.version
    }), undefined === input.bundler || "string" === typeof input.bundler || _report(_exceptionable, {
        path: _path + ".bundler",
        expected: "(string | undefined)",
        value: input.bundler
    }), (null !== input.force || _report(_exceptionable, {
        path: _path + ".force",
        expected: "(Array<\"version\" | \"uniqueId\"> | boolean | undefined)",
        value: input.force
    })) && (undefined === input.force || "boolean" === typeof input.force || (Array.isArray(input.force) || _report(_exceptionable, {
        path: _path + ".force",
        expected: "(Array<\"version\" | \"uniqueId\"> | boolean | undefined)",
        value: input.force
    })) && input.force.map((elem, _index474) => "version" === elem || "uniqueId" === elem || _report(_exceptionable, {
        path: _path + ".force[" + _index474 + "]",
        expected: "(\"uniqueId\" | \"version\")",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".force",
        expected: "(Array<\"version\" | \"uniqueId\"> | boolean | undefined)",
        value: input.force
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["version", "bundler", "force"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo128 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | ExternalItemObjectValue | ExternalItemUmdValue | boolean | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | ExternalItemObjectValue | ExternalItemUmdValue | boolean | string)",
            value: value
        })) && ("string" === typeof value || "boolean" === typeof value || (Array.isArray(value) && value.map((elem, _index475) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index475 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vu14(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | ExternalItemObjectValue | ExternalItemUmdValue | boolean | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | ExternalItemObjectValue | ExternalItemUmdValue | boolean | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo129 = (input, _path, _exceptionable = true) => [(null !== input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string)",
        value: input.root
    })) && (undefined !== input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string)",
        value: input.root
    })) && ("string" === typeof input.root || (Array.isArray(input.root) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string)",
        value: input.root
    })) && input.root.map((elem, _index476) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".root[" + _index476 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string)",
        value: input.root
    })), (null !== input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(Array<string> | string)",
        value: input.commonjs
    })) && (undefined !== input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(Array<string> | string)",
        value: input.commonjs
    })) && ("string" === typeof input.commonjs || (Array.isArray(input.commonjs) || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(Array<string> | string)",
        value: input.commonjs
    })) && input.commonjs.map((elem, _index477) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".commonjs[" + _index477 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(Array<string> | string)",
        value: input.commonjs
    })), (null !== input.commonjs2 || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(Array<string> | string)",
        value: input.commonjs2
    })) && (undefined !== input.commonjs2 || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(Array<string> | string)",
        value: input.commonjs2
    })) && ("string" === typeof input.commonjs2 || (Array.isArray(input.commonjs2) || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(Array<string> | string)",
        value: input.commonjs2
    })) && input.commonjs2.map((elem, _index478) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".commonjs2[" + _index478 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(Array<string> | string)",
        value: input.commonjs2
    })), (null !== input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Array<string> | string)",
        value: input.amd
    })) && (undefined !== input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Array<string> | string)",
        value: input.amd
    })) && ("string" === typeof input.amd || (Array.isArray(input.amd) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Array<string> | string)",
        value: input.amd
    })) && input.amd.map((elem, _index479) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".amd[" + _index479 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(Array<string> | string)",
        value: input.amd
    })), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["root", "commonjs", "commonjs2", "amd"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo130 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && value.map((elem, _index480) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index480 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo131 = (input, _path, _exceptionable = true) => [undefined === input.node || "boolean" === typeof input.node || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(boolean | undefined)",
        value: input.node
    }), undefined === input.web || "boolean" === typeof input.web || _report(_exceptionable, {
        path: _path + ".web",
        expected: "(boolean | undefined)",
        value: input.web
    }), undefined === input.webAsync || "boolean" === typeof input.webAsync || _report(_exceptionable, {
        path: _path + ".webAsync",
        expected: "(boolean | undefined)",
        value: input.webAsync
    }), undefined === input.electron || "boolean" === typeof input.electron || _report(_exceptionable, {
        path: _path + ".electron",
        expected: "(boolean | undefined)",
        value: input.electron
    }), undefined === input.electronMain || "boolean" === typeof input.electronMain || _report(_exceptionable, {
        path: _path + ".electronMain",
        expected: "(boolean | undefined)",
        value: input.electronMain
    }), undefined === input.electronPreload || "boolean" === typeof input.electronPreload || _report(_exceptionable, {
        path: _path + ".electronPreload",
        expected: "(boolean | undefined)",
        value: input.electronPreload
    }), undefined === input.electronRenderer || "boolean" === typeof input.electronRenderer || _report(_exceptionable, {
        path: _path + ".electronRenderer",
        expected: "(boolean | undefined)",
        value: input.electronRenderer
    }), undefined === input.nwjs || "boolean" === typeof input.nwjs || _report(_exceptionable, {
        path: _path + ".nwjs",
        expected: "(boolean | undefined)",
        value: input.nwjs
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["node", "web", "webAsync", "electron", "electronMain", "electronPreload", "electronRenderer", "nwjs"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo132 = (input, _path, _exceptionable = true) => [undefined === input.appendOnly || "boolean" === typeof input.appendOnly || _report(_exceptionable, {
        path: _path + ".appendOnly",
        expected: "(boolean | undefined)",
        value: input.appendOnly
    }), undefined === input.colors || "boolean" === typeof input.colors || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(boolean | undefined)",
        value: input.colors
    }), undefined === input.console || ("object" === typeof input.console && null !== input.console || _report(_exceptionable, {
        path: _path + ".console",
        expected: "(\"node:console\".global.Console | undefined)",
        value: input.console
    })) && _vo133(input.console, _path + ".console", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".console",
        expected: "(\"node:console\".global.Console | undefined)",
        value: input.console
    }), (null !== input.debug || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.debug
    })) && (undefined === input.debug || "function" === typeof input.debug || "string" === typeof input.debug || "boolean" === typeof input.debug || input.debug instanceof RegExp || (Array.isArray(input.debug) || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.debug
    })) && input.debug.map((elem, _index481) => (null !== elem || _report(_exceptionable, {
        path: _path + ".debug[" + _index481 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".debug[" + _index481 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".debug[" + _index481 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.debug
    })), undefined === input.level || "none" === input.level || "log" === input.level || "warn" === input.level || "error" === input.level || "info" === input.level || "verbose" === input.level || _report(_exceptionable, {
        path: _path + ".level",
        expected: "(\"error\" | \"info\" | \"log\" | \"none\" | \"verbose\" | \"warn\" | undefined)",
        value: input.level
    }), undefined === input.stream || ("object" === typeof input.stream && null !== input.stream || _report(_exceptionable, {
        path: _path + ".stream",
        expected: "(global.NodeJS.WritableStream | undefined)",
        value: input.stream
    })) && _vo135(input.stream, _path + ".stream", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stream",
        expected: "(global.NodeJS.WritableStream | undefined)",
        value: input.stream
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["appendOnly", "colors", "console", "debug", "level", "stream"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo133 = (input, _path, _exceptionable = true) => [("object" === typeof input.Console && null !== input.Console || _report(_exceptionable, {
        path: _path + ".Console",
        expected: "\"node:console\".global.console.ConsoleConstructor",
        value: input.Console
    })) && _vo134(input.Console, _path + ".Console", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".Console",
        expected: "\"node:console\".global.console.ConsoleConstructor",
        value: input.Console
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["Console"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo134 = (input, _path, _exceptionable = true) => [("object" === typeof input.prototype && null !== input.prototype || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"node:console\".global.Console",
        value: input.prototype
    })) && _vo133(input.prototype, _path + ".prototype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "\"node:console\".global.Console",
        value: input.prototype
    }), "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo135 = (input, _path, _exceptionable = true) => ["boolean" === typeof input.writable || _report(_exceptionable, {
        path: _path + ".writable",
        expected: "boolean",
        value: input.writable
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["writable"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo136 = (input, _path, _exceptionable = true) => [undefined === input.__dirname || "warn-mock" === input.__dirname || "mock" === input.__dirname || "eval-only" === input.__dirname || "node-module" === input.__dirname || "boolean" === typeof input.__dirname || _report(_exceptionable, {
        path: _path + ".__dirname",
        expected: "(\"eval-only\" | \"mock\" | \"node-module\" | \"warn-mock\" | boolean | undefined)",
        value: input.__dirname
    }), undefined === input.__filename || "warn-mock" === input.__filename || "mock" === input.__filename || "eval-only" === input.__filename || "node-module" === input.__filename || "boolean" === typeof input.__filename || _report(_exceptionable, {
        path: _path + ".__filename",
        expected: "(\"eval-only\" | \"mock\" | \"node-module\" | \"warn-mock\" | boolean | undefined)",
        value: input.__filename
    }), undefined === input.global || "warn" === input.global || "boolean" === typeof input.global || _report(_exceptionable, {
        path: _path + ".global",
        expected: "(\"warn\" | boolean | undefined)",
        value: input.global
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["__dirname", "__filename", "global"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo137 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo138 = (input, _path, _exceptionable = true) => [undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout || _report(_exceptionable, {
        path: _path + ".aggregateTimeout",
        expected: "(number | undefined)",
        value: input.aggregateTimeout
    }), undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks || _report(_exceptionable, {
        path: _path + ".followSymlinks",
        expected: "(boolean | undefined)",
        value: input.followSymlinks
    }), (null !== input.ignored || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })) && (undefined === input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })) && input.ignored.map((elem, _index482) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index482 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })), undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll || _report(_exceptionable, {
        path: _path + ".poll",
        expected: "(boolean | number | undefined)",
        value: input.poll
    }), undefined === input.stdin || "boolean" === typeof input.stdin || _report(_exceptionable, {
        path: _path + ".stdin",
        expected: "(boolean | undefined)",
        value: input.stdin
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["aggregateTimeout", "followSymlinks", "ignored", "poll", "stdin"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo139 = (input, _path, _exceptionable = true) => [undefined === input.all || "boolean" === typeof input.all || _report(_exceptionable, {
        path: _path + ".all",
        expected: "(boolean | undefined)",
        value: input.all
    }), undefined === input.preset || "none" === input.preset || "verbose" === input.preset || "normal" === input.preset || "errors-only" === input.preset || "errors-warnings" === input.preset || "minimal" === input.preset || "detailed" === input.preset || "summary" === input.preset || "boolean" === typeof input.preset || _report(_exceptionable, {
        path: _path + ".preset",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | boolean | undefined)",
        value: input.preset
    }), undefined === input.assets || "boolean" === typeof input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(boolean | undefined)",
        value: input.assets
    }), undefined === input.chunks || "boolean" === typeof input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(boolean | undefined)",
        value: input.chunks
    }), undefined === input.modules || "boolean" === typeof input.modules || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(boolean | undefined)",
        value: input.modules
    }), undefined === input.entrypoints || "auto" === input.entrypoints || "boolean" === typeof input.entrypoints || _report(_exceptionable, {
        path: _path + ".entrypoints",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.entrypoints
    }), undefined === input.chunkGroups || "boolean" === typeof input.chunkGroups || _report(_exceptionable, {
        path: _path + ".chunkGroups",
        expected: "(boolean | undefined)",
        value: input.chunkGroups
    }), undefined === input.warnings || "boolean" === typeof input.warnings || _report(_exceptionable, {
        path: _path + ".warnings",
        expected: "(boolean | undefined)",
        value: input.warnings
    }), undefined === input.warningsCount || "boolean" === typeof input.warningsCount || _report(_exceptionable, {
        path: _path + ".warningsCount",
        expected: "(boolean | undefined)",
        value: input.warningsCount
    }), undefined === input.errors || "boolean" === typeof input.errors || _report(_exceptionable, {
        path: _path + ".errors",
        expected: "(boolean | undefined)",
        value: input.errors
    }), undefined === input.errorsCount || "boolean" === typeof input.errorsCount || _report(_exceptionable, {
        path: _path + ".errorsCount",
        expected: "(boolean | undefined)",
        value: input.errorsCount
    }), undefined === input.colors || "boolean" === typeof input.colors || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(boolean | undefined)",
        value: input.colors
    }), undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.version || "boolean" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(boolean | undefined)",
        value: input.version
    }), undefined === input.reasons || "boolean" === typeof input.reasons || _report(_exceptionable, {
        path: _path + ".reasons",
        expected: "(boolean | undefined)",
        value: input.reasons
    }), undefined === input.publicPath || "boolean" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(boolean | undefined)",
        value: input.publicPath
    }), undefined === input.outputPath || "boolean" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(boolean | undefined)",
        value: input.outputPath
    }), undefined === input.chunkModules || "boolean" === typeof input.chunkModules || _report(_exceptionable, {
        path: _path + ".chunkModules",
        expected: "(boolean | undefined)",
        value: input.chunkModules
    }), undefined === input.chunkRelations || "boolean" === typeof input.chunkRelations || _report(_exceptionable, {
        path: _path + ".chunkRelations",
        expected: "(boolean | undefined)",
        value: input.chunkRelations
    }), undefined === input.ids || "boolean" === typeof input.ids || _report(_exceptionable, {
        path: _path + ".ids",
        expected: "(boolean | undefined)",
        value: input.ids
    }), undefined === input.timings || "boolean" === typeof input.timings || _report(_exceptionable, {
        path: _path + ".timings",
        expected: "(boolean | undefined)",
        value: input.timings
    }), undefined === input.builtAt || "boolean" === typeof input.builtAt || _report(_exceptionable, {
        path: _path + ".builtAt",
        expected: "(boolean | undefined)",
        value: input.builtAt
    }), undefined === input.moduleAssets || "boolean" === typeof input.moduleAssets || _report(_exceptionable, {
        path: _path + ".moduleAssets",
        expected: "(boolean | undefined)",
        value: input.moduleAssets
    }), undefined === input.nestedModules || "boolean" === typeof input.nestedModules || _report(_exceptionable, {
        path: _path + ".nestedModules",
        expected: "(boolean | undefined)",
        value: input.nestedModules
    }), undefined === input.source || "boolean" === typeof input.source || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(boolean | undefined)",
        value: input.source
    }), undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging || "boolean" === typeof input.logging || _report(_exceptionable, {
        path: _path + ".logging",
        expected: "(\"error\" | \"info\" | \"log\" | \"none\" | \"verbose\" | \"warn\" | boolean | undefined)",
        value: input.logging
    }), (null !== input.loggingDebug || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })) && (undefined === input.loggingDebug || "function" === typeof input.loggingDebug || "string" === typeof input.loggingDebug || "boolean" === typeof input.loggingDebug || input.loggingDebug instanceof RegExp || (Array.isArray(input.loggingDebug) || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })) && input.loggingDebug.map((elem, _index483) => (null !== elem || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index483 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index483 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index483 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })), undefined === input.loggingTrace || "boolean" === typeof input.loggingTrace || _report(_exceptionable, {
        path: _path + ".loggingTrace",
        expected: "(boolean | undefined)",
        value: input.loggingTrace
    }), undefined === input.runtimeModules || "boolean" === typeof input.runtimeModules || _report(_exceptionable, {
        path: _path + ".runtimeModules",
        expected: "(boolean | undefined)",
        value: input.runtimeModules
    }), undefined === input.children || "boolean" === typeof input.children || _report(_exceptionable, {
        path: _path + ".children",
        expected: "(boolean | undefined)",
        value: input.children
    }), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), undefined === input.providedExports || "boolean" === typeof input.providedExports || _report(_exceptionable, {
        path: _path + ".providedExports",
        expected: "(boolean | undefined)",
        value: input.providedExports
    }), undefined === input.optimizationBailout || "boolean" === typeof input.optimizationBailout || _report(_exceptionable, {
        path: _path + ".optimizationBailout",
        expected: "(boolean | undefined)",
        value: input.optimizationBailout
    }), undefined === input.groupModulesByType || "boolean" === typeof input.groupModulesByType || _report(_exceptionable, {
        path: _path + ".groupModulesByType",
        expected: "(boolean | undefined)",
        value: input.groupModulesByType
    }), undefined === input.groupModulesByCacheStatus || "boolean" === typeof input.groupModulesByCacheStatus || _report(_exceptionable, {
        path: _path + ".groupModulesByCacheStatus",
        expected: "(boolean | undefined)",
        value: input.groupModulesByCacheStatus
    }), undefined === input.groupModulesByLayer || "boolean" === typeof input.groupModulesByLayer || _report(_exceptionable, {
        path: _path + ".groupModulesByLayer",
        expected: "(boolean | undefined)",
        value: input.groupModulesByLayer
    }), undefined === input.groupModulesByAttributes || "boolean" === typeof input.groupModulesByAttributes || _report(_exceptionable, {
        path: _path + ".groupModulesByAttributes",
        expected: "(boolean | undefined)",
        value: input.groupModulesByAttributes
    }), undefined === input.groupModulesByPath || "boolean" === typeof input.groupModulesByPath || _report(_exceptionable, {
        path: _path + ".groupModulesByPath",
        expected: "(boolean | undefined)",
        value: input.groupModulesByPath
    }), undefined === input.groupModulesByExtension || "boolean" === typeof input.groupModulesByExtension || _report(_exceptionable, {
        path: _path + ".groupModulesByExtension",
        expected: "(boolean | undefined)",
        value: input.groupModulesByExtension
    }), undefined === input.modulesSpace || "number" === typeof input.modulesSpace || _report(_exceptionable, {
        path: _path + ".modulesSpace",
        expected: "(number | undefined)",
        value: input.modulesSpace
    }), undefined === input.chunkModulesSpace || "number" === typeof input.chunkModulesSpace || _report(_exceptionable, {
        path: _path + ".chunkModulesSpace",
        expected: "(number | undefined)",
        value: input.chunkModulesSpace
    }), undefined === input.nestedModulesSpace || "number" === typeof input.nestedModulesSpace || _report(_exceptionable, {
        path: _path + ".nestedModulesSpace",
        expected: "(number | undefined)",
        value: input.nestedModulesSpace
    }), undefined === input.relatedAssets || "boolean" === typeof input.relatedAssets || _report(_exceptionable, {
        path: _path + ".relatedAssets",
        expected: "(boolean | undefined)",
        value: input.relatedAssets
    }), undefined === input.groupAssetsByEmitStatus || "boolean" === typeof input.groupAssetsByEmitStatus || _report(_exceptionable, {
        path: _path + ".groupAssetsByEmitStatus",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByEmitStatus
    }), undefined === input.groupAssetsByInfo || "boolean" === typeof input.groupAssetsByInfo || _report(_exceptionable, {
        path: _path + ".groupAssetsByInfo",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByInfo
    }), undefined === input.groupAssetsByPath || "boolean" === typeof input.groupAssetsByPath || _report(_exceptionable, {
        path: _path + ".groupAssetsByPath",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByPath
    }), undefined === input.groupAssetsByExtension || "boolean" === typeof input.groupAssetsByExtension || _report(_exceptionable, {
        path: _path + ".groupAssetsByExtension",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByExtension
    }), undefined === input.groupAssetsByChunk || "boolean" === typeof input.groupAssetsByChunk || _report(_exceptionable, {
        path: _path + ".groupAssetsByChunk",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByChunk
    }), undefined === input.assetsSpace || "number" === typeof input.assetsSpace || _report(_exceptionable, {
        path: _path + ".assetsSpace",
        expected: "(number | undefined)",
        value: input.assetsSpace
    }), undefined === input.orphanModules || "boolean" === typeof input.orphanModules || _report(_exceptionable, {
        path: _path + ".orphanModules",
        expected: "(boolean | undefined)",
        value: input.orphanModules
    }), (null !== input.excludeModules || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })) && (undefined === input.excludeModules || "function" === typeof input.excludeModules || "string" === typeof input.excludeModules || "boolean" === typeof input.excludeModules || input.excludeModules instanceof RegExp || (Array.isArray(input.excludeModules) || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })) && input.excludeModules.map((elem, _index484) => (null !== elem || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index484 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index484 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index484 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })), (null !== input.excludeAssets || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeAssets
    })) && (undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || "boolean" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || (Array.isArray(input.excludeAssets) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeAssets
    })) && input.excludeAssets.map((elem, _index485) => (null !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index485 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index485 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index485 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<ModuleFilterItemTypes> | RegExp | boolean | string | undefined)",
        value: input.excludeAssets
    })), undefined === input.modulesSort || "string" === typeof input.modulesSort || _report(_exceptionable, {
        path: _path + ".modulesSort",
        expected: "(string | undefined)",
        value: input.modulesSort
    }), undefined === input.chunkModulesSort || "string" === typeof input.chunkModulesSort || _report(_exceptionable, {
        path: _path + ".chunkModulesSort",
        expected: "(string | undefined)",
        value: input.chunkModulesSort
    }), undefined === input.nestedModulesSort || "string" === typeof input.nestedModulesSort || _report(_exceptionable, {
        path: _path + ".nestedModulesSort",
        expected: "(string | undefined)",
        value: input.nestedModulesSort
    }), undefined === input.chunksSort || "string" === typeof input.chunksSort || _report(_exceptionable, {
        path: _path + ".chunksSort",
        expected: "(string | undefined)",
        value: input.chunksSort
    }), undefined === input.assetsSort || "string" === typeof input.assetsSort || _report(_exceptionable, {
        path: _path + ".assetsSort",
        expected: "(string | undefined)",
        value: input.assetsSort
    }), undefined === input.performance || "boolean" === typeof input.performance || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(boolean | undefined)",
        value: input.performance
    }), undefined === input.env || "boolean" === typeof input.env || _report(_exceptionable, {
        path: _path + ".env",
        expected: "(boolean | undefined)",
        value: input.env
    }), undefined === input.chunkGroupAuxiliary || "boolean" === typeof input.chunkGroupAuxiliary || _report(_exceptionable, {
        path: _path + ".chunkGroupAuxiliary",
        expected: "(boolean | undefined)",
        value: input.chunkGroupAuxiliary
    }), undefined === input.chunkGroupChildren || "boolean" === typeof input.chunkGroupChildren || _report(_exceptionable, {
        path: _path + ".chunkGroupChildren",
        expected: "(boolean | undefined)",
        value: input.chunkGroupChildren
    }), undefined === input.chunkGroupMaxAssets || "number" === typeof input.chunkGroupMaxAssets || _report(_exceptionable, {
        path: _path + ".chunkGroupMaxAssets",
        expected: "(number | undefined)",
        value: input.chunkGroupMaxAssets
    }), undefined === input.dependentModules || "boolean" === typeof input.dependentModules || _report(_exceptionable, {
        path: _path + ".dependentModules",
        expected: "(boolean | undefined)",
        value: input.dependentModules
    }), undefined === input.chunkOrigins || "boolean" === typeof input.chunkOrigins || _report(_exceptionable, {
        path: _path + ".chunkOrigins",
        expected: "(boolean | undefined)",
        value: input.chunkOrigins
    }), undefined === input.runtime || "boolean" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(boolean | undefined)",
        value: input.runtime
    }), undefined === input.depth || "boolean" === typeof input.depth || _report(_exceptionable, {
        path: _path + ".depth",
        expected: "(boolean | undefined)",
        value: input.depth
    }), undefined === input.reasonsSpace || "number" === typeof input.reasonsSpace || _report(_exceptionable, {
        path: _path + ".reasonsSpace",
        expected: "(number | undefined)",
        value: input.reasonsSpace
    }), undefined === input.groupReasonsByOrigin || "boolean" === typeof input.groupReasonsByOrigin || _report(_exceptionable, {
        path: _path + ".groupReasonsByOrigin",
        expected: "(boolean | undefined)",
        value: input.groupReasonsByOrigin
    }), undefined === input.errorDetails || "boolean" === typeof input.errorDetails || _report(_exceptionable, {
        path: _path + ".errorDetails",
        expected: "(boolean | undefined)",
        value: input.errorDetails
    }), undefined === input.errorStack || "boolean" === typeof input.errorStack || _report(_exceptionable, {
        path: _path + ".errorStack",
        expected: "(boolean | undefined)",
        value: input.errorStack
    }), undefined === input.moduleTrace || "boolean" === typeof input.moduleTrace || _report(_exceptionable, {
        path: _path + ".moduleTrace",
        expected: "(boolean | undefined)",
        value: input.moduleTrace
    }), undefined === input.cachedModules || "boolean" === typeof input.cachedModules || _report(_exceptionable, {
        path: _path + ".cachedModules",
        expected: "(boolean | undefined)",
        value: input.cachedModules
    }), undefined === input.cachedAssets || "boolean" === typeof input.cachedAssets || _report(_exceptionable, {
        path: _path + ".cachedAssets",
        expected: "(boolean | undefined)",
        value: input.cachedAssets
    }), undefined === input.cached || "boolean" === typeof input.cached || _report(_exceptionable, {
        path: _path + ".cached",
        expected: "(boolean | undefined)",
        value: input.cached
    }), undefined === input.errorsSpace || "number" === typeof input.errorsSpace || _report(_exceptionable, {
        path: _path + ".errorsSpace",
        expected: "(number | undefined)",
        value: input.errorsSpace
    }), undefined === input.warningsSpace || "number" === typeof input.warningsSpace || _report(_exceptionable, {
        path: _path + ".warningsSpace",
        expected: "(number | undefined)",
        value: input.warningsSpace
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["all", "preset", "assets", "chunks", "modules", "entrypoints", "chunkGroups", "warnings", "warningsCount", "errors", "errorsCount", "colors", "hash", "version", "reasons", "publicPath", "outputPath", "chunkModules", "chunkRelations", "ids", "timings", "builtAt", "moduleAssets", "nestedModules", "source", "logging", "loggingDebug", "loggingTrace", "runtimeModules", "children", "usedExports", "providedExports", "optimizationBailout", "groupModulesByType", "groupModulesByCacheStatus", "groupModulesByLayer", "groupModulesByAttributes", "groupModulesByPath", "groupModulesByExtension", "modulesSpace", "chunkModulesSpace", "nestedModulesSpace", "relatedAssets", "groupAssetsByEmitStatus", "groupAssetsByInfo", "groupAssetsByPath", "groupAssetsByExtension", "groupAssetsByChunk", "assetsSpace", "orphanModules", "excludeModules", "excludeAssets", "modulesSort", "chunkModulesSort", "nestedModulesSort", "chunksSort", "assetsSort", "performance", "env", "chunkGroupAuxiliary", "chunkGroupChildren", "chunkGroupMaxAssets", "dependentModules", "chunkOrigins", "runtime", "depth", "reasonsSpace", "groupReasonsByOrigin", "errorDetails", "errorStack", "moduleTrace", "cachedModules", "cachedAssets", "cached", "errorsSpace", "warningsSpace"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo140 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo141 = (input, _path, _exceptionable = true) => [undefined === input.moduleIds || "named" === input.moduleIds || "natural" === input.moduleIds || "deterministic" === input.moduleIds || _report(_exceptionable, {
        path: _path + ".moduleIds",
        expected: "(\"deterministic\" | \"named\" | \"natural\" | undefined)",
        value: input.moduleIds
    }), undefined === input.chunkIds || "size" === input.chunkIds || "named" === input.chunkIds || "natural" === input.chunkIds || "deterministic" === input.chunkIds || "total-size" === input.chunkIds || _report(_exceptionable, {
        path: _path + ".chunkIds",
        expected: "(\"deterministic\" | \"named\" | \"natural\" | \"size\" | \"total-size\" | undefined)",
        value: input.chunkIds
    }), undefined === input.minimize || "boolean" === typeof input.minimize || _report(_exceptionable, {
        path: _path + ".minimize",
        expected: "(boolean | undefined)",
        value: input.minimize
    }), undefined === input.minimizer || (Array.isArray(input.minimizer) || _report(_exceptionable, {
        path: _path + ".minimizer",
        expected: "(Array<\"...\" | Plugin> | undefined)",
        value: input.minimizer
    })) && input.minimizer.map((elem, _index486) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".minimizer[" + _index486 + "]",
        expected: "(\"\" | \"...\" | 0 | RspackPluginInstance | WebpackPluginInstance | false | null | undefined)",
        value: elem
    })) && _vu4(elem, _path + ".minimizer[" + _index486 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minimizer[" + _index486 + "]",
        expected: "(\"\" | \"...\" | 0 | RspackPluginInstance | WebpackPluginInstance | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".minimizer",
        expected: "(Array<\"...\" | Plugin> | undefined)",
        value: input.minimizer
    }), undefined === input.mergeDuplicateChunks || "boolean" === typeof input.mergeDuplicateChunks || _report(_exceptionable, {
        path: _path + ".mergeDuplicateChunks",
        expected: "(boolean | undefined)",
        value: input.mergeDuplicateChunks
    }), (null !== input.splitChunks || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && (undefined === input.splitChunks || false === input.splitChunks || ("object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && _vo144(input.splitChunks, _path + ".splitChunks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })), (null !== input.runtimeChunk || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o30 | boolean | undefined)",
        value: input.runtimeChunk
    })) && (undefined === input.runtimeChunk || "single" === input.runtimeChunk || "multiple" === input.runtimeChunk || "boolean" === typeof input.runtimeChunk || ("object" === typeof input.runtimeChunk && null !== input.runtimeChunk && false === Array.isArray(input.runtimeChunk) || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o30 | boolean | undefined)",
        value: input.runtimeChunk
    })) && _vo149(input.runtimeChunk, _path + ".runtimeChunk", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o30 | boolean | undefined)",
        value: input.runtimeChunk
    })), undefined === input.removeAvailableModules || "boolean" === typeof input.removeAvailableModules || _report(_exceptionable, {
        path: _path + ".removeAvailableModules",
        expected: "(boolean | undefined)",
        value: input.removeAvailableModules
    }), undefined === input.removeEmptyChunks || "boolean" === typeof input.removeEmptyChunks || _report(_exceptionable, {
        path: _path + ".removeEmptyChunks",
        expected: "(boolean | undefined)",
        value: input.removeEmptyChunks
    }), undefined === input.realContentHash || "boolean" === typeof input.realContentHash || _report(_exceptionable, {
        path: _path + ".realContentHash",
        expected: "(boolean | undefined)",
        value: input.realContentHash
    }), undefined === input.sideEffects || "flag" === input.sideEffects || "boolean" === typeof input.sideEffects || _report(_exceptionable, {
        path: _path + ".sideEffects",
        expected: "(\"flag\" | boolean | undefined)",
        value: input.sideEffects
    }), undefined === input.providedExports || "boolean" === typeof input.providedExports || _report(_exceptionable, {
        path: _path + ".providedExports",
        expected: "(boolean | undefined)",
        value: input.providedExports
    }), undefined === input.concatenateModules || "boolean" === typeof input.concatenateModules || _report(_exceptionable, {
        path: _path + ".concatenateModules",
        expected: "(boolean | undefined)",
        value: input.concatenateModules
    }), undefined === input.innerGraph || "boolean" === typeof input.innerGraph || _report(_exceptionable, {
        path: _path + ".innerGraph",
        expected: "(boolean | undefined)",
        value: input.innerGraph
    }), undefined === input.usedExports || "global" === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(\"global\" | boolean | undefined)",
        value: input.usedExports
    }), undefined === input.mangleExports || "size" === input.mangleExports || "deterministic" === input.mangleExports || "boolean" === typeof input.mangleExports || _report(_exceptionable, {
        path: _path + ".mangleExports",
        expected: "(\"deterministic\" | \"size\" | boolean | undefined)",
        value: input.mangleExports
    }), undefined === input.nodeEnv || false === input.nodeEnv || "string" === typeof input.nodeEnv || _report(_exceptionable, {
        path: _path + ".nodeEnv",
        expected: "(false | string | undefined)",
        value: input.nodeEnv
    }), undefined === input.emitOnErrors || "boolean" === typeof input.emitOnErrors || _report(_exceptionable, {
        path: _path + ".emitOnErrors",
        expected: "(boolean | undefined)",
        value: input.emitOnErrors
    }), undefined === input.avoidEntryIife || "boolean" === typeof input.avoidEntryIife || _report(_exceptionable, {
        path: _path + ".avoidEntryIife",
        expected: "(boolean | undefined)",
        value: input.avoidEntryIife
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["moduleIds", "chunkIds", "minimize", "minimizer", "mergeDuplicateChunks", "splitChunks", "runtimeChunk", "removeAvailableModules", "removeEmptyChunks", "realContentHash", "sideEffects", "providedExports", "concatenateModules", "innerGraph", "usedExports", "mangleExports", "nodeEnv", "emitOnErrors", "avoidEntryIife"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo142 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".apply",
        expected: "unknown",
        value: input.apply
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["apply"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo143 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".apply",
        expected: "unknown",
        value: input.apply
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["apply"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo144 = (input, _path, _exceptionable = true) => [undefined === input.cacheGroups || ("object" === typeof input.cacheGroups && null !== input.cacheGroups && false === Array.isArray(input.cacheGroups) || _report(_exceptionable, {
        path: _path + ".cacheGroups",
        expected: "(Record<string, false | OptimizationSplitChunksCacheGroup> | undefined)",
        value: input.cacheGroups
    })) && _vo145(input.cacheGroups, _path + ".cacheGroups", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cacheGroups",
        expected: "(Record<string, false | OptimizationSplitChunksCacheGroup> | undefined)",
        value: input.cacheGroups
    }), undefined === input.fallbackCacheGroup || ("object" === typeof input.fallbackCacheGroup && null !== input.fallbackCacheGroup && false === Array.isArray(input.fallbackCacheGroup) || _report(_exceptionable, {
        path: _path + ".fallbackCacheGroup",
        expected: "(__type.o29 | undefined)",
        value: input.fallbackCacheGroup
    })) && _vo148(input.fallbackCacheGroup, _path + ".fallbackCacheGroup", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallbackCacheGroup",
        expected: "(__type.o29 | undefined)",
        value: input.fallbackCacheGroup
    }), undefined === input.hidePathInfo || "boolean" === typeof input.hidePathInfo || _report(_exceptionable, {
        path: _path + ".hidePathInfo",
        expected: "(boolean | undefined)",
        value: input.hidePathInfo
    }), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), undefined === input.defaultSizeTypes || (Array.isArray(input.defaultSizeTypes) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    })) && input.defaultSizeTypes.map((elem, _index487) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes[" + _index487 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    }), undefined === input.minChunks || "number" === typeof input.minChunks || _report(_exceptionable, {
        path: _path + ".minChunks",
        expected: "(number | undefined)",
        value: input.minChunks
    }), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(false | string | undefined)",
        value: input.name
    })) && (undefined === input.name || "function" === typeof input.name || false === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(false | string | undefined)",
        value: input.name
    })), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })) && (undefined === input.minSize || "number" === typeof input.minSize || ("object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })) && _vo147(input.minSize, _path + ".minSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })), (null !== input.minSizeReduction || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })) && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || ("object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })) && _vo147(input.minSizeReduction, _path + ".minSizeReduction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })), (null !== input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })) && (undefined === input.maxSize || "number" === typeof input.maxSize || ("object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })) && _vo147(input.maxSize, _path + ".maxSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })), (null !== input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || ("object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })) && _vo147(input.maxAsyncSize, _path + ".maxAsyncSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })), (null !== input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || ("object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })) && _vo147(input.maxInitialSize, _path + ".maxInitialSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })), undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests || _report(_exceptionable, {
        path: _path + ".maxAsyncRequests",
        expected: "(number | undefined)",
        value: input.maxAsyncRequests
    }), undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests || _report(_exceptionable, {
        path: _path + ".maxInitialRequests",
        expected: "(number | undefined)",
        value: input.maxInitialRequests
    }), undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["cacheGroups", "fallbackCacheGroup", "hidePathInfo", "chunks", "defaultSizeTypes", "minChunks", "usedExports", "name", "filename", "minSize", "minSizeReduction", "maxSize", "maxAsyncSize", "maxInitialSize", "maxAsyncRequests", "maxInitialRequests", "automaticNameDelimiter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo145 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(OptimizationSplitChunksCacheGroup | false)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(OptimizationSplitChunksCacheGroup | false)",
            value: value
        })) && (false === value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(OptimizationSplitChunksCacheGroup | false)",
            value: value
        })) && _vo146(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(OptimizationSplitChunksCacheGroup | false)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo146 = (input, _path, _exceptionable = true) => [(null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | string | undefined)",
        value: input.test
    })), undefined === input.priority || "number" === typeof input.priority || _report(_exceptionable, {
        path: _path + ".priority",
        expected: "(number | undefined)",
        value: input.priority
    }), undefined === input.enforce || "boolean" === typeof input.enforce || _report(_exceptionable, {
        path: _path + ".enforce",
        expected: "(boolean | undefined)",
        value: input.enforce
    }), undefined === input.reuseExistingChunk || "boolean" === typeof input.reuseExistingChunk || _report(_exceptionable, {
        path: _path + ".reuseExistingChunk",
        expected: "(boolean | undefined)",
        value: input.reuseExistingChunk
    }), (null !== input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(RegExp | string | undefined)",
        value: input.type
    })) && (undefined === input.type || "string" === typeof input.type || input.type instanceof RegExp || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(RegExp | string | undefined)",
        value: input.type
    })), undefined === input.idHint || "string" === typeof input.idHint || _report(_exceptionable, {
        path: _path + ".idHint",
        expected: "(string | undefined)",
        value: input.idHint
    }), (null !== input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(RegExp | string | undefined)",
        value: input.layer
    })) && (undefined === input.layer || "function" === typeof input.layer || "string" === typeof input.layer || input.layer instanceof RegExp || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(RegExp | string | undefined)",
        value: input.layer
    })), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), undefined === input.defaultSizeTypes || (Array.isArray(input.defaultSizeTypes) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    })) && input.defaultSizeTypes.map((elem, _index488) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes[" + _index488 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    }), undefined === input.minChunks || "number" === typeof input.minChunks || _report(_exceptionable, {
        path: _path + ".minChunks",
        expected: "(number | undefined)",
        value: input.minChunks
    }), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(false | string | undefined)",
        value: input.name
    })) && (undefined === input.name || "function" === typeof input.name || false === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(false | string | undefined)",
        value: input.name
    })), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })) && (undefined === input.minSize || "number" === typeof input.minSize || ("object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })) && _vo147(input.minSize, _path + ".minSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSize
    })), (null !== input.minSizeReduction || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })) && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || ("object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })) && _vo147(input.minSizeReduction, _path + ".minSizeReduction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(Record<string, number> | number | undefined)",
        value: input.minSizeReduction
    })), (null !== input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })) && (undefined === input.maxSize || "number" === typeof input.maxSize || ("object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })) && _vo147(input.maxSize, _path + ".maxSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxSize
    })), (null !== input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || ("object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })) && _vo147(input.maxAsyncSize, _path + ".maxAsyncSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxAsyncSize
    })), (null !== input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || ("object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })) && _vo147(input.maxInitialSize, _path + ".maxInitialSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(Record<string, number> | number | undefined)",
        value: input.maxInitialSize
    })), undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests || _report(_exceptionable, {
        path: _path + ".maxAsyncRequests",
        expected: "(number | undefined)",
        value: input.maxAsyncRequests
    }), undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests || _report(_exceptionable, {
        path: _path + ".maxInitialRequests",
        expected: "(number | undefined)",
        value: input.maxInitialRequests
    }), undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["test", "priority", "enforce", "reuseExistingChunk", "type", "idHint", "layer", "chunks", "defaultSizeTypes", "minChunks", "usedExports", "name", "filename", "minSize", "minSizeReduction", "maxSize", "maxAsyncSize", "maxInitialSize", "maxAsyncRequests", "maxInitialRequests", "automaticNameDelimiter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo147 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo148 = (input, _path, _exceptionable = true) => [(null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), undefined === input.minSize || "number" === typeof input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(number | undefined)",
        value: input.minSize
    }), undefined === input.maxSize || "number" === typeof input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(number | undefined)",
        value: input.maxSize
    }), undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(number | undefined)",
        value: input.maxAsyncSize
    }), undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(number | undefined)",
        value: input.maxInitialSize
    }), undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["chunks", "minSize", "maxSize", "maxAsyncSize", "maxInitialSize", "automaticNameDelimiter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo149 = (input, _path, _exceptionable = true) => [(null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    })) && (undefined === input.name || "function" === typeof input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo150 = (input, _path, _exceptionable = true) => [undefined === input.alias || ("object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(ResolveAlias | undefined)",
        value: input.alias
    })) && _vo151(input.alias, _path + ".alias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(ResolveAlias | undefined)",
        value: input.alias
    }), undefined === input.conditionNames || (Array.isArray(input.conditionNames) || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "(Array<string> | undefined)",
        value: input.conditionNames
    })) && input.conditionNames.map((elem, _index489) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".conditionNames[" + _index489 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "(Array<string> | undefined)",
        value: input.conditionNames
    }), undefined === input.extensions || (Array.isArray(input.extensions) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    })) && input.extensions.map((elem, _index490) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index490 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    }), undefined === input.fallback || ("object" === typeof input.fallback && null !== input.fallback && false === Array.isArray(input.fallback) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "(ResolveAlias | undefined)",
        value: input.fallback
    })) && _vo151(input.fallback, _path + ".fallback", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "(ResolveAlias | undefined)",
        value: input.fallback
    }), undefined === input.mainFields || (Array.isArray(input.mainFields) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "(Array<string> | undefined)",
        value: input.mainFields
    })) && input.mainFields.map((elem, _index491) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index491 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "(Array<string> | undefined)",
        value: input.mainFields
    }), undefined === input.mainFiles || (Array.isArray(input.mainFiles) || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "(Array<string> | undefined)",
        value: input.mainFiles
    })) && input.mainFiles.map((elem, _index492) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".mainFiles[" + _index492 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "(Array<string> | undefined)",
        value: input.mainFiles
    }), undefined === input.modules || (Array.isArray(input.modules) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(Array<string> | undefined)",
        value: input.modules
    })) && input.modules.map((elem, _index493) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".modules[" + _index493 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(Array<string> | undefined)",
        value: input.modules
    }), undefined === input.preferRelative || "boolean" === typeof input.preferRelative || _report(_exceptionable, {
        path: _path + ".preferRelative",
        expected: "(boolean | undefined)",
        value: input.preferRelative
    }), undefined === input.preferAbsolute || "boolean" === typeof input.preferAbsolute || _report(_exceptionable, {
        path: _path + ".preferAbsolute",
        expected: "(boolean | undefined)",
        value: input.preferAbsolute
    }), undefined === input.symlinks || "boolean" === typeof input.symlinks || _report(_exceptionable, {
        path: _path + ".symlinks",
        expected: "(boolean | undefined)",
        value: input.symlinks
    }), undefined === input.enforceExtension || "boolean" === typeof input.enforceExtension || _report(_exceptionable, {
        path: _path + ".enforceExtension",
        expected: "(boolean | undefined)",
        value: input.enforceExtension
    }), undefined === input.importsFields || (Array.isArray(input.importsFields) || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "(Array<string> | undefined)",
        value: input.importsFields
    })) && input.importsFields.map((elem, _index494) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index494 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "(Array<string> | undefined)",
        value: input.importsFields
    }), undefined === input.descriptionFiles || (Array.isArray(input.descriptionFiles) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "(Array<string> | undefined)",
        value: input.descriptionFiles
    })) && input.descriptionFiles.map((elem, _index495) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".descriptionFiles[" + _index495 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "(Array<string> | undefined)",
        value: input.descriptionFiles
    }), (null !== input.tsConfig || _report(_exceptionable, {
        path: _path + ".tsConfig",
        expected: "(__type.o31 | string | undefined)",
        value: input.tsConfig
    })) && (undefined === input.tsConfig || "string" === typeof input.tsConfig || ("object" === typeof input.tsConfig && null !== input.tsConfig || _report(_exceptionable, {
        path: _path + ".tsConfig",
        expected: "(__type.o31 | string | undefined)",
        value: input.tsConfig
    })) && _vo152(input.tsConfig, _path + ".tsConfig", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".tsConfig",
        expected: "(__type.o31 | string | undefined)",
        value: input.tsConfig
    })), undefined === input.fullySpecified || "boolean" === typeof input.fullySpecified || _report(_exceptionable, {
        path: _path + ".fullySpecified",
        expected: "(boolean | undefined)",
        value: input.fullySpecified
    }), undefined === input.exportsFields || (Array.isArray(input.exportsFields) || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "(Array<string> | undefined)",
        value: input.exportsFields
    })) && input.exportsFields.map((elem, _index496) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index496 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "(Array<string> | undefined)",
        value: input.exportsFields
    }), undefined === input.extensionAlias || ("object" === typeof input.extensionAlias && null !== input.extensionAlias && false === Array.isArray(input.extensionAlias) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "(Record<string, string | string[]> | undefined)",
        value: input.extensionAlias
    })) && _vo153(input.extensionAlias, _path + ".extensionAlias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "(Record<string, string | string[]> | undefined)",
        value: input.extensionAlias
    }), undefined === input.aliasFields || (Array.isArray(input.aliasFields) || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "(Array<string> | undefined)",
        value: input.aliasFields
    })) && input.aliasFields.map((elem, _index497) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index497 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "(Array<string> | undefined)",
        value: input.aliasFields
    }), undefined === input.restrictions || (Array.isArray(input.restrictions) || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "(Array<string> | undefined)",
        value: input.restrictions
    })) && input.restrictions.map((elem, _index498) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index498 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "(Array<string> | undefined)",
        value: input.restrictions
    }), undefined === input.roots || (Array.isArray(input.roots) || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "(Array<string> | undefined)",
        value: input.roots
    })) && input.roots.map((elem, _index499) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".roots[" + _index499 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "(Array<string> | undefined)",
        value: input.roots
    }), undefined === input.byDependency || ("object" === typeof input.byDependency && null !== input.byDependency && false === Array.isArray(input.byDependency) || _report(_exceptionable, {
        path: _path + ".byDependency",
        expected: "(Record<string, ResolveOptions> | undefined)",
        value: input.byDependency
    })) && _vo154(input.byDependency, _path + ".byDependency", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".byDependency",
        expected: "(Record<string, ResolveOptions> | undefined)",
        value: input.byDependency
    }), undefined === input.pnp || "boolean" === typeof input.pnp || _report(_exceptionable, {
        path: _path + ".pnp",
        expected: "(boolean | undefined)",
        value: input.pnp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "conditionNames", "extensions", "fallback", "mainFields", "mainFiles", "modules", "preferRelative", "preferAbsolute", "symlinks", "enforceExtension", "importsFields", "descriptionFiles", "tsConfig", "fullySpecified", "exportsFields", "extensionAlias", "aliasFields", "restrictions", "roots", "byDependency", "pnp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo151 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && value.map((elem, _index500) => false === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index500 + "]",
            expected: "(false | string)",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo152 = (input, _path, _exceptionable = true) => ["string" === typeof input.configFile || _report(_exceptionable, {
        path: _path + ".configFile",
        expected: "string",
        value: input.configFile
    }), (null !== input.references || _report(_exceptionable, {
        path: _path + ".references",
        expected: "(\"auto\" | Array<string> | undefined)",
        value: input.references
    })) && (undefined === input.references || "auto" === input.references || (Array.isArray(input.references) || _report(_exceptionable, {
        path: _path + ".references",
        expected: "(\"auto\" | Array<string> | undefined)",
        value: input.references
    })) && input.references.map((elem, _index501) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".references[" + _index501 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".references",
        expected: "(\"auto\" | Array<string> | undefined)",
        value: input.references
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["configFile", "references"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo153 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && value.map((elem, _index502) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index502 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo154 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "ResolveOptions",
            value: value
        })) && _vo150(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "ResolveOptions",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo155 = (input, _path, _exceptionable = true) => [undefined === input.ipc || "string" === typeof input.ipc || "boolean" === typeof input.ipc || _report(_exceptionable, {
        path: _path + ".ipc",
        expected: "(boolean | string | undefined)",
        value: input.ipc
    }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(string | undefined)",
        value: input.host
    }), undefined === input.port || "string" === typeof input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | string | undefined)",
        value: input.port
    }), undefined === input.hot || "only" === input.hot || "boolean" === typeof input.hot || _report(_exceptionable, {
        path: _path + ".hot",
        expected: "(\"only\" | boolean | undefined)",
        value: input.hot
    }), undefined === input.liveReload || "boolean" === typeof input.liveReload || _report(_exceptionable, {
        path: _path + ".liveReload",
        expected: "(boolean | undefined)",
        value: input.liveReload
    }), undefined === input.devMiddleware || ("object" === typeof input.devMiddleware && null !== input.devMiddleware && false === Array.isArray(input.devMiddleware) || _report(_exceptionable, {
        path: _path + ".devMiddleware",
        expected: "(DevMiddlewareOptions<e.Request<ParamsDictionary, any, any, QueryString.ParsedQs, Record<string, any>>, e.Response<any, Record<string, any>>> | undefined)",
        value: input.devMiddleware
    })) && _vo156(input.devMiddleware, _path + ".devMiddleware", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devMiddleware",
        expected: "(DevMiddlewareOptions<e.Request<ParamsDictionary, any, any, QueryString.ParsedQs, Record<string, any>>, e.Response<any, Record<string, any>>> | undefined)",
        value: input.devMiddleware
    }), undefined === input.compress || "boolean" === typeof input.compress || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(boolean | undefined)",
        value: input.compress
    }), (null !== input.allowedHosts || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })) && (undefined === input.allowedHosts || "string" === typeof input.allowedHosts || (Array.isArray(input.allowedHosts) || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })) && input.allowedHosts.map((elem, _index503) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".allowedHosts[" + _index503 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })), (null !== input.historyApiFallback || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })) && (undefined === input.historyApiFallback || "boolean" === typeof input.historyApiFallback || ("object" === typeof input.historyApiFallback && null !== input.historyApiFallback && false === Array.isArray(input.historyApiFallback) || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })) && _vo172(input.historyApiFallback, _path + ".historyApiFallback", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })), (null !== input.bonjour || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })) && (undefined === input.bonjour || "boolean" === typeof input.bonjour || ("object" === typeof input.bonjour && null !== input.bonjour && false === Array.isArray(input.bonjour) || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })) && _vu15(input.bonjour, _path + ".bonjour", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })), (null !== input.watchFiles || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })) && (undefined === input.watchFiles || "string" === typeof input.watchFiles || (Array.isArray(input.watchFiles) && (_vp3(input.watchFiles, _path + ".watchFiles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "Array<string | WatchFiles> | Array<string>",
        value: input.watchFiles
    })) || "object" === typeof input.watchFiles && null !== input.watchFiles && _vo178(input.watchFiles, _path + ".watchFiles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })), (null !== input.static || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })) && (undefined === input.static || "string" === typeof input.static || "boolean" === typeof input.static || (Array.isArray(input.static) && input.static.map((elem, _index508) => (null !== elem || _report(_exceptionable, {
        path: _path + ".static[" + _index508 + "]",
        expected: "(Static | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".static[" + _index508 + "]",
        expected: "(Static | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".static[" + _index508 + "]",
        expected: "(Static | string)",
        value: elem
    })) && _vo181(elem, _path + ".static[" + _index508 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".static[" + _index508 + "]",
        expected: "(Static | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.static && null !== input.static && false === Array.isArray(input.static) && _vo181(input.static, _path + ".static", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })) || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })), (null !== input.https || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })) && (undefined === input.https || "boolean" === typeof input.https || ("object" === typeof input.https && null !== input.https && false === Array.isArray(input.https) || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })) && _vo185(input.https, _path + ".https", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })), undefined === input.http2 || "boolean" === typeof input.http2 || _report(_exceptionable, {
        path: _path + ".http2",
        expected: "(boolean | undefined)",
        value: input.http2
    }), (null !== input.server || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })) && (undefined === input.server || "string" === typeof input.server || ("object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })) && _vo187(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })), (null !== input.webSocketServer || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })) && (undefined === input.webSocketServer || "string" === typeof input.webSocketServer || "boolean" === typeof input.webSocketServer || ("object" === typeof input.webSocketServer && null !== input.webSocketServer && false === Array.isArray(input.webSocketServer) || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })) && _vo188(input.webSocketServer, _path + ".webSocketServer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })), undefined === input.proxy || (Array.isArray(input.proxy) || _report(_exceptionable, {
        path: _path + ".proxy",
        expected: "(ProxyConfigArray | undefined)",
        value: input.proxy
    })) && input.proxy.map((elem, _index509) => (null !== elem || _report(_exceptionable, {
        path: _path + ".proxy[" + _index509 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".proxy[" + _index509 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".proxy[" + _index509 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && _vo189(elem, _path + ".proxy[" + _index509 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".proxy[" + _index509 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".proxy",
        expected: "(ProxyConfigArray | undefined)",
        value: input.proxy
    }), (null !== input.open || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })) && (undefined === input.open || "string" === typeof input.open || "boolean" === typeof input.open || (Array.isArray(input.open) && input.open.map((elem, _index510) => (null !== elem || _report(_exceptionable, {
        path: _path + ".open[" + _index510 + "]",
        expected: "(Open | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".open[" + _index510 + "]",
        expected: "(Open | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".open[" + _index510 + "]",
        expected: "(Open | string)",
        value: elem
    })) && _vo199(elem, _path + ".open[" + _index510 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".open[" + _index510 + "]",
        expected: "(Open | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.open && null !== input.open && false === Array.isArray(input.open) && _vo199(input.open, _path + ".open", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })) || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })), undefined === input.setupExitSignals || "boolean" === typeof input.setupExitSignals || _report(_exceptionable, {
        path: _path + ".setupExitSignals",
        expected: "(boolean | undefined)",
        value: input.setupExitSignals
    }), (null !== input.client || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })) && (undefined === input.client || "boolean" === typeof input.client || ("object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })) && _vo201(input.client, _path + ".client", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })), (null !== input.headers || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })) && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.map((elem, _index511) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".headers[" + _index511 + "]",
        expected: "__type.o49",
        value: elem
    })) && _vo204(elem, _path + ".headers[" + _index511 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers[" + _index511 + "]",
        expected: "__type.o49",
        value: elem
    })).every(flag => flag) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _vo153(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })), undefined === input.onListening || true || _report(_exceptionable, {
        path: _path + ".onListening",
        expected: "undefined",
        value: input.onListening
    }), undefined === input.setupMiddlewares || true || _report(_exceptionable, {
        path: _path + ".setupMiddlewares",
        expected: "undefined",
        value: input.setupMiddlewares
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ipc", "host", "port", "hot", "liveReload", "devMiddleware", "compress", "allowedHosts", "historyApiFallback", "bonjour", "watchFiles", "static", "https", "http2", "server", "webSocketServer", "proxy", "open", "setupExitSignals", "client", "headers", "onListening", "setupMiddlewares"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo156 = (input, _path, _exceptionable = true) => [undefined === input.mimeTypes || ("object" === typeof input.mimeTypes && null !== input.mimeTypes && false === Array.isArray(input.mimeTypes) || _report(_exceptionable, {
        path: _path + ".mimeTypes",
        expected: "(__type.o32 | undefined)",
        value: input.mimeTypes
    })) && _vo157(input.mimeTypes, _path + ".mimeTypes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimeTypes",
        expected: "(__type.o32 | undefined)",
        value: input.mimeTypes
    }), undefined === input.mimeTypeDefault || "string" === typeof input.mimeTypeDefault || _report(_exceptionable, {
        path: _path + ".mimeTypeDefault",
        expected: "(string | undefined)",
        value: input.mimeTypeDefault
    }), (null !== input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })) && (undefined === input.writeToDisk || "function" === typeof input.writeToDisk || "boolean" === typeof input.writeToDisk || _report(_exceptionable, {
        path: _path + ".writeToDisk",
        expected: "(boolean | undefined)",
        value: input.writeToDisk
    })), undefined === input.methods || (Array.isArray(input.methods) || _report(_exceptionable, {
        path: _path + ".methods",
        expected: "(Array<string> | undefined)",
        value: input.methods
    })) && input.methods.map((elem, _index512) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".methods[" + _index512 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".methods",
        expected: "(Array<string> | undefined)",
        value: input.methods
    }), (null !== input.headers || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o1 | Record<string, string | number> | undefined)",
        value: input.headers
    })) && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.map((elem, _index513) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".headers[" + _index513 + "]",
        expected: "__type.o33",
        value: elem
    })) && _vo159(elem, _path + ".headers[" + _index513 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers[" + _index513 + "]",
        expected: "__type.o33",
        value: elem
    })).every(flag => flag) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _vo158(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o1 | Record<string, string | number> | undefined)",
        value: input.headers
    })) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o1 | Record<string, string | number> | undefined)",
        value: input.headers
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), (null !== input.stats || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })) && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || ("object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })) && _vo160(input.stats, _path + ".stats", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })), undefined === input.serverSideRender || "boolean" === typeof input.serverSideRender || _report(_exceptionable, {
        path: _path + ".serverSideRender",
        expected: "(boolean | undefined)",
        value: input.serverSideRender
    }), undefined === input.outputFileSystem || ("object" === typeof input.outputFileSystem && null !== input.outputFileSystem || _report(_exceptionable, {
        path: _path + ".outputFileSystem",
        expected: "(OutputFileSystem | undefined)",
        value: input.outputFileSystem
    })) && _vo162(input.outputFileSystem, _path + ".outputFileSystem", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".outputFileSystem",
        expected: "(OutputFileSystem | undefined)",
        value: input.outputFileSystem
    }), undefined === input.index || "string" === typeof input.index || "boolean" === typeof input.index || _report(_exceptionable, {
        path: _path + ".index",
        expected: "(boolean | string | undefined)",
        value: input.index
    }), undefined === input.modifyResponseData || true || _report(_exceptionable, {
        path: _path + ".modifyResponseData",
        expected: "undefined",
        value: input.modifyResponseData
    }), undefined === input.etag || "strong" === input.etag || "weak" === input.etag || _report(_exceptionable, {
        path: _path + ".etag",
        expected: "(\"strong\" | \"weak\" | undefined)",
        value: input.etag
    }), undefined === input.lastModified || "boolean" === typeof input.lastModified || _report(_exceptionable, {
        path: _path + ".lastModified",
        expected: "(boolean | undefined)",
        value: input.lastModified
    }), (null !== input.cacheControl || _report(_exceptionable, {
        path: _path + ".cacheControl",
        expected: "(__type.o36 | boolean | number | string | undefined)",
        value: input.cacheControl
    })) && (undefined === input.cacheControl || "string" === typeof input.cacheControl || "number" === typeof input.cacheControl || "boolean" === typeof input.cacheControl || ("object" === typeof input.cacheControl && null !== input.cacheControl && false === Array.isArray(input.cacheControl) || _report(_exceptionable, {
        path: _path + ".cacheControl",
        expected: "(__type.o36 | boolean | number | string | undefined)",
        value: input.cacheControl
    })) && _vo171(input.cacheControl, _path + ".cacheControl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cacheControl",
        expected: "(__type.o36 | boolean | number | string | undefined)",
        value: input.cacheControl
    })), undefined === input.cacheImmutable || "boolean" === typeof input.cacheImmutable || _report(_exceptionable, {
        path: _path + ".cacheImmutable",
        expected: "(boolean | undefined)",
        value: input.cacheImmutable
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["mimeTypes", "mimeTypeDefault", "writeToDisk", "methods", "headers", "publicPath", "stats", "serverSideRender", "outputFileSystem", "index", "modifyResponseData", "etag", "lastModified", "cacheControl", "cacheImmutable"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo157 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo158 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(number | string)",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo159 = (input, _path, _exceptionable = true) => ["string" === typeof input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "string",
        value: input.key
    }), "string" === typeof input.value || "number" === typeof input.value || _report(_exceptionable, {
        path: _path + ".value",
        expected: "(number | string)",
        value: input.value
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["key", "value"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo160 = (input, _path, _exceptionable = true) => [undefined === input.all || "boolean" === typeof input.all || _report(_exceptionable, {
        path: _path + ".all",
        expected: "(boolean | undefined)",
        value: input.all
    }), undefined === input.assets || "boolean" === typeof input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(boolean | undefined)",
        value: input.assets
    }), undefined === input.assetsSort || "string" === typeof input.assetsSort || _report(_exceptionable, {
        path: _path + ".assetsSort",
        expected: "(string | undefined)",
        value: input.assetsSort
    }), undefined === input.assetsSpace || "number" === typeof input.assetsSpace || _report(_exceptionable, {
        path: _path + ".assetsSpace",
        expected: "(number | undefined)",
        value: input.assetsSpace
    }), undefined === input.builtAt || "boolean" === typeof input.builtAt || _report(_exceptionable, {
        path: _path + ".builtAt",
        expected: "(boolean | undefined)",
        value: input.builtAt
    }), undefined === input.cached || "boolean" === typeof input.cached || _report(_exceptionable, {
        path: _path + ".cached",
        expected: "(boolean | undefined)",
        value: input.cached
    }), undefined === input.cachedAssets || "boolean" === typeof input.cachedAssets || _report(_exceptionable, {
        path: _path + ".cachedAssets",
        expected: "(boolean | undefined)",
        value: input.cachedAssets
    }), undefined === input.cachedModules || "boolean" === typeof input.cachedModules || _report(_exceptionable, {
        path: _path + ".cachedModules",
        expected: "(boolean | undefined)",
        value: input.cachedModules
    }), undefined === input.children || "boolean" === typeof input.children || _report(_exceptionable, {
        path: _path + ".children",
        expected: "(boolean | undefined)",
        value: input.children
    }), undefined === input.chunkGroupAuxiliary || "boolean" === typeof input.chunkGroupAuxiliary || _report(_exceptionable, {
        path: _path + ".chunkGroupAuxiliary",
        expected: "(boolean | undefined)",
        value: input.chunkGroupAuxiliary
    }), undefined === input.chunkGroupChildren || "boolean" === typeof input.chunkGroupChildren || _report(_exceptionable, {
        path: _path + ".chunkGroupChildren",
        expected: "(boolean | undefined)",
        value: input.chunkGroupChildren
    }), undefined === input.chunkGroupMaxAssets || "number" === typeof input.chunkGroupMaxAssets || _report(_exceptionable, {
        path: _path + ".chunkGroupMaxAssets",
        expected: "(number | undefined)",
        value: input.chunkGroupMaxAssets
    }), undefined === input.chunkGroups || "boolean" === typeof input.chunkGroups || _report(_exceptionable, {
        path: _path + ".chunkGroups",
        expected: "(boolean | undefined)",
        value: input.chunkGroups
    }), undefined === input.chunkModules || "boolean" === typeof input.chunkModules || _report(_exceptionable, {
        path: _path + ".chunkModules",
        expected: "(boolean | undefined)",
        value: input.chunkModules
    }), undefined === input.chunkModulesSpace || "number" === typeof input.chunkModulesSpace || _report(_exceptionable, {
        path: _path + ".chunkModulesSpace",
        expected: "(number | undefined)",
        value: input.chunkModulesSpace
    }), undefined === input.chunkOrigins || "boolean" === typeof input.chunkOrigins || _report(_exceptionable, {
        path: _path + ".chunkOrigins",
        expected: "(boolean | undefined)",
        value: input.chunkOrigins
    }), undefined === input.chunkRelations || "boolean" === typeof input.chunkRelations || _report(_exceptionable, {
        path: _path + ".chunkRelations",
        expected: "(boolean | undefined)",
        value: input.chunkRelations
    }), undefined === input.chunks || "boolean" === typeof input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(boolean | undefined)",
        value: input.chunks
    }), undefined === input.chunksSort || "string" === typeof input.chunksSort || _report(_exceptionable, {
        path: _path + ".chunksSort",
        expected: "(string | undefined)",
        value: input.chunksSort
    }), (null !== input.colors || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(__type.o34 | boolean | undefined)",
        value: input.colors
    })) && (undefined === input.colors || "boolean" === typeof input.colors || ("object" === typeof input.colors && null !== input.colors && false === Array.isArray(input.colors) || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(__type.o34 | boolean | undefined)",
        value: input.colors
    })) && _vo161(input.colors, _path + ".colors", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(__type.o34 | boolean | undefined)",
        value: input.colors
    })), undefined === input.context || "string" === typeof input.context || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(string | undefined)",
        value: input.context
    }), undefined === input.dependentModules || "boolean" === typeof input.dependentModules || _report(_exceptionable, {
        path: _path + ".dependentModules",
        expected: "(boolean | undefined)",
        value: input.dependentModules
    }), undefined === input.depth || "boolean" === typeof input.depth || _report(_exceptionable, {
        path: _path + ".depth",
        expected: "(boolean | undefined)",
        value: input.depth
    }), undefined === input.entrypoints || "auto" === input.entrypoints || "boolean" === typeof input.entrypoints || _report(_exceptionable, {
        path: _path + ".entrypoints",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.entrypoints
    }), undefined === input.env || "boolean" === typeof input.env || _report(_exceptionable, {
        path: _path + ".env",
        expected: "(boolean | undefined)",
        value: input.env
    }), undefined === input.errorDetails || "auto" === input.errorDetails || "boolean" === typeof input.errorDetails || _report(_exceptionable, {
        path: _path + ".errorDetails",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.errorDetails
    }), undefined === input.errorStack || "boolean" === typeof input.errorStack || _report(_exceptionable, {
        path: _path + ".errorStack",
        expected: "(boolean | undefined)",
        value: input.errorStack
    }), undefined === input.errors || "boolean" === typeof input.errors || _report(_exceptionable, {
        path: _path + ".errors",
        expected: "(boolean | undefined)",
        value: input.errors
    }), undefined === input.errorsCount || "boolean" === typeof input.errorsCount || _report(_exceptionable, {
        path: _path + ".errorsCount",
        expected: "(boolean | undefined)",
        value: input.errorsCount
    }), undefined === input.errorsSpace || "number" === typeof input.errorsSpace || _report(_exceptionable, {
        path: _path + ".errorsSpace",
        expected: "(number | undefined)",
        value: input.errorsSpace
    }), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || "boolean" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index514) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index514 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index514 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exclude[" + _index514 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.exclude
    })), (null !== input.excludeAssets || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<AssetFilterItemTypes> | RegExp | string | undefined)",
        value: input.excludeAssets
    })) && (undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || (Array.isArray(input.excludeAssets) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<AssetFilterItemTypes> | RegExp | string | undefined)",
        value: input.excludeAssets
    })) && input.excludeAssets.map((elem, _index515) => (null !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index515 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index515 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index515 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<AssetFilterItemTypes> | RegExp | string | undefined)",
        value: input.excludeAssets
    })), (null !== input.excludeModules || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })) && (undefined === input.excludeModules || "function" === typeof input.excludeModules || "string" === typeof input.excludeModules || "boolean" === typeof input.excludeModules || input.excludeModules instanceof RegExp || (Array.isArray(input.excludeModules) || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })) && input.excludeModules.map((elem, _index516) => (null !== elem || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index516 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index516 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".excludeModules[" + _index516 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeModules",
        expected: "(Array<ModuleFilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.excludeModules
    })), undefined === input.groupAssetsByChunk || "boolean" === typeof input.groupAssetsByChunk || _report(_exceptionable, {
        path: _path + ".groupAssetsByChunk",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByChunk
    }), undefined === input.groupAssetsByEmitStatus || "boolean" === typeof input.groupAssetsByEmitStatus || _report(_exceptionable, {
        path: _path + ".groupAssetsByEmitStatus",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByEmitStatus
    }), undefined === input.groupAssetsByExtension || "boolean" === typeof input.groupAssetsByExtension || _report(_exceptionable, {
        path: _path + ".groupAssetsByExtension",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByExtension
    }), undefined === input.groupAssetsByInfo || "boolean" === typeof input.groupAssetsByInfo || _report(_exceptionable, {
        path: _path + ".groupAssetsByInfo",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByInfo
    }), undefined === input.groupAssetsByPath || "boolean" === typeof input.groupAssetsByPath || _report(_exceptionable, {
        path: _path + ".groupAssetsByPath",
        expected: "(boolean | undefined)",
        value: input.groupAssetsByPath
    }), undefined === input.groupModulesByAttributes || "boolean" === typeof input.groupModulesByAttributes || _report(_exceptionable, {
        path: _path + ".groupModulesByAttributes",
        expected: "(boolean | undefined)",
        value: input.groupModulesByAttributes
    }), undefined === input.groupModulesByCacheStatus || "boolean" === typeof input.groupModulesByCacheStatus || _report(_exceptionable, {
        path: _path + ".groupModulesByCacheStatus",
        expected: "(boolean | undefined)",
        value: input.groupModulesByCacheStatus
    }), undefined === input.groupModulesByExtension || "boolean" === typeof input.groupModulesByExtension || _report(_exceptionable, {
        path: _path + ".groupModulesByExtension",
        expected: "(boolean | undefined)",
        value: input.groupModulesByExtension
    }), undefined === input.groupModulesByLayer || "boolean" === typeof input.groupModulesByLayer || _report(_exceptionable, {
        path: _path + ".groupModulesByLayer",
        expected: "(boolean | undefined)",
        value: input.groupModulesByLayer
    }), undefined === input.groupModulesByPath || "boolean" === typeof input.groupModulesByPath || _report(_exceptionable, {
        path: _path + ".groupModulesByPath",
        expected: "(boolean | undefined)",
        value: input.groupModulesByPath
    }), undefined === input.groupModulesByType || "boolean" === typeof input.groupModulesByType || _report(_exceptionable, {
        path: _path + ".groupModulesByType",
        expected: "(boolean | undefined)",
        value: input.groupModulesByType
    }), undefined === input.groupReasonsByOrigin || "boolean" === typeof input.groupReasonsByOrigin || _report(_exceptionable, {
        path: _path + ".groupReasonsByOrigin",
        expected: "(boolean | undefined)",
        value: input.groupReasonsByOrigin
    }), undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.ids || "boolean" === typeof input.ids || _report(_exceptionable, {
        path: _path + ".ids",
        expected: "(boolean | undefined)",
        value: input.ids
    }), undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging || "boolean" === typeof input.logging || _report(_exceptionable, {
        path: _path + ".logging",
        expected: "(\"error\" | \"info\" | \"log\" | \"none\" | \"verbose\" | \"warn\" | boolean | undefined)",
        value: input.logging
    }), (null !== input.loggingDebug || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })) && (undefined === input.loggingDebug || "function" === typeof input.loggingDebug || "string" === typeof input.loggingDebug || "boolean" === typeof input.loggingDebug || input.loggingDebug instanceof RegExp || (Array.isArray(input.loggingDebug) || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })) && input.loggingDebug.map((elem, _index517) => (null !== elem || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index517 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index517 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".loggingDebug[" + _index517 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".loggingDebug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.loggingDebug
    })), undefined === input.loggingTrace || "boolean" === typeof input.loggingTrace || _report(_exceptionable, {
        path: _path + ".loggingTrace",
        expected: "(boolean | undefined)",
        value: input.loggingTrace
    }), undefined === input.moduleAssets || "boolean" === typeof input.moduleAssets || _report(_exceptionable, {
        path: _path + ".moduleAssets",
        expected: "(boolean | undefined)",
        value: input.moduleAssets
    }), undefined === input.moduleTrace || "boolean" === typeof input.moduleTrace || _report(_exceptionable, {
        path: _path + ".moduleTrace",
        expected: "(boolean | undefined)",
        value: input.moduleTrace
    }), undefined === input.modules || "boolean" === typeof input.modules || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(boolean | undefined)",
        value: input.modules
    }), undefined === input.modulesSort || "string" === typeof input.modulesSort || _report(_exceptionable, {
        path: _path + ".modulesSort",
        expected: "(string | undefined)",
        value: input.modulesSort
    }), undefined === input.modulesSpace || "number" === typeof input.modulesSpace || _report(_exceptionable, {
        path: _path + ".modulesSpace",
        expected: "(number | undefined)",
        value: input.modulesSpace
    }), undefined === input.nestedModules || "boolean" === typeof input.nestedModules || _report(_exceptionable, {
        path: _path + ".nestedModules",
        expected: "(boolean | undefined)",
        value: input.nestedModules
    }), undefined === input.nestedModulesSpace || "number" === typeof input.nestedModulesSpace || _report(_exceptionable, {
        path: _path + ".nestedModulesSpace",
        expected: "(number | undefined)",
        value: input.nestedModulesSpace
    }), undefined === input.optimizationBailout || "boolean" === typeof input.optimizationBailout || _report(_exceptionable, {
        path: _path + ".optimizationBailout",
        expected: "(boolean | undefined)",
        value: input.optimizationBailout
    }), undefined === input.orphanModules || "boolean" === typeof input.orphanModules || _report(_exceptionable, {
        path: _path + ".orphanModules",
        expected: "(boolean | undefined)",
        value: input.orphanModules
    }), undefined === input.outputPath || "boolean" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(boolean | undefined)",
        value: input.outputPath
    }), undefined === input.performance || "boolean" === typeof input.performance || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(boolean | undefined)",
        value: input.performance
    }), undefined === input.preset || "string" === typeof input.preset || "boolean" === typeof input.preset || _report(_exceptionable, {
        path: _path + ".preset",
        expected: "(boolean | string | undefined)",
        value: input.preset
    }), undefined === input.providedExports || "boolean" === typeof input.providedExports || _report(_exceptionable, {
        path: _path + ".providedExports",
        expected: "(boolean | undefined)",
        value: input.providedExports
    }), undefined === input.publicPath || "boolean" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(boolean | undefined)",
        value: input.publicPath
    }), undefined === input.reasons || "boolean" === typeof input.reasons || _report(_exceptionable, {
        path: _path + ".reasons",
        expected: "(boolean | undefined)",
        value: input.reasons
    }), undefined === input.reasonsSpace || "number" === typeof input.reasonsSpace || _report(_exceptionable, {
        path: _path + ".reasonsSpace",
        expected: "(number | undefined)",
        value: input.reasonsSpace
    }), undefined === input.relatedAssets || "boolean" === typeof input.relatedAssets || _report(_exceptionable, {
        path: _path + ".relatedAssets",
        expected: "(boolean | undefined)",
        value: input.relatedAssets
    }), undefined === input.runtime || "boolean" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(boolean | undefined)",
        value: input.runtime
    }), undefined === input.runtimeModules || "boolean" === typeof input.runtimeModules || _report(_exceptionable, {
        path: _path + ".runtimeModules",
        expected: "(boolean | undefined)",
        value: input.runtimeModules
    }), undefined === input.source || "boolean" === typeof input.source || _report(_exceptionable, {
        path: _path + ".source",
        expected: "(boolean | undefined)",
        value: input.source
    }), undefined === input.timings || "boolean" === typeof input.timings || _report(_exceptionable, {
        path: _path + ".timings",
        expected: "(boolean | undefined)",
        value: input.timings
    }), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), undefined === input.version || "boolean" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(boolean | undefined)",
        value: input.version
    }), undefined === input.warnings || "boolean" === typeof input.warnings || _report(_exceptionable, {
        path: _path + ".warnings",
        expected: "(boolean | undefined)",
        value: input.warnings
    }), undefined === input.warningsCount || "boolean" === typeof input.warningsCount || _report(_exceptionable, {
        path: _path + ".warningsCount",
        expected: "(boolean | undefined)",
        value: input.warningsCount
    }), (null !== input.warningsFilter || _report(_exceptionable, {
        path: _path + ".warningsFilter",
        expected: "(Array<WarningFilterItemTypes> | RegExp | string | undefined)",
        value: input.warningsFilter
    })) && (undefined === input.warningsFilter || "function" === typeof input.warningsFilter || "string" === typeof input.warningsFilter || input.warningsFilter instanceof RegExp || (Array.isArray(input.warningsFilter) || _report(_exceptionable, {
        path: _path + ".warningsFilter",
        expected: "(Array<WarningFilterItemTypes> | RegExp | string | undefined)",
        value: input.warningsFilter
    })) && input.warningsFilter.map((elem, _index518) => (null !== elem || _report(_exceptionable, {
        path: _path + ".warningsFilter[" + _index518 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".warningsFilter[" + _index518 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".warningsFilter[" + _index518 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".warningsFilter",
        expected: "(Array<WarningFilterItemTypes> | RegExp | string | undefined)",
        value: input.warningsFilter
    })), undefined === input.warningsSpace || "number" === typeof input.warningsSpace || _report(_exceptionable, {
        path: _path + ".warningsSpace",
        expected: "(number | undefined)",
        value: input.warningsSpace
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["all", "assets", "assetsSort", "assetsSpace", "builtAt", "cached", "cachedAssets", "cachedModules", "children", "chunkGroupAuxiliary", "chunkGroupChildren", "chunkGroupMaxAssets", "chunkGroups", "chunkModules", "chunkModulesSpace", "chunkOrigins", "chunkRelations", "chunks", "chunksSort", "colors", "context", "dependentModules", "depth", "entrypoints", "env", "errorDetails", "errorStack", "errors", "errorsCount", "errorsSpace", "exclude", "excludeAssets", "excludeModules", "groupAssetsByChunk", "groupAssetsByEmitStatus", "groupAssetsByExtension", "groupAssetsByInfo", "groupAssetsByPath", "groupModulesByAttributes", "groupModulesByCacheStatus", "groupModulesByExtension", "groupModulesByLayer", "groupModulesByPath", "groupModulesByType", "groupReasonsByOrigin", "hash", "ids", "logging", "loggingDebug", "loggingTrace", "moduleAssets", "moduleTrace", "modules", "modulesSort", "modulesSpace", "nestedModules", "nestedModulesSpace", "optimizationBailout", "orphanModules", "outputPath", "performance", "preset", "providedExports", "publicPath", "reasons", "reasonsSpace", "relatedAssets", "runtime", "runtimeModules", "source", "timings", "usedExports", "version", "warnings", "warningsCount", "warningsFilter", "warningsSpace"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo161 = (input, _path, _exceptionable = true) => [undefined === input.bold || "string" === typeof input.bold || _report(_exceptionable, {
        path: _path + ".bold",
        expected: "(string | undefined)",
        value: input.bold
    }), undefined === input.cyan || "string" === typeof input.cyan || _report(_exceptionable, {
        path: _path + ".cyan",
        expected: "(string | undefined)",
        value: input.cyan
    }), undefined === input.green || "string" === typeof input.green || _report(_exceptionable, {
        path: _path + ".green",
        expected: "(string | undefined)",
        value: input.green
    }), undefined === input.magenta || "string" === typeof input.magenta || _report(_exceptionable, {
        path: _path + ".magenta",
        expected: "(string | undefined)",
        value: input.magenta
    }), undefined === input.red || "string" === typeof input.red || _report(_exceptionable, {
        path: _path + ".red",
        expected: "(string | undefined)",
        value: input.red
    }), undefined === input.yellow || "string" === typeof input.yellow || _report(_exceptionable, {
        path: _path + ".yellow",
        expected: "(string | undefined)",
        value: input.yellow
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["bold", "cyan", "green", "magenta", "red", "yellow"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo162 = (input, _path, _exceptionable = true) => [("object" === typeof input.writeFile && null !== input.writeFile || _report(_exceptionable, {
        path: _path + ".writeFile",
        expected: "WriteFile",
        value: input.writeFile
    })) && _vo163(input.writeFile, _path + ".writeFile", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".writeFile",
        expected: "WriteFile",
        value: input.writeFile
    }), ("object" === typeof input.mkdir && null !== input.mkdir || _report(_exceptionable, {
        path: _path + ".mkdir",
        expected: "Mkdir",
        value: input.mkdir
    })) && _vo164(input.mkdir, _path + ".mkdir", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mkdir",
        expected: "Mkdir",
        value: input.mkdir
    }), undefined === input.readdir || ("object" === typeof input.readdir && null !== input.readdir || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "(ReaddirFs | undefined)",
        value: input.readdir
    })) && _vo165(input.readdir, _path + ".readdir", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "(ReaddirFs | undefined)",
        value: input.readdir
    }), undefined === input.rmdir || ("object" === typeof input.rmdir && null !== input.rmdir || _report(_exceptionable, {
        path: _path + ".rmdir",
        expected: "(Rmdir | undefined)",
        value: input.rmdir
    })) && _vo166(input.rmdir, _path + ".rmdir", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rmdir",
        expected: "(Rmdir | undefined)",
        value: input.rmdir
    }), undefined === input.unlink || true || _report(_exceptionable, {
        path: _path + ".unlink",
        expected: "undefined",
        value: input.unlink
    }), ("object" === typeof input.stat && null !== input.stat || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatFs",
        value: input.stat
    })) && _vo167(input.stat, _path + ".stat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatFs",
        value: input.stat
    }), undefined === input.lstat || ("object" === typeof input.lstat && null !== input.lstat || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatFs | undefined)",
        value: input.lstat
    })) && _vo168(input.lstat, _path + ".lstat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatFs | undefined)",
        value: input.lstat
    }), ("object" === typeof input.readFile && null !== input.readFile || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileFs",
        value: input.readFile
    })) && _vo169(input.readFile, _path + ".readFile", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileFs",
        value: input.readFile
    }), undefined === input.join || true || _report(_exceptionable, {
        path: _path + ".join",
        expected: "undefined",
        value: input.join
    }), undefined === input.relative || true || _report(_exceptionable, {
        path: _path + ".relative",
        expected: "undefined",
        value: input.relative
    }), undefined === input.dirname || true || _report(_exceptionable, {
        path: _path + ".dirname",
        expected: "undefined",
        value: input.dirname
    }), undefined === input.createReadStream || true || _report(_exceptionable, {
        path: _path + ".createReadStream",
        expected: "undefined",
        value: input.createReadStream
    }), ("object" === typeof input.statSync && null !== input.statSync || _report(_exceptionable, {
        path: _path + ".statSync",
        expected: "\"fs\".StatSyncFn",
        value: input.statSync
    })) && _vo170(input.statSync, _path + ".statSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".statSync",
        expected: "\"fs\".StatSyncFn",
        value: input.statSync
    }), true || _report(_exceptionable, {
        path: _path + ".readFileSync",
        expected: "unknown",
        value: input.readFileSync
    }), 6 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["writeFile", "mkdir", "readdir", "rmdir", "unlink", "stat", "lstat", "readFile", "join", "relative", "dirname", "createReadStream", "statSync", "readFileSync"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo163 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo164 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo165 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo166 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo167 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo168 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo169 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo170 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo171 = (input, _path, _exceptionable = true) => [undefined === input.maxAge || "number" === typeof input.maxAge || _report(_exceptionable, {
        path: _path + ".maxAge",
        expected: "(number | undefined)",
        value: input.maxAge
    }), undefined === input.immutable || "boolean" === typeof input.immutable || _report(_exceptionable, {
        path: _path + ".immutable",
        expected: "(boolean | undefined)",
        value: input.immutable
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["maxAge", "immutable"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo172 = (input, _path, _exceptionable = true) => [undefined === input.disableDotRule || true === input.disableDotRule || _report(_exceptionable, {
        path: _path + ".disableDotRule",
        expected: "(true | undefined)",
        value: input.disableDotRule
    }), undefined === input.htmlAcceptHeaders || (Array.isArray(input.htmlAcceptHeaders) || _report(_exceptionable, {
        path: _path + ".htmlAcceptHeaders",
        expected: "(ReadonlyArray<string> | undefined)",
        value: input.htmlAcceptHeaders
    })) && input.htmlAcceptHeaders.map((elem, _index519) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".htmlAcceptHeaders[" + _index519 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".htmlAcceptHeaders",
        expected: "(ReadonlyArray<string> | undefined)",
        value: input.htmlAcceptHeaders
    }), undefined === input.index || "string" === typeof input.index || _report(_exceptionable, {
        path: _path + ".index",
        expected: "(string | undefined)",
        value: input.index
    }), undefined === input.logger || true || _report(_exceptionable, {
        path: _path + ".logger",
        expected: "undefined",
        value: input.logger
    }), undefined === input.rewrites || (Array.isArray(input.rewrites) || _report(_exceptionable, {
        path: _path + ".rewrites",
        expected: "(ReadonlyArray<historyApiFallback.Rewrite> | undefined)",
        value: input.rewrites
    })) && input.rewrites.map((elem, _index520) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".rewrites[" + _index520 + "]",
        expected: "historyApiFallback.Rewrite",
        value: elem
    })) && _vo173(elem, _path + ".rewrites[" + _index520 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rewrites[" + _index520 + "]",
        expected: "historyApiFallback.Rewrite",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rewrites",
        expected: "(ReadonlyArray<historyApiFallback.Rewrite> | undefined)",
        value: input.rewrites
    }), undefined === input.verbose || "boolean" === typeof input.verbose || _report(_exceptionable, {
        path: _path + ".verbose",
        expected: "(boolean | undefined)",
        value: input.verbose
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["disableDotRule", "htmlAcceptHeaders", "index", "logger", "rewrites", "verbose"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo173 = (input, _path, _exceptionable = true) => [input.from instanceof RegExp || _report(_exceptionable, {
        path: _path + ".from",
        expected: "RegExp",
        value: input.from
    }), (null !== input.to || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(RegExp | string)",
        value: input.to
    })) && (undefined !== input.to || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(RegExp | string)",
        value: input.to
    })) && ("function" === typeof input.to || "string" === typeof input.to || input.to instanceof RegExp || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(RegExp | string)",
        value: input.to
    })), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["from", "to"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo174 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        })) && (undefined === value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo175 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "string",
        value: input.type
    }), "tcp" === input.protocol || "udp" === input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(\"tcp\" | \"udp\")",
        value: input.protocol
    }), "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "number",
        value: input.port
    }), "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "string",
        value: input.host
    }), "string" === typeof input.fqdn || _report(_exceptionable, {
        path: _path + ".fqdn",
        expected: "string",
        value: input.fqdn
    }), true, undefined === input.subtypes || (Array.isArray(input.subtypes) || _report(_exceptionable, {
        path: _path + ".subtypes",
        expected: "(Array<string> | undefined)",
        value: input.subtypes
    })) && input.subtypes.map((elem, _index521) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".subtypes[" + _index521 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".subtypes",
        expected: "(Array<string> | undefined)",
        value: input.subtypes
    }), undefined === input.addresses || (Array.isArray(input.addresses) || _report(_exceptionable, {
        path: _path + ".addresses",
        expected: "(Array<string> | undefined)",
        value: input.addresses
    })) && input.addresses.map((elem, _index522) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".addresses[" + _index522 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".addresses",
        expected: "(Array<string> | undefined)",
        value: input.addresses
    }), undefined === input.referer || ("object" === typeof input.referer && null !== input.referer || _report(_exceptionable, {
        path: _path + ".referer",
        expected: "(ServiceReferer | undefined)",
        value: input.referer
    })) && _vo176(input.referer, _path + ".referer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".referer",
        expected: "(ServiceReferer | undefined)",
        value: input.referer
    }), "boolean" === typeof input.disableIPv6 || _report(_exceptionable, {
        path: _path + ".disableIPv6",
        expected: "boolean",
        value: input.disableIPv6
    }), "boolean" === typeof input.probe || _report(_exceptionable, {
        path: _path + ".probe",
        expected: "boolean",
        value: input.probe
    }), "boolean" === typeof input.published || _report(_exceptionable, {
        path: _path + ".published",
        expected: "boolean",
        value: input.published
    }), "boolean" === typeof input.activated || _report(_exceptionable, {
        path: _path + ".activated",
        expected: "boolean",
        value: input.activated
    }), "boolean" === typeof input.destroyed || _report(_exceptionable, {
        path: _path + ".destroyed",
        expected: "boolean",
        value: input.destroyed
    }), undefined === input.start || ("object" === typeof input.start && null !== input.start || _report(_exceptionable, {
        path: _path + ".start",
        expected: "(CallableFunction | undefined)",
        value: input.start
    })) && _vo177(input.start, _path + ".start", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".start",
        expected: "(CallableFunction | undefined)",
        value: input.start
    }), undefined === input.stop || ("object" === typeof input.stop && null !== input.stop || _report(_exceptionable, {
        path: _path + ".stop",
        expected: "(CallableFunction | undefined)",
        value: input.stop
    })) && _vo177(input.stop, _path + ".stop", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stop",
        expected: "(CallableFunction | undefined)",
        value: input.stop
    }), 11 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "type", "protocol", "port", "host", "fqdn", "txt", "subtypes", "addresses", "referer", "disableIPv6", "probe", "published", "activated", "destroyed", "start", "stop"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo176 = (input, _path, _exceptionable = true) => ["string" === typeof input.address || _report(_exceptionable, {
        path: _path + ".address",
        expected: "string",
        value: input.address
    }), "IPv4" === input.family || "IPv6" === input.family || _report(_exceptionable, {
        path: _path + ".family",
        expected: "(\"IPv4\" | \"IPv6\")",
        value: input.family
    }), "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "number",
        value: input.port
    }), "number" === typeof input.size || _report(_exceptionable, {
        path: _path + ".size",
        expected: "number",
        value: input.size
    }), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["address", "family", "port", "size"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo177 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo178 = (input, _path, _exceptionable = true) => [(null !== input.paths || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && (undefined !== input.paths || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && ("string" === typeof input.paths || (Array.isArray(input.paths) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })) && input.paths.map((elem, _index523) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".paths[" + _index523 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".paths",
        expected: "(Array<string> | string)",
        value: input.paths
    })), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(WatchOptions & { aggregateTimeout?: number | undefined; ignored?: AnymatchMatcher | undefined; poll?: number | boolean | undefined; } | undefined)",
        value: input.options
    })) && _vo179(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(WatchOptions & { aggregateTimeout?: number | undefined; ignored?: AnymatchMatcher | undefined; poll?: number | boolean | undefined; } | undefined)",
        value: input.options
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["paths", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo179 = (input, _path, _exceptionable = true) => [undefined === input.persistent || "boolean" === typeof input.persistent || _report(_exceptionable, {
        path: _path + ".persistent",
        expected: "(boolean | undefined)",
        value: input.persistent
    }), (null !== input.ignored || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })) && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })) && input.ignored.map((elem, _index524) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index524 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index524 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".ignored[" + _index524 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })), undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial || _report(_exceptionable, {
        path: _path + ".ignoreInitial",
        expected: "(boolean | undefined)",
        value: input.ignoreInitial
    }), undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks || _report(_exceptionable, {
        path: _path + ".followSymlinks",
        expected: "(boolean | undefined)",
        value: input.followSymlinks
    }), undefined === input.cwd || "string" === typeof input.cwd || _report(_exceptionable, {
        path: _path + ".cwd",
        expected: "(string | undefined)",
        value: input.cwd
    }), undefined === input.disableGlobbing || "boolean" === typeof input.disableGlobbing || _report(_exceptionable, {
        path: _path + ".disableGlobbing",
        expected: "(boolean | undefined)",
        value: input.disableGlobbing
    }), undefined === input.usePolling || "boolean" === typeof input.usePolling || _report(_exceptionable, {
        path: _path + ".usePolling",
        expected: "(boolean | undefined)",
        value: input.usePolling
    }), undefined === input.useFsEvents || "boolean" === typeof input.useFsEvents || _report(_exceptionable, {
        path: _path + ".useFsEvents",
        expected: "(boolean | undefined)",
        value: input.useFsEvents
    }), undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat || _report(_exceptionable, {
        path: _path + ".alwaysStat",
        expected: "(boolean | undefined)",
        value: input.alwaysStat
    }), undefined === input.depth || "number" === typeof input.depth || _report(_exceptionable, {
        path: _path + ".depth",
        expected: "(number | undefined)",
        value: input.depth
    }), undefined === input.interval || "number" === typeof input.interval || _report(_exceptionable, {
        path: _path + ".interval",
        expected: "(number | undefined)",
        value: input.interval
    }), undefined === input.binaryInterval || "number" === typeof input.binaryInterval || _report(_exceptionable, {
        path: _path + ".binaryInterval",
        expected: "(number | undefined)",
        value: input.binaryInterval
    }), undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors || _report(_exceptionable, {
        path: _path + ".ignorePermissionErrors",
        expected: "(boolean | undefined)",
        value: input.ignorePermissionErrors
    }), undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic || _report(_exceptionable, {
        path: _path + ".atomic",
        expected: "(boolean | number | undefined)",
        value: input.atomic
    }), (null !== input.awaitWriteFinish || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || ("object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && _vo180(input.awaitWriteFinish, _path + ".awaitWriteFinish", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })), undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout || _report(_exceptionable, {
        path: _path + ".aggregateTimeout",
        expected: "(number | undefined)",
        value: input.aggregateTimeout
    }), undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll || _report(_exceptionable, {
        path: _path + ".poll",
        expected: "(boolean | number | undefined)",
        value: input.poll
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["persistent", "ignored", "ignoreInitial", "followSymlinks", "cwd", "disableGlobbing", "usePolling", "useFsEvents", "alwaysStat", "depth", "interval", "binaryInterval", "ignorePermissionErrors", "atomic", "awaitWriteFinish", "aggregateTimeout", "poll"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo180 = (input, _path, _exceptionable = true) => [undefined === input.stabilityThreshold || "number" === typeof input.stabilityThreshold || _report(_exceptionable, {
        path: _path + ".stabilityThreshold",
        expected: "(number | undefined)",
        value: input.stabilityThreshold
    }), undefined === input.pollInterval || "number" === typeof input.pollInterval || _report(_exceptionable, {
        path: _path + ".pollInterval",
        expected: "(number | undefined)",
        value: input.pollInterval
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["stabilityThreshold", "pollInterval"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo181 = (input, _path, _exceptionable = true) => [undefined === input.directory || "string" === typeof input.directory || _report(_exceptionable, {
        path: _path + ".directory",
        expected: "(string | undefined)",
        value: input.directory
    }), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(Array<string> | string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "string" === typeof input.publicPath || (Array.isArray(input.publicPath) || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(Array<string> | string | undefined)",
        value: input.publicPath
    })) && input.publicPath.map((elem, _index525) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".publicPath[" + _index525 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(Array<string> | string | undefined)",
        value: input.publicPath
    })), (null !== input.serveIndex || _report(_exceptionable, {
        path: _path + ".serveIndex",
        expected: "(boolean | serveIndex.Options | undefined)",
        value: input.serveIndex
    })) && (undefined === input.serveIndex || "boolean" === typeof input.serveIndex || ("object" === typeof input.serveIndex && null !== input.serveIndex && false === Array.isArray(input.serveIndex) || _report(_exceptionable, {
        path: _path + ".serveIndex",
        expected: "(boolean | serveIndex.Options | undefined)",
        value: input.serveIndex
    })) && _vo182(input.serveIndex, _path + ".serveIndex", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".serveIndex",
        expected: "(boolean | serveIndex.Options | undefined)",
        value: input.serveIndex
    })), undefined === input.staticOptions || ("object" === typeof input.staticOptions && null !== input.staticOptions && false === Array.isArray(input.staticOptions) || _report(_exceptionable, {
        path: _path + ".staticOptions",
        expected: "(serveStatic.ServeStaticOptions<\"http\".ServerResponse<\"http\".IncomingMessage>> | undefined)",
        value: input.staticOptions
    })) && _vo183(input.staticOptions, _path + ".staticOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".staticOptions",
        expected: "(serveStatic.ServeStaticOptions<\"http\".ServerResponse<\"http\".IncomingMessage>> | undefined)",
        value: input.staticOptions
    }), (null !== input.watch || _report(_exceptionable, {
        path: _path + ".watch",
        expected: "(WatchOptions & { aggregateTimeout?: number | undefined; ignored?: AnymatchMatcher | undefined; poll?: number | boolean | undefined; }.o1 | boolean | undefined)",
        value: input.watch
    })) && (undefined === input.watch || "boolean" === typeof input.watch || ("object" === typeof input.watch && null !== input.watch && false === Array.isArray(input.watch) || _report(_exceptionable, {
        path: _path + ".watch",
        expected: "(WatchOptions & { aggregateTimeout?: number | undefined; ignored?: AnymatchMatcher | undefined; poll?: number | boolean | undefined; }.o1 | boolean | undefined)",
        value: input.watch
    })) && _vo184(input.watch, _path + ".watch", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watch",
        expected: "(WatchOptions & { aggregateTimeout?: number | undefined; ignored?: AnymatchMatcher | undefined; poll?: number | boolean | undefined; }.o1 | boolean | undefined)",
        value: input.watch
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["directory", "publicPath", "serveIndex", "staticOptions", "watch"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo182 = (input, _path, _exceptionable = true) => [undefined === input.filter || true || _report(_exceptionable, {
        path: _path + ".filter",
        expected: "undefined",
        value: input.filter
    }), undefined === input.hidden || "boolean" === typeof input.hidden || _report(_exceptionable, {
        path: _path + ".hidden",
        expected: "(boolean | undefined)",
        value: input.hidden
    }), undefined === input.icons || "boolean" === typeof input.icons || _report(_exceptionable, {
        path: _path + ".icons",
        expected: "(boolean | undefined)",
        value: input.icons
    }), undefined === input.stylesheet || "string" === typeof input.stylesheet || _report(_exceptionable, {
        path: _path + ".stylesheet",
        expected: "(string | undefined)",
        value: input.stylesheet
    }), (null !== input.template || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(string | undefined)",
        value: input.template
    })) && (undefined === input.template || "function" === typeof input.template || "string" === typeof input.template || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(string | undefined)",
        value: input.template
    })), undefined === input.view || "string" === typeof input.view || _report(_exceptionable, {
        path: _path + ".view",
        expected: "(string | undefined)",
        value: input.view
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["filter", "hidden", "icons", "stylesheet", "template", "view"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo183 = (input, _path, _exceptionable = true) => [undefined === input.acceptRanges || "boolean" === typeof input.acceptRanges || _report(_exceptionable, {
        path: _path + ".acceptRanges",
        expected: "(boolean | undefined)",
        value: input.acceptRanges
    }), undefined === input.cacheControl || "boolean" === typeof input.cacheControl || _report(_exceptionable, {
        path: _path + ".cacheControl",
        expected: "(boolean | undefined)",
        value: input.cacheControl
    }), undefined === input.dotfiles || "string" === typeof input.dotfiles || _report(_exceptionable, {
        path: _path + ".dotfiles",
        expected: "(string | undefined)",
        value: input.dotfiles
    }), undefined === input.etag || "boolean" === typeof input.etag || _report(_exceptionable, {
        path: _path + ".etag",
        expected: "(boolean | undefined)",
        value: input.etag
    }), (null !== input.extensions || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | false | undefined)",
        value: input.extensions
    })) && (undefined === input.extensions || false === input.extensions || (Array.isArray(input.extensions) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | false | undefined)",
        value: input.extensions
    })) && input.extensions.map((elem, _index526) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index526 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | false | undefined)",
        value: input.extensions
    })), undefined === input.fallthrough || "boolean" === typeof input.fallthrough || _report(_exceptionable, {
        path: _path + ".fallthrough",
        expected: "(boolean | undefined)",
        value: input.fallthrough
    }), undefined === input.immutable || "boolean" === typeof input.immutable || _report(_exceptionable, {
        path: _path + ".immutable",
        expected: "(boolean | undefined)",
        value: input.immutable
    }), (null !== input.index || _report(_exceptionable, {
        path: _path + ".index",
        expected: "(Array<string> | boolean | string | undefined)",
        value: input.index
    })) && (undefined === input.index || "string" === typeof input.index || "boolean" === typeof input.index || (Array.isArray(input.index) || _report(_exceptionable, {
        path: _path + ".index",
        expected: "(Array<string> | boolean | string | undefined)",
        value: input.index
    })) && input.index.map((elem, _index527) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".index[" + _index527 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".index",
        expected: "(Array<string> | boolean | string | undefined)",
        value: input.index
    })), undefined === input.lastModified || "boolean" === typeof input.lastModified || _report(_exceptionable, {
        path: _path + ".lastModified",
        expected: "(boolean | undefined)",
        value: input.lastModified
    }), undefined === input.maxAge || "string" === typeof input.maxAge || "number" === typeof input.maxAge || _report(_exceptionable, {
        path: _path + ".maxAge",
        expected: "(number | string | undefined)",
        value: input.maxAge
    }), undefined === input.redirect || "boolean" === typeof input.redirect || _report(_exceptionable, {
        path: _path + ".redirect",
        expected: "(boolean | undefined)",
        value: input.redirect
    }), undefined === input.setHeaders || true || _report(_exceptionable, {
        path: _path + ".setHeaders",
        expected: "undefined",
        value: input.setHeaders
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["acceptRanges", "cacheControl", "dotfiles", "etag", "extensions", "fallthrough", "immutable", "index", "lastModified", "maxAge", "redirect", "setHeaders"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo184 = (input, _path, _exceptionable = true) => [undefined === input.persistent || "boolean" === typeof input.persistent || _report(_exceptionable, {
        path: _path + ".persistent",
        expected: "(boolean | undefined)",
        value: input.persistent
    }), (null !== input.ignored || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })) && (undefined === input.ignored || "function" === typeof input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })) && input.ignored.map((elem, _index528) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index528 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index528 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".ignored[" + _index528 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<AnymatchPattern> | RegExp | string | undefined)",
        value: input.ignored
    })), undefined === input.ignoreInitial || "boolean" === typeof input.ignoreInitial || _report(_exceptionable, {
        path: _path + ".ignoreInitial",
        expected: "(boolean | undefined)",
        value: input.ignoreInitial
    }), undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks || _report(_exceptionable, {
        path: _path + ".followSymlinks",
        expected: "(boolean | undefined)",
        value: input.followSymlinks
    }), undefined === input.cwd || "string" === typeof input.cwd || _report(_exceptionable, {
        path: _path + ".cwd",
        expected: "(string | undefined)",
        value: input.cwd
    }), undefined === input.disableGlobbing || "boolean" === typeof input.disableGlobbing || _report(_exceptionable, {
        path: _path + ".disableGlobbing",
        expected: "(boolean | undefined)",
        value: input.disableGlobbing
    }), undefined === input.usePolling || "boolean" === typeof input.usePolling || _report(_exceptionable, {
        path: _path + ".usePolling",
        expected: "(boolean | undefined)",
        value: input.usePolling
    }), undefined === input.useFsEvents || "boolean" === typeof input.useFsEvents || _report(_exceptionable, {
        path: _path + ".useFsEvents",
        expected: "(boolean | undefined)",
        value: input.useFsEvents
    }), undefined === input.alwaysStat || "boolean" === typeof input.alwaysStat || _report(_exceptionable, {
        path: _path + ".alwaysStat",
        expected: "(boolean | undefined)",
        value: input.alwaysStat
    }), undefined === input.depth || "number" === typeof input.depth || _report(_exceptionable, {
        path: _path + ".depth",
        expected: "(number | undefined)",
        value: input.depth
    }), undefined === input.interval || "number" === typeof input.interval || _report(_exceptionable, {
        path: _path + ".interval",
        expected: "(number | undefined)",
        value: input.interval
    }), undefined === input.binaryInterval || "number" === typeof input.binaryInterval || _report(_exceptionable, {
        path: _path + ".binaryInterval",
        expected: "(number | undefined)",
        value: input.binaryInterval
    }), undefined === input.ignorePermissionErrors || "boolean" === typeof input.ignorePermissionErrors || _report(_exceptionable, {
        path: _path + ".ignorePermissionErrors",
        expected: "(boolean | undefined)",
        value: input.ignorePermissionErrors
    }), undefined === input.atomic || "number" === typeof input.atomic || "boolean" === typeof input.atomic || _report(_exceptionable, {
        path: _path + ".atomic",
        expected: "(boolean | number | undefined)",
        value: input.atomic
    }), (null !== input.awaitWriteFinish || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && (undefined === input.awaitWriteFinish || "boolean" === typeof input.awaitWriteFinish || ("object" === typeof input.awaitWriteFinish && null !== input.awaitWriteFinish && false === Array.isArray(input.awaitWriteFinish) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })) && _vo180(input.awaitWriteFinish, _path + ".awaitWriteFinish", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".awaitWriteFinish",
        expected: "(AwaitWriteFinishOptions | boolean | undefined)",
        value: input.awaitWriteFinish
    })), undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout || _report(_exceptionable, {
        path: _path + ".aggregateTimeout",
        expected: "(number | undefined)",
        value: input.aggregateTimeout
    }), undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll || _report(_exceptionable, {
        path: _path + ".poll",
        expected: "(boolean | number | undefined)",
        value: input.poll
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["persistent", "ignored", "ignoreInitial", "followSymlinks", "cwd", "disableGlobbing", "usePolling", "useFsEvents", "alwaysStat", "depth", "interval", "binaryInterval", "ignorePermissionErrors", "atomic", "awaitWriteFinish", "aggregateTimeout", "poll"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo185 = (input, _path, _exceptionable = true) => [undefined === input.ALPNCallback || true || _report(_exceptionable, {
        path: _path + ".ALPNCallback",
        expected: "undefined",
        value: input.ALPNCallback
    }), undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain || _report(_exceptionable, {
        path: _path + ".allowPartialTrustChain",
        expected: "(boolean | undefined)",
        value: input.allowPartialTrustChain
    }), (null !== input.ca || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.map((elem, _index529) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index529 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index529 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index529 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".ca[" + _index529 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca[" + _index529 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.ca && null !== input.ca && _vo27(input.ca, _path + ".ca", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })), (null !== input.cert || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.map((elem, _index530) => (null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index530 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index530 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index530 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".cert[" + _index530 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert[" + _index530 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.cert && null !== input.cert && _vo27(input.cert, _path + ".cert", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })), undefined === input.sigalgs || "string" === typeof input.sigalgs || _report(_exceptionable, {
        path: _path + ".sigalgs",
        expected: "(string | undefined)",
        value: input.sigalgs
    }), undefined === input.ciphers || "string" === typeof input.ciphers || _report(_exceptionable, {
        path: _path + ".ciphers",
        expected: "(string | undefined)",
        value: input.ciphers
    }), undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine || _report(_exceptionable, {
        path: _path + ".clientCertEngine",
        expected: "(string | undefined)",
        value: input.clientCertEngine
    }), (null !== input.crl || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.map((elem, _index531) => (null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index531 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index531 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index531 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".crl[" + _index531 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl[" + _index531 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.crl && null !== input.crl && _vo27(input.crl, _path + ".crl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })), (null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && (undefined === input.dhparam || "string" === typeof input.dhparam || ("object" === typeof input.dhparam && null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && _vo27(input.dhparam, _path + ".dhparam", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })), undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve || _report(_exceptionable, {
        path: _path + ".ecdhCurve",
        expected: "(string | undefined)",
        value: input.ecdhCurve
    }), undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder || _report(_exceptionable, {
        path: _path + ".honorCipherOrder",
        expected: "(boolean | undefined)",
        value: input.honorCipherOrder
    }), (null !== input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.map((elem, _index532) => (null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index532 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index532 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index532 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && _vu0(elem, _path + ".key[" + _index532 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key[" + _index532 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.key && null !== input.key && _vo27(input.key, _path + ".key", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })), undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine || _report(_exceptionable, {
        path: _path + ".privateKeyEngine",
        expected: "(string | undefined)",
        value: input.privateKeyEngine
    }), undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier || _report(_exceptionable, {
        path: _path + ".privateKeyIdentifier",
        expected: "(string | undefined)",
        value: input.privateKeyIdentifier
    }), undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion || _report(_exceptionable, {
        path: _path + ".maxVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.maxVersion
    }), undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion || _report(_exceptionable, {
        path: _path + ".minVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.minVersion
    }), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), (null !== input.pfx || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.map((elem, _index533) => (null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index533 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index533 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index533 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && _vu1(elem, _path + ".pfx[" + _index533 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx[" + _index533 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.pfx && null !== input.pfx && _vo27(input.pfx, _path + ".pfx", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })), undefined === input.secureOptions || "number" === typeof input.secureOptions || _report(_exceptionable, {
        path: _path + ".secureOptions",
        expected: "(number | undefined)",
        value: input.secureOptions
    }), undefined === input.secureProtocol || "string" === typeof input.secureProtocol || _report(_exceptionable, {
        path: _path + ".secureProtocol",
        expected: "(string | undefined)",
        value: input.secureProtocol
    }), undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext || _report(_exceptionable, {
        path: _path + ".sessionIdContext",
        expected: "(string | undefined)",
        value: input.sessionIdContext
    }), undefined === input.ticketKeys || ("object" === typeof input.ticketKeys && null !== input.ticketKeys || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    })) && _vo27(input.ticketKeys, _path + ".ticketKeys", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    }), undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout || _report(_exceptionable, {
        path: _path + ".sessionTimeout",
        expected: "(number | undefined)",
        value: input.sessionTimeout
    }), undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout || _report(_exceptionable, {
        path: _path + ".handshakeTimeout",
        expected: "(number | undefined)",
        value: input.handshakeTimeout
    }), undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint || _report(_exceptionable, {
        path: _path + ".pskIdentityHint",
        expected: "(string | undefined)",
        value: input.pskIdentityHint
    }), undefined === input.secureContext || ("object" === typeof input.secureContext && null !== input.secureContext || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    })) && _vo30(input.secureContext, _path + ".secureContext", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    }), undefined === input.enableTrace || "boolean" === typeof input.enableTrace || _report(_exceptionable, {
        path: _path + ".enableTrace",
        expected: "(boolean | undefined)",
        value: input.enableTrace
    }), undefined === input.requestCert || "boolean" === typeof input.requestCert || _report(_exceptionable, {
        path: _path + ".requestCert",
        expected: "(boolean | undefined)",
        value: input.requestCert
    }), (null !== input.ALPNProtocols || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || (Array.isArray(input.ALPNProtocols) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (_vp2(input.ALPNProtocols, _path + ".ALPNProtocols", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "Array<string> | Array<Uint8Array<ArrayBufferLike>>",
        value: input.ALPNProtocols
    })) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })), undefined === input.SNICallback || true || _report(_exceptionable, {
        path: _path + ".SNICallback",
        expected: "undefined",
        value: input.SNICallback
    }), undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized || _report(_exceptionable, {
        path: _path + ".rejectUnauthorized",
        expected: "(boolean | undefined)",
        value: input.rejectUnauthorized
    }), undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen || _report(_exceptionable, {
        path: _path + ".allowHalfOpen",
        expected: "(boolean | undefined)",
        value: input.allowHalfOpen
    }), undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect || _report(_exceptionable, {
        path: _path + ".pauseOnConnect",
        expected: "(boolean | undefined)",
        value: input.pauseOnConnect
    }), undefined === input.noDelay || "boolean" === typeof input.noDelay || _report(_exceptionable, {
        path: _path + ".noDelay",
        expected: "(boolean | undefined)",
        value: input.noDelay
    }), undefined === input.keepAlive || "boolean" === typeof input.keepAlive || _report(_exceptionable, {
        path: _path + ".keepAlive",
        expected: "(boolean | undefined)",
        value: input.keepAlive
    }), undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay || _report(_exceptionable, {
        path: _path + ".keepAliveInitialDelay",
        expected: "(number | undefined)",
        value: input.keepAliveInitialDelay
    }), undefined === input.highWaterMark || "number" === typeof input.highWaterMark || _report(_exceptionable, {
        path: _path + ".highWaterMark",
        expected: "(number | undefined)",
        value: input.highWaterMark
    }), undefined === input.blockList || ("object" === typeof input.blockList && null !== input.blockList || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    })) && _vo31(input.blockList, _path + ".blockList", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    }), undefined === input.IncomingMessage || ("object" === typeof input.IncomingMessage && null !== input.IncomingMessage || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    })) && _vo16(input.IncomingMessage, _path + ".IncomingMessage", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    }), undefined === input.ServerResponse || ("object" === typeof input.ServerResponse && null !== input.ServerResponse || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    })) && _vo24(input.ServerResponse, _path + ".ServerResponse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    }), undefined === input.requestTimeout || "number" === typeof input.requestTimeout || _report(_exceptionable, {
        path: _path + ".requestTimeout",
        expected: "(number | undefined)",
        value: input.requestTimeout
    }), undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders || _report(_exceptionable, {
        path: _path + ".joinDuplicateHeaders",
        expected: "(boolean | undefined)",
        value: input.joinDuplicateHeaders
    }), undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout || _report(_exceptionable, {
        path: _path + ".keepAliveTimeout",
        expected: "(number | undefined)",
        value: input.keepAliveTimeout
    }), undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval || _report(_exceptionable, {
        path: _path + ".connectionsCheckingInterval",
        expected: "(number | undefined)",
        value: input.connectionsCheckingInterval
    }), undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser || _report(_exceptionable, {
        path: _path + ".insecureHTTPParser",
        expected: "(boolean | undefined)",
        value: input.insecureHTTPParser
    }), undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize || _report(_exceptionable, {
        path: _path + ".maxHeaderSize",
        expected: "(number | undefined)",
        value: input.maxHeaderSize
    }), undefined === input.uniqueHeaders || (Array.isArray(input.uniqueHeaders) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    })) && input.uniqueHeaders.map((elem, _index536) => (null !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index536 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index536 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index536 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index537) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index536 + "][" + _index537 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index536 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    }), undefined === input.spdy || ("object" === typeof input.spdy && null !== input.spdy && false === Array.isArray(input.spdy) || _report(_exceptionable, {
        path: _path + ".spdy",
        expected: "(__type.o40 | undefined)",
        value: input.spdy
    })) && _vo186(input.spdy, _path + ".spdy", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".spdy",
        expected: "(__type.o40 | undefined)",
        value: input.spdy
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders", "spdy"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo186 = (input, _path, _exceptionable = true) => [undefined === input.plain || "boolean" === typeof input.plain || _report(_exceptionable, {
        path: _path + ".plain",
        expected: "(boolean | undefined)",
        value: input.plain
    }), undefined === input.ssl || "boolean" === typeof input.ssl || _report(_exceptionable, {
        path: _path + ".ssl",
        expected: "(boolean | undefined)",
        value: input.ssl
    }), undefined === input["x-forwarded-for"] || "string" === typeof input["x-forwarded-for"] || _report(_exceptionable, {
        path: _path + "[\"x-forwarded-for\"]",
        expected: "(string | undefined)",
        value: input["x-forwarded-for"]
    }), undefined === input.protocol || "string" === typeof input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(string | undefined)",
        value: input.protocol
    }), undefined === input.protocols || (Array.isArray(input.protocols) || _report(_exceptionable, {
        path: _path + ".protocols",
        expected: "(Array<string> | undefined)",
        value: input.protocols
    })) && input.protocols.map((elem, _index538) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".protocols[" + _index538 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".protocols",
        expected: "(Array<string> | undefined)",
        value: input.protocols
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["plain", "ssl", "x-forwarded-for", "protocol", "protocols"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo187 = (input, _path, _exceptionable = true) => [undefined === input.type || "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(string | undefined)",
        value: input.type
    }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(ServerOptions | undefined)",
        value: input.options
    })) && _vo185(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(ServerOptions | undefined)",
        value: input.options
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo188 = (input, _path, _exceptionable = true) => [(null !== input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | string | undefined)",
        value: input.type
    })) && (undefined === input.type || "string" === typeof input.type || ("object" === typeof input.type && null !== input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | string | undefined)",
        value: input.type
    })) && _vo23(input.type, _path + ".type", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | string | undefined)",
        value: input.type
    })), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | undefined)",
        value: input.options
    })) && _vo85(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | undefined)",
        value: input.options
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo189 = (input, _path, _exceptionable = true) => [(null !== input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(Array<string> | string | undefined)",
        value: input.path
    })) && (undefined === input.path || "function" === typeof input.path || "string" === typeof input.path || (Array.isArray(input.path) || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(Array<string> | string | undefined)",
        value: input.path
    })) && input.path.map((elem, _index539) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".path[" + _index539 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(Array<string> | string | undefined)",
        value: input.path
    })), (null !== input.context || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(Array<string> | string | undefined)",
        value: input.context
    })) && (undefined === input.context || "function" === typeof input.context || "string" === typeof input.context || (Array.isArray(input.context) || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(Array<string> | string | undefined)",
        value: input.context
    })) && input.context.map((elem, _index540) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".context[" + _index540 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(Array<string> | string | undefined)",
        value: input.context
    })), undefined === input.bypass || true || _report(_exceptionable, {
        path: _path + ".bypass",
        expected: "undefined",
        value: input.bypass
    }), (null !== input.pathRewrite || _report(_exceptionable, {
        path: _path + ".pathRewrite",
        expected: "(__type.o43 | undefined)",
        value: input.pathRewrite
    })) && (undefined === input.pathRewrite || "function" === typeof input.pathRewrite || ("object" === typeof input.pathRewrite && null !== input.pathRewrite && false === Array.isArray(input.pathRewrite) || _report(_exceptionable, {
        path: _path + ".pathRewrite",
        expected: "(__type.o43 | undefined)",
        value: input.pathRewrite
    })) && _vo190(input.pathRewrite, _path + ".pathRewrite", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pathRewrite",
        expected: "(__type.o43 | undefined)",
        value: input.pathRewrite
    })), (null !== input.router || _report(_exceptionable, {
        path: _path + ".router",
        expected: "(__type.o44 | undefined)",
        value: input.router
    })) && (undefined === input.router || "function" === typeof input.router || ("object" === typeof input.router && null !== input.router && false === Array.isArray(input.router) || _report(_exceptionable, {
        path: _path + ".router",
        expected: "(__type.o44 | undefined)",
        value: input.router
    })) && _vo191(input.router, _path + ".router", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".router",
        expected: "(__type.o44 | undefined)",
        value: input.router
    })), undefined === input.logLevel || "warn" === input.logLevel || "error" === input.logLevel || "info" === input.logLevel || "debug" === input.logLevel || "silent" === input.logLevel || _report(_exceptionable, {
        path: _path + ".logLevel",
        expected: "(\"debug\" | \"error\" | \"info\" | \"silent\" | \"warn\" | undefined)",
        value: input.logLevel
    }), undefined === input.logProvider || true || _report(_exceptionable, {
        path: _path + ".logProvider",
        expected: "undefined",
        value: input.logProvider
    }), undefined === input.onError || true || _report(_exceptionable, {
        path: _path + ".onError",
        expected: "undefined",
        value: input.onError
    }), undefined === input.onProxyRes || true || _report(_exceptionable, {
        path: _path + ".onProxyRes",
        expected: "undefined",
        value: input.onProxyRes
    }), undefined === input.onProxyReq || true || _report(_exceptionable, {
        path: _path + ".onProxyReq",
        expected: "undefined",
        value: input.onProxyReq
    }), undefined === input.onProxyReqWs || true || _report(_exceptionable, {
        path: _path + ".onProxyReqWs",
        expected: "undefined",
        value: input.onProxyReqWs
    }), undefined === input.onOpen || true || _report(_exceptionable, {
        path: _path + ".onOpen",
        expected: "undefined",
        value: input.onOpen
    }), undefined === input.onClose || true || _report(_exceptionable, {
        path: _path + ".onClose",
        expected: "undefined",
        value: input.onClose
    }), (null !== input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
        value: input.target
    })) && (undefined === input.target || "string" === typeof input.target || ("object" === typeof input.target && null !== input.target && false === Array.isArray(input.target) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
        value: input.target
    })) && _vu16(input.target, _path + ".target", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
        value: input.target
    })), (null !== input.forward || _report(_exceptionable, {
        path: _path + ".forward",
        expected: "(Partial<\"url\".Url> | string | undefined)",
        value: input.forward
    })) && (undefined === input.forward || "string" === typeof input.forward || ("object" === typeof input.forward && null !== input.forward && false === Array.isArray(input.forward) || _report(_exceptionable, {
        path: _path + ".forward",
        expected: "(Partial<\"url\".Url> | string | undefined)",
        value: input.forward
    })) && _vo192(input.forward, _path + ".forward", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".forward",
        expected: "(Partial<\"url\".Url> | string | undefined)",
        value: input.forward
    })), true, true, undefined === input.ws || "boolean" === typeof input.ws || _report(_exceptionable, {
        path: _path + ".ws",
        expected: "(boolean | undefined)",
        value: input.ws
    }), undefined === input.xfwd || "boolean" === typeof input.xfwd || _report(_exceptionable, {
        path: _path + ".xfwd",
        expected: "(boolean | undefined)",
        value: input.xfwd
    }), undefined === input.secure || "boolean" === typeof input.secure || _report(_exceptionable, {
        path: _path + ".secure",
        expected: "(boolean | undefined)",
        value: input.secure
    }), undefined === input.toProxy || "boolean" === typeof input.toProxy || _report(_exceptionable, {
        path: _path + ".toProxy",
        expected: "(boolean | undefined)",
        value: input.toProxy
    }), undefined === input.prependPath || "boolean" === typeof input.prependPath || _report(_exceptionable, {
        path: _path + ".prependPath",
        expected: "(boolean | undefined)",
        value: input.prependPath
    }), undefined === input.ignorePath || "boolean" === typeof input.ignorePath || _report(_exceptionable, {
        path: _path + ".ignorePath",
        expected: "(boolean | undefined)",
        value: input.ignorePath
    }), undefined === input.localAddress || "string" === typeof input.localAddress || _report(_exceptionable, {
        path: _path + ".localAddress",
        expected: "(string | undefined)",
        value: input.localAddress
    }), undefined === input.changeOrigin || "boolean" === typeof input.changeOrigin || _report(_exceptionable, {
        path: _path + ".changeOrigin",
        expected: "(boolean | undefined)",
        value: input.changeOrigin
    }), undefined === input.preserveHeaderKeyCase || "boolean" === typeof input.preserveHeaderKeyCase || _report(_exceptionable, {
        path: _path + ".preserveHeaderKeyCase",
        expected: "(boolean | undefined)",
        value: input.preserveHeaderKeyCase
    }), undefined === input.auth || "string" === typeof input.auth || _report(_exceptionable, {
        path: _path + ".auth",
        expected: "(string | undefined)",
        value: input.auth
    }), undefined === input.hostRewrite || "string" === typeof input.hostRewrite || _report(_exceptionable, {
        path: _path + ".hostRewrite",
        expected: "(string | undefined)",
        value: input.hostRewrite
    }), undefined === input.autoRewrite || "boolean" === typeof input.autoRewrite || _report(_exceptionable, {
        path: _path + ".autoRewrite",
        expected: "(boolean | undefined)",
        value: input.autoRewrite
    }), undefined === input.protocolRewrite || "string" === typeof input.protocolRewrite || _report(_exceptionable, {
        path: _path + ".protocolRewrite",
        expected: "(string | undefined)",
        value: input.protocolRewrite
    }), (null !== input.cookieDomainRewrite || _report(_exceptionable, {
        path: _path + ".cookieDomainRewrite",
        expected: "(__type.o45 | false | string | undefined)",
        value: input.cookieDomainRewrite
    })) && (undefined === input.cookieDomainRewrite || false === input.cookieDomainRewrite || "string" === typeof input.cookieDomainRewrite || ("object" === typeof input.cookieDomainRewrite && null !== input.cookieDomainRewrite && false === Array.isArray(input.cookieDomainRewrite) || _report(_exceptionable, {
        path: _path + ".cookieDomainRewrite",
        expected: "(__type.o45 | false | string | undefined)",
        value: input.cookieDomainRewrite
    })) && _vo195(input.cookieDomainRewrite, _path + ".cookieDomainRewrite", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cookieDomainRewrite",
        expected: "(__type.o45 | false | string | undefined)",
        value: input.cookieDomainRewrite
    })), (null !== input.cookiePathRewrite || _report(_exceptionable, {
        path: _path + ".cookiePathRewrite",
        expected: "(__type.o46 | false | string | undefined)",
        value: input.cookiePathRewrite
    })) && (undefined === input.cookiePathRewrite || false === input.cookiePathRewrite || "string" === typeof input.cookiePathRewrite || ("object" === typeof input.cookiePathRewrite && null !== input.cookiePathRewrite && false === Array.isArray(input.cookiePathRewrite) || _report(_exceptionable, {
        path: _path + ".cookiePathRewrite",
        expected: "(__type.o46 | false | string | undefined)",
        value: input.cookiePathRewrite
    })) && _vo196(input.cookiePathRewrite, _path + ".cookiePathRewrite", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cookiePathRewrite",
        expected: "(__type.o46 | false | string | undefined)",
        value: input.cookiePathRewrite
    })), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(__type.o47 | undefined)",
        value: input.headers
    })) && _vo197(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(__type.o47 | undefined)",
        value: input.headers
    }), undefined === input.proxyTimeout || "number" === typeof input.proxyTimeout || _report(_exceptionable, {
        path: _path + ".proxyTimeout",
        expected: "(number | undefined)",
        value: input.proxyTimeout
    }), undefined === input.timeout || "number" === typeof input.timeout || _report(_exceptionable, {
        path: _path + ".timeout",
        expected: "(number | undefined)",
        value: input.timeout
    }), undefined === input.followRedirects || "boolean" === typeof input.followRedirects || _report(_exceptionable, {
        path: _path + ".followRedirects",
        expected: "(boolean | undefined)",
        value: input.followRedirects
    }), undefined === input.selfHandleResponse || "boolean" === typeof input.selfHandleResponse || _report(_exceptionable, {
        path: _path + ".selfHandleResponse",
        expected: "(boolean | undefined)",
        value: input.selfHandleResponse
    }), undefined === input.buffer || ("object" === typeof input.buffer && null !== input.buffer && false === Array.isArray(input.buffer) || _report(_exceptionable, {
        path: _path + ".buffer",
        expected: "(\"stream\".internal.Stream | undefined)",
        value: input.buffer
    })) && _vo198(input.buffer, _path + ".buffer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buffer",
        expected: "(\"stream\".internal.Stream | undefined)",
        value: input.buffer
    }), undefined === input.method || "string" === typeof input.method || _report(_exceptionable, {
        path: _path + ".method",
        expected: "(string | undefined)",
        value: input.method
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["path", "context", "bypass", "pathRewrite", "router", "logLevel", "logProvider", "onError", "onProxyRes", "onProxyReq", "onProxyReqWs", "onOpen", "onClose", "target", "forward", "agent", "ssl", "ws", "xfwd", "secure", "toProxy", "prependPath", "ignorePath", "localAddress", "changeOrigin", "preserveHeaderKeyCase", "auth", "hostRewrite", "autoRewrite", "protocolRewrite", "cookieDomainRewrite", "cookiePathRewrite", "headers", "proxyTimeout", "timeout", "followRedirects", "selfHandleResponse", "buffer", "method"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo190 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo191 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
            value: value
        })) && (undefined === value || "string" === typeof value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
            value: value
        })) && _vu16(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Partial<\"url\".Url> | ProxyTargetDetailed | string | undefined)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo192 = (input, _path, _exceptionable = true) => [null === input.auth || undefined === input.auth || "string" === typeof input.auth || _report(_exceptionable, {
        path: _path + ".auth",
        expected: "(null | string | undefined)",
        value: input.auth
    }), null === input.hash || undefined === input.hash || "string" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(null | string | undefined)",
        value: input.hash
    }), null === input.host || undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(null | string | undefined)",
        value: input.host
    }), null === input.hostname || undefined === input.hostname || "string" === typeof input.hostname || _report(_exceptionable, {
        path: _path + ".hostname",
        expected: "(null | string | undefined)",
        value: input.hostname
    }), undefined === input.href || "string" === typeof input.href || _report(_exceptionable, {
        path: _path + ".href",
        expected: "(string | undefined)",
        value: input.href
    }), null === input.path || undefined === input.path || "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(null | string | undefined)",
        value: input.path
    }), null === input.pathname || undefined === input.pathname || "string" === typeof input.pathname || _report(_exceptionable, {
        path: _path + ".pathname",
        expected: "(null | string | undefined)",
        value: input.pathname
    }), null === input.protocol || undefined === input.protocol || "string" === typeof input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(null | string | undefined)",
        value: input.protocol
    }), null === input.search || undefined === input.search || "string" === typeof input.search || _report(_exceptionable, {
        path: _path + ".search",
        expected: "(null | string | undefined)",
        value: input.search
    }), null === input.slashes || undefined === input.slashes || "boolean" === typeof input.slashes || _report(_exceptionable, {
        path: _path + ".slashes",
        expected: "(boolean | null | undefined)",
        value: input.slashes
    }), null === input.port || undefined === input.port || "string" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(null | string | undefined)",
        value: input.port
    }), null === input.query || undefined === input.query || "string" === typeof input.query || ("object" === typeof input.query && null !== input.query && false === Array.isArray(input.query) || _report(_exceptionable, {
        path: _path + ".query",
        expected: "(\"querystring\".ParsedUrlQuery | null | string | undefined)",
        value: input.query
    })) && _vo193(input.query, _path + ".query", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".query",
        expected: "(\"querystring\".ParsedUrlQuery | null | string | undefined)",
        value: input.query
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["auth", "hash", "host", "hostname", "href", "path", "pathname", "protocol", "search", "slashes", "port", "query"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo193 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        })) && (undefined === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        })) && value.map((elem, _index541) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index541 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string | undefined)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo194 = (input, _path, _exceptionable = true) => ["string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "string",
        value: input.host
    }), "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "number",
        value: input.port
    }), undefined === input.protocol || "string" === typeof input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(string | undefined)",
        value: input.protocol
    }), undefined === input.hostname || "string" === typeof input.hostname || _report(_exceptionable, {
        path: _path + ".hostname",
        expected: "(string | undefined)",
        value: input.hostname
    }), undefined === input.socketPath || "string" === typeof input.socketPath || _report(_exceptionable, {
        path: _path + ".socketPath",
        expected: "(string | undefined)",
        value: input.socketPath
    }), undefined === input.key || "string" === typeof input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(string | undefined)",
        value: input.key
    }), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), (null !== input.pfx || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.pfx
    })) && (undefined === input.pfx || "string" === typeof input.pfx || ("object" === typeof input.pfx && null !== input.pfx || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.pfx
    })) && _vo27(input.pfx, _path + ".pfx", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.pfx
    })), undefined === input.cert || "string" === typeof input.cert || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(string | undefined)",
        value: input.cert
    }), undefined === input.ca || "string" === typeof input.ca || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(string | undefined)",
        value: input.ca
    }), undefined === input.ciphers || "string" === typeof input.ciphers || _report(_exceptionable, {
        path: _path + ".ciphers",
        expected: "(string | undefined)",
        value: input.ciphers
    }), undefined === input.secureProtocol || "string" === typeof input.secureProtocol || _report(_exceptionable, {
        path: _path + ".secureProtocol",
        expected: "(string | undefined)",
        value: input.secureProtocol
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["host", "port", "protocol", "hostname", "socketPath", "key", "passphrase", "pfx", "cert", "ca", "ciphers", "secureProtocol"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo195 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo196 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo197 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo198 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo199 = (input, _path, _exceptionable = true) => [(null !== input.app || _report(_exceptionable, {
        path: _path + ".app",
        expected: "(Array<string> | OpenApp | string | undefined)",
        value: input.app
    })) && (undefined === input.app || "string" === typeof input.app || (Array.isArray(input.app) && input.app.map((elem, _index542) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".app[" + _index542 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.app && null !== input.app && false === Array.isArray(input.app) && _vo200(input.app, _path + ".app", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".app",
        expected: "(Array<string> | OpenApp | string | undefined)",
        value: input.app
    })) || _report(_exceptionable, {
        path: _path + ".app",
        expected: "(Array<string> | OpenApp | string | undefined)",
        value: input.app
    })), (null !== input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | string | undefined)",
        value: input.target
    })) && (undefined === input.target || "string" === typeof input.target || (Array.isArray(input.target) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | string | undefined)",
        value: input.target
    })) && input.target.map((elem, _index543) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".target[" + _index543 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | string | undefined)",
        value: input.target
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["app", "target"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo200 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), undefined === input.arguments || (Array.isArray(input.arguments) || _report(_exceptionable, {
        path: _path + ".arguments",
        expected: "(Array<string> | undefined)",
        value: input.arguments
    })) && input.arguments.map((elem, _index544) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".arguments[" + _index544 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".arguments",
        expected: "(Array<string> | undefined)",
        value: input.arguments
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "arguments"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo201 = (input, _path, _exceptionable = true) => [undefined === input.logging || "none" === input.logging || "log" === input.logging || "warn" === input.logging || "error" === input.logging || "info" === input.logging || "verbose" === input.logging || _report(_exceptionable, {
        path: _path + ".logging",
        expected: "(\"error\" | \"info\" | \"log\" | \"none\" | \"verbose\" | \"warn\" | undefined)",
        value: input.logging
    }), (null !== input.overlay || _report(_exceptionable, {
        path: _path + ".overlay",
        expected: "(__type.o48 | boolean | undefined)",
        value: input.overlay
    })) && (undefined === input.overlay || "boolean" === typeof input.overlay || ("object" === typeof input.overlay && null !== input.overlay && false === Array.isArray(input.overlay) || _report(_exceptionable, {
        path: _path + ".overlay",
        expected: "(__type.o48 | boolean | undefined)",
        value: input.overlay
    })) && _vo202(input.overlay, _path + ".overlay", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".overlay",
        expected: "(__type.o48 | boolean | undefined)",
        value: input.overlay
    })), undefined === input.progress || "boolean" === typeof input.progress || _report(_exceptionable, {
        path: _path + ".progress",
        expected: "(boolean | undefined)",
        value: input.progress
    }), undefined === input.reconnect || "number" === typeof input.reconnect || "boolean" === typeof input.reconnect || _report(_exceptionable, {
        path: _path + ".reconnect",
        expected: "(boolean | number | undefined)",
        value: input.reconnect
    }), undefined === input.webSocketTransport || "string" === typeof input.webSocketTransport || _report(_exceptionable, {
        path: _path + ".webSocketTransport",
        expected: "(string | undefined)",
        value: input.webSocketTransport
    }), (null !== input.webSocketURL || _report(_exceptionable, {
        path: _path + ".webSocketURL",
        expected: "(WebSocketURL | string | undefined)",
        value: input.webSocketURL
    })) && (undefined === input.webSocketURL || "string" === typeof input.webSocketURL || ("object" === typeof input.webSocketURL && null !== input.webSocketURL && false === Array.isArray(input.webSocketURL) || _report(_exceptionable, {
        path: _path + ".webSocketURL",
        expected: "(WebSocketURL | string | undefined)",
        value: input.webSocketURL
    })) && _vo203(input.webSocketURL, _path + ".webSocketURL", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".webSocketURL",
        expected: "(WebSocketURL | string | undefined)",
        value: input.webSocketURL
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["logging", "overlay", "progress", "reconnect", "webSocketTransport", "webSocketURL"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo202 = (input, _path, _exceptionable = true) => [(null !== input.warnings || _report(_exceptionable, {
        path: _path + ".warnings",
        expected: "(boolean | undefined)",
        value: input.warnings
    })) && (undefined === input.warnings || "function" === typeof input.warnings || "boolean" === typeof input.warnings || _report(_exceptionable, {
        path: _path + ".warnings",
        expected: "(boolean | undefined)",
        value: input.warnings
    })), (null !== input.errors || _report(_exceptionable, {
        path: _path + ".errors",
        expected: "(boolean | undefined)",
        value: input.errors
    })) && (undefined === input.errors || "function" === typeof input.errors || "boolean" === typeof input.errors || _report(_exceptionable, {
        path: _path + ".errors",
        expected: "(boolean | undefined)",
        value: input.errors
    })), (null !== input.runtimeErrors || _report(_exceptionable, {
        path: _path + ".runtimeErrors",
        expected: "(boolean | undefined)",
        value: input.runtimeErrors
    })) && (undefined === input.runtimeErrors || "function" === typeof input.runtimeErrors || "boolean" === typeof input.runtimeErrors || _report(_exceptionable, {
        path: _path + ".runtimeErrors",
        expected: "(boolean | undefined)",
        value: input.runtimeErrors
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["warnings", "errors", "runtimeErrors"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo203 = (input, _path, _exceptionable = true) => [undefined === input.hostname || "string" === typeof input.hostname || _report(_exceptionable, {
        path: _path + ".hostname",
        expected: "(string | undefined)",
        value: input.hostname
    }), undefined === input.password || "string" === typeof input.password || _report(_exceptionable, {
        path: _path + ".password",
        expected: "(string | undefined)",
        value: input.password
    }), undefined === input.pathname || "string" === typeof input.pathname || _report(_exceptionable, {
        path: _path + ".pathname",
        expected: "(string | undefined)",
        value: input.pathname
    }), undefined === input.port || "string" === typeof input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | string | undefined)",
        value: input.port
    }), undefined === input.protocol || "string" === typeof input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(string | undefined)",
        value: input.protocol
    }), undefined === input.username || "string" === typeof input.username || _report(_exceptionable, {
        path: _path + ".username",
        expected: "(string | undefined)",
        value: input.username
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hostname", "password", "pathname", "port", "protocol", "username"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo204 = (input, _path, _exceptionable = true) => ["string" === typeof input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "string",
        value: input.key
    }), "string" === typeof input.value || _report(_exceptionable, {
        path: _path + ".value",
        expected: "string",
        value: input.value
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["key", "value"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo205 = (input, _path, _exceptionable = true) => [undefined === input.defaultRules || (Array.isArray(input.defaultRules) || _report(_exceptionable, {
        path: _path + ".defaultRules",
        expected: "(RuleSetRules | undefined)",
        value: input.defaultRules
    })) && input.defaultRules.map((elem, _index545) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".defaultRules[" + _index545 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })) && _vo206(elem, _path + ".defaultRules[" + _index545 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".defaultRules[" + _index545 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".defaultRules",
        expected: "(RuleSetRules | undefined)",
        value: input.defaultRules
    }), undefined === input.rules || (Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(RuleSetRules | undefined)",
        value: input.rules
    })) && input.rules.map((elem, _index546) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rules[" + _index546 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })) && _vo206(elem, _path + ".rules[" + _index546 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rules[" + _index546 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(RuleSetRules | undefined)",
        value: input.rules
    }), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(ParserOptionsByModuleTypeKnown | ParserOptionsByModuleTypeUnknown | undefined)",
        value: input.parser
    })) && _vu17(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(ParserOptionsByModuleTypeKnown | ParserOptionsByModuleTypeUnknown | undefined)",
        value: input.parser
    }), undefined === input.generator || ("object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(GeneratorOptionsByModuleTypeKnown | GeneratorOptionsByModuleTypeUnknown | undefined)",
        value: input.generator
    })) && _vu18(input.generator, _path + ".generator", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(GeneratorOptionsByModuleTypeKnown | GeneratorOptionsByModuleTypeUnknown | undefined)",
        value: input.generator
    }), (null !== input.noParse || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<NoParseOptionSingle> | RegExp | string | undefined)",
        value: input.noParse
    })) && (undefined === input.noParse || "function" === typeof input.noParse || "string" === typeof input.noParse || input.noParse instanceof RegExp || (Array.isArray(input.noParse) || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<NoParseOptionSingle> | RegExp | string | undefined)",
        value: input.noParse
    })) && input.noParse.map((elem, _index547) => (null !== elem || _report(_exceptionable, {
        path: _path + ".noParse[" + _index547 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".noParse[" + _index547 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".noParse[" + _index547 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<NoParseOptionSingle> | RegExp | string | undefined)",
        value: input.noParse
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["defaultRules", "rules", "parser", "generator", "noParse"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo206 = (input, _path, _exceptionable = true) => [(null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) && (_va0(input.test, _path + ".test", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "RuleSetConditions",
        value: input.test
    })) || "object" === typeof input.test && null !== input.test && false === Array.isArray(input.test) && _vo207(input.test, _path + ".test", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.test
    })) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.test
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) && (_va0(input.exclude, _path + ".exclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "RuleSetConditions",
        value: input.exclude
    })) || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _vo207(input.exclude, _path + ".exclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.exclude
    })) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.exclude
    })), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.include
    })) && (undefined === input.include || "function" === typeof input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) && (_va0(input.include, _path + ".include", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "RuleSetConditions",
        value: input.include
    })) || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _vo207(input.include, _path + ".include", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.include
    })) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.include
    })), (null !== input.issuer || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuer
    })) && (undefined === input.issuer || "function" === typeof input.issuer || "string" === typeof input.issuer || input.issuer instanceof RegExp || (Array.isArray(input.issuer) && (_va0(input.issuer, _path + ".issuer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "RuleSetConditions",
        value: input.issuer
    })) || "object" === typeof input.issuer && null !== input.issuer && false === Array.isArray(input.issuer) && _vo207(input.issuer, _path + ".issuer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuer
    })) || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuer
    })), (null !== input.issuerLayer || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuerLayer
    })) && (undefined === input.issuerLayer || "function" === typeof input.issuerLayer || "string" === typeof input.issuerLayer || input.issuerLayer instanceof RegExp || (Array.isArray(input.issuerLayer) && (_va0(input.issuerLayer, _path + ".issuerLayer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "RuleSetConditions",
        value: input.issuerLayer
    })) || "object" === typeof input.issuerLayer && null !== input.issuerLayer && false === Array.isArray(input.issuerLayer) && _vo207(input.issuerLayer, _path + ".issuerLayer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuerLayer
    })) || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.issuerLayer
    })), (null !== input.dependency || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.dependency
    })) && (undefined === input.dependency || "function" === typeof input.dependency || "string" === typeof input.dependency || input.dependency instanceof RegExp || (Array.isArray(input.dependency) && (_va0(input.dependency, _path + ".dependency", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "RuleSetConditions",
        value: input.dependency
    })) || "object" === typeof input.dependency && null !== input.dependency && false === Array.isArray(input.dependency) && _vo207(input.dependency, _path + ".dependency", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.dependency
    })) || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.dependency
    })), (null !== input.resource || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resource
    })) && (undefined === input.resource || "function" === typeof input.resource || "string" === typeof input.resource || input.resource instanceof RegExp || (Array.isArray(input.resource) && (_va0(input.resource, _path + ".resource", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "RuleSetConditions",
        value: input.resource
    })) || "object" === typeof input.resource && null !== input.resource && false === Array.isArray(input.resource) && _vo207(input.resource, _path + ".resource", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resource
    })) || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resource
    })), (null !== input.resourceFragment || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceFragment
    })) && (undefined === input.resourceFragment || "function" === typeof input.resourceFragment || "string" === typeof input.resourceFragment || input.resourceFragment instanceof RegExp || (Array.isArray(input.resourceFragment) && (_va0(input.resourceFragment, _path + ".resourceFragment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "RuleSetConditions",
        value: input.resourceFragment
    })) || "object" === typeof input.resourceFragment && null !== input.resourceFragment && false === Array.isArray(input.resourceFragment) && _vo207(input.resourceFragment, _path + ".resourceFragment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceFragment
    })) || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceFragment
    })), (null !== input.resourceQuery || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceQuery
    })) && (undefined === input.resourceQuery || "function" === typeof input.resourceQuery || "string" === typeof input.resourceQuery || input.resourceQuery instanceof RegExp || (Array.isArray(input.resourceQuery) && (_va0(input.resourceQuery, _path + ".resourceQuery", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "RuleSetConditions",
        value: input.resourceQuery
    })) || "object" === typeof input.resourceQuery && null !== input.resourceQuery && false === Array.isArray(input.resourceQuery) && _vo207(input.resourceQuery, _path + ".resourceQuery", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceQuery
    })) || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.resourceQuery
    })), (null !== input.mimetype || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.mimetype
    })) && (undefined === input.mimetype || "function" === typeof input.mimetype || "string" === typeof input.mimetype || input.mimetype instanceof RegExp || (Array.isArray(input.mimetype) && (_va0(input.mimetype, _path + ".mimetype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "RuleSetConditions",
        value: input.mimetype
    })) || "object" === typeof input.mimetype && null !== input.mimetype && false === Array.isArray(input.mimetype) && _vo207(input.mimetype, _path + ".mimetype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.mimetype
    })) || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.mimetype
    })), (null !== input.scheme || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.scheme
    })) && (undefined === input.scheme || "function" === typeof input.scheme || "string" === typeof input.scheme || input.scheme instanceof RegExp || (Array.isArray(input.scheme) && (_va0(input.scheme, _path + ".scheme", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "RuleSetConditions",
        value: input.scheme
    })) || "object" === typeof input.scheme && null !== input.scheme && false === Array.isArray(input.scheme) && _vo207(input.scheme, _path + ".scheme", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.scheme
    })) || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.scheme
    })), undefined === input.descriptionData || ("object" === typeof input.descriptionData && null !== input.descriptionData && false === Array.isArray(input.descriptionData) || _report(_exceptionable, {
        path: _path + ".descriptionData",
        expected: "(Record<string, RuleSetCondition> | undefined)",
        value: input.descriptionData
    })) && _vo208(input.descriptionData, _path + ".descriptionData", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".descriptionData",
        expected: "(Record<string, RuleSetCondition> | undefined)",
        value: input.descriptionData
    }), undefined === input["with"] || ("object" === typeof input["with"] && null !== input["with"] && false === Array.isArray(input["with"]) || _report(_exceptionable, {
        path: _path + "[\"with\"]",
        expected: "(Record<string, RuleSetCondition> | undefined)",
        value: input["with"]
    })) && _vo208(input["with"], _path + "[\"with\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"with\"]",
        expected: "(Record<string, RuleSetCondition> | undefined)",
        value: input["with"]
    }), undefined === input.type || "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(string | undefined)",
        value: input.type
    }), undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(string | undefined)",
        value: input.layer
    }), undefined === input.loader || "string" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(string | undefined)",
        value: input.loader
    }), (null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })) && (undefined === input.options || "string" === typeof input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })) && _vo85(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })), (null !== input.use || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<RuleSetUseItem> | RuleSetLoaderWithOptions | string | undefined)",
        value: input.use
    })) && (undefined === input.use || "function" === typeof input.use || "string" === typeof input.use || (Array.isArray(input.use) && input.use.map((elem, _index548) => (null !== elem || _report(_exceptionable, {
        path: _path + ".use[" + _index548 + "]",
        expected: "(RuleSetLoaderWithOptions | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".use[" + _index548 + "]",
        expected: "(RuleSetLoaderWithOptions | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".use[" + _index548 + "]",
        expected: "(RuleSetLoaderWithOptions | string)",
        value: elem
    })) && _vo209(elem, _path + ".use[" + _index548 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".use[" + _index548 + "]",
        expected: "(RuleSetLoaderWithOptions | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.use && null !== input.use && _vo209(input.use, _path + ".use", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<RuleSetUseItem> | RuleSetLoaderWithOptions | string | undefined)",
        value: input.use
    })) || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<RuleSetUseItem> | RuleSetLoaderWithOptions | string | undefined)",
        value: input.use
    })), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(Record<string, any> | undefined)",
        value: input.parser
    })) && _vo85(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(Record<string, any> | undefined)",
        value: input.parser
    }), undefined === input.generator || ("object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(Record<string, any> | undefined)",
        value: input.generator
    })) && _vo85(input.generator, _path + ".generator", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(Record<string, any> | undefined)",
        value: input.generator
    }), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions | undefined)",
        value: input.resolve
    })) && _vo150(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions | undefined)",
        value: input.resolve
    }), undefined === input.sideEffects || "boolean" === typeof input.sideEffects || _report(_exceptionable, {
        path: _path + ".sideEffects",
        expected: "(boolean | undefined)",
        value: input.sideEffects
    }), undefined === input.enforce || "pre" === input.enforce || "post" === input.enforce || _report(_exceptionable, {
        path: _path + ".enforce",
        expected: "(\"post\" | \"pre\" | undefined)",
        value: input.enforce
    }), undefined === input.oneOf || (Array.isArray(input.oneOf) || _report(_exceptionable, {
        path: _path + ".oneOf",
        expected: "(Array<Falsy | RuleSetRule> | undefined)",
        value: input.oneOf
    })) && input.oneOf.map((elem, _index549) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".oneOf[" + _index549 + "]",
        expected: "(\"\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })) && _vo206(elem, _path + ".oneOf[" + _index549 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".oneOf[" + _index549 + "]",
        expected: "(\"\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".oneOf",
        expected: "(Array<Falsy | RuleSetRule> | undefined)",
        value: input.oneOf
    }), undefined === input.rules || (Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<Falsy | RuleSetRule> | undefined)",
        value: input.rules
    })) && input.rules.map((elem, _index550) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rules[" + _index550 + "]",
        expected: "(\"\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })) && _vo206(elem, _path + ".rules[" + _index550 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rules[" + _index550 + "]",
        expected: "(\"\" | 0 | RuleSetRule | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<Falsy | RuleSetRule> | undefined)",
        value: input.rules
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["test", "exclude", "include", "issuer", "issuerLayer", "dependency", "resource", "resourceFragment", "resourceQuery", "mimetype", "scheme", "descriptionData", "with", "type", "layer", "loader", "options", "use", "parser", "generator", "resolve", "sideEffects", "enforce", "oneOf", "rules"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo207 = (input, _path, _exceptionable = true) => [undefined === input.and || (Array.isArray(input.and) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(RuleSetConditions | undefined)",
        value: input.and
    })) && (_va0(input.and, _path + ".and", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "RuleSetConditions",
        value: input.and
    })) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(RuleSetConditions | undefined)",
        value: input.and
    }), undefined === input.or || (Array.isArray(input.or) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(RuleSetConditions | undefined)",
        value: input.or
    })) && (_va0(input.or, _path + ".or", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "RuleSetConditions",
        value: input.or
    })) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(RuleSetConditions | undefined)",
        value: input.or
    }), (null !== input.not || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.not
    })) && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && (_va0(input.not, _path + ".not", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "RuleSetConditions",
        value: input.not
    })) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _vo207(input.not, _path + ".not", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.not
    })) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.not
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["and", "or", "not"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo208 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
            value: value
        })) && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && (_va0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "RuleSetConditions",
            value: value
        })) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo207(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo209 = (input, _path, _exceptionable = true) => [undefined === input.ident || "string" === typeof input.ident || _report(_exceptionable, {
        path: _path + ".ident",
        expected: "(string | undefined)",
        value: input.ident
    }), "string" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "string",
        value: input.loader
    }), (null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })) && (undefined === input.options || "string" === typeof input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })) && _vo85(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(Record<string, any> | string | undefined)",
        value: input.options
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ident", "loader", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo210 = (input, _path, _exceptionable = true) => [undefined === input.asset || ("object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetParserOptions | undefined)",
        value: input.asset
    })) && _vo211(input.asset, _path + ".asset", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetParserOptions | undefined)",
        value: input.asset
    }), undefined === input.css || ("object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssParserOptions | undefined)",
        value: input.css
    })) && _vo213(input.css, _path + ".css", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssParserOptions | undefined)",
        value: input.css
    }), undefined === input["css/auto"] || ("object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoParserOptions | undefined)",
        value: input["css/auto"]
    })) && _vo214(input["css/auto"], _path + "[\"css/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoParserOptions | undefined)",
        value: input["css/auto"]
    }), undefined === input["css/module"] || ("object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleParserOptions | undefined)",
        value: input["css/module"]
    })) && _vo215(input["css/module"], _path + "[\"css/module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleParserOptions | undefined)",
        value: input["css/module"]
    }), undefined === input.javascript || ("object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(JavascriptParserOptions | undefined)",
        value: input.javascript
    })) && _vo216(input.javascript, _path + ".javascript", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(JavascriptParserOptions | undefined)",
        value: input.javascript
    }), undefined === input["javascript/auto"] || ("object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/auto"]
    })) && _vo216(input["javascript/auto"], _path + "[\"javascript/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/auto"]
    }), undefined === input["javascript/dynamic"] || ("object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/dynamic"]
    })) && _vo216(input["javascript/dynamic"], _path + "[\"javascript/dynamic\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/dynamic"]
    }), undefined === input["javascript/esm"] || ("object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/esm"]
    })) && _vo216(input["javascript/esm"], _path + "[\"javascript/esm\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(JavascriptParserOptions | undefined)",
        value: input["javascript/esm"]
    }), undefined === input.json || ("object" === typeof input.json && null !== input.json && false === Array.isArray(input.json) || _report(_exceptionable, {
        path: _path + ".json",
        expected: "(JsonParserOptions | undefined)",
        value: input.json
    })) && _vo217(input.json, _path + ".json", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".json",
        expected: "(JsonParserOptions | undefined)",
        value: input.json
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asset", "css", "css/auto", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm", "json"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo211 = (input, _path, _exceptionable = true) => [undefined === input.dataUrlCondition || ("object" === typeof input.dataUrlCondition && null !== input.dataUrlCondition && false === Array.isArray(input.dataUrlCondition) || _report(_exceptionable, {
        path: _path + ".dataUrlCondition",
        expected: "(AssetParserDataUrlOptions | undefined)",
        value: input.dataUrlCondition
    })) && _vo212(input.dataUrlCondition, _path + ".dataUrlCondition", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrlCondition",
        expected: "(AssetParserDataUrlOptions | undefined)",
        value: input.dataUrlCondition
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dataUrlCondition"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo212 = (input, _path, _exceptionable = true) => [undefined === input.maxSize || "number" === typeof input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(number | undefined)",
        value: input.maxSize
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["maxSize"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo213 = (input, _path, _exceptionable = true) => [undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["namedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo214 = (input, _path, _exceptionable = true) => [undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["namedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo215 = (input, _path, _exceptionable = true) => [undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["namedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo216 = (input, _path, _exceptionable = true) => [undefined === input.dynamicImportMode || "lazy" === input.dynamicImportMode || "weak" === input.dynamicImportMode || "eager" === input.dynamicImportMode || "lazy-once" === input.dynamicImportMode || _report(_exceptionable, {
        path: _path + ".dynamicImportMode",
        expected: "(\"eager\" | \"lazy\" | \"lazy-once\" | \"weak\" | undefined)",
        value: input.dynamicImportMode
    }), undefined === input.dynamicImportPreload || "number" === typeof input.dynamicImportPreload || "boolean" === typeof input.dynamicImportPreload || _report(_exceptionable, {
        path: _path + ".dynamicImportPreload",
        expected: "(boolean | number | undefined)",
        value: input.dynamicImportPreload
    }), undefined === input.dynamicImportPrefetch || "number" === typeof input.dynamicImportPrefetch || "boolean" === typeof input.dynamicImportPrefetch || _report(_exceptionable, {
        path: _path + ".dynamicImportPrefetch",
        expected: "(boolean | number | undefined)",
        value: input.dynamicImportPrefetch
    }), undefined === input.dynamicImportFetchPriority || "auto" === input.dynamicImportFetchPriority || "low" === input.dynamicImportFetchPriority || "high" === input.dynamicImportFetchPriority || _report(_exceptionable, {
        path: _path + ".dynamicImportFetchPriority",
        expected: "(\"auto\" | \"high\" | \"low\" | undefined)",
        value: input.dynamicImportFetchPriority
    }), undefined === input.importMeta || "boolean" === typeof input.importMeta || _report(_exceptionable, {
        path: _path + ".importMeta",
        expected: "(boolean | undefined)",
        value: input.importMeta
    }), undefined === input.url || "relative" === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(\"relative\" | boolean | undefined)",
        value: input.url
    }), undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical || _report(_exceptionable, {
        path: _path + ".exprContextCritical",
        expected: "(boolean | undefined)",
        value: input.exprContextCritical
    }), undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical || _report(_exceptionable, {
        path: _path + ".wrappedContextCritical",
        expected: "(boolean | undefined)",
        value: input.wrappedContextCritical
    }), undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".wrappedContextRegExp",
        expected: "(RegExp | undefined)",
        value: input.wrappedContextRegExp
    }), undefined === input.exportsPresence || false === input.exportsPresence || "warn" === input.exportsPresence || "error" === input.exportsPresence || "auto" === input.exportsPresence || _report(_exceptionable, {
        path: _path + ".exportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.exportsPresence
    }), undefined === input.importExportsPresence || false === input.importExportsPresence || "warn" === input.importExportsPresence || "error" === input.importExportsPresence || "auto" === input.importExportsPresence || _report(_exceptionable, {
        path: _path + ".importExportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.importExportsPresence
    }), undefined === input.reexportExportsPresence || false === input.reexportExportsPresence || "warn" === input.reexportExportsPresence || "error" === input.reexportExportsPresence || "auto" === input.reexportExportsPresence || _report(_exceptionable, {
        path: _path + ".reexportExportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.reexportExportsPresence
    }), undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence || _report(_exceptionable, {
        path: _path + ".strictExportPresence",
        expected: "(boolean | undefined)",
        value: input.strictExportPresence
    }), (null !== input.worker || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })) && (undefined === input.worker || "boolean" === typeof input.worker || (Array.isArray(input.worker) || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })) && input.worker.map((elem, _index551) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".worker[" + _index551 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })), undefined === input.overrideStrict || "strict" === input.overrideStrict || "non-strict" === input.overrideStrict || _report(_exceptionable, {
        path: _path + ".overrideStrict",
        expected: "(\"non-strict\" | \"strict\" | undefined)",
        value: input.overrideStrict
    }), undefined === input.requireAsExpression || "boolean" === typeof input.requireAsExpression || _report(_exceptionable, {
        path: _path + ".requireAsExpression",
        expected: "(boolean | undefined)",
        value: input.requireAsExpression
    }), undefined === input.requireDynamic || "boolean" === typeof input.requireDynamic || _report(_exceptionable, {
        path: _path + ".requireDynamic",
        expected: "(boolean | undefined)",
        value: input.requireDynamic
    }), undefined === input.requireResolve || "boolean" === typeof input.requireResolve || _report(_exceptionable, {
        path: _path + ".requireResolve",
        expected: "(boolean | undefined)",
        value: input.requireResolve
    }), undefined === input.importDynamic || "boolean" === typeof input.importDynamic || _report(_exceptionable, {
        path: _path + ".importDynamic",
        expected: "(boolean | undefined)",
        value: input.importDynamic
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dynamicImportMode", "dynamicImportPreload", "dynamicImportPrefetch", "dynamicImportFetchPriority", "importMeta", "url", "exprContextCritical", "wrappedContextCritical", "wrappedContextRegExp", "exportsPresence", "importExportsPresence", "reexportExportsPresence", "strictExportPresence", "worker", "overrideStrict", "requireAsExpression", "requireDynamic", "requireResolve", "importDynamic"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo217 = (input, _path, _exceptionable = true) => [undefined === input.exportsDepth || "number" === typeof input.exportsDepth || _report(_exceptionable, {
        path: _path + ".exportsDepth",
        expected: "(number | undefined)",
        value: input.exportsDepth
    }), undefined === input.parse || true || _report(_exceptionable, {
        path: _path + ".parse",
        expected: "undefined",
        value: input.parse
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["exportsDepth", "parse"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo218 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Record<string, any>",
            value: value
        })) && _vo85(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Record<string, any>",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo219 = (input, _path, _exceptionable = true) => [undefined === input.asset || ("object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetGeneratorOptions | undefined)",
        value: input.asset
    })) && _vo220(input.asset, _path + ".asset", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetGeneratorOptions | undefined)",
        value: input.asset
    }), undefined === input["asset/inline"] || ("object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(AssetInlineGeneratorOptions | undefined)",
        value: input["asset/inline"]
    })) && _vo222(input["asset/inline"], _path + "[\"asset/inline\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(AssetInlineGeneratorOptions | undefined)",
        value: input["asset/inline"]
    }), undefined === input["asset/resource"] || ("object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(AssetResourceGeneratorOptions | undefined)",
        value: input["asset/resource"]
    })) && _vo223(input["asset/resource"], _path + "[\"asset/resource\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(AssetResourceGeneratorOptions | undefined)",
        value: input["asset/resource"]
    }), undefined === input.css || ("object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssGeneratorOptions | undefined)",
        value: input.css
    })) && _vo224(input.css, _path + ".css", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssGeneratorOptions | undefined)",
        value: input.css
    }), undefined === input["css/auto"] || ("object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoGeneratorOptions | undefined)",
        value: input["css/auto"]
    })) && _vo225(input["css/auto"], _path + "[\"css/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoGeneratorOptions | undefined)",
        value: input["css/auto"]
    }), undefined === input["css/module"] || ("object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssAutoGeneratorOptions | undefined)",
        value: input["css/module"]
    })) && _vo225(input["css/module"], _path + "[\"css/module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssAutoGeneratorOptions | undefined)",
        value: input["css/module"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asset", "asset/inline", "asset/resource", "css", "css/auto", "css/module"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo220 = (input, _path, _exceptionable = true) => [(null !== input.dataUrl || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })) && (undefined === input.dataUrl || "function" === typeof input.dataUrl || ("object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })) && _vo221(input.dataUrl, _path + ".dataUrl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })), undefined === input.emit || "boolean" === typeof input.emit || _report(_exceptionable, {
        path: _path + ".emit",
        expected: "(boolean | undefined)",
        value: input.emit
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })) && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.importMode || "url" === input.importMode || "preserve" === input.importMode || _report(_exceptionable, {
        path: _path + ".importMode",
        expected: "(\"preserve\" | \"url\" | undefined)",
        value: input.importMode
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dataUrl", "emit", "filename", "outputPath", "publicPath", "importMode"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo221 = (input, _path, _exceptionable = true) => [undefined === input.encoding || false === input.encoding || "base64" === input.encoding || _report(_exceptionable, {
        path: _path + ".encoding",
        expected: "(\"base64\" | false | undefined)",
        value: input.encoding
    }), undefined === input.mimetype || "string" === typeof input.mimetype || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(string | undefined)",
        value: input.mimetype
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["encoding", "mimetype"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo222 = (input, _path, _exceptionable = true) => [(null !== input.dataUrl || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })) && (undefined === input.dataUrl || "function" === typeof input.dataUrl || ("object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })) && _vo221(input.dataUrl, _path + ".dataUrl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions | undefined)",
        value: input.dataUrl
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dataUrl"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo223 = (input, _path, _exceptionable = true) => [undefined === input.emit || "boolean" === typeof input.emit || _report(_exceptionable, {
        path: _path + ".emit",
        expected: "(boolean | undefined)",
        value: input.emit
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })) && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.importMode || "url" === input.importMode || "preserve" === input.importMode || _report(_exceptionable, {
        path: _path + ".importMode",
        expected: "(\"preserve\" | \"url\" | undefined)",
        value: input.importMode
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["emit", "filename", "outputPath", "publicPath", "importMode"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo224 = (input, _path, _exceptionable = true) => [undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["exportsOnly", "esModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo225 = (input, _path, _exceptionable = true) => [undefined === input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    }), undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["exportsConvention", "exportsOnly", "localIdentName", "esModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo226 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Record<string, any>",
            value: value
        })) && _vo85(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Record<string, any>",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo227 = (input, _path, _exceptionable = true) => [undefined === input.assetFilter || true || _report(_exceptionable, {
        path: _path + ".assetFilter",
        expected: "undefined",
        value: input.assetFilter
    }), undefined === input.hints || false === input.hints || "error" === input.hints || "warning" === input.hints || _report(_exceptionable, {
        path: _path + ".hints",
        expected: "(\"error\" | \"warning\" | false | undefined)",
        value: input.hints
    }), undefined === input.maxAssetSize || "number" === typeof input.maxAssetSize || _report(_exceptionable, {
        path: _path + ".maxAssetSize",
        expected: "(number | undefined)",
        value: input.maxAssetSize
    }), undefined === input.maxEntrypointSize || "number" === typeof input.maxEntrypointSize || _report(_exceptionable, {
        path: _path + ".maxEntrypointSize",
        expected: "(number | undefined)",
        value: input.maxEntrypointSize
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assetFilter", "hints", "maxAssetSize", "maxEntrypointSize"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo228 = (input, _path, _exceptionable = true) => [(null !== input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o51 | false | undefined)",
        value: input.amd
    })) && (undefined === input.amd || false === input.amd || ("object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o51 | false | undefined)",
        value: input.amd
    })) && _vo229(input.amd, _path + ".amd", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o51 | false | undefined)",
        value: input.amd
    })), undefined === input.bail || "boolean" === typeof input.bail || _report(_exceptionable, {
        path: _path + ".bail",
        expected: "(boolean | undefined)",
        value: input.bail
    }), (null !== input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(FileCacheOptions | MemoryCacheOptions | boolean | undefined)",
        value: input.cache
    })) && (undefined === input.cache || "boolean" === typeof input.cache || ("object" === typeof input.cache && null !== input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(FileCacheOptions | MemoryCacheOptions | boolean | undefined)",
        value: input.cache
    })) && _vu19(input.cache, _path + ".cache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(FileCacheOptions | MemoryCacheOptions | boolean | undefined)",
        value: input.cache
    })), undefined === input.context || "string" === typeof input.context || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(string | undefined)",
        value: input.context
    }), undefined === input.dependencies || (Array.isArray(input.dependencies) || _report(_exceptionable, {
        path: _path + ".dependencies",
        expected: "(Array<string> | undefined)",
        value: input.dependencies
    })) && input.dependencies.map((elem, _index552) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dependencies[" + _index552 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dependencies",
        expected: "(Array<string> | undefined)",
        value: input.dependencies
    }), undefined === input.devtool || false === input.devtool || "string" === typeof input.devtool || _report(_exceptionable, {
        path: _path + ".devtool",
        expected: "(false | string | undefined)",
        value: input.devtool
    }), (null !== input.entry || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject.o1 | string | undefined)",
        value: input.entry
    })) && (undefined === input.entry || "function" === typeof input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.map((elem, _index553) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".entry[" + _index553 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _vo233(input.entry, _path + ".entry", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject.o1 | string | undefined)",
        value: input.entry
    })) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | EntryObject.o1 | string | undefined)",
        value: input.entry
    })), undefined === input.experiments || ("object" === typeof input.experiments && null !== input.experiments && false === Array.isArray(input.experiments) || _report(_exceptionable, {
        path: _path + ".experiments",
        expected: "(Experiments.o1 | undefined)",
        value: input.experiments
    })) && _vo238(input.experiments, _path + ".experiments", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".experiments",
        expected: "(Experiments.o1 | undefined)",
        value: input.experiments
    }), (null !== input["extends"] || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["extends"]
    })) && (undefined === input["extends"] || "string" === typeof input["extends"] || (Array.isArray(input["extends"]) || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["extends"]
    })) && input["extends"].map((elem, _index554) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"extends\"][" + _index554 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["extends"]
    })), (null !== input.externals || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem>.o1 | ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.map((elem, _index555) => (null !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index555 + "]",
        expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index555 + "]",
        expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".externals[" + _index555 + "]",
        expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && _vo243(elem, _path + ".externals[" + _index555 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals[" + _index555 + "]",
        expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _vo243(input.externals, _path + ".externals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem>.o1 | ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem>.o1 | ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })), undefined === input.externalsPresets || ("object" === typeof input.externalsPresets && null !== input.externalsPresets && false === Array.isArray(input.externalsPresets) || _report(_exceptionable, {
        path: _path + ".externalsPresets",
        expected: "(ExternalsPresets.o1 | undefined)",
        value: input.externalsPresets
    })) && _vo246(input.externalsPresets, _path + ".externalsPresets", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externalsPresets",
        expected: "(ExternalsPresets.o1 | undefined)",
        value: input.externalsPresets
    }), undefined === input.externalsType || true === _vv556.has(input.externalsType) || _report(_exceptionable, {
        path: _path + ".externalsType",
        expected: "(\"amd\" | \"amd-require\" | \"assign\" | \"commonjs\" | \"commonjs-module\" | \"commonjs-static\" | \"commonjs2\" | \"global\" | \"import\" | \"jsonp\" | \"module\" | \"module-import\" | \"node-commonjs\" | \"promise\" | \"script\" | \"self\" | \"system\" | \"this\" | \"umd\" | \"umd2\" | \"var\" | \"window\" | undefined)",
        value: input.externalsType
    }), undefined === input.ignoreWarnings || (Array.isArray(input.ignoreWarnings) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings",
        expected: "(Array<RegExp | { file?: RegExp; message?: RegExp; module?: RegExp; } | ((warning: WebpackError, compilation: Compilation) => boolean)> | undefined)",
        value: input.ignoreWarnings
    })) && input.ignoreWarnings.map((elem, _index557) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index557 + "]",
        expected: "(RegExp | __type.o55)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index557 + "]",
        expected: "(RegExp | __type.o55)",
        value: elem
    })) && ("function" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index557 + "]",
        expected: "(RegExp | __type.o55)",
        value: elem
    })) && _vo247(elem, _path + ".ignoreWarnings[" + _index557 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings[" + _index557 + "]",
        expected: "(RegExp | __type.o55)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignoreWarnings",
        expected: "(Array<RegExp | { file?: RegExp; message?: RegExp; module?: RegExp; } | ((warning: WebpackError, compilation: Compilation) => boolean)> | undefined)",
        value: input.ignoreWarnings
    }), undefined === input.infrastructureLogging || ("object" === typeof input.infrastructureLogging && null !== input.infrastructureLogging && false === Array.isArray(input.infrastructureLogging) || _report(_exceptionable, {
        path: _path + ".infrastructureLogging",
        expected: "(InfrastructureLogging.o1 | undefined)",
        value: input.infrastructureLogging
    })) && _vo248(input.infrastructureLogging, _path + ".infrastructureLogging", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".infrastructureLogging",
        expected: "(InfrastructureLogging.o1 | undefined)",
        value: input.infrastructureLogging
    }), undefined === input.loader || ("object" === typeof input.loader && null !== input.loader && false === Array.isArray(input.loader) || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(Loader.o1 | undefined)",
        value: input.loader
    })) && _vo249(input.loader, _path + ".loader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(Loader.o1 | undefined)",
        value: input.loader
    }), undefined === input.mode || "none" === input.mode || "development" === input.mode || "production" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"development\" | \"none\" | \"production\" | undefined)",
        value: input.mode
    }), undefined === input["module"] || ("object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(ModuleOptions.o1 | undefined)",
        value: input["module"]
    })) && _vo250(input["module"], _path + "[\"module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(ModuleOptions.o1 | undefined)",
        value: input["module"]
    }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (null !== input.node || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })) && (undefined === input.node || false === input.node || ("object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })) && _vo323(input.node, _path + ".node", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })), undefined === input.optimization || ("object" === typeof input.optimization && null !== input.optimization && false === Array.isArray(input.optimization) || _report(_exceptionable, {
        path: _path + ".optimization",
        expected: "(Optimization.o1 | undefined)",
        value: input.optimization
    })) && _vo325(input.optimization, _path + ".optimization", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".optimization",
        expected: "(Optimization.o1 | undefined)",
        value: input.optimization
    }), undefined === input.output || ("object" === typeof input.output && null !== input.output && false === Array.isArray(input.output) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output.o1 | undefined)",
        value: input.output
    })) && _vo351(input.output, _path + ".output", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".output",
        expected: "(Output.o1 | undefined)",
        value: input.output
    }), undefined === input.parallelism || "number" === typeof input.parallelism || _report(_exceptionable, {
        path: _path + ".parallelism",
        expected: "(number | undefined)",
        value: input.parallelism
    }), (null !== input.performance || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(PerformanceOptions | false | undefined)",
        value: input.performance
    })) && (undefined === input.performance || false === input.performance || ("object" === typeof input.performance && null !== input.performance && false === Array.isArray(input.performance) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(PerformanceOptions | false | undefined)",
        value: input.performance
    })) && _vo357(input.performance, _path + ".performance", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".performance",
        expected: "(PerformanceOptions | false | undefined)",
        value: input.performance
    })), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<false | \"\" | 0 | WebpackPluginInstance | ((this: Compiler, compiler: Compiler) => void) | null | undefined> | undefined)",
        value: input.plugins
    })) && input.plugins.map((elem, _index558) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index558 + "]",
        expected: "(\"\" | 0 | WebpackPluginInstance.o1 | false | null | undefined)",
        value: elem
    })) && _vo326(elem, _path + ".plugins[" + _index558 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index558 + "]",
        expected: "(\"\" | 0 | WebpackPluginInstance.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<false | \"\" | 0 | WebpackPluginInstance | ((this: Compiler, compiler: Compiler) => void) | null | undefined> | undefined)",
        value: input.plugins
    }), undefined === input.profile || "boolean" === typeof input.profile || _report(_exceptionable, {
        path: _path + ".profile",
        expected: "(boolean | undefined)",
        value: input.profile
    }), undefined === input.recordsInputPath || false === input.recordsInputPath || "string" === typeof input.recordsInputPath || _report(_exceptionable, {
        path: _path + ".recordsInputPath",
        expected: "(false | string | undefined)",
        value: input.recordsInputPath
    }), undefined === input.recordsOutputPath || false === input.recordsOutputPath || "string" === typeof input.recordsOutputPath || _report(_exceptionable, {
        path: _path + ".recordsOutputPath",
        expected: "(false | string | undefined)",
        value: input.recordsOutputPath
    }), undefined === input.recordsPath || false === input.recordsPath || "string" === typeof input.recordsPath || _report(_exceptionable, {
        path: _path + ".recordsPath",
        expected: "(false | string | undefined)",
        value: input.recordsPath
    }), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolve
    })) && _vo259(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolve
    }), undefined === input.resolveLoader || ("object" === typeof input.resolveLoader && null !== input.resolveLoader && false === Array.isArray(input.resolveLoader) || _report(_exceptionable, {
        path: _path + ".resolveLoader",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolveLoader
    })) && _vo259(input.resolveLoader, _path + ".resolveLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolveLoader",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolveLoader
    }), undefined === input.snapshot || ("object" === typeof input.snapshot && null !== input.snapshot && false === Array.isArray(input.snapshot) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(SnapshotOptionsWebpackOptions | undefined)",
        value: input.snapshot
    })) && _vo358(input.snapshot, _path + ".snapshot", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".snapshot",
        expected: "(SnapshotOptionsWebpackOptions | undefined)",
        value: input.snapshot
    }), (null !== input.stats || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })) && (undefined === input.stats || "none" === input.stats || "verbose" === input.stats || "normal" === input.stats || "errors-only" === input.stats || "errors-warnings" === input.stats || "minimal" === input.stats || "detailed" === input.stats || "summary" === input.stats || "boolean" === typeof input.stats || ("object" === typeof input.stats && null !== input.stats && false === Array.isArray(input.stats) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })) && _vo160(input.stats, _path + ".stats", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stats",
        expected: "(\"detailed\" | \"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"summary\" | \"verbose\" | StatsOptions.o1 | boolean | undefined)",
        value: input.stats
    })), (null !== input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | false | string | undefined)",
        value: input.target
    })) && (undefined === input.target || false === input.target || "string" === typeof input.target || (Array.isArray(input.target) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | false | string | undefined)",
        value: input.target
    })) && input.target.map((elem, _index559) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".target[" + _index559 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(Array<string> | false | string | undefined)",
        value: input.target
    })), undefined === input.watch || "boolean" === typeof input.watch || _report(_exceptionable, {
        path: _path + ".watch",
        expected: "(boolean | undefined)",
        value: input.watch
    }), undefined === input.watchOptions || ("object" === typeof input.watchOptions && null !== input.watchOptions && false === Array.isArray(input.watchOptions) || _report(_exceptionable, {
        path: _path + ".watchOptions",
        expected: "(WatchOptions.o2 | undefined)",
        value: input.watchOptions
    })) && _vo363(input.watchOptions, _path + ".watchOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchOptions",
        expected: "(WatchOptions.o2 | undefined)",
        value: input.watchOptions
    }), undefined === input.devServer || ("object" === typeof input.devServer && null !== input.devServer && false === Array.isArray(input.devServer) || _report(_exceptionable, {
        path: _path + ".devServer",
        expected: "(Configuration.o1 | undefined)",
        value: input.devServer
    })) && _vo364(input.devServer, _path + ".devServer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devServer",
        expected: "(Configuration.o1 | undefined)",
        value: input.devServer
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "bail", "cache", "context", "dependencies", "devtool", "entry", "experiments", "extends", "externals", "externalsPresets", "externalsType", "ignoreWarnings", "infrastructureLogging", "loader", "mode", "module", "name", "node", "optimization", "output", "parallelism", "performance", "plugins", "profile", "recordsInputPath", "recordsOutputPath", "recordsPath", "resolve", "resolveLoader", "snapshot", "stats", "target", "watch", "watchOptions", "devServer"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo229 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo230 = (input, _path, _exceptionable = true) => [undefined === input.allowCollectingMemory || "boolean" === typeof input.allowCollectingMemory || _report(_exceptionable, {
        path: _path + ".allowCollectingMemory",
        expected: "(boolean | undefined)",
        value: input.allowCollectingMemory
    }), undefined === input.buildDependencies || ("object" === typeof input.buildDependencies && null !== input.buildDependencies && false === Array.isArray(input.buildDependencies) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(__type.o52 | undefined)",
        value: input.buildDependencies
    })) && _vo231(input.buildDependencies, _path + ".buildDependencies", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(__type.o52 | undefined)",
        value: input.buildDependencies
    }), undefined === input.cacheDirectory || "string" === typeof input.cacheDirectory || _report(_exceptionable, {
        path: _path + ".cacheDirectory",
        expected: "(string | undefined)",
        value: input.cacheDirectory
    }), undefined === input.cacheLocation || "string" === typeof input.cacheLocation || _report(_exceptionable, {
        path: _path + ".cacheLocation",
        expected: "(string | undefined)",
        value: input.cacheLocation
    }), undefined === input.compression || false === input.compression || "gzip" === input.compression || "brotli" === input.compression || _report(_exceptionable, {
        path: _path + ".compression",
        expected: "(\"brotli\" | \"gzip\" | false | undefined)",
        value: input.compression
    }), undefined === input.hashAlgorithm || "string" === typeof input.hashAlgorithm || _report(_exceptionable, {
        path: _path + ".hashAlgorithm",
        expected: "(string | undefined)",
        value: input.hashAlgorithm
    }), undefined === input.idleTimeout || "number" === typeof input.idleTimeout || _report(_exceptionable, {
        path: _path + ".idleTimeout",
        expected: "(number | undefined)",
        value: input.idleTimeout
    }), undefined === input.idleTimeoutAfterLargeChanges || "number" === typeof input.idleTimeoutAfterLargeChanges || _report(_exceptionable, {
        path: _path + ".idleTimeoutAfterLargeChanges",
        expected: "(number | undefined)",
        value: input.idleTimeoutAfterLargeChanges
    }), undefined === input.idleTimeoutForInitialStore || "number" === typeof input.idleTimeoutForInitialStore || _report(_exceptionable, {
        path: _path + ".idleTimeoutForInitialStore",
        expected: "(number | undefined)",
        value: input.idleTimeoutForInitialStore
    }), undefined === input.immutablePaths || (Array.isArray(input.immutablePaths) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    })) && input.immutablePaths.map((elem, _index560) => (null !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index560 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index560 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index560 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    }), undefined === input.managedPaths || (Array.isArray(input.managedPaths) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    })) && input.managedPaths.map((elem, _index561) => (null !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index561 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index561 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index561 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    }), undefined === input.maxAge || "number" === typeof input.maxAge || _report(_exceptionable, {
        path: _path + ".maxAge",
        expected: "(number | undefined)",
        value: input.maxAge
    }), undefined === input.maxMemoryGenerations || "number" === typeof input.maxMemoryGenerations || _report(_exceptionable, {
        path: _path + ".maxMemoryGenerations",
        expected: "(number | undefined)",
        value: input.maxMemoryGenerations
    }), undefined === input.memoryCacheUnaffected || "boolean" === typeof input.memoryCacheUnaffected || _report(_exceptionable, {
        path: _path + ".memoryCacheUnaffected",
        expected: "(boolean | undefined)",
        value: input.memoryCacheUnaffected
    }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), undefined === input.profile || "boolean" === typeof input.profile || _report(_exceptionable, {
        path: _path + ".profile",
        expected: "(boolean | undefined)",
        value: input.profile
    }), undefined === input.readonly || "boolean" === typeof input.readonly || _report(_exceptionable, {
        path: _path + ".readonly",
        expected: "(boolean | undefined)",
        value: input.readonly
    }), undefined === input.store || "pack" === input.store || _report(_exceptionable, {
        path: _path + ".store",
        expected: "(\"pack\" | undefined)",
        value: input.store
    }), "filesystem" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"filesystem\"",
        value: input.type
    }), undefined === input.version || "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(string | undefined)",
        value: input.version
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["allowCollectingMemory", "buildDependencies", "cacheDirectory", "cacheLocation", "compression", "hashAlgorithm", "idleTimeout", "idleTimeoutAfterLargeChanges", "idleTimeoutForInitialStore", "immutablePaths", "managedPaths", "maxAge", "maxMemoryGenerations", "memoryCacheUnaffected", "name", "profile", "readonly", "store", "type", "version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo231 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Array<string>",
            value: value
        })) && value.map((elem, _index562) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index562 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "Array<string>",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo232 = (input, _path, _exceptionable = true) => [undefined === input.cacheUnaffected || "boolean" === typeof input.cacheUnaffected || _report(_exceptionable, {
        path: _path + ".cacheUnaffected",
        expected: "(boolean | undefined)",
        value: input.cacheUnaffected
    }), undefined === input.maxGenerations || "number" === typeof input.maxGenerations || _report(_exceptionable, {
        path: _path + ".maxGenerations",
        expected: "(number | undefined)",
        value: input.maxGenerations
    }), "memory" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "\"memory\"",
        value: input.type
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["cacheUnaffected", "maxGenerations", "type"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo233 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o1 | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o1 | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index563) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index563 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && _vo234(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o1 | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o1 | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo234 = (input, _path, _exceptionable = true) => [undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks || _report(_exceptionable, {
        path: _path + ".asyncChunks",
        expected: "(boolean | undefined)",
        value: input.asyncChunks
    }), undefined === input.baseUri || "string" === typeof input.baseUri || _report(_exceptionable, {
        path: _path + ".baseUri",
        expected: "(string | undefined)",
        value: input.baseUri
    }), undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading || _report(_exceptionable, {
        path: _path + ".chunkLoading",
        expected: "(false | string | undefined)",
        value: input.chunkLoading
    }), (null !== input.dependOn || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && (undefined === input.dependOn || "string" === typeof input.dependOn || (Array.isArray(input.dependOn) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && input.dependOn.map((elem, _index564) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dependOn[" + _index564 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && (undefined !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && ("string" === typeof input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && input["import"].map((elem, _index565) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index565 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })), null === input.layer || undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(null | string | undefined)",
        value: input.layer
    }), undefined === input.library || ("object" === typeof input.library && null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions.o1 | undefined)",
        value: input.library
    })) && _vo235(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions.o1 | undefined)",
        value: input.library
    }), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(false | string | undefined)",
        value: input.runtime
    }), undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading || _report(_exceptionable, {
        path: _path + ".wasmLoading",
        expected: "(false | string | undefined)",
        value: input.wasmLoading
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asyncChunks", "baseUri", "chunkLoading", "dependOn", "filename", "import", "layer", "library", "publicPath", "runtime", "wasmLoading"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo235 = (input, _path, _exceptionable = true) => [undefined === input.amdContainer || "string" === typeof input.amdContainer || _report(_exceptionable, {
        path: _path + ".amdContainer",
        expected: "(string | undefined)",
        value: input.amdContainer
    }), (null !== input.auxiliaryComment || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })) && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || ("object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })) && _vo236(input.auxiliaryComment, _path + ".auxiliaryComment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })), (null !== input["export"] || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })) && (undefined === input["export"] || "string" === typeof input["export"] || (Array.isArray(input["export"]) || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })) && input["export"].map((elem, _index566) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"export\"][" + _index566 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"export\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["export"]
    })), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | string | undefined)",
        value: input.name
    })) && (undefined === input.name || "string" === typeof input.name || (Array.isArray(input.name) && input.name.map((elem, _index567) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".name[" + _index567 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.name && null !== input.name && false === Array.isArray(input.name) && _vo237(input.name, _path + ".name", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | string | undefined)",
        value: input.name
    })) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | string | undefined)",
        value: input.name
    })), "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "string",
        value: input.type
    }), undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine || _report(_exceptionable, {
        path: _path + ".umdNamedDefine",
        expected: "(boolean | undefined)",
        value: input.umdNamedDefine
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amdContainer", "auxiliaryComment", "export", "name", "type", "umdNamedDefine"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo236 = (input, _path, _exceptionable = true) => [undefined === input.amd || "string" === typeof input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(string | undefined)",
        value: input.amd
    }), undefined === input.commonjs || "string" === typeof input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(string | undefined)",
        value: input.commonjs
    }), undefined === input.commonjs2 || "string" === typeof input.commonjs2 || _report(_exceptionable, {
        path: _path + ".commonjs2",
        expected: "(string | undefined)",
        value: input.commonjs2
    }), undefined === input.root || "string" === typeof input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(string | undefined)",
        value: input.root
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "commonjs", "commonjs2", "root"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo237 = (input, _path, _exceptionable = true) => [undefined === input.amd || "string" === typeof input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(string | undefined)",
        value: input.amd
    }), undefined === input.commonjs || "string" === typeof input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(string | undefined)",
        value: input.commonjs
    }), (null !== input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })) && (undefined === input.root || "string" === typeof input.root || (Array.isArray(input.root) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })) && input.root.map((elem, _index568) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".root[" + _index568 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(Array<string> | string | undefined)",
        value: input.root
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "commonjs", "root"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo238 = (input, _path, _exceptionable = true) => [undefined === input.asyncWebAssembly || "boolean" === typeof input.asyncWebAssembly || _report(_exceptionable, {
        path: _path + ".asyncWebAssembly",
        expected: "(boolean | undefined)",
        value: input.asyncWebAssembly
    }), undefined === input.backCompat || "boolean" === typeof input.backCompat || _report(_exceptionable, {
        path: _path + ".backCompat",
        expected: "(boolean | undefined)",
        value: input.backCompat
    }), undefined === input.cacheUnaffected || "boolean" === typeof input.cacheUnaffected || _report(_exceptionable, {
        path: _path + ".cacheUnaffected",
        expected: "(boolean | undefined)",
        value: input.cacheUnaffected
    }), undefined === input.futureDefaults || "boolean" === typeof input.futureDefaults || _report(_exceptionable, {
        path: _path + ".futureDefaults",
        expected: "(boolean | undefined)",
        value: input.futureDefaults
    }), undefined === input.layers || "boolean" === typeof input.layers || _report(_exceptionable, {
        path: _path + ".layers",
        expected: "(boolean | undefined)",
        value: input.layers
    }), undefined === input.outputModule || "boolean" === typeof input.outputModule || _report(_exceptionable, {
        path: _path + ".outputModule",
        expected: "(boolean | undefined)",
        value: input.outputModule
    }), undefined === input.syncWebAssembly || "boolean" === typeof input.syncWebAssembly || _report(_exceptionable, {
        path: _path + ".syncWebAssembly",
        expected: "(boolean | undefined)",
        value: input.syncWebAssembly
    }), undefined === input.topLevelAwait || "boolean" === typeof input.topLevelAwait || _report(_exceptionable, {
        path: _path + ".topLevelAwait",
        expected: "(boolean | undefined)",
        value: input.topLevelAwait
    }), (null !== input.buildHttp || _report(_exceptionable, {
        path: _path + ".buildHttp",
        expected: "(Array<string | RegExp | ((uri: string) => boolean)>.o1 | HttpUriOptions | undefined)",
        value: input.buildHttp
    })) && (undefined === input.buildHttp || (Array.isArray(input.buildHttp) && input.buildHttp.map((elem, _index569) => (null !== elem || _report(_exceptionable, {
        path: _path + ".buildHttp[" + _index569 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".buildHttp[" + _index569 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".buildHttp[" + _index569 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.buildHttp && null !== input.buildHttp && _vo239(input.buildHttp, _path + ".buildHttp", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buildHttp",
        expected: "(Array<string | RegExp | ((uri: string) => boolean)>.o1 | HttpUriOptions | undefined)",
        value: input.buildHttp
    })) || _report(_exceptionable, {
        path: _path + ".buildHttp",
        expected: "(Array<string | RegExp | ((uri: string) => boolean)>.o1 | HttpUriOptions | undefined)",
        value: input.buildHttp
    })), undefined === input.css || "boolean" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(boolean | undefined)",
        value: input.css
    }), (null !== input.lazyCompilation || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions.o1 | boolean | undefined)",
        value: input.lazyCompilation
    })) && (undefined === input.lazyCompilation || "boolean" === typeof input.lazyCompilation || ("object" === typeof input.lazyCompilation && null !== input.lazyCompilation && false === Array.isArray(input.lazyCompilation) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions.o1 | boolean | undefined)",
        value: input.lazyCompilation
    })) && _vo240(input.lazyCompilation, _path + ".lazyCompilation", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lazyCompilation",
        expected: "(LazyCompilationOptions.o1 | boolean | undefined)",
        value: input.lazyCompilation
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asyncWebAssembly", "backCompat", "cacheUnaffected", "futureDefaults", "layers", "outputModule", "syncWebAssembly", "topLevelAwait", "buildHttp", "css", "lazyCompilation"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo239 = (input, _path, _exceptionable = true) => [(Array.isArray(input.allowedUris) || _report(_exceptionable, {
        path: _path + ".allowedUris",
        expected: "Array<string | RegExp | ((uri: string) => boolean)>",
        value: input.allowedUris
    })) && input.allowedUris.map((elem, _index570) => (null !== elem || _report(_exceptionable, {
        path: _path + ".allowedUris[" + _index570 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".allowedUris[" + _index570 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".allowedUris[" + _index570 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".allowedUris",
        expected: "Array<string | RegExp | ((uri: string) => boolean)>",
        value: input.allowedUris
    }), undefined === input.cacheLocation || false === input.cacheLocation || "string" === typeof input.cacheLocation || _report(_exceptionable, {
        path: _path + ".cacheLocation",
        expected: "(false | string | undefined)",
        value: input.cacheLocation
    }), undefined === input.frozen || "boolean" === typeof input.frozen || _report(_exceptionable, {
        path: _path + ".frozen",
        expected: "(boolean | undefined)",
        value: input.frozen
    }), undefined === input.lockfileLocation || "string" === typeof input.lockfileLocation || _report(_exceptionable, {
        path: _path + ".lockfileLocation",
        expected: "(string | undefined)",
        value: input.lockfileLocation
    }), undefined === input.proxy || "string" === typeof input.proxy || _report(_exceptionable, {
        path: _path + ".proxy",
        expected: "(string | undefined)",
        value: input.proxy
    }), undefined === input.upgrade || "boolean" === typeof input.upgrade || _report(_exceptionable, {
        path: _path + ".upgrade",
        expected: "(boolean | undefined)",
        value: input.upgrade
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["allowedUris", "cacheLocation", "frozen", "lockfileLocation", "proxy", "upgrade"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo240 = (input, _path, _exceptionable = true) => [(null !== input.backend || _report(_exceptionable, {
        path: _path + ".backend",
        expected: "(LazyCompilationDefaultBackendOptions.o1 | undefined)",
        value: input.backend
    })) && (undefined === input.backend || "function" === typeof input.backend || ("object" === typeof input.backend && null !== input.backend && false === Array.isArray(input.backend) || _report(_exceptionable, {
        path: _path + ".backend",
        expected: "(LazyCompilationDefaultBackendOptions.o1 | undefined)",
        value: input.backend
    })) && _vo241(input.backend, _path + ".backend", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".backend",
        expected: "(LazyCompilationDefaultBackendOptions.o1 | undefined)",
        value: input.backend
    })), undefined === input.entries || "boolean" === typeof input.entries || _report(_exceptionable, {
        path: _path + ".entries",
        expected: "(boolean | undefined)",
        value: input.entries
    }), undefined === input.imports || "boolean" === typeof input.imports || _report(_exceptionable, {
        path: _path + ".imports",
        expected: "(boolean | undefined)",
        value: input.imports
    }), (null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(RegExp | string | undefined)",
        value: input.test
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["backend", "entries", "imports", "test"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo241 = (input, _path, _exceptionable = true) => [undefined === input.client || "string" === typeof input.client || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(string | undefined)",
        value: input.client
    }), (null !== input.listen || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })) && (undefined === input.listen || "function" === typeof input.listen || "number" === typeof input.listen || ("object" === typeof input.listen && null !== input.listen && false === Array.isArray(input.listen) || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })) && _vo13(input.listen, _path + ".listen", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".listen",
        expected: "(\"net\".ListenOptions | number | undefined)",
        value: input.listen
    })), undefined === input.protocol || "https" === input.protocol || "http" === input.protocol || _report(_exceptionable, {
        path: _path + ".protocol",
        expected: "(\"http\" | \"https\" | undefined)",
        value: input.protocol
    }), (null !== input.server || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse>.o1 | undefined)",
        value: input.server
    })) && (undefined === input.server || "function" === typeof input.server || ("object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse>.o1 | undefined)",
        value: input.server
    })) && _vu20(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse>.o1 | undefined)",
        value: input.server
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["client", "listen", "protocol", "server"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo242 = (input, _path, _exceptionable = true) => [undefined === input.ALPNCallback || true || _report(_exceptionable, {
        path: _path + ".ALPNCallback",
        expected: "undefined",
        value: input.ALPNCallback
    }), undefined === input.allowPartialTrustChain || "boolean" === typeof input.allowPartialTrustChain || _report(_exceptionable, {
        path: _path + ".allowPartialTrustChain",
        expected: "(boolean | undefined)",
        value: input.allowPartialTrustChain
    }), (null !== input.ca || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) && (undefined === input.ca || "string" === typeof input.ca || (Array.isArray(input.ca) && input.ca.map((elem, _index571) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index571 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index571 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".ca[" + _index571 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".ca[" + _index571 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca[" + _index571 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.ca && null !== input.ca && _vo27(input.ca, _path + ".ca", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })) || _report(_exceptionable, {
        path: _path + ".ca",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.ca
    })), (null !== input.cert || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) && (undefined === input.cert || "string" === typeof input.cert || (Array.isArray(input.cert) && input.cert.map((elem, _index572) => (null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index572 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index572 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".cert[" + _index572 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".cert[" + _index572 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert[" + _index572 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.cert && null !== input.cert && _vo27(input.cert, _path + ".cert", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })) || _report(_exceptionable, {
        path: _path + ".cert",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.cert
    })), undefined === input.sigalgs || "string" === typeof input.sigalgs || _report(_exceptionable, {
        path: _path + ".sigalgs",
        expected: "(string | undefined)",
        value: input.sigalgs
    }), undefined === input.ciphers || "string" === typeof input.ciphers || _report(_exceptionable, {
        path: _path + ".ciphers",
        expected: "(string | undefined)",
        value: input.ciphers
    }), undefined === input.clientCertEngine || "string" === typeof input.clientCertEngine || _report(_exceptionable, {
        path: _path + ".clientCertEngine",
        expected: "(string | undefined)",
        value: input.clientCertEngine
    }), (null !== input.crl || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) && (undefined === input.crl || "string" === typeof input.crl || (Array.isArray(input.crl) && input.crl.map((elem, _index573) => (null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index573 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index573 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".crl[" + _index573 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    })) && _vo27(elem, _path + ".crl[" + _index573 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl[" + _index573 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.crl && null !== input.crl && _vo27(input.crl, _path + ".crl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })) || _report(_exceptionable, {
        path: _path + ".crl",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike>> | string | undefined)",
        value: input.crl
    })), (null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && (undefined === input.dhparam || "string" === typeof input.dhparam || ("object" === typeof input.dhparam && null !== input.dhparam || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })) && _vo27(input.dhparam, _path + ".dhparam", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dhparam",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | string | undefined)",
        value: input.dhparam
    })), undefined === input.ecdhCurve || "string" === typeof input.ecdhCurve || _report(_exceptionable, {
        path: _path + ".ecdhCurve",
        expected: "(string | undefined)",
        value: input.ecdhCurve
    }), undefined === input.honorCipherOrder || "boolean" === typeof input.honorCipherOrder || _report(_exceptionable, {
        path: _path + ".honorCipherOrder",
        expected: "(boolean | undefined)",
        value: input.honorCipherOrder
    }), (null !== input.key || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) && (undefined === input.key || "string" === typeof input.key || (Array.isArray(input.key) && input.key.map((elem, _index574) => (null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index574 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index574 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".key[" + _index574 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    })) && _vu0(elem, _path + ".key[" + _index574 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key[" + _index574 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.key && null !== input.key && _vo27(input.key, _path + ".key", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })) || _report(_exceptionable, {
        path: _path + ".key",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | KeyObject> | string | undefined)",
        value: input.key
    })), undefined === input.privateKeyEngine || "string" === typeof input.privateKeyEngine || _report(_exceptionable, {
        path: _path + ".privateKeyEngine",
        expected: "(string | undefined)",
        value: input.privateKeyEngine
    }), undefined === input.privateKeyIdentifier || "string" === typeof input.privateKeyIdentifier || _report(_exceptionable, {
        path: _path + ".privateKeyIdentifier",
        expected: "(string | undefined)",
        value: input.privateKeyIdentifier
    }), undefined === input.maxVersion || "TLSv1.3" === input.maxVersion || "TLSv1.2" === input.maxVersion || "TLSv1.1" === input.maxVersion || "TLSv1" === input.maxVersion || _report(_exceptionable, {
        path: _path + ".maxVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.maxVersion
    }), undefined === input.minVersion || "TLSv1.3" === input.minVersion || "TLSv1.2" === input.minVersion || "TLSv1.1" === input.minVersion || "TLSv1" === input.minVersion || _report(_exceptionable, {
        path: _path + ".minVersion",
        expected: "(\"TLSv1\" | \"TLSv1.1\" | \"TLSv1.2\" | \"TLSv1.3\" | undefined)",
        value: input.minVersion
    }), undefined === input.passphrase || "string" === typeof input.passphrase || _report(_exceptionable, {
        path: _path + ".passphrase",
        expected: "(string | undefined)",
        value: input.passphrase
    }), (null !== input.pfx || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) && (undefined === input.pfx || "string" === typeof input.pfx || (Array.isArray(input.pfx) && input.pfx.map((elem, _index575) => (null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index575 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index575 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".pfx[" + _index575 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    })) && _vu1(elem, _path + ".pfx[" + _index575 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx[" + _index575 + "]",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.pfx && null !== input.pfx && _vo27(input.pfx, _path + ".pfx", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })) || _report(_exceptionable, {
        path: _path + ".pfx",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | Array<string | Buffer<ArrayBufferLike> | PxfObject> | string | undefined)",
        value: input.pfx
    })), undefined === input.secureOptions || "number" === typeof input.secureOptions || _report(_exceptionable, {
        path: _path + ".secureOptions",
        expected: "(number | undefined)",
        value: input.secureOptions
    }), undefined === input.secureProtocol || "string" === typeof input.secureProtocol || _report(_exceptionable, {
        path: _path + ".secureProtocol",
        expected: "(string | undefined)",
        value: input.secureProtocol
    }), undefined === input.sessionIdContext || "string" === typeof input.sessionIdContext || _report(_exceptionable, {
        path: _path + ".sessionIdContext",
        expected: "(string | undefined)",
        value: input.sessionIdContext
    }), undefined === input.ticketKeys || ("object" === typeof input.ticketKeys && null !== input.ticketKeys || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    })) && _vo27(input.ticketKeys, _path + ".ticketKeys", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ticketKeys",
        expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | undefined)",
        value: input.ticketKeys
    }), undefined === input.sessionTimeout || "number" === typeof input.sessionTimeout || _report(_exceptionable, {
        path: _path + ".sessionTimeout",
        expected: "(number | undefined)",
        value: input.sessionTimeout
    }), undefined === input.handshakeTimeout || "number" === typeof input.handshakeTimeout || _report(_exceptionable, {
        path: _path + ".handshakeTimeout",
        expected: "(number | undefined)",
        value: input.handshakeTimeout
    }), undefined === input.pskIdentityHint || "string" === typeof input.pskIdentityHint || _report(_exceptionable, {
        path: _path + ".pskIdentityHint",
        expected: "(string | undefined)",
        value: input.pskIdentityHint
    }), undefined === input.secureContext || ("object" === typeof input.secureContext && null !== input.secureContext || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    })) && _vo30(input.secureContext, _path + ".secureContext", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".secureContext",
        expected: "(\"tls\".SecureContext | undefined)",
        value: input.secureContext
    }), undefined === input.enableTrace || "boolean" === typeof input.enableTrace || _report(_exceptionable, {
        path: _path + ".enableTrace",
        expected: "(boolean | undefined)",
        value: input.enableTrace
    }), undefined === input.requestCert || "boolean" === typeof input.requestCert || _report(_exceptionable, {
        path: _path + ".requestCert",
        expected: "(boolean | undefined)",
        value: input.requestCert
    }), (null !== input.ALPNProtocols || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (undefined === input.ALPNProtocols || input.ALPNProtocols instanceof Uint8Array || (Array.isArray(input.ALPNProtocols) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })) && (_vp2(input.ALPNProtocols, _path + ".ALPNProtocols", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "Array<string> | Array<Uint8Array<ArrayBufferLike>>",
        value: input.ALPNProtocols
    })) || _report(_exceptionable, {
        path: _path + ".ALPNProtocols",
        expected: "(Array<Uint8Array<ArrayBufferLike>> | Array<string> | Uint8Array | undefined)",
        value: input.ALPNProtocols
    })), undefined === input.SNICallback || true || _report(_exceptionable, {
        path: _path + ".SNICallback",
        expected: "undefined",
        value: input.SNICallback
    }), undefined === input.rejectUnauthorized || "boolean" === typeof input.rejectUnauthorized || _report(_exceptionable, {
        path: _path + ".rejectUnauthorized",
        expected: "(boolean | undefined)",
        value: input.rejectUnauthorized
    }), undefined === input.allowHalfOpen || "boolean" === typeof input.allowHalfOpen || _report(_exceptionable, {
        path: _path + ".allowHalfOpen",
        expected: "(boolean | undefined)",
        value: input.allowHalfOpen
    }), undefined === input.pauseOnConnect || "boolean" === typeof input.pauseOnConnect || _report(_exceptionable, {
        path: _path + ".pauseOnConnect",
        expected: "(boolean | undefined)",
        value: input.pauseOnConnect
    }), undefined === input.noDelay || "boolean" === typeof input.noDelay || _report(_exceptionable, {
        path: _path + ".noDelay",
        expected: "(boolean | undefined)",
        value: input.noDelay
    }), undefined === input.keepAlive || "boolean" === typeof input.keepAlive || _report(_exceptionable, {
        path: _path + ".keepAlive",
        expected: "(boolean | undefined)",
        value: input.keepAlive
    }), undefined === input.keepAliveInitialDelay || "number" === typeof input.keepAliveInitialDelay || _report(_exceptionable, {
        path: _path + ".keepAliveInitialDelay",
        expected: "(number | undefined)",
        value: input.keepAliveInitialDelay
    }), undefined === input.highWaterMark || "number" === typeof input.highWaterMark || _report(_exceptionable, {
        path: _path + ".highWaterMark",
        expected: "(number | undefined)",
        value: input.highWaterMark
    }), undefined === input.blockList || ("object" === typeof input.blockList && null !== input.blockList || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    })) && _vo31(input.blockList, _path + ".blockList", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".blockList",
        expected: "(\"net\".BlockList | undefined)",
        value: input.blockList
    }), undefined === input.IncomingMessage || ("object" === typeof input.IncomingMessage && null !== input.IncomingMessage || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    })) && _vo16(input.IncomingMessage, _path + ".IncomingMessage", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".IncomingMessage",
        expected: "(\"http\".IncomingMessage | undefined)",
        value: input.IncomingMessage
    }), undefined === input.ServerResponse || ("object" === typeof input.ServerResponse && null !== input.ServerResponse || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    })) && _vo24(input.ServerResponse, _path + ".ServerResponse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".ServerResponse",
        expected: "(\"http\".ServerResponse | undefined)",
        value: input.ServerResponse
    }), undefined === input.requestTimeout || "number" === typeof input.requestTimeout || _report(_exceptionable, {
        path: _path + ".requestTimeout",
        expected: "(number | undefined)",
        value: input.requestTimeout
    }), undefined === input.joinDuplicateHeaders || "boolean" === typeof input.joinDuplicateHeaders || _report(_exceptionable, {
        path: _path + ".joinDuplicateHeaders",
        expected: "(boolean | undefined)",
        value: input.joinDuplicateHeaders
    }), undefined === input.keepAliveTimeout || "number" === typeof input.keepAliveTimeout || _report(_exceptionable, {
        path: _path + ".keepAliveTimeout",
        expected: "(number | undefined)",
        value: input.keepAliveTimeout
    }), undefined === input.connectionsCheckingInterval || "number" === typeof input.connectionsCheckingInterval || _report(_exceptionable, {
        path: _path + ".connectionsCheckingInterval",
        expected: "(number | undefined)",
        value: input.connectionsCheckingInterval
    }), undefined === input.insecureHTTPParser || "boolean" === typeof input.insecureHTTPParser || _report(_exceptionable, {
        path: _path + ".insecureHTTPParser",
        expected: "(boolean | undefined)",
        value: input.insecureHTTPParser
    }), undefined === input.maxHeaderSize || "number" === typeof input.maxHeaderSize || _report(_exceptionable, {
        path: _path + ".maxHeaderSize",
        expected: "(number | undefined)",
        value: input.maxHeaderSize
    }), undefined === input.uniqueHeaders || (Array.isArray(input.uniqueHeaders) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    })) && input.uniqueHeaders.map((elem, _index578) => (null !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index578 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index578 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index578 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index579) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index578 + "][" + _index579 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders[" + _index578 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".uniqueHeaders",
        expected: "(Array<string | string[]> | undefined)",
        value: input.uniqueHeaders
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ALPNCallback", "allowPartialTrustChain", "ca", "cert", "sigalgs", "ciphers", "clientCertEngine", "crl", "dhparam", "ecdhCurve", "honorCipherOrder", "key", "privateKeyEngine", "privateKeyIdentifier", "maxVersion", "minVersion", "passphrase", "pfx", "secureOptions", "secureProtocol", "sessionIdContext", "ticketKeys", "sessionTimeout", "handshakeTimeout", "pskIdentityHint", "secureContext", "enableTrace", "requestCert", "ALPNProtocols", "SNICallback", "rejectUnauthorized", "allowHalfOpen", "pauseOnConnect", "noDelay", "keepAlive", "keepAliveInitialDelay", "highWaterMark", "blockList", "IncomingMessage", "ServerResponse", "requestTimeout", "joinDuplicateHeaders", "keepAliveTimeout", "connectionsCheckingInterval", "insecureHTTPParser", "maxHeaderSize", "uniqueHeaders"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo243 = (input, _path, _exceptionable = true) => [(null !== input.byLayer || _report(_exceptionable, {
        path: _path + ".byLayer",
        expected: "(__type.o53 | undefined)",
        value: input.byLayer
    })) && (undefined === input.byLayer || "function" === typeof input.byLayer || ("object" === typeof input.byLayer && null !== input.byLayer && false === Array.isArray(input.byLayer) || _report(_exceptionable, {
        path: _path + ".byLayer",
        expected: "(__type.o53 | undefined)",
        value: input.byLayer
    })) && _vo244(input.byLayer, _path + ".byLayer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".byLayer",
        expected: "(__type.o53 | undefined)",
        value: input.byLayer
    })), false === _exceptionable || Object.keys(input).map(key => {
        if (["byLayer"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | __type.o54 | boolean | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | __type.o54 | boolean | string)",
            value: value
        })) && ("string" === typeof value || "boolean" === typeof value || (Array.isArray(value) && value.map((elem, _index580) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index580 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo245(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | __type.o54 | boolean | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | __type.o54 | boolean | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo244 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
            value: value
        })) && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
            value: value
        })) && _vo243(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExternalItemObjectKnown & ExternalItemObjectUnknown | RegExp | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo245 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo246 = (input, _path, _exceptionable = true) => [undefined === input.electron || "boolean" === typeof input.electron || _report(_exceptionable, {
        path: _path + ".electron",
        expected: "(boolean | undefined)",
        value: input.electron
    }), undefined === input.electronMain || "boolean" === typeof input.electronMain || _report(_exceptionable, {
        path: _path + ".electronMain",
        expected: "(boolean | undefined)",
        value: input.electronMain
    }), undefined === input.electronPreload || "boolean" === typeof input.electronPreload || _report(_exceptionable, {
        path: _path + ".electronPreload",
        expected: "(boolean | undefined)",
        value: input.electronPreload
    }), undefined === input.electronRenderer || "boolean" === typeof input.electronRenderer || _report(_exceptionable, {
        path: _path + ".electronRenderer",
        expected: "(boolean | undefined)",
        value: input.electronRenderer
    }), undefined === input.node || "boolean" === typeof input.node || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(boolean | undefined)",
        value: input.node
    }), undefined === input.nwjs || "boolean" === typeof input.nwjs || _report(_exceptionable, {
        path: _path + ".nwjs",
        expected: "(boolean | undefined)",
        value: input.nwjs
    }), undefined === input.web || "boolean" === typeof input.web || _report(_exceptionable, {
        path: _path + ".web",
        expected: "(boolean | undefined)",
        value: input.web
    }), undefined === input.webAsync || "boolean" === typeof input.webAsync || _report(_exceptionable, {
        path: _path + ".webAsync",
        expected: "(boolean | undefined)",
        value: input.webAsync
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["electron", "electronMain", "electronPreload", "electronRenderer", "node", "nwjs", "web", "webAsync"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo247 = (input, _path, _exceptionable = true) => [undefined === input.file || input.file instanceof RegExp || _report(_exceptionable, {
        path: _path + ".file",
        expected: "(RegExp | undefined)",
        value: input.file
    }), undefined === input.message || input.message instanceof RegExp || _report(_exceptionable, {
        path: _path + ".message",
        expected: "(RegExp | undefined)",
        value: input.message
    }), undefined === input["module"] || input["module"] instanceof RegExp || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(RegExp | undefined)",
        value: input["module"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["file", "message", "module"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo248 = (input, _path, _exceptionable = true) => [undefined === input.appendOnly || "boolean" === typeof input.appendOnly || _report(_exceptionable, {
        path: _path + ".appendOnly",
        expected: "(boolean | undefined)",
        value: input.appendOnly
    }), undefined === input.colors || "boolean" === typeof input.colors || _report(_exceptionable, {
        path: _path + ".colors",
        expected: "(boolean | undefined)",
        value: input.colors
    }), undefined === input.console || ("object" === typeof input.console && null !== input.console || _report(_exceptionable, {
        path: _path + ".console",
        expected: "(\"node:console\".global.Console | undefined)",
        value: input.console
    })) && _vo133(input.console, _path + ".console", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".console",
        expected: "(\"node:console\".global.Console | undefined)",
        value: input.console
    }), (null !== input.debug || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.debug
    })) && (undefined === input.debug || "function" === typeof input.debug || "string" === typeof input.debug || "boolean" === typeof input.debug || input.debug instanceof RegExp || (Array.isArray(input.debug) || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.debug
    })) && input.debug.map((elem, _index581) => (null !== elem || _report(_exceptionable, {
        path: _path + ".debug[" + _index581 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".debug[" + _index581 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".debug[" + _index581 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".debug",
        expected: "(Array<FilterItemTypes>.o1 | RegExp | boolean | string | undefined)",
        value: input.debug
    })), undefined === input.level || "none" === input.level || "log" === input.level || "warn" === input.level || "error" === input.level || "info" === input.level || "verbose" === input.level || _report(_exceptionable, {
        path: _path + ".level",
        expected: "(\"error\" | \"info\" | \"log\" | \"none\" | \"verbose\" | \"warn\" | undefined)",
        value: input.level
    }), undefined === input.stream || ("object" === typeof input.stream && null !== input.stream || _report(_exceptionable, {
        path: _path + ".stream",
        expected: "(global.NodeJS.WritableStream | undefined)",
        value: input.stream
    })) && _vo135(input.stream, _path + ".stream", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stream",
        expected: "(global.NodeJS.WritableStream | undefined)",
        value: input.stream
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["appendOnly", "colors", "console", "debug", "level", "stream"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo249 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo250 = (input, _path, _exceptionable = true) => [undefined === input.defaultRules || (Array.isArray(input.defaultRules) || _report(_exceptionable, {
        path: _path + ".defaultRules",
        expected: "(Array<false | \"\" | 0 | \"...\" | RuleSetRule | null | undefined> | undefined)",
        value: input.defaultRules
    })) && input.defaultRules.map((elem, _index582) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".defaultRules[" + _index582 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })) && _vo251(elem, _path + ".defaultRules[" + _index582 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".defaultRules[" + _index582 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".defaultRules",
        expected: "(Array<false | \"\" | 0 | \"...\" | RuleSetRule | null | undefined> | undefined)",
        value: input.defaultRules
    }), undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical || _report(_exceptionable, {
        path: _path + ".exprContextCritical",
        expected: "(boolean | undefined)",
        value: input.exprContextCritical
    }), undefined === input.exprContextRecursive || "boolean" === typeof input.exprContextRecursive || _report(_exceptionable, {
        path: _path + ".exprContextRecursive",
        expected: "(boolean | undefined)",
        value: input.exprContextRecursive
    }), (null !== input.exprContextRegExp || _report(_exceptionable, {
        path: _path + ".exprContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.exprContextRegExp
    })) && (undefined === input.exprContextRegExp || "boolean" === typeof input.exprContextRegExp || input.exprContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exprContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.exprContextRegExp
    })), undefined === input.exprContextRequest || "string" === typeof input.exprContextRequest || _report(_exceptionable, {
        path: _path + ".exprContextRequest",
        expected: "(string | undefined)",
        value: input.exprContextRequest
    }), undefined === input.generator || ("object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(GeneratorOptionsByModuleType | undefined)",
        value: input.generator
    })) && _vo302(input.generator, _path + ".generator", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(GeneratorOptionsByModuleType | undefined)",
        value: input.generator
    }), (null !== input.noParse || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<string | Function | RegExp> | Function | RegExp | string | undefined)",
        value: input.noParse
    })) && (undefined === input.noParse || "string" === typeof input.noParse || input.noParse instanceof RegExp || (Array.isArray(input.noParse) && input.noParse.map((elem, _index583) => (null !== elem || _report(_exceptionable, {
        path: _path + ".noParse[" + _index583 + "]",
        expected: "(Function | RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".noParse[" + _index583 + "]",
        expected: "(Function | RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".noParse[" + _index583 + "]",
        expected: "(Function | RegExp | string)",
        value: elem
    })) && _vo23(elem, _path + ".noParse[" + _index583 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".noParse[" + _index583 + "]",
        expected: "(Function | RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.noParse && null !== input.noParse && _vo23(input.noParse, _path + ".noParse", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<string | Function | RegExp> | Function | RegExp | string | undefined)",
        value: input.noParse
    })) || _report(_exceptionable, {
        path: _path + ".noParse",
        expected: "(Array<string | Function | RegExp> | Function | RegExp | string | undefined)",
        value: input.noParse
    })), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(ParserOptionsByModuleType | undefined)",
        value: input.parser
    })) && _vo313(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(ParserOptionsByModuleType | undefined)",
        value: input.parser
    }), undefined === input.rules || (Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<false | \"\" | 0 | \"...\" | RuleSetRule | null | undefined> | undefined)",
        value: input.rules
    })) && input.rules.map((elem, _index584) => null === elem || undefined === elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rules[" + _index584 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })) && _vo251(elem, _path + ".rules[" + _index584 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rules[" + _index584 + "]",
        expected: "(\"\" | \"...\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<false | \"\" | 0 | \"...\" | RuleSetRule | null | undefined> | undefined)",
        value: input.rules
    }), undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence || _report(_exceptionable, {
        path: _path + ".strictExportPresence",
        expected: "(boolean | undefined)",
        value: input.strictExportPresence
    }), undefined === input.strictThisContextOnImports || "boolean" === typeof input.strictThisContextOnImports || _report(_exceptionable, {
        path: _path + ".strictThisContextOnImports",
        expected: "(boolean | undefined)",
        value: input.strictThisContextOnImports
    }), undefined === input.unknownContextCritical || "boolean" === typeof input.unknownContextCritical || _report(_exceptionable, {
        path: _path + ".unknownContextCritical",
        expected: "(boolean | undefined)",
        value: input.unknownContextCritical
    }), undefined === input.unknownContextRecursive || "boolean" === typeof input.unknownContextRecursive || _report(_exceptionable, {
        path: _path + ".unknownContextRecursive",
        expected: "(boolean | undefined)",
        value: input.unknownContextRecursive
    }), (null !== input.unknownContextRegExp || _report(_exceptionable, {
        path: _path + ".unknownContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.unknownContextRegExp
    })) && (undefined === input.unknownContextRegExp || "boolean" === typeof input.unknownContextRegExp || input.unknownContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".unknownContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.unknownContextRegExp
    })), undefined === input.unknownContextRequest || "string" === typeof input.unknownContextRequest || _report(_exceptionable, {
        path: _path + ".unknownContextRequest",
        expected: "(string | undefined)",
        value: input.unknownContextRequest
    }), (null !== input.unsafeCache || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(Function | boolean | undefined)",
        value: input.unsafeCache
    })) && (undefined === input.unsafeCache || "boolean" === typeof input.unsafeCache || ("object" === typeof input.unsafeCache && null !== input.unsafeCache || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(Function | boolean | undefined)",
        value: input.unsafeCache
    })) && _vo23(input.unsafeCache, _path + ".unsafeCache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(Function | boolean | undefined)",
        value: input.unsafeCache
    })), undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical || _report(_exceptionable, {
        path: _path + ".wrappedContextCritical",
        expected: "(boolean | undefined)",
        value: input.wrappedContextCritical
    }), undefined === input.wrappedContextRecursive || "boolean" === typeof input.wrappedContextRecursive || _report(_exceptionable, {
        path: _path + ".wrappedContextRecursive",
        expected: "(boolean | undefined)",
        value: input.wrappedContextRecursive
    }), undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".wrappedContextRegExp",
        expected: "(RegExp | undefined)",
        value: input.wrappedContextRegExp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["defaultRules", "exprContextCritical", "exprContextRecursive", "exprContextRegExp", "exprContextRequest", "generator", "noParse", "parser", "rules", "strictExportPresence", "strictThisContextOnImports", "unknownContextCritical", "unknownContextRecursive", "unknownContextRegExp", "unknownContextRequest", "unsafeCache", "wrappedContextCritical", "wrappedContextRecursive", "wrappedContextRegExp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo251 = (input, _path, _exceptionable = true) => [undefined === input.assert || ("object" === typeof input.assert && null !== input.assert && false === Array.isArray(input.assert) || _report(_exceptionable, {
        path: _path + ".assert",
        expected: "(__type.o56 | undefined)",
        value: input.assert
    })) && _vo252(input.assert, _path + ".assert", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assert",
        expected: "(__type.o56 | undefined)",
        value: input.assert
    }), (null !== input.compiler || _report(_exceptionable, {
        path: _path + ".compiler",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.compiler
    })) && (undefined === input.compiler || "function" === typeof input.compiler || "string" === typeof input.compiler || input.compiler instanceof RegExp || (Array.isArray(input.compiler) && input.compiler.map((elem, _index585) => (null !== elem || _report(_exceptionable, {
        path: _path + ".compiler[" + _index585 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".compiler[" + _index585 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".compiler[" + _index585 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".compiler[" + _index585 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".compiler[" + _index585 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".compiler[" + _index585 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".compiler[" + _index585 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.compiler && null !== input.compiler && false === Array.isArray(input.compiler) && _vo253(input.compiler, _path + ".compiler", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".compiler",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.compiler
    })) || _report(_exceptionable, {
        path: _path + ".compiler",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.compiler
    })), (null !== input.dependency || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.dependency
    })) && (undefined === input.dependency || "function" === typeof input.dependency || "string" === typeof input.dependency || input.dependency instanceof RegExp || (Array.isArray(input.dependency) && input.dependency.map((elem, _index586) => (null !== elem || _report(_exceptionable, {
        path: _path + ".dependency[" + _index586 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".dependency[" + _index586 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".dependency[" + _index586 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dependency[" + _index586 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".dependency[" + _index586 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dependency[" + _index586 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".dependency[" + _index586 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.dependency && null !== input.dependency && false === Array.isArray(input.dependency) && _vo253(input.dependency, _path + ".dependency", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.dependency
    })) || _report(_exceptionable, {
        path: _path + ".dependency",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.dependency
    })), undefined === input.descriptionData || ("object" === typeof input.descriptionData && null !== input.descriptionData && false === Array.isArray(input.descriptionData) || _report(_exceptionable, {
        path: _path + ".descriptionData",
        expected: "(__type.o57 | undefined)",
        value: input.descriptionData
    })) && _vo254(input.descriptionData, _path + ".descriptionData", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".descriptionData",
        expected: "(__type.o57 | undefined)",
        value: input.descriptionData
    }), undefined === input.enforce || "pre" === input.enforce || "post" === input.enforce || _report(_exceptionable, {
        path: _path + ".enforce",
        expected: "(\"post\" | \"pre\" | undefined)",
        value: input.enforce
    }), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "function" === typeof input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) && input.exclude.map((elem, _index587) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index587 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index587 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".exclude[" + _index587 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index587 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".exclude[" + _index587 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index587 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index587 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) && _vo255(input.exclude, _path + ".exclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.exclude
    })) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.exclude
    })), undefined === input.generator || ("object" === typeof input.generator && null !== input.generator && false === Array.isArray(input.generator) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(__type.o58 | undefined)",
        value: input.generator
    })) && _vo256(input.generator, _path + ".generator", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".generator",
        expected: "(__type.o58 | undefined)",
        value: input.generator
    }), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.include
    })) && (undefined === input.include || "function" === typeof input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) && input.include.map((elem, _index588) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index588 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index588 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".include[" + _index588 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index588 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".include[" + _index588 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index588 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".include[" + _index588 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) && _vo255(input.include, _path + ".include", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.include
    })) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.include
    })), (null !== input.issuer || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.issuer
    })) && (undefined === input.issuer || "function" === typeof input.issuer || "string" === typeof input.issuer || input.issuer instanceof RegExp || (Array.isArray(input.issuer) && input.issuer.map((elem, _index589) => (null !== elem || _report(_exceptionable, {
        path: _path + ".issuer[" + _index589 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".issuer[" + _index589 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".issuer[" + _index589 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuer[" + _index589 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".issuer[" + _index589 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuer[" + _index589 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".issuer[" + _index589 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.issuer && null !== input.issuer && false === Array.isArray(input.issuer) && _vo255(input.issuer, _path + ".issuer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.issuer
    })) || _report(_exceptionable, {
        path: _path + ".issuer",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.issuer
    })), (null !== input.issuerLayer || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.issuerLayer
    })) && (undefined === input.issuerLayer || "function" === typeof input.issuerLayer || "string" === typeof input.issuerLayer || input.issuerLayer instanceof RegExp || (Array.isArray(input.issuerLayer) && input.issuerLayer.map((elem, _index590) => (null !== elem || _report(_exceptionable, {
        path: _path + ".issuerLayer[" + _index590 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".issuerLayer[" + _index590 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".issuerLayer[" + _index590 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuerLayer[" + _index590 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".issuerLayer[" + _index590 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuerLayer[" + _index590 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".issuerLayer[" + _index590 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.issuerLayer && null !== input.issuerLayer && false === Array.isArray(input.issuerLayer) && _vo253(input.issuerLayer, _path + ".issuerLayer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.issuerLayer
    })) || _report(_exceptionable, {
        path: _path + ".issuerLayer",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.issuerLayer
    })), undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(string | undefined)",
        value: input.layer
    }), undefined === input.loader || "string" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(string | undefined)",
        value: input.loader
    }), (null !== input.mimetype || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.mimetype
    })) && (undefined === input.mimetype || "function" === typeof input.mimetype || "string" === typeof input.mimetype || input.mimetype instanceof RegExp || (Array.isArray(input.mimetype) && input.mimetype.map((elem, _index591) => (null !== elem || _report(_exceptionable, {
        path: _path + ".mimetype[" + _index591 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".mimetype[" + _index591 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".mimetype[" + _index591 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimetype[" + _index591 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".mimetype[" + _index591 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimetype[" + _index591 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".mimetype[" + _index591 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.mimetype && null !== input.mimetype && false === Array.isArray(input.mimetype) && _vo253(input.mimetype, _path + ".mimetype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.mimetype
    })) || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.mimetype
    })), undefined === input.oneOf || (Array.isArray(input.oneOf) || _report(_exceptionable, {
        path: _path + ".oneOf",
        expected: "(Array<false | \"\" | 0 | RuleSetRule | null | undefined> | undefined)",
        value: input.oneOf
    })) && input.oneOf.map((elem, _index592) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".oneOf[" + _index592 + "]",
        expected: "(\"\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })) && _vo251(elem, _path + ".oneOf[" + _index592 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".oneOf[" + _index592 + "]",
        expected: "(\"\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".oneOf",
        expected: "(Array<false | \"\" | 0 | RuleSetRule | null | undefined> | undefined)",
        value: input.oneOf
    }), (null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o59 | string | undefined)",
        value: input.options
    })) && (undefined === input.options || "string" === typeof input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o59 | string | undefined)",
        value: input.options
    })) && _vo257(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o59 | string | undefined)",
        value: input.options
    })), undefined === input.parser || ("object" === typeof input.parser && null !== input.parser && false === Array.isArray(input.parser) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(__type.o60 | undefined)",
        value: input.parser
    })) && _vo258(input.parser, _path + ".parser", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".parser",
        expected: "(__type.o60 | undefined)",
        value: input.parser
    }), (null !== input.realResource || _report(_exceptionable, {
        path: _path + ".realResource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.realResource
    })) && (undefined === input.realResource || "function" === typeof input.realResource || "string" === typeof input.realResource || input.realResource instanceof RegExp || (Array.isArray(input.realResource) && input.realResource.map((elem, _index593) => (null !== elem || _report(_exceptionable, {
        path: _path + ".realResource[" + _index593 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".realResource[" + _index593 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".realResource[" + _index593 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realResource[" + _index593 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".realResource[" + _index593 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realResource[" + _index593 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".realResource[" + _index593 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.realResource && null !== input.realResource && false === Array.isArray(input.realResource) && _vo255(input.realResource, _path + ".realResource", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realResource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.realResource
    })) || _report(_exceptionable, {
        path: _path + ".realResource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.realResource
    })), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolve
    })) && _vo259(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(ResolveOptions.o1 | undefined)",
        value: input.resolve
    }), (null !== input.resource || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.resource
    })) && (undefined === input.resource || "function" === typeof input.resource || "string" === typeof input.resource || input.resource instanceof RegExp || (Array.isArray(input.resource) && input.resource.map((elem, _index594) => (null !== elem || _report(_exceptionable, {
        path: _path + ".resource[" + _index594 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".resource[" + _index594 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".resource[" + _index594 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resource[" + _index594 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".resource[" + _index594 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resource[" + _index594 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".resource[" + _index594 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.resource && null !== input.resource && false === Array.isArray(input.resource) && _vo255(input.resource, _path + ".resource", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.resource
    })) || _report(_exceptionable, {
        path: _path + ".resource",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.resource
    })), (null !== input.resourceFragment || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceFragment
    })) && (undefined === input.resourceFragment || "function" === typeof input.resourceFragment || "string" === typeof input.resourceFragment || input.resourceFragment instanceof RegExp || (Array.isArray(input.resourceFragment) && input.resourceFragment.map((elem, _index595) => (null !== elem || _report(_exceptionable, {
        path: _path + ".resourceFragment[" + _index595 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".resourceFragment[" + _index595 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".resourceFragment[" + _index595 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceFragment[" + _index595 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".resourceFragment[" + _index595 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceFragment[" + _index595 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".resourceFragment[" + _index595 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.resourceFragment && null !== input.resourceFragment && false === Array.isArray(input.resourceFragment) && _vo253(input.resourceFragment, _path + ".resourceFragment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceFragment
    })) || _report(_exceptionable, {
        path: _path + ".resourceFragment",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceFragment
    })), (null !== input.resourceQuery || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceQuery
    })) && (undefined === input.resourceQuery || "function" === typeof input.resourceQuery || "string" === typeof input.resourceQuery || input.resourceQuery instanceof RegExp || (Array.isArray(input.resourceQuery) && input.resourceQuery.map((elem, _index596) => (null !== elem || _report(_exceptionable, {
        path: _path + ".resourceQuery[" + _index596 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".resourceQuery[" + _index596 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".resourceQuery[" + _index596 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceQuery[" + _index596 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".resourceQuery[" + _index596 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceQuery[" + _index596 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".resourceQuery[" + _index596 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.resourceQuery && null !== input.resourceQuery && false === Array.isArray(input.resourceQuery) && _vo253(input.resourceQuery, _path + ".resourceQuery", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceQuery
    })) || _report(_exceptionable, {
        path: _path + ".resourceQuery",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.resourceQuery
    })), undefined === input.rules || (Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<false | \"\" | 0 | RuleSetRule | null | undefined> | undefined)",
        value: input.rules
    })) && input.rules.map((elem, _index597) => null === elem || undefined === elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rules[" + _index597 + "]",
        expected: "(\"\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })) && _vo251(elem, _path + ".rules[" + _index597 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rules[" + _index597 + "]",
        expected: "(\"\" | 0 | RuleSetRule.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(Array<false | \"\" | 0 | RuleSetRule | null | undefined> | undefined)",
        value: input.rules
    }), (null !== input.scheme || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.scheme
    })) && (undefined === input.scheme || "function" === typeof input.scheme || "string" === typeof input.scheme || input.scheme instanceof RegExp || (Array.isArray(input.scheme) && input.scheme.map((elem, _index598) => (null !== elem || _report(_exceptionable, {
        path: _path + ".scheme[" + _index598 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".scheme[" + _index598 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".scheme[" + _index598 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".scheme[" + _index598 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".scheme[" + _index598 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".scheme[" + _index598 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".scheme[" + _index598 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.scheme && null !== input.scheme && false === Array.isArray(input.scheme) && _vo253(input.scheme, _path + ".scheme", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.scheme
    })) || _report(_exceptionable, {
        path: _path + ".scheme",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.scheme
    })), undefined === input.sideEffects || "boolean" === typeof input.sideEffects || _report(_exceptionable, {
        path: _path + ".sideEffects",
        expected: "(boolean | undefined)",
        value: input.sideEffects
    }), (null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "function" === typeof input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) && input.test.map((elem, _index599) => (null !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index599 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index599 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".test[" + _index599 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test[" + _index599 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".test[" + _index599 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test[" + _index599 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".test[" + _index599 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.test && null !== input.test && false === Array.isArray(input.test) && _vo255(input.test, _path + ".test", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.test
    })) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.test
    })), undefined === input.type || "string" === typeof input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(string | undefined)",
        value: input.type
    }), (null !== input.use || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<string | false | 0 | { ident?: string; loader?: string; options?: string | { [index: string]: any; }; } | ((data: object) => string | __TypeWebpackOptions | { ident?: string; loader?: string; options?: string | { ...; }; } | __Type_2[]) | null | undefined> | __type.o75 | string | undefined)",
        value: input.use
    })) && (undefined === input.use || "function" === typeof input.use || "string" === typeof input.use || (Array.isArray(input.use) && input.use.map((elem, _index600) => null === elem || undefined === elem || "function" === typeof elem || false === elem || 0 === elem || "string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".use[" + _index600 + "]",
        expected: "(0 | __type.o73 | false | null | string | undefined)",
        value: elem
    })) && _vo297(elem, _path + ".use[" + _index600 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".use[" + _index600 + "]",
        expected: "(0 | __type.o73 | false | null | string | undefined)",
        value: elem
    })).every(flag => flag) || "object" === typeof input.use && null !== input.use && false === Array.isArray(input.use) && _vo299(input.use, _path + ".use", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<string | false | 0 | { ident?: string; loader?: string; options?: string | { [index: string]: any; }; } | ((data: object) => string | __TypeWebpackOptions | { ident?: string; loader?: string; options?: string | { ...; }; } | __Type_2[]) | null | undefined> | __type.o75 | string | undefined)",
        value: input.use
    })) || _report(_exceptionable, {
        path: _path + ".use",
        expected: "(Array<string | false | 0 | { ident?: string; loader?: string; options?: string | { [index: string]: any; }; } | ((data: object) => string | __TypeWebpackOptions | { ident?: string; loader?: string; options?: string | { ...; }; } | __Type_2[]) | null | undefined> | __type.o75 | string | undefined)",
        value: input.use
    })), undefined === input["with"] || ("object" === typeof input["with"] && null !== input["with"] && false === Array.isArray(input["with"]) || _report(_exceptionable, {
        path: _path + "[\"with\"]",
        expected: "(__type.o77 | undefined)",
        value: input["with"]
    })) && _vo301(input["with"], _path + "[\"with\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"with\"]",
        expected: "(__type.o77 | undefined)",
        value: input["with"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assert", "compiler", "dependency", "descriptionData", "enforce", "exclude", "generator", "include", "issuer", "issuerLayer", "layer", "loader", "mimetype", "oneOf", "options", "parser", "realResource", "resolve", "resource", "resourceFragment", "resourceQuery", "rules", "scheme", "sideEffects", "test", "type", "use", "with"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo252 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.map((elem, _index601) => (null !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && (undefined !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]",
            expected: "Array<RuleSetCondition>.o1",
            value: elem
        })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index601 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        }))).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo253(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo253 = (input, _path, _exceptionable = true) => [undefined === input.and || (Array.isArray(input.and) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(Array<RuleSetCondition> | undefined)",
        value: input.and
    })) && input.and.map((elem, _index602) => (null !== elem || _report(_exceptionable, {
        path: _path + ".and[" + _index602 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".and[" + _index602 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".and[" + _index602 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".and[" + _index602 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".and[" + _index602 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".and[" + _index602 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".and[" + _index602 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(Array<RuleSetCondition> | undefined)",
        value: input.and
    }), (null !== input.not || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.not
    })) && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && input.not.map((elem, _index603) => (null !== elem || _report(_exceptionable, {
        path: _path + ".not[" + _index603 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".not[" + _index603 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".not[" + _index603 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not[" + _index603 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".not[" + _index603 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not[" + _index603 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".not[" + _index603 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _vo253(input.not, _path + ".not", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.not
    })) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetCondition> | RegExp | RuleSetLogicalConditions.o1 | string | undefined)",
        value: input.not
    })), undefined === input.or || (Array.isArray(input.or) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(Array<RuleSetCondition> | undefined)",
        value: input.or
    })) && input.or.map((elem, _index604) => (null !== elem || _report(_exceptionable, {
        path: _path + ".or[" + _index604 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".or[" + _index604 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + ".or[" + _index604 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".or[" + _index604 + "]",
        expected: "Array<RuleSetCondition>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + ".or[" + _index604 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".or[" + _index604 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".or[" + _index604 + "]",
        expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(Array<RuleSetCondition> | undefined)",
        value: input.or
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["and", "not", "or"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo254 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.map((elem, _index605) => (null !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && (undefined !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]",
            expected: "Array<RuleSetCondition>.o1",
            value: elem
        })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index605 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        }))).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo253(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo255 = (input, _path, _exceptionable = true) => [undefined === input.and || (Array.isArray(input.and) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(Array<RuleSetConditionAbsolute> | undefined)",
        value: input.and
    })) && input.and.map((elem, _index606) => (null !== elem || _report(_exceptionable, {
        path: _path + ".and[" + _index606 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".and[" + _index606 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".and[" + _index606 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".and[" + _index606 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".and[" + _index606 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".and[" + _index606 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".and[" + _index606 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".and",
        expected: "(Array<RuleSetConditionAbsolute> | undefined)",
        value: input.and
    }), (null !== input.not || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.not
    })) && (undefined === input.not || "function" === typeof input.not || "string" === typeof input.not || input.not instanceof RegExp || (Array.isArray(input.not) && input.not.map((elem, _index607) => (null !== elem || _report(_exceptionable, {
        path: _path + ".not[" + _index607 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".not[" + _index607 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".not[" + _index607 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not[" + _index607 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".not[" + _index607 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not[" + _index607 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".not[" + _index607 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.not && null !== input.not && false === Array.isArray(input.not) && _vo255(input.not, _path + ".not", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.not
    })) || _report(_exceptionable, {
        path: _path + ".not",
        expected: "(Array<RuleSetConditionAbsolute> | RegExp | RuleSetLogicalConditionsAbsolute | string | undefined)",
        value: input.not
    })), undefined === input.or || (Array.isArray(input.or) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(Array<RuleSetConditionAbsolute> | undefined)",
        value: input.or
    })) && input.or.map((elem, _index608) => (null !== elem || _report(_exceptionable, {
        path: _path + ".or[" + _index608 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".or[" + _index608 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + ".or[" + _index608 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".or[" + _index608 + "]",
        expected: "Array<RuleSetConditionAbsolute>.o1",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + ".or[" + _index608 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".or[" + _index608 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".or[" + _index608 + "]",
        expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".or",
        expected: "(Array<RuleSetConditionAbsolute> | undefined)",
        value: input.or
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["and", "not", "or"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo256 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo257 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo258 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo259 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<__type>.o3 | __type.o62 | undefined)",
        value: input.alias
    })) && (undefined === input.alias || (Array.isArray(input.alias) && input.alias.map((elem, _index609) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index609 + "]",
        expected: "__type.o61",
        value: elem
    })) && _vo260(elem, _path + ".alias[" + _index609 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias[" + _index609 + "]",
        expected: "__type.o61",
        value: elem
    })).every(flag => flag) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _vo261(input.alias, _path + ".alias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<__type>.o3 | __type.o62 | undefined)",
        value: input.alias
    })) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<__type>.o3 | __type.o62 | undefined)",
        value: input.alias
    })), undefined === input.aliasFields || (Array.isArray(input.aliasFields) || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "(Array<string | string[]> | undefined)",
        value: input.aliasFields
    })) && input.aliasFields.map((elem, _index610) => (null !== elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index610 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index610 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index610 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index611) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index610 + "][" + _index611 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index610 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "(Array<string | string[]> | undefined)",
        value: input.aliasFields
    }), undefined === input.byDependency || ("object" === typeof input.byDependency && null !== input.byDependency && false === Array.isArray(input.byDependency) || _report(_exceptionable, {
        path: _path + ".byDependency",
        expected: "(__type.o63 | undefined)",
        value: input.byDependency
    })) && _vo262(input.byDependency, _path + ".byDependency", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".byDependency",
        expected: "(__type.o63 | undefined)",
        value: input.byDependency
    }), undefined === input.cache || "boolean" === typeof input.cache || _report(_exceptionable, {
        path: _path + ".cache",
        expected: "(boolean | undefined)",
        value: input.cache
    }), undefined === input.cachePredicate || true || _report(_exceptionable, {
        path: _path + ".cachePredicate",
        expected: "undefined",
        value: input.cachePredicate
    }), undefined === input.cacheWithContext || "boolean" === typeof input.cacheWithContext || _report(_exceptionable, {
        path: _path + ".cacheWithContext",
        expected: "(boolean | undefined)",
        value: input.cacheWithContext
    }), undefined === input.conditionNames || (Array.isArray(input.conditionNames) || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "(Array<string> | undefined)",
        value: input.conditionNames
    })) && input.conditionNames.map((elem, _index612) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".conditionNames[" + _index612 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "(Array<string> | undefined)",
        value: input.conditionNames
    }), undefined === input.descriptionFiles || (Array.isArray(input.descriptionFiles) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "(Array<string> | undefined)",
        value: input.descriptionFiles
    })) && input.descriptionFiles.map((elem, _index613) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".descriptionFiles[" + _index613 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "(Array<string> | undefined)",
        value: input.descriptionFiles
    }), undefined === input.enforceExtension || "boolean" === typeof input.enforceExtension || _report(_exceptionable, {
        path: _path + ".enforceExtension",
        expected: "(boolean | undefined)",
        value: input.enforceExtension
    }), undefined === input.exportsFields || (Array.isArray(input.exportsFields) || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "(Array<string> | undefined)",
        value: input.exportsFields
    })) && input.exportsFields.map((elem, _index614) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index614 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "(Array<string> | undefined)",
        value: input.exportsFields
    }), undefined === input.extensionAlias || ("object" === typeof input.extensionAlias && null !== input.extensionAlias && false === Array.isArray(input.extensionAlias) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "(__type.o64 | undefined)",
        value: input.extensionAlias
    })) && _vo263(input.extensionAlias, _path + ".extensionAlias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "(__type.o64 | undefined)",
        value: input.extensionAlias
    }), undefined === input.extensions || (Array.isArray(input.extensions) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    })) && input.extensions.map((elem, _index615) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index615 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    }), (null !== input.fallback || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "(Array<__type>.o4 | __type.o66 | undefined)",
        value: input.fallback
    })) && (undefined === input.fallback || (Array.isArray(input.fallback) && input.fallback.map((elem, _index616) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".fallback[" + _index616 + "]",
        expected: "__type.o65",
        value: elem
    })) && _vo264(elem, _path + ".fallback[" + _index616 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallback[" + _index616 + "]",
        expected: "__type.o65",
        value: elem
    })).every(flag => flag) || "object" === typeof input.fallback && null !== input.fallback && false === Array.isArray(input.fallback) && _vo265(input.fallback, _path + ".fallback", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "(Array<__type>.o4 | __type.o66 | undefined)",
        value: input.fallback
    })) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "(Array<__type>.o4 | __type.o66 | undefined)",
        value: input.fallback
    })), undefined === input.fileSystem || ("object" === typeof input.fileSystem && null !== input.fileSystem || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "(InputFileSystem | undefined)",
        value: input.fileSystem
    })) && _vo266(input.fileSystem, _path + ".fileSystem", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "(InputFileSystem | undefined)",
        value: input.fileSystem
    }), undefined === input.fullySpecified || "boolean" === typeof input.fullySpecified || _report(_exceptionable, {
        path: _path + ".fullySpecified",
        expected: "(boolean | undefined)",
        value: input.fullySpecified
    }), undefined === input.importsFields || (Array.isArray(input.importsFields) || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "(Array<string> | undefined)",
        value: input.importsFields
    })) && input.importsFields.map((elem, _index617) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index617 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "(Array<string> | undefined)",
        value: input.importsFields
    }), undefined === input.mainFields || (Array.isArray(input.mainFields) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "(Array<string | string[]> | undefined)",
        value: input.mainFields
    })) && input.mainFields.map((elem, _index618) => (null !== elem || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index618 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index618 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index618 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index619) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index618 + "][" + _index619 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index618 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "(Array<string | string[]> | undefined)",
        value: input.mainFields
    }), undefined === input.mainFiles || (Array.isArray(input.mainFiles) || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "(Array<string> | undefined)",
        value: input.mainFiles
    })) && input.mainFiles.map((elem, _index620) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".mainFiles[" + _index620 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "(Array<string> | undefined)",
        value: input.mainFiles
    }), undefined === input.modules || (Array.isArray(input.modules) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(Array<string> | undefined)",
        value: input.modules
    })) && input.modules.map((elem, _index621) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".modules[" + _index621 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(Array<string> | undefined)",
        value: input.modules
    }), undefined === input.plugins || (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<false | \"\" | 0 | \"...\" | { [index: string]: any; apply: (arg0: Resolver) => void; } | ((this: Resolver, arg1: Resolver) => void) | null | undefined> | undefined)",
        value: input.plugins
    })) && input.plugins.map((elem, _index622) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index622 + "]",
        expected: "(\"\" | \"...\" | 0 | __type.o67 | false | null | undefined)",
        value: elem
    })) && _vo275(elem, _path + ".plugins[" + _index622 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index622 + "]",
        expected: "(\"\" | \"...\" | 0 | __type.o67 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(Array<false | \"\" | 0 | \"...\" | { [index: string]: any; apply: (arg0: Resolver) => void; } | ((this: Resolver, arg1: Resolver) => void) | null | undefined> | undefined)",
        value: input.plugins
    }), undefined === input.preferAbsolute || "boolean" === typeof input.preferAbsolute || _report(_exceptionable, {
        path: _path + ".preferAbsolute",
        expected: "(boolean | undefined)",
        value: input.preferAbsolute
    }), undefined === input.preferRelative || "boolean" === typeof input.preferRelative || _report(_exceptionable, {
        path: _path + ".preferRelative",
        expected: "(boolean | undefined)",
        value: input.preferRelative
    }), undefined === input.resolver || ("object" === typeof input.resolver && null !== input.resolver || _report(_exceptionable, {
        path: _path + ".resolver",
        expected: "(Resolver | undefined)",
        value: input.resolver
    })) && _vo276(input.resolver, _path + ".resolver", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolver",
        expected: "(Resolver | undefined)",
        value: input.resolver
    }), undefined === input.restrictions || (Array.isArray(input.restrictions) || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.restrictions
    })) && input.restrictions.map((elem, _index623) => (null !== elem || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index623 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index623 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index623 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.restrictions
    }), undefined === input.roots || (Array.isArray(input.roots) || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "(Array<string> | undefined)",
        value: input.roots
    })) && input.roots.map((elem, _index624) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".roots[" + _index624 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "(Array<string> | undefined)",
        value: input.roots
    }), undefined === input.symlinks || "boolean" === typeof input.symlinks || _report(_exceptionable, {
        path: _path + ".symlinks",
        expected: "(boolean | undefined)",
        value: input.symlinks
    }), (null !== input.unsafeCache || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(__type.o72 | boolean | undefined)",
        value: input.unsafeCache
    })) && (undefined === input.unsafeCache || "boolean" === typeof input.unsafeCache || ("object" === typeof input.unsafeCache && null !== input.unsafeCache && false === Array.isArray(input.unsafeCache) || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(__type.o72 | boolean | undefined)",
        value: input.unsafeCache
    })) && _vo296(input.unsafeCache, _path + ".unsafeCache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(__type.o72 | boolean | undefined)",
        value: input.unsafeCache
    })), undefined === input.useSyncFileSystemCalls || "boolean" === typeof input.useSyncFileSystemCalls || _report(_exceptionable, {
        path: _path + ".useSyncFileSystemCalls",
        expected: "(boolean | undefined)",
        value: input.useSyncFileSystemCalls
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "aliasFields", "byDependency", "cache", "cachePredicate", "cacheWithContext", "conditionNames", "descriptionFiles", "enforceExtension", "exportsFields", "extensionAlias", "extensions", "fallback", "fileSystem", "fullySpecified", "importsFields", "mainFields", "mainFiles", "modules", "plugins", "preferAbsolute", "preferRelative", "resolver", "restrictions", "roots", "symlinks", "unsafeCache", "useSyncFileSystemCalls"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo260 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (undefined !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (false === input.alias || "string" === typeof input.alias || (Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && input.alias.map((elem, _index625) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index625 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), undefined === input.onlyModule || "boolean" === typeof input.onlyModule || _report(_exceptionable, {
        path: _path + ".onlyModule",
        expected: "(boolean | undefined)",
        value: input.onlyModule
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "name", "onlyModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo261 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && value.map((elem, _index626) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index626 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo262 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "ResolveOptions.o1",
            value: value
        })) && _vo259(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "ResolveOptions.o1",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo263 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && value.map((elem, _index627) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index627 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo264 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (undefined !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (false === input.alias || "string" === typeof input.alias || (Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && input.alias.map((elem, _index628) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index628 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), undefined === input.onlyModule || "boolean" === typeof input.onlyModule || _report(_exceptionable, {
        path: _path + ".onlyModule",
        expected: "(boolean | undefined)",
        value: input.onlyModule
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "name", "onlyModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo265 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && value.map((elem, _index629) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index629 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo266 = (input, _path, _exceptionable = true) => [("object" === typeof input.readFile && null !== input.readFile || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileFs",
        value: input.readFile
    })) && _vo169(input.readFile, _path + ".readFile", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileFs",
        value: input.readFile
    }), undefined === input.readFileSync || ("object" === typeof input.readFileSync && null !== input.readFileSync || _report(_exceptionable, {
        path: _path + ".readFileSync",
        expected: "(ReadFileSync | undefined)",
        value: input.readFileSync
    })) && _vo267(input.readFileSync, _path + ".readFileSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readFileSync",
        expected: "(ReadFileSync | undefined)",
        value: input.readFileSync
    }), ("object" === typeof input.readlink && null !== input.readlink || _report(_exceptionable, {
        path: _path + ".readlink",
        expected: "ReadlinkFs",
        value: input.readlink
    })) && _vo268(input.readlink, _path + ".readlink", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readlink",
        expected: "ReadlinkFs",
        value: input.readlink
    }), undefined === input.readlinkSync || ("object" === typeof input.readlinkSync && null !== input.readlinkSync || _report(_exceptionable, {
        path: _path + ".readlinkSync",
        expected: "(ReadlinkSync | undefined)",
        value: input.readlinkSync
    })) && _vo269(input.readlinkSync, _path + ".readlinkSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readlinkSync",
        expected: "(ReadlinkSync | undefined)",
        value: input.readlinkSync
    }), ("object" === typeof input.readdir && null !== input.readdir || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "ReaddirFs",
        value: input.readdir
    })) && _vo165(input.readdir, _path + ".readdir", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "ReaddirFs",
        value: input.readdir
    }), undefined === input.readdirSync || ("object" === typeof input.readdirSync && null !== input.readdirSync || _report(_exceptionable, {
        path: _path + ".readdirSync",
        expected: "(ReaddirSync | undefined)",
        value: input.readdirSync
    })) && _vo270(input.readdirSync, _path + ".readdirSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readdirSync",
        expected: "(ReaddirSync | undefined)",
        value: input.readdirSync
    }), ("object" === typeof input.stat && null !== input.stat || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatFs",
        value: input.stat
    })) && _vo167(input.stat, _path + ".stat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatFs",
        value: input.stat
    }), undefined === input.statSync || ("object" === typeof input.statSync && null !== input.statSync || _report(_exceptionable, {
        path: _path + ".statSync",
        expected: "(StatSync | undefined)",
        value: input.statSync
    })) && _vo271(input.statSync, _path + ".statSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".statSync",
        expected: "(StatSync | undefined)",
        value: input.statSync
    }), undefined === input.lstat || ("object" === typeof input.lstat && null !== input.lstat || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatFs | undefined)",
        value: input.lstat
    })) && _vo168(input.lstat, _path + ".lstat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatFs | undefined)",
        value: input.lstat
    }), undefined === input.lstatSync || ("object" === typeof input.lstatSync && null !== input.lstatSync || _report(_exceptionable, {
        path: _path + ".lstatSync",
        expected: "(LStatSync | undefined)",
        value: input.lstatSync
    })) && _vo272(input.lstatSync, _path + ".lstatSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lstatSync",
        expected: "(LStatSync | undefined)",
        value: input.lstatSync
    }), undefined === input.realpath || ("object" === typeof input.realpath && null !== input.realpath || _report(_exceptionable, {
        path: _path + ".realpath",
        expected: "(RealPathFs | undefined)",
        value: input.realpath
    })) && _vo273(input.realpath, _path + ".realpath", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realpath",
        expected: "(RealPathFs | undefined)",
        value: input.realpath
    }), undefined === input.realpathSync || ("object" === typeof input.realpathSync && null !== input.realpathSync || _report(_exceptionable, {
        path: _path + ".realpathSync",
        expected: "(RealPathSync | undefined)",
        value: input.realpathSync
    })) && _vo274(input.realpathSync, _path + ".realpathSync", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realpathSync",
        expected: "(RealPathSync | undefined)",
        value: input.realpathSync
    }), undefined === input.readJson || true || _report(_exceptionable, {
        path: _path + ".readJson",
        expected: "undefined",
        value: input.readJson
    }), undefined === input.readJsonSync || true || _report(_exceptionable, {
        path: _path + ".readJsonSync",
        expected: "undefined",
        value: input.readJsonSync
    }), undefined === input.purge || true || _report(_exceptionable, {
        path: _path + ".purge",
        expected: "undefined",
        value: input.purge
    }), undefined === input.join || true || _report(_exceptionable, {
        path: _path + ".join",
        expected: "undefined",
        value: input.join
    }), undefined === input.relative || true || _report(_exceptionable, {
        path: _path + ".relative",
        expected: "undefined",
        value: input.relative
    }), undefined === input.dirname || true || _report(_exceptionable, {
        path: _path + ".dirname",
        expected: "undefined",
        value: input.dirname
    }), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["readFile", "readFileSync", "readlink", "readlinkSync", "readdir", "readdirSync", "stat", "statSync", "lstat", "lstatSync", "realpath", "realpathSync", "readJson", "readJsonSync", "purge", "join", "relative", "dirname"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo267 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo268 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo269 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo270 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo271 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo272 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo273 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo274 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo275 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".apply",
        expected: "unknown",
        value: input.apply
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["apply"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo276 = (input, _path, _exceptionable = true) => [("object" === typeof input.fileSystem && null !== input.fileSystem || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "FileSystem",
        value: input.fileSystem
    })) && _vo277(input.fileSystem, _path + ".fileSystem", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "FileSystem",
        value: input.fileSystem
    }), ("object" === typeof input.options && null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "ResolveOptionsResolverFactoryObject1",
        value: input.options
    })) && _vo284(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "ResolveOptionsResolverFactoryObject1",
        value: input.options
    }), ("object" === typeof input.hooks && null !== input.hooks || _report(_exceptionable, {
        path: _path + ".hooks",
        expected: "KnownHooks",
        value: input.hooks
    })) && _vo290(input.hooks, _path + ".hooks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".hooks",
        expected: "KnownHooks",
        value: input.hooks
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["fileSystem", "options", "hooks"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo277 = (input, _path, _exceptionable = true) => [("object" === typeof input.readFile && null !== input.readFile || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileTypes",
        value: input.readFile
    })) && _vo278(input.readFile, _path + ".readFile", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readFile",
        expected: "ReadFileTypes",
        value: input.readFile
    }), ("object" === typeof input.readdir && null !== input.readdir || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "ReaddirTypes",
        value: input.readdir
    })) && _vo279(input.readdir, _path + ".readdir", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readdir",
        expected: "ReaddirTypes",
        value: input.readdir
    }), undefined === input.readJson || true || _report(_exceptionable, {
        path: _path + ".readJson",
        expected: "undefined",
        value: input.readJson
    }), ("object" === typeof input.readlink && null !== input.readlink || _report(_exceptionable, {
        path: _path + ".readlink",
        expected: "ReadlinkTypes",
        value: input.readlink
    })) && _vo280(input.readlink, _path + ".readlink", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".readlink",
        expected: "ReadlinkTypes",
        value: input.readlink
    }), undefined === input.lstat || ("object" === typeof input.lstat && null !== input.lstat || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatTypes | undefined)",
        value: input.lstat
    })) && _vo281(input.lstat, _path + ".lstat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".lstat",
        expected: "(LStatTypes | undefined)",
        value: input.lstat
    }), ("object" === typeof input.stat && null !== input.stat || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatTypes",
        value: input.stat
    })) && _vo282(input.stat, _path + ".stat", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".stat",
        expected: "StatTypes",
        value: input.stat
    }), undefined === input.realpath || ("object" === typeof input.realpath && null !== input.realpath || _report(_exceptionable, {
        path: _path + ".realpath",
        expected: "(RealPathTypes | undefined)",
        value: input.realpath
    })) && _vo283(input.realpath, _path + ".realpath", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".realpath",
        expected: "(RealPathTypes | undefined)",
        value: input.realpath
    }), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["readFile", "readdir", "readJson", "readlink", "lstat", "stat", "realpath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo278 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo279 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo280 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo281 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo282 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo283 = (input, _path, _exceptionable = true) => [true, "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo284 = (input, _path, _exceptionable = true) => [(Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "Array<AliasOption>",
        value: input.alias
    })) && input.alias.map((elem, _index630) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index630 + "]",
        expected: "AliasOption",
        value: elem
    })) && _vo285(elem, _path + ".alias[" + _index630 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias[" + _index630 + "]",
        expected: "AliasOption",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "Array<AliasOption>",
        value: input.alias
    }), (Array.isArray(input.fallback) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "Array<AliasOption>",
        value: input.fallback
    })) && input.fallback.map((elem, _index631) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".fallback[" + _index631 + "]",
        expected: "AliasOption",
        value: elem
    })) && _vo285(elem, _path + ".fallback[" + _index631 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallback[" + _index631 + "]",
        expected: "AliasOption",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".fallback",
        expected: "Array<AliasOption>",
        value: input.fallback
    }), (input.aliasFields instanceof Set || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "Set<(Array<string> | string)>",
        value: input.aliasFields
    })) && (() => [...input.aliasFields].map((elem, _index632) => (null !== elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index632 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index632 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index632 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index633) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index632 + "][" + _index633 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".aliasFields[" + _index632 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".aliasFields",
        expected: "Set<(Array<string> | string)>",
        value: input.aliasFields
    }), (Array.isArray(input.extensionAlias) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "Array<ExtensionAliasOption>",
        value: input.extensionAlias
    })) && input.extensionAlias.map((elem, _index634) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".extensionAlias[" + _index634 + "]",
        expected: "ExtensionAliasOption",
        value: elem
    })) && _vo286(elem, _path + ".extensionAlias[" + _index634 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".extensionAlias[" + _index634 + "]",
        expected: "ExtensionAliasOption",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensionAlias",
        expected: "Array<ExtensionAliasOption>",
        value: input.extensionAlias
    }), true || _report(_exceptionable, {
        path: _path + ".cachePredicate",
        expected: "unknown",
        value: input.cachePredicate
    }), "boolean" === typeof input.cacheWithContext || _report(_exceptionable, {
        path: _path + ".cacheWithContext",
        expected: "boolean",
        value: input.cacheWithContext
    }), (input.conditionNames instanceof Set || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "Set<string>",
        value: input.conditionNames
    })) && (() => [...input.conditionNames].map((elem, _index635) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".conditionNames[" + _index635 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".conditionNames",
        expected: "Set<string>",
        value: input.conditionNames
    }), (Array.isArray(input.descriptionFiles) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "Array<string>",
        value: input.descriptionFiles
    })) && input.descriptionFiles.map((elem, _index636) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".descriptionFiles[" + _index636 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".descriptionFiles",
        expected: "Array<string>",
        value: input.descriptionFiles
    }), "boolean" === typeof input.enforceExtension || _report(_exceptionable, {
        path: _path + ".enforceExtension",
        expected: "boolean",
        value: input.enforceExtension
    }), (input.exportsFields instanceof Set || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "Set<(Array<string> | string)>",
        value: input.exportsFields
    })) && (() => [...input.exportsFields].map((elem, _index637) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index637 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index637 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index637 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index638) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index637 + "][" + _index638 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exportsFields[" + _index637 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".exportsFields",
        expected: "Set<(Array<string> | string)>",
        value: input.exportsFields
    }), (input.importsFields instanceof Set || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "Set<(Array<string> | string)>",
        value: input.importsFields
    })) && (() => [...input.importsFields].map((elem, _index639) => (null !== elem || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index639 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index639 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index639 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index640) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index639 + "][" + _index640 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".importsFields[" + _index639 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".importsFields",
        expected: "Set<(Array<string> | string)>",
        value: input.importsFields
    }), (input.extensions instanceof Set || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "Set<string>",
        value: input.extensions
    })) && (() => [...input.extensions].map((elem, _index641) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index641 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "Set<string>",
        value: input.extensions
    }), ("object" === typeof input.fileSystem && null !== input.fileSystem || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "FileSystem",
        value: input.fileSystem
    })) && _vo277(input.fileSystem, _path + ".fileSystem", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fileSystem",
        expected: "FileSystem",
        value: input.fileSystem
    }), (null !== input.unsafeCache || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(false | object)",
        value: input.unsafeCache
    })) && (undefined !== input.unsafeCache || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(false | object)",
        value: input.unsafeCache
    })) && (false === input.unsafeCache || ("object" === typeof input.unsafeCache && null !== input.unsafeCache && false === Array.isArray(input.unsafeCache) || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(false | object)",
        value: input.unsafeCache
    })) && _vo48(input.unsafeCache, _path + ".unsafeCache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".unsafeCache",
        expected: "(false | object)",
        value: input.unsafeCache
    })), "boolean" === typeof input.symlinks || _report(_exceptionable, {
        path: _path + ".symlinks",
        expected: "boolean",
        value: input.symlinks
    }), undefined === input.resolver || ("object" === typeof input.resolver && null !== input.resolver || _report(_exceptionable, {
        path: _path + ".resolver",
        expected: "(Resolver | undefined)",
        value: input.resolver
    })) && _vo276(input.resolver, _path + ".resolver", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolver",
        expected: "(Resolver | undefined)",
        value: input.resolver
    }), (Array.isArray(input.modules) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "Array<string | string[]>",
        value: input.modules
    })) && input.modules.map((elem, _index642) => (null !== elem || _report(_exceptionable, {
        path: _path + ".modules[" + _index642 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".modules[" + _index642 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && ("string" === typeof elem || (Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".modules[" + _index642 + "]",
        expected: "(Array<string> | string)",
        value: elem
    })) && elem.map((elem, _index643) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".modules[" + _index642 + "][" + _index643 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".modules[" + _index642 + "]",
        expected: "(Array<string> | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "Array<string | string[]>",
        value: input.modules
    }), (Array.isArray(input.mainFields) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "Array<__type>.o5",
        value: input.mainFields
    })) && input.mainFields.map((elem, _index644) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index644 + "]",
        expected: "__type.o68",
        value: elem
    })) && _vo287(elem, _path + ".mainFields[" + _index644 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mainFields[" + _index644 + "]",
        expected: "__type.o68",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".mainFields",
        expected: "Array<__type>.o5",
        value: input.mainFields
    }), (input.mainFiles instanceof Set || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "Set<string>",
        value: input.mainFiles
    })) && (() => [...input.mainFiles].map((elem, _index645) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".mainFiles[" + _index645 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".mainFiles",
        expected: "Set<string>",
        value: input.mainFiles
    }), (Array.isArray(input.plugins) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "Array<Plugin>",
        value: input.plugins
    })) && input.plugins.map((elem, _index646) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".plugins[" + _index646 + "]",
        expected: "(\"\" | 0 | __type.o69 | false | null | undefined)",
        value: elem
    })) && _vo288(elem, _path + ".plugins[" + _index646 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".plugins[" + _index646 + "]",
        expected: "(\"\" | 0 | __type.o69 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "Array<Plugin>",
        value: input.plugins
    }), null === input.pnpApi || ("object" === typeof input.pnpApi && null !== input.pnpApi || _report(_exceptionable, {
        path: _path + ".pnpApi",
        expected: "(PnpApi | null)",
        value: input.pnpApi
    })) && _vo289(input.pnpApi, _path + ".pnpApi", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pnpApi",
        expected: "(PnpApi | null)",
        value: input.pnpApi
    }), (input.roots instanceof Set || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "Set<string>",
        value: input.roots
    })) && (() => [...input.roots].map((elem, _index647) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".roots[" + _index647 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".roots",
        expected: "Set<string>",
        value: input.roots
    }), "boolean" === typeof input.fullySpecified || _report(_exceptionable, {
        path: _path + ".fullySpecified",
        expected: "boolean",
        value: input.fullySpecified
    }), "boolean" === typeof input.resolveToContext || _report(_exceptionable, {
        path: _path + ".resolveToContext",
        expected: "boolean",
        value: input.resolveToContext
    }), (input.restrictions instanceof Set || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "Set<(RegExp | string)>",
        value: input.restrictions
    })) && (() => [...input.restrictions].map((elem, _index648) => (null !== elem || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index648 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index648 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".restrictions[" + _index648 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag))() || _report(_exceptionable, {
        path: _path + ".restrictions",
        expected: "Set<(RegExp | string)>",
        value: input.restrictions
    }), "boolean" === typeof input.preferRelative || _report(_exceptionable, {
        path: _path + ".preferRelative",
        expected: "boolean",
        value: input.preferRelative
    }), "boolean" === typeof input.preferAbsolute || _report(_exceptionable, {
        path: _path + ".preferAbsolute",
        expected: "boolean",
        value: input.preferAbsolute
    }), 26 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "fallback", "aliasFields", "extensionAlias", "cachePredicate", "cacheWithContext", "conditionNames", "descriptionFiles", "enforceExtension", "exportsFields", "importsFields", "extensions", "fileSystem", "unsafeCache", "symlinks", "resolver", "modules", "mainFields", "mainFiles", "plugins", "pnpApi", "roots", "fullySpecified", "resolveToContext", "restrictions", "preferRelative", "preferAbsolute"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo285 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (undefined !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && (false === input.alias || "string" === typeof input.alias || (Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })) && input.alias.map((elem, _index649) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index649 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | false | string)",
        value: input.alias
    })), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), undefined === input.onlyModule || "boolean" === typeof input.onlyModule || _report(_exceptionable, {
        path: _path + ".onlyModule",
        expected: "(boolean | undefined)",
        value: input.onlyModule
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "name", "onlyModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo286 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | string)",
        value: input.alias
    })) && (undefined !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | string)",
        value: input.alias
    })) && ("string" === typeof input.alias || (Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | string)",
        value: input.alias
    })) && input.alias.map((elem, _index650) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index650 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Array<string> | string)",
        value: input.alias
    })), "string" === typeof input.extension || _report(_exceptionable, {
        path: _path + ".extension",
        expected: "string",
        value: input.extension
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "extension"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo287 = (input, _path, _exceptionable = true) => [(Array.isArray(input.name) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "Array<string>",
        value: input.name
    })) && input.name.map((elem, _index651) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".name[" + _index651 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "Array<string>",
        value: input.name
    }), "boolean" === typeof input.forceRelative || _report(_exceptionable, {
        path: _path + ".forceRelative",
        expected: "boolean",
        value: input.forceRelative
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "forceRelative"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo288 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".apply",
        expected: "unknown",
        value: input.apply
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["apply"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo289 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".resolveToUnqualified",
        expected: "unknown",
        value: input.resolveToUnqualified
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["resolveToUnqualified"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo290 = (input, _path, _exceptionable = true) => [("object" === typeof input.resolveStep && null !== input.resolveStep || _report(_exceptionable, {
        path: _path + ".resolveStep",
        expected: "SyncHook<[AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null, UnsetAdditionalOptions>, ResolveRequest], void, UnsetAdditionalOptions>",
        value: input.resolveStep
    })) && _vo291(input.resolveStep, _path + ".resolveStep", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolveStep",
        expected: "SyncHook<[AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null, UnsetAdditionalOptions>, ResolveRequest], void, UnsetAdditionalOptions>",
        value: input.resolveStep
    }), ("object" === typeof input.noResolve && null !== input.noResolve || _report(_exceptionable, {
        path: _path + ".noResolve",
        expected: "SyncHook<[ResolveRequest, Error], void, UnsetAdditionalOptions>",
        value: input.noResolve
    })) && _vo293(input.noResolve, _path + ".noResolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".noResolve",
        expected: "SyncHook<[ResolveRequest, Error], void, UnsetAdditionalOptions>",
        value: input.noResolve
    }), ("object" === typeof input.resolve && null !== input.resolve || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null, UnsetAdditionalOptions>",
        value: input.resolve
    })) && _vo294(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null, UnsetAdditionalOptions>",
        value: input.resolve
    }), ("object" === typeof input.result && null !== input.result || _report(_exceptionable, {
        path: _path + ".result",
        expected: "AsyncSeriesHook<[ResolveRequest, ResolveContext], UnsetAdditionalOptions>",
        value: input.result
    })) && _vo295(input.result, _path + ".result", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".result",
        expected: "AsyncSeriesHook<[ResolveRequest, ResolveContext], UnsetAdditionalOptions>",
        value: input.result
    }), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["resolveStep", "noResolve", "resolve", "result"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo291 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.taps) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    })) && input.taps.map((elem, _index652) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".taps[" + _index652 + "]",
        expected: "FullTap",
        value: elem
    })) && _vo292(elem, _path + ".taps[" + _index652 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".taps[" + _index652 + "]",
        expected: "FullTap",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "taps"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo292 = (input, _path, _exceptionable = true) => [undefined === input.before || "string" === typeof input.before || _report(_exceptionable, {
        path: _path + ".before",
        expected: "(string | undefined)",
        value: input.before
    }), undefined === input.stage || "number" === typeof input.stage || _report(_exceptionable, {
        path: _path + ".stage",
        expected: "(number | undefined)",
        value: input.stage
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), "promise" === input.type || "async" === input.type || "sync" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(\"async\" | \"promise\" | \"sync\")",
        value: input.type
    }), ("object" === typeof input.fn && null !== input.fn || _report(_exceptionable, {
        path: _path + ".fn",
        expected: "Function",
        value: input.fn
    })) && _vo23(input.fn, _path + ".fn", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fn",
        expected: "Function",
        value: input.fn
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["before", "stage", "name", "type", "fn"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo293 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.taps) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    })) && input.taps.map((elem, _index653) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".taps[" + _index653 + "]",
        expected: "FullTap",
        value: elem
    })) && _vo292(elem, _path + ".taps[" + _index653 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".taps[" + _index653 + "]",
        expected: "FullTap",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "taps"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo294 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.taps) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    })) && input.taps.map((elem, _index654) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".taps[" + _index654 + "]",
        expected: "FullTap",
        value: elem
    })) && _vo292(elem, _path + ".taps[" + _index654 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".taps[" + _index654 + "]",
        expected: "FullTap",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "taps"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo295 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.taps) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    })) && input.taps.map((elem, _index655) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".taps[" + _index655 + "]",
        expected: "FullTap",
        value: elem
    })) && _vo292(elem, _path + ".taps[" + _index655 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".taps[" + _index655 + "]",
        expected: "FullTap",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "taps"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo296 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo297 = (input, _path, _exceptionable = true) => [undefined === input.ident || "string" === typeof input.ident || _report(_exceptionable, {
        path: _path + ".ident",
        expected: "(string | undefined)",
        value: input.ident
    }), undefined === input.loader || "string" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(string | undefined)",
        value: input.loader
    }), (null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o74 | string | undefined)",
        value: input.options
    })) && (undefined === input.options || "string" === typeof input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o74 | string | undefined)",
        value: input.options
    })) && _vo298(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o74 | string | undefined)",
        value: input.options
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ident", "loader", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo298 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo299 = (input, _path, _exceptionable = true) => [undefined === input.ident || "string" === typeof input.ident || _report(_exceptionable, {
        path: _path + ".ident",
        expected: "(string | undefined)",
        value: input.ident
    }), undefined === input.loader || "string" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(string | undefined)",
        value: input.loader
    }), (null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o76 | string | undefined)",
        value: input.options
    })) && (undefined === input.options || "string" === typeof input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o76 | string | undefined)",
        value: input.options
    })) && _vo300(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "(__type.o76 | string | undefined)",
        value: input.options
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ident", "loader", "options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo300 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo301 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) && ("function" === typeof value || "string" === typeof value || value instanceof RegExp || (Array.isArray(value) && value.map((elem, _index656) => (null !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && (undefined !== elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]",
            expected: "Array<RuleSetCondition>.o1",
            value: elem
        })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index656 + "]",
            expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: elem
        }))).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo253(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<RuleSetCondition>.o2 | RegExp | RuleSetLogicalConditions.o1 | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo302 = (input, _path, _exceptionable = true) => [undefined === input.asset || ("object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetGeneratorOptions.o1 | undefined)",
        value: input.asset
    })) && _vo303(input.asset, _path + ".asset", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetGeneratorOptions.o1 | undefined)",
        value: input.asset
    }), undefined === input["asset/inline"] || ("object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(AssetInlineGeneratorOptions.o1 | undefined)",
        value: input["asset/inline"]
    })) && _vo305(input["asset/inline"], _path + "[\"asset/inline\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(AssetInlineGeneratorOptions.o1 | undefined)",
        value: input["asset/inline"]
    }), undefined === input["asset/resource"] || ("object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(AssetResourceGeneratorOptions.o1 | undefined)",
        value: input["asset/resource"]
    })) && _vo306(input["asset/resource"], _path + "[\"asset/resource\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(AssetResourceGeneratorOptions.o1 | undefined)",
        value: input["asset/resource"]
    }), undefined === input.css || ("object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssGeneratorOptions.o1 | undefined)",
        value: input.css
    })) && _vo307(input.css, _path + ".css", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssGeneratorOptions.o1 | undefined)",
        value: input.css
    }), undefined === input["css/auto"] || ("object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoGeneratorOptions.o1 | undefined)",
        value: input["css/auto"]
    })) && _vo308(input["css/auto"], _path + "[\"css/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoGeneratorOptions.o1 | undefined)",
        value: input["css/auto"]
    }), undefined === input["css/global"] || ("object" === typeof input["css/global"] && null !== input["css/global"] && false === Array.isArray(input["css/global"]) || _report(_exceptionable, {
        path: _path + "[\"css/global\"]",
        expected: "(CssGlobalGeneratorOptions | undefined)",
        value: input["css/global"]
    })) && _vo309(input["css/global"], _path + "[\"css/global\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/global\"]",
        expected: "(CssGlobalGeneratorOptions | undefined)",
        value: input["css/global"]
    }), undefined === input["css/module"] || ("object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleGeneratorOptions | undefined)",
        value: input["css/module"]
    })) && _vo310(input["css/module"], _path + "[\"css/module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleGeneratorOptions | undefined)",
        value: input["css/module"]
    }), undefined === input.javascript || ("object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input.javascript
    })) && _vo311(input.javascript, _path + ".javascript", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input.javascript
    }), undefined === input["javascript/auto"] || ("object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/auto"]
    })) && _vo311(input["javascript/auto"], _path + "[\"javascript/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/auto"]
    }), undefined === input["javascript/dynamic"] || ("object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/dynamic"]
    })) && _vo311(input["javascript/dynamic"], _path + "[\"javascript/dynamic\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/dynamic"]
    }), undefined === input["javascript/esm"] || ("object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/esm"]
    })) && _vo311(input["javascript/esm"], _path + "[\"javascript/esm\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(EmptyGeneratorOptions | undefined)",
        value: input["javascript/esm"]
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["asset", "asset/inline", "asset/resource", "css", "css/auto", "css/global", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o78",
            value: value
        })) && _vo312(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o78",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo303 = (input, _path, _exceptionable = true) => [undefined === input.binary || "boolean" === typeof input.binary || _report(_exceptionable, {
        path: _path + ".binary",
        expected: "(boolean | undefined)",
        value: input.binary
    }), (null !== input.dataUrl || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })) && (undefined === input.dataUrl || "function" === typeof input.dataUrl || ("object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })) && _vo304(input.dataUrl, _path + ".dataUrl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })), undefined === input.emit || "boolean" === typeof input.emit || _report(_exceptionable, {
        path: _path + ".emit",
        expected: "(boolean | undefined)",
        value: input.emit
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })) && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["binary", "dataUrl", "emit", "filename", "outputPath", "publicPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo304 = (input, _path, _exceptionable = true) => [undefined === input.encoding || false === input.encoding || "base64" === input.encoding || _report(_exceptionable, {
        path: _path + ".encoding",
        expected: "(\"base64\" | false | undefined)",
        value: input.encoding
    }), undefined === input.mimetype || "string" === typeof input.mimetype || _report(_exceptionable, {
        path: _path + ".mimetype",
        expected: "(string | undefined)",
        value: input.mimetype
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["encoding", "mimetype"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo305 = (input, _path, _exceptionable = true) => [undefined === input.binary || "boolean" === typeof input.binary || _report(_exceptionable, {
        path: _path + ".binary",
        expected: "(boolean | undefined)",
        value: input.binary
    }), (null !== input.dataUrl || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })) && (undefined === input.dataUrl || "function" === typeof input.dataUrl || ("object" === typeof input.dataUrl && null !== input.dataUrl && false === Array.isArray(input.dataUrl) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })) && _vo304(input.dataUrl, _path + ".dataUrl", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrl",
        expected: "(AssetGeneratorDataUrlOptions.o1 | undefined)",
        value: input.dataUrl
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["binary", "dataUrl"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo306 = (input, _path, _exceptionable = true) => [undefined === input.binary || "boolean" === typeof input.binary || _report(_exceptionable, {
        path: _path + ".binary",
        expected: "(boolean | undefined)",
        value: input.binary
    }), undefined === input.emit || "boolean" === typeof input.emit || _report(_exceptionable, {
        path: _path + ".emit",
        expected: "(boolean | undefined)",
        value: input.emit
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), (null !== input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })) && (undefined === input.outputPath || "function" === typeof input.outputPath || "string" === typeof input.outputPath || _report(_exceptionable, {
        path: _path + ".outputPath",
        expected: "(string | undefined)",
        value: input.outputPath
    })), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["binary", "emit", "filename", "outputPath", "publicPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo307 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule", "exportsOnly"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo308 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), (null !== input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })) && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })), undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo309 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), (null !== input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })) && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })), undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo310 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), (null !== input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })) && (undefined === input.exportsConvention || "function" === typeof input.exportsConvention || "dashes" === input.exportsConvention || "as-is" === input.exportsConvention || "camel-case" === input.exportsConvention || "camel-case-only" === input.exportsConvention || "dashes-only" === input.exportsConvention || _report(_exceptionable, {
        path: _path + ".exportsConvention",
        expected: "(\"as-is\" | \"camel-case\" | \"camel-case-only\" | \"dashes\" | \"dashes-only\" | undefined)",
        value: input.exportsConvention
    })), undefined === input.exportsOnly || "boolean" === typeof input.exportsOnly || _report(_exceptionable, {
        path: _path + ".exportsOnly",
        expected: "(boolean | undefined)",
        value: input.exportsOnly
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule", "exportsConvention", "exportsOnly", "localIdentName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo311 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo312 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo313 = (input, _path, _exceptionable = true) => [undefined === input.asset || ("object" === typeof input.asset && null !== input.asset && false === Array.isArray(input.asset) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetParserOptions.o1 | undefined)",
        value: input.asset
    })) && _vo314(input.asset, _path + ".asset", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".asset",
        expected: "(AssetParserOptions.o1 | undefined)",
        value: input.asset
    }), undefined === input["asset/inline"] || ("object" === typeof input["asset/inline"] && null !== input["asset/inline"] && false === Array.isArray(input["asset/inline"]) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/inline"]
    })) && _vo316(input["asset/inline"], _path + "[\"asset/inline\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/inline\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/inline"]
    }), undefined === input["asset/resource"] || ("object" === typeof input["asset/resource"] && null !== input["asset/resource"] && false === Array.isArray(input["asset/resource"]) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/resource"]
    })) && _vo316(input["asset/resource"], _path + "[\"asset/resource\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/resource\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/resource"]
    }), undefined === input["asset/source"] || ("object" === typeof input["asset/source"] && null !== input["asset/source"] && false === Array.isArray(input["asset/source"]) || _report(_exceptionable, {
        path: _path + "[\"asset/source\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/source"]
    })) && _vo316(input["asset/source"], _path + "[\"asset/source\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"asset/source\"]",
        expected: "(EmptyParserOptions | undefined)",
        value: input["asset/source"]
    }), undefined === input.css || ("object" === typeof input.css && null !== input.css && false === Array.isArray(input.css) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssParserOptions.o1 | undefined)",
        value: input.css
    })) && _vo317(input.css, _path + ".css", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(CssParserOptions.o1 | undefined)",
        value: input.css
    }), undefined === input["css/auto"] || ("object" === typeof input["css/auto"] && null !== input["css/auto"] && false === Array.isArray(input["css/auto"]) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoParserOptions.o1 | undefined)",
        value: input["css/auto"]
    })) && _vo318(input["css/auto"], _path + "[\"css/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/auto\"]",
        expected: "(CssAutoParserOptions.o1 | undefined)",
        value: input["css/auto"]
    }), undefined === input["css/global"] || ("object" === typeof input["css/global"] && null !== input["css/global"] && false === Array.isArray(input["css/global"]) || _report(_exceptionable, {
        path: _path + "[\"css/global\"]",
        expected: "(CssGlobalParserOptions | undefined)",
        value: input["css/global"]
    })) && _vo319(input["css/global"], _path + "[\"css/global\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/global\"]",
        expected: "(CssGlobalParserOptions | undefined)",
        value: input["css/global"]
    }), undefined === input["css/module"] || ("object" === typeof input["css/module"] && null !== input["css/module"] && false === Array.isArray(input["css/module"]) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleParserOptions.o1 | undefined)",
        value: input["css/module"]
    })) && _vo320(input["css/module"], _path + "[\"css/module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"css/module\"]",
        expected: "(CssModuleParserOptions.o1 | undefined)",
        value: input["css/module"]
    }), undefined === input.javascript || ("object" === typeof input.javascript && null !== input.javascript && false === Array.isArray(input.javascript) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input.javascript
    })) && _vo321(input.javascript, _path + ".javascript", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".javascript",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input.javascript
    }), undefined === input["javascript/auto"] || ("object" === typeof input["javascript/auto"] && null !== input["javascript/auto"] && false === Array.isArray(input["javascript/auto"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/auto"]
    })) && _vo321(input["javascript/auto"], _path + "[\"javascript/auto\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/auto\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/auto"]
    }), undefined === input["javascript/dynamic"] || ("object" === typeof input["javascript/dynamic"] && null !== input["javascript/dynamic"] && false === Array.isArray(input["javascript/dynamic"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/dynamic"]
    })) && _vo321(input["javascript/dynamic"], _path + "[\"javascript/dynamic\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/dynamic\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/dynamic"]
    }), undefined === input["javascript/esm"] || ("object" === typeof input["javascript/esm"] && null !== input["javascript/esm"] && false === Array.isArray(input["javascript/esm"]) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/esm"]
    })) && _vo321(input["javascript/esm"], _path + "[\"javascript/esm\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"javascript/esm\"]",
        expected: "(JavascriptParserOptions.o1 | undefined)",
        value: input["javascript/esm"]
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["asset", "asset/inline", "asset/resource", "asset/source", "css", "css/auto", "css/global", "css/module", "javascript", "javascript/auto", "javascript/dynamic", "javascript/esm"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o80",
            value: value
        })) && _vo324(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "__type.o80",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo314 = (input, _path, _exceptionable = true) => [(null !== input.dataUrlCondition || _report(_exceptionable, {
        path: _path + ".dataUrlCondition",
        expected: "(AssetParserDataUrlOptions.o1 | undefined)",
        value: input.dataUrlCondition
    })) && (undefined === input.dataUrlCondition || "function" === typeof input.dataUrlCondition || ("object" === typeof input.dataUrlCondition && null !== input.dataUrlCondition && false === Array.isArray(input.dataUrlCondition) || _report(_exceptionable, {
        path: _path + ".dataUrlCondition",
        expected: "(AssetParserDataUrlOptions.o1 | undefined)",
        value: input.dataUrlCondition
    })) && _vo315(input.dataUrlCondition, _path + ".dataUrlCondition", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUrlCondition",
        expected: "(AssetParserDataUrlOptions.o1 | undefined)",
        value: input.dataUrlCondition
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dataUrlCondition"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo315 = (input, _path, _exceptionable = true) => [undefined === input.maxSize || "number" === typeof input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(number | undefined)",
        value: input.maxSize
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["maxSize"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo316 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo317 = (input, _path, _exceptionable = true) => [undefined === input["import"] || "boolean" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(boolean | undefined)",
        value: input["import"]
    }), undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), undefined === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(boolean | undefined)",
        value: input.url
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "namedExports", "url"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo318 = (input, _path, _exceptionable = true) => [undefined === input["import"] || "boolean" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(boolean | undefined)",
        value: input["import"]
    }), undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), undefined === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(boolean | undefined)",
        value: input.url
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "namedExports", "url"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo319 = (input, _path, _exceptionable = true) => [undefined === input["import"] || "boolean" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(boolean | undefined)",
        value: input["import"]
    }), undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), undefined === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(boolean | undefined)",
        value: input.url
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "namedExports", "url"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo320 = (input, _path, _exceptionable = true) => [undefined === input["import"] || "boolean" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(boolean | undefined)",
        value: input["import"]
    }), undefined === input.namedExports || "boolean" === typeof input.namedExports || _report(_exceptionable, {
        path: _path + ".namedExports",
        expected: "(boolean | undefined)",
        value: input.namedExports
    }), undefined === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(boolean | undefined)",
        value: input.url
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "namedExports", "url"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo321 = (input, _path, _exceptionable = true) => [(null !== input.amd || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o79 | false | undefined)",
        value: input.amd
    })) && (undefined === input.amd || false === input.amd || ("object" === typeof input.amd && null !== input.amd && false === Array.isArray(input.amd) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o79 | false | undefined)",
        value: input.amd
    })) && _vo322(input.amd, _path + ".amd", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".amd",
        expected: "(__type.o79 | false | undefined)",
        value: input.amd
    })), undefined === input.browserify || "boolean" === typeof input.browserify || _report(_exceptionable, {
        path: _path + ".browserify",
        expected: "(boolean | undefined)",
        value: input.browserify
    }), undefined === input.commonjs || "boolean" === typeof input.commonjs || _report(_exceptionable, {
        path: _path + ".commonjs",
        expected: "(boolean | undefined)",
        value: input.commonjs
    }), undefined === input.commonjsMagicComments || "boolean" === typeof input.commonjsMagicComments || _report(_exceptionable, {
        path: _path + ".commonjsMagicComments",
        expected: "(boolean | undefined)",
        value: input.commonjsMagicComments
    }), undefined === input.createRequire || "string" === typeof input.createRequire || "boolean" === typeof input.createRequire || _report(_exceptionable, {
        path: _path + ".createRequire",
        expected: "(boolean | string | undefined)",
        value: input.createRequire
    }), undefined === input.dynamicImportFetchPriority || false === input.dynamicImportFetchPriority || "auto" === input.dynamicImportFetchPriority || "low" === input.dynamicImportFetchPriority || "high" === input.dynamicImportFetchPriority || _report(_exceptionable, {
        path: _path + ".dynamicImportFetchPriority",
        expected: "(\"auto\" | \"high\" | \"low\" | false | undefined)",
        value: input.dynamicImportFetchPriority
    }), undefined === input.dynamicImportMode || "lazy" === input.dynamicImportMode || "weak" === input.dynamicImportMode || "eager" === input.dynamicImportMode || "lazy-once" === input.dynamicImportMode || _report(_exceptionable, {
        path: _path + ".dynamicImportMode",
        expected: "(\"eager\" | \"lazy\" | \"lazy-once\" | \"weak\" | undefined)",
        value: input.dynamicImportMode
    }), undefined === input.dynamicImportPrefetch || "number" === typeof input.dynamicImportPrefetch || "boolean" === typeof input.dynamicImportPrefetch || _report(_exceptionable, {
        path: _path + ".dynamicImportPrefetch",
        expected: "(boolean | number | undefined)",
        value: input.dynamicImportPrefetch
    }), undefined === input.dynamicImportPreload || "number" === typeof input.dynamicImportPreload || "boolean" === typeof input.dynamicImportPreload || _report(_exceptionable, {
        path: _path + ".dynamicImportPreload",
        expected: "(boolean | number | undefined)",
        value: input.dynamicImportPreload
    }), undefined === input.exportsPresence || false === input.exportsPresence || "warn" === input.exportsPresence || "error" === input.exportsPresence || "auto" === input.exportsPresence || _report(_exceptionable, {
        path: _path + ".exportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.exportsPresence
    }), undefined === input.exprContextCritical || "boolean" === typeof input.exprContextCritical || _report(_exceptionable, {
        path: _path + ".exprContextCritical",
        expected: "(boolean | undefined)",
        value: input.exprContextCritical
    }), undefined === input.exprContextRecursive || "boolean" === typeof input.exprContextRecursive || _report(_exceptionable, {
        path: _path + ".exprContextRecursive",
        expected: "(boolean | undefined)",
        value: input.exprContextRecursive
    }), (null !== input.exprContextRegExp || _report(_exceptionable, {
        path: _path + ".exprContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.exprContextRegExp
    })) && (undefined === input.exprContextRegExp || "boolean" === typeof input.exprContextRegExp || input.exprContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exprContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.exprContextRegExp
    })), undefined === input.exprContextRequest || "string" === typeof input.exprContextRequest || _report(_exceptionable, {
        path: _path + ".exprContextRequest",
        expected: "(string | undefined)",
        value: input.exprContextRequest
    }), undefined === input.harmony || "boolean" === typeof input.harmony || _report(_exceptionable, {
        path: _path + ".harmony",
        expected: "(boolean | undefined)",
        value: input.harmony
    }), undefined === input["import"] || "boolean" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(boolean | undefined)",
        value: input["import"]
    }), undefined === input.importExportsPresence || false === input.importExportsPresence || "warn" === input.importExportsPresence || "error" === input.importExportsPresence || "auto" === input.importExportsPresence || _report(_exceptionable, {
        path: _path + ".importExportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.importExportsPresence
    }), undefined === input.importMeta || "boolean" === typeof input.importMeta || _report(_exceptionable, {
        path: _path + ".importMeta",
        expected: "(boolean | undefined)",
        value: input.importMeta
    }), undefined === input.importMetaContext || "boolean" === typeof input.importMetaContext || _report(_exceptionable, {
        path: _path + ".importMetaContext",
        expected: "(boolean | undefined)",
        value: input.importMetaContext
    }), (null !== input.node || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })) && (undefined === input.node || false === input.node || ("object" === typeof input.node && null !== input.node && false === Array.isArray(input.node) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })) && _vo323(input.node, _path + ".node", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".node",
        expected: "(NodeOptions.o1 | false | undefined)",
        value: input.node
    })), undefined === input.overrideStrict || "strict" === input.overrideStrict || "non-strict" === input.overrideStrict || _report(_exceptionable, {
        path: _path + ".overrideStrict",
        expected: "(\"non-strict\" | \"strict\" | undefined)",
        value: input.overrideStrict
    }), undefined === input.reexportExportsPresence || false === input.reexportExportsPresence || "warn" === input.reexportExportsPresence || "error" === input.reexportExportsPresence || "auto" === input.reexportExportsPresence || _report(_exceptionable, {
        path: _path + ".reexportExportsPresence",
        expected: "(\"auto\" | \"error\" | \"warn\" | false | undefined)",
        value: input.reexportExportsPresence
    }), undefined === input.requireContext || "boolean" === typeof input.requireContext || _report(_exceptionable, {
        path: _path + ".requireContext",
        expected: "(boolean | undefined)",
        value: input.requireContext
    }), undefined === input.requireEnsure || "boolean" === typeof input.requireEnsure || _report(_exceptionable, {
        path: _path + ".requireEnsure",
        expected: "(boolean | undefined)",
        value: input.requireEnsure
    }), undefined === input.requireInclude || "boolean" === typeof input.requireInclude || _report(_exceptionable, {
        path: _path + ".requireInclude",
        expected: "(boolean | undefined)",
        value: input.requireInclude
    }), undefined === input.requireJs || "boolean" === typeof input.requireJs || _report(_exceptionable, {
        path: _path + ".requireJs",
        expected: "(boolean | undefined)",
        value: input.requireJs
    }), undefined === input.strictExportPresence || "boolean" === typeof input.strictExportPresence || _report(_exceptionable, {
        path: _path + ".strictExportPresence",
        expected: "(boolean | undefined)",
        value: input.strictExportPresence
    }), undefined === input.strictThisContextOnImports || "boolean" === typeof input.strictThisContextOnImports || _report(_exceptionable, {
        path: _path + ".strictThisContextOnImports",
        expected: "(boolean | undefined)",
        value: input.strictThisContextOnImports
    }), undefined === input.system || "boolean" === typeof input.system || _report(_exceptionable, {
        path: _path + ".system",
        expected: "(boolean | undefined)",
        value: input.system
    }), undefined === input.unknownContextCritical || "boolean" === typeof input.unknownContextCritical || _report(_exceptionable, {
        path: _path + ".unknownContextCritical",
        expected: "(boolean | undefined)",
        value: input.unknownContextCritical
    }), undefined === input.unknownContextRecursive || "boolean" === typeof input.unknownContextRecursive || _report(_exceptionable, {
        path: _path + ".unknownContextRecursive",
        expected: "(boolean | undefined)",
        value: input.unknownContextRecursive
    }), (null !== input.unknownContextRegExp || _report(_exceptionable, {
        path: _path + ".unknownContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.unknownContextRegExp
    })) && (undefined === input.unknownContextRegExp || "boolean" === typeof input.unknownContextRegExp || input.unknownContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".unknownContextRegExp",
        expected: "(RegExp | boolean | undefined)",
        value: input.unknownContextRegExp
    })), undefined === input.unknownContextRequest || "string" === typeof input.unknownContextRequest || _report(_exceptionable, {
        path: _path + ".unknownContextRequest",
        expected: "(string | undefined)",
        value: input.unknownContextRequest
    }), undefined === input.url || "relative" === input.url || "boolean" === typeof input.url || _report(_exceptionable, {
        path: _path + ".url",
        expected: "(\"relative\" | boolean | undefined)",
        value: input.url
    }), (null !== input.worker || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })) && (undefined === input.worker || "boolean" === typeof input.worker || (Array.isArray(input.worker) || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })) && input.worker.map((elem, _index657) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".worker[" + _index657 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".worker",
        expected: "(Array<string> | boolean | undefined)",
        value: input.worker
    })), undefined === input.wrappedContextCritical || "boolean" === typeof input.wrappedContextCritical || _report(_exceptionable, {
        path: _path + ".wrappedContextCritical",
        expected: "(boolean | undefined)",
        value: input.wrappedContextCritical
    }), undefined === input.wrappedContextRecursive || "boolean" === typeof input.wrappedContextRecursive || _report(_exceptionable, {
        path: _path + ".wrappedContextRecursive",
        expected: "(boolean | undefined)",
        value: input.wrappedContextRecursive
    }), undefined === input.wrappedContextRegExp || input.wrappedContextRegExp instanceof RegExp || _report(_exceptionable, {
        path: _path + ".wrappedContextRegExp",
        expected: "(RegExp | undefined)",
        value: input.wrappedContextRegExp
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["amd", "browserify", "commonjs", "commonjsMagicComments", "createRequire", "dynamicImportFetchPriority", "dynamicImportMode", "dynamicImportPrefetch", "dynamicImportPreload", "exportsPresence", "exprContextCritical", "exprContextRecursive", "exprContextRegExp", "exprContextRequest", "harmony", "import", "importExportsPresence", "importMeta", "importMetaContext", "node", "overrideStrict", "reexportExportsPresence", "requireContext", "requireEnsure", "requireInclude", "requireJs", "strictExportPresence", "strictThisContextOnImports", "system", "unknownContextCritical", "unknownContextRecursive", "unknownContextRegExp", "unknownContextRequest", "url", "worker", "wrappedContextCritical", "wrappedContextRecursive", "wrappedContextRegExp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo322 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo323 = (input, _path, _exceptionable = true) => [undefined === input.__dirname || "warn-mock" === input.__dirname || "mock" === input.__dirname || "eval-only" === input.__dirname || "node-module" === input.__dirname || "boolean" === typeof input.__dirname || _report(_exceptionable, {
        path: _path + ".__dirname",
        expected: "(\"eval-only\" | \"mock\" | \"node-module\" | \"warn-mock\" | boolean | undefined)",
        value: input.__dirname
    }), undefined === input.__filename || "warn-mock" === input.__filename || "mock" === input.__filename || "eval-only" === input.__filename || "node-module" === input.__filename || "boolean" === typeof input.__filename || _report(_exceptionable, {
        path: _path + ".__filename",
        expected: "(\"eval-only\" | \"mock\" | \"node-module\" | \"warn-mock\" | boolean | undefined)",
        value: input.__filename
    }), undefined === input.global || "warn" === input.global || "boolean" === typeof input.global || _report(_exceptionable, {
        path: _path + ".global",
        expected: "(\"warn\" | boolean | undefined)",
        value: input.global
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["__dirname", "__filename", "global"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo324 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo325 = (input, _path, _exceptionable = true) => [undefined === input.avoidEntryIife || "boolean" === typeof input.avoidEntryIife || _report(_exceptionable, {
        path: _path + ".avoidEntryIife",
        expected: "(boolean | undefined)",
        value: input.avoidEntryIife
    }), undefined === input.checkWasmTypes || "boolean" === typeof input.checkWasmTypes || _report(_exceptionable, {
        path: _path + ".checkWasmTypes",
        expected: "(boolean | undefined)",
        value: input.checkWasmTypes
    }), undefined === input.chunkIds || false === input.chunkIds || "size" === input.chunkIds || "named" === input.chunkIds || "natural" === input.chunkIds || "deterministic" === input.chunkIds || "total-size" === input.chunkIds || _report(_exceptionable, {
        path: _path + ".chunkIds",
        expected: "(\"deterministic\" | \"named\" | \"natural\" | \"size\" | \"total-size\" | false | undefined)",
        value: input.chunkIds
    }), undefined === input.concatenateModules || "boolean" === typeof input.concatenateModules || _report(_exceptionable, {
        path: _path + ".concatenateModules",
        expected: "(boolean | undefined)",
        value: input.concatenateModules
    }), undefined === input.emitOnErrors || "boolean" === typeof input.emitOnErrors || _report(_exceptionable, {
        path: _path + ".emitOnErrors",
        expected: "(boolean | undefined)",
        value: input.emitOnErrors
    }), undefined === input.flagIncludedChunks || "boolean" === typeof input.flagIncludedChunks || _report(_exceptionable, {
        path: _path + ".flagIncludedChunks",
        expected: "(boolean | undefined)",
        value: input.flagIncludedChunks
    }), undefined === input.innerGraph || "boolean" === typeof input.innerGraph || _report(_exceptionable, {
        path: _path + ".innerGraph",
        expected: "(boolean | undefined)",
        value: input.innerGraph
    }), undefined === input.mangleExports || "size" === input.mangleExports || "deterministic" === input.mangleExports || "boolean" === typeof input.mangleExports || _report(_exceptionable, {
        path: _path + ".mangleExports",
        expected: "(\"deterministic\" | \"size\" | boolean | undefined)",
        value: input.mangleExports
    }), undefined === input.mangleWasmImports || "boolean" === typeof input.mangleWasmImports || _report(_exceptionable, {
        path: _path + ".mangleWasmImports",
        expected: "(boolean | undefined)",
        value: input.mangleWasmImports
    }), undefined === input.mergeDuplicateChunks || "boolean" === typeof input.mergeDuplicateChunks || _report(_exceptionable, {
        path: _path + ".mergeDuplicateChunks",
        expected: "(boolean | undefined)",
        value: input.mergeDuplicateChunks
    }), undefined === input.minimize || "boolean" === typeof input.minimize || _report(_exceptionable, {
        path: _path + ".minimize",
        expected: "(boolean | undefined)",
        value: input.minimize
    }), undefined === input.minimizer || (Array.isArray(input.minimizer) || _report(_exceptionable, {
        path: _path + ".minimizer",
        expected: "(Array<false | \"\" | 0 | \"...\" | ((this: Compiler, compiler: Compiler) => void) | WebpackPluginInstance | null | undefined> | undefined)",
        value: input.minimizer
    })) && input.minimizer.map((elem, _index658) => null === elem || undefined === elem || "function" === typeof elem || false === elem || "" === elem || "..." === elem || 0 === elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".minimizer[" + _index658 + "]",
        expected: "(\"\" | \"...\" | 0 | WebpackPluginInstance.o1 | false | null | undefined)",
        value: elem
    })) && _vo326(elem, _path + ".minimizer[" + _index658 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minimizer[" + _index658 + "]",
        expected: "(\"\" | \"...\" | 0 | WebpackPluginInstance.o1 | false | null | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".minimizer",
        expected: "(Array<false | \"\" | 0 | \"...\" | ((this: Compiler, compiler: Compiler) => void) | WebpackPluginInstance | null | undefined> | undefined)",
        value: input.minimizer
    }), undefined === input.moduleIds || false === input.moduleIds || "size" === input.moduleIds || "named" === input.moduleIds || "natural" === input.moduleIds || "deterministic" === input.moduleIds || "hashed" === input.moduleIds || _report(_exceptionable, {
        path: _path + ".moduleIds",
        expected: "(\"deterministic\" | \"hashed\" | \"named\" | \"natural\" | \"size\" | false | undefined)",
        value: input.moduleIds
    }), undefined === input.noEmitOnErrors || "boolean" === typeof input.noEmitOnErrors || _report(_exceptionable, {
        path: _path + ".noEmitOnErrors",
        expected: "(boolean | undefined)",
        value: input.noEmitOnErrors
    }), undefined === input.nodeEnv || false === input.nodeEnv || "string" === typeof input.nodeEnv || _report(_exceptionable, {
        path: _path + ".nodeEnv",
        expected: "(false | string | undefined)",
        value: input.nodeEnv
    }), undefined === input.portableRecords || "boolean" === typeof input.portableRecords || _report(_exceptionable, {
        path: _path + ".portableRecords",
        expected: "(boolean | undefined)",
        value: input.portableRecords
    }), undefined === input.providedExports || "boolean" === typeof input.providedExports || _report(_exceptionable, {
        path: _path + ".providedExports",
        expected: "(boolean | undefined)",
        value: input.providedExports
    }), undefined === input.realContentHash || "boolean" === typeof input.realContentHash || _report(_exceptionable, {
        path: _path + ".realContentHash",
        expected: "(boolean | undefined)",
        value: input.realContentHash
    }), undefined === input.removeAvailableModules || "boolean" === typeof input.removeAvailableModules || _report(_exceptionable, {
        path: _path + ".removeAvailableModules",
        expected: "(boolean | undefined)",
        value: input.removeAvailableModules
    }), undefined === input.removeEmptyChunks || "boolean" === typeof input.removeEmptyChunks || _report(_exceptionable, {
        path: _path + ".removeEmptyChunks",
        expected: "(boolean | undefined)",
        value: input.removeEmptyChunks
    }), (null !== input.runtimeChunk || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o81 | boolean | undefined)",
        value: input.runtimeChunk
    })) && (undefined === input.runtimeChunk || "single" === input.runtimeChunk || "multiple" === input.runtimeChunk || "boolean" === typeof input.runtimeChunk || ("object" === typeof input.runtimeChunk && null !== input.runtimeChunk && false === Array.isArray(input.runtimeChunk) || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o81 | boolean | undefined)",
        value: input.runtimeChunk
    })) && _vo327(input.runtimeChunk, _path + ".runtimeChunk", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".runtimeChunk",
        expected: "(\"multiple\" | \"single\" | __type.o81 | boolean | undefined)",
        value: input.runtimeChunk
    })), undefined === input.sideEffects || "flag" === input.sideEffects || "boolean" === typeof input.sideEffects || _report(_exceptionable, {
        path: _path + ".sideEffects",
        expected: "(\"flag\" | boolean | undefined)",
        value: input.sideEffects
    }), (null !== input.splitChunks || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions.o1 | false | undefined)",
        value: input.splitChunks
    })) && (undefined === input.splitChunks || false === input.splitChunks || ("object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions.o1 | false | undefined)",
        value: input.splitChunks
    })) && _vo328(input.splitChunks, _path + ".splitChunks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions.o1 | false | undefined)",
        value: input.splitChunks
    })), undefined === input.usedExports || "global" === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(\"global\" | boolean | undefined)",
        value: input.usedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["avoidEntryIife", "checkWasmTypes", "chunkIds", "concatenateModules", "emitOnErrors", "flagIncludedChunks", "innerGraph", "mangleExports", "mangleWasmImports", "mergeDuplicateChunks", "minimize", "minimizer", "moduleIds", "noEmitOnErrors", "nodeEnv", "portableRecords", "providedExports", "realContentHash", "removeAvailableModules", "removeEmptyChunks", "runtimeChunk", "sideEffects", "splitChunks", "usedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo326 = (input, _path, _exceptionable = true) => [true || _report(_exceptionable, {
        path: _path + ".apply",
        expected: "unknown",
        value: input.apply
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["apply"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo327 = (input, _path, _exceptionable = true) => [(null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | string | undefined)",
        value: input.name
    })) && (undefined === input.name || "string" === typeof input.name || ("object" === typeof input.name && null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | string | undefined)",
        value: input.name
    })) && _vo23(input.name, _path + ".name", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | string | undefined)",
        value: input.name
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo328 = (input, _path, _exceptionable = true) => [undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), undefined === input.cacheGroups || ("object" === typeof input.cacheGroups && null !== input.cacheGroups && false === Array.isArray(input.cacheGroups) || _report(_exceptionable, {
        path: _path + ".cacheGroups",
        expected: "(__type.o82 | undefined)",
        value: input.cacheGroups
    })) && _vo329(input.cacheGroups, _path + ".cacheGroups", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cacheGroups",
        expected: "(__type.o82 | undefined)",
        value: input.cacheGroups
    }), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), undefined === input.defaultSizeTypes || (Array.isArray(input.defaultSizeTypes) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    })) && input.defaultSizeTypes.map((elem, _index659) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes[" + _index659 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".defaultSizeTypes",
        expected: "(Array<string> | undefined)",
        value: input.defaultSizeTypes
    }), (null !== input.enforceSizeThreshold || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o90 | number | undefined)",
        value: input.enforceSizeThreshold
    })) && (undefined === input.enforceSizeThreshold || "number" === typeof input.enforceSizeThreshold || ("object" === typeof input.enforceSizeThreshold && null !== input.enforceSizeThreshold && false === Array.isArray(input.enforceSizeThreshold) || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o90 | number | undefined)",
        value: input.enforceSizeThreshold
    })) && _vo338(input.enforceSizeThreshold, _path + ".enforceSizeThreshold", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o90 | number | undefined)",
        value: input.enforceSizeThreshold
    })), undefined === input.fallbackCacheGroup || ("object" === typeof input.fallbackCacheGroup && null !== input.fallbackCacheGroup && false === Array.isArray(input.fallbackCacheGroup) || _report(_exceptionable, {
        path: _path + ".fallbackCacheGroup",
        expected: "(__type.o91 | undefined)",
        value: input.fallbackCacheGroup
    })) && _vo339(input.fallbackCacheGroup, _path + ".fallbackCacheGroup", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".fallbackCacheGroup",
        expected: "(__type.o91 | undefined)",
        value: input.fallbackCacheGroup
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.hidePathInfo || "boolean" === typeof input.hidePathInfo || _report(_exceptionable, {
        path: _path + ".hidePathInfo",
        expected: "(boolean | undefined)",
        value: input.hidePathInfo
    }), undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests || _report(_exceptionable, {
        path: _path + ".maxAsyncRequests",
        expected: "(number | undefined)",
        value: input.maxAsyncRequests
    }), (null !== input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o97 | number | undefined)",
        value: input.maxAsyncSize
    })) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || ("object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o97 | number | undefined)",
        value: input.maxAsyncSize
    })) && _vo345(input.maxAsyncSize, _path + ".maxAsyncSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o97 | number | undefined)",
        value: input.maxAsyncSize
    })), undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests || _report(_exceptionable, {
        path: _path + ".maxInitialRequests",
        expected: "(number | undefined)",
        value: input.maxInitialRequests
    }), (null !== input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o98 | number | undefined)",
        value: input.maxInitialSize
    })) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || ("object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o98 | number | undefined)",
        value: input.maxInitialSize
    })) && _vo346(input.maxInitialSize, _path + ".maxInitialSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o98 | number | undefined)",
        value: input.maxInitialSize
    })), (null !== input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o99 | number | undefined)",
        value: input.maxSize
    })) && (undefined === input.maxSize || "number" === typeof input.maxSize || ("object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o99 | number | undefined)",
        value: input.maxSize
    })) && _vo347(input.maxSize, _path + ".maxSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o99 | number | undefined)",
        value: input.maxSize
    })), undefined === input.minChunks || "number" === typeof input.minChunks || _report(_exceptionable, {
        path: _path + ".minChunks",
        expected: "(number | undefined)",
        value: input.minChunks
    }), (null !== input.minRemainingSize || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o100 | number | undefined)",
        value: input.minRemainingSize
    })) && (undefined === input.minRemainingSize || "number" === typeof input.minRemainingSize || ("object" === typeof input.minRemainingSize && null !== input.minRemainingSize && false === Array.isArray(input.minRemainingSize) || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o100 | number | undefined)",
        value: input.minRemainingSize
    })) && _vo348(input.minRemainingSize, _path + ".minRemainingSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o100 | number | undefined)",
        value: input.minRemainingSize
    })), (null !== input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o101 | number | undefined)",
        value: input.minSize
    })) && (undefined === input.minSize || "number" === typeof input.minSize || ("object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o101 | number | undefined)",
        value: input.minSize
    })) && _vo349(input.minSize, _path + ".minSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o101 | number | undefined)",
        value: input.minSize
    })), (null !== input.minSizeReduction || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o102 | number | undefined)",
        value: input.minSizeReduction
    })) && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || ("object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o102 | number | undefined)",
        value: input.minSizeReduction
    })) && _vo350(input.minSizeReduction, _path + ".minSizeReduction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o102 | number | undefined)",
        value: input.minSizeReduction
    })), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })) && (undefined === input.name || false === input.name || "string" === typeof input.name || ("object" === typeof input.name && null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })) && _vo23(input.name, _path + ".name", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["automaticNameDelimiter", "cacheGroups", "chunks", "defaultSizeTypes", "enforceSizeThreshold", "fallbackCacheGroup", "filename", "hidePathInfo", "maxAsyncRequests", "maxAsyncSize", "maxInitialRequests", "maxInitialSize", "maxSize", "minChunks", "minRemainingSize", "minSize", "minSizeReduction", "name", "usedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo329 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Function | OptimizationSplitChunksCacheGroup.o1 | RegExp | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Function | OptimizationSplitChunksCacheGroup.o1 | RegExp | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || value instanceof RegExp || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Function | OptimizationSplitChunksCacheGroup.o1 | RegExp | false | string)",
            value: value
        })) && _vu21(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Function | OptimizationSplitChunksCacheGroup.o1 | RegExp | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo330 = (input, _path, _exceptionable = true) => [undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), undefined === input.enforce || "boolean" === typeof input.enforce || _report(_exceptionable, {
        path: _path + ".enforce",
        expected: "(boolean | undefined)",
        value: input.enforce
    }), (null !== input.enforceSizeThreshold || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o83 | number | undefined)",
        value: input.enforceSizeThreshold
    })) && (undefined === input.enforceSizeThreshold || "number" === typeof input.enforceSizeThreshold || ("object" === typeof input.enforceSizeThreshold && null !== input.enforceSizeThreshold && false === Array.isArray(input.enforceSizeThreshold) || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o83 | number | undefined)",
        value: input.enforceSizeThreshold
    })) && _vo331(input.enforceSizeThreshold, _path + ".enforceSizeThreshold", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".enforceSizeThreshold",
        expected: "(__type.o83 | number | undefined)",
        value: input.enforceSizeThreshold
    })), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.idHint || "string" === typeof input.idHint || _report(_exceptionable, {
        path: _path + ".idHint",
        expected: "(string | undefined)",
        value: input.idHint
    }), (null !== input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(Function | RegExp | string | undefined)",
        value: input.layer
    })) && (undefined === input.layer || "string" === typeof input.layer || input.layer instanceof RegExp || ("object" === typeof input.layer && null !== input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(Function | RegExp | string | undefined)",
        value: input.layer
    })) && _vo23(input.layer, _path + ".layer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(Function | RegExp | string | undefined)",
        value: input.layer
    })), undefined === input.maxAsyncRequests || "number" === typeof input.maxAsyncRequests || _report(_exceptionable, {
        path: _path + ".maxAsyncRequests",
        expected: "(number | undefined)",
        value: input.maxAsyncRequests
    }), (null !== input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o84 | number | undefined)",
        value: input.maxAsyncSize
    })) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || ("object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o84 | number | undefined)",
        value: input.maxAsyncSize
    })) && _vo332(input.maxAsyncSize, _path + ".maxAsyncSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o84 | number | undefined)",
        value: input.maxAsyncSize
    })), undefined === input.maxInitialRequests || "number" === typeof input.maxInitialRequests || _report(_exceptionable, {
        path: _path + ".maxInitialRequests",
        expected: "(number | undefined)",
        value: input.maxInitialRequests
    }), (null !== input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o85 | number | undefined)",
        value: input.maxInitialSize
    })) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || ("object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o85 | number | undefined)",
        value: input.maxInitialSize
    })) && _vo333(input.maxInitialSize, _path + ".maxInitialSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o85 | number | undefined)",
        value: input.maxInitialSize
    })), (null !== input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o86 | number | undefined)",
        value: input.maxSize
    })) && (undefined === input.maxSize || "number" === typeof input.maxSize || ("object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o86 | number | undefined)",
        value: input.maxSize
    })) && _vo334(input.maxSize, _path + ".maxSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o86 | number | undefined)",
        value: input.maxSize
    })), undefined === input.minChunks || "number" === typeof input.minChunks || _report(_exceptionable, {
        path: _path + ".minChunks",
        expected: "(number | undefined)",
        value: input.minChunks
    }), (null !== input.minRemainingSize || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o87 | number | undefined)",
        value: input.minRemainingSize
    })) && (undefined === input.minRemainingSize || "number" === typeof input.minRemainingSize || ("object" === typeof input.minRemainingSize && null !== input.minRemainingSize && false === Array.isArray(input.minRemainingSize) || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o87 | number | undefined)",
        value: input.minRemainingSize
    })) && _vo335(input.minRemainingSize, _path + ".minRemainingSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minRemainingSize",
        expected: "(__type.o87 | number | undefined)",
        value: input.minRemainingSize
    })), (null !== input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o88 | number | undefined)",
        value: input.minSize
    })) && (undefined === input.minSize || "number" === typeof input.minSize || ("object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o88 | number | undefined)",
        value: input.minSize
    })) && _vo336(input.minSize, _path + ".minSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o88 | number | undefined)",
        value: input.minSize
    })), (null !== input.minSizeReduction || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o89 | number | undefined)",
        value: input.minSizeReduction
    })) && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || ("object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o89 | number | undefined)",
        value: input.minSizeReduction
    })) && _vo337(input.minSizeReduction, _path + ".minSizeReduction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o89 | number | undefined)",
        value: input.minSizeReduction
    })), (null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })) && (undefined === input.name || false === input.name || "string" === typeof input.name || ("object" === typeof input.name && null !== input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })) && _vo23(input.name, _path + ".name", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(Function | false | string | undefined)",
        value: input.name
    })), undefined === input.priority || "number" === typeof input.priority || _report(_exceptionable, {
        path: _path + ".priority",
        expected: "(number | undefined)",
        value: input.priority
    }), undefined === input.reuseExistingChunk || "boolean" === typeof input.reuseExistingChunk || _report(_exceptionable, {
        path: _path + ".reuseExistingChunk",
        expected: "(boolean | undefined)",
        value: input.reuseExistingChunk
    }), (null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Function | RegExp | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || ("object" === typeof input.test && null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Function | RegExp | string | undefined)",
        value: input.test
    })) && _vo23(input.test, _path + ".test", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Function | RegExp | string | undefined)",
        value: input.test
    })), (null !== input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | RegExp | string | undefined)",
        value: input.type
    })) && (undefined === input.type || "string" === typeof input.type || input.type instanceof RegExp || ("object" === typeof input.type && null !== input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | RegExp | string | undefined)",
        value: input.type
    })) && _vo23(input.type, _path + ".type", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(Function | RegExp | string | undefined)",
        value: input.type
    })), undefined === input.usedExports || "boolean" === typeof input.usedExports || _report(_exceptionable, {
        path: _path + ".usedExports",
        expected: "(boolean | undefined)",
        value: input.usedExports
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["automaticNameDelimiter", "chunks", "enforce", "enforceSizeThreshold", "filename", "idHint", "layer", "maxAsyncRequests", "maxAsyncSize", "maxInitialRequests", "maxInitialSize", "maxSize", "minChunks", "minRemainingSize", "minSize", "minSizeReduction", "name", "priority", "reuseExistingChunk", "test", "type", "usedExports"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo331 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo332 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo333 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo334 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo335 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo336 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo337 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo338 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo339 = (input, _path, _exceptionable = true) => [undefined === input.automaticNameDelimiter || "string" === typeof input.automaticNameDelimiter || _report(_exceptionable, {
        path: _path + ".automaticNameDelimiter",
        expected: "(string | undefined)",
        value: input.automaticNameDelimiter
    }), (null !== input.chunks || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })) && (undefined === input.chunks || "function" === typeof input.chunks || "all" === input.chunks || "initial" === input.chunks || "async" === input.chunks || input.chunks instanceof RegExp || _report(_exceptionable, {
        path: _path + ".chunks",
        expected: "(\"all\" | \"async\" | \"initial\" | RegExp | undefined)",
        value: input.chunks
    })), (null !== input.maxAsyncSize || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o92 | number | undefined)",
        value: input.maxAsyncSize
    })) && (undefined === input.maxAsyncSize || "number" === typeof input.maxAsyncSize || ("object" === typeof input.maxAsyncSize && null !== input.maxAsyncSize && false === Array.isArray(input.maxAsyncSize) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o92 | number | undefined)",
        value: input.maxAsyncSize
    })) && _vo340(input.maxAsyncSize, _path + ".maxAsyncSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxAsyncSize",
        expected: "(__type.o92 | number | undefined)",
        value: input.maxAsyncSize
    })), (null !== input.maxInitialSize || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o93 | number | undefined)",
        value: input.maxInitialSize
    })) && (undefined === input.maxInitialSize || "number" === typeof input.maxInitialSize || ("object" === typeof input.maxInitialSize && null !== input.maxInitialSize && false === Array.isArray(input.maxInitialSize) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o93 | number | undefined)",
        value: input.maxInitialSize
    })) && _vo341(input.maxInitialSize, _path + ".maxInitialSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxInitialSize",
        expected: "(__type.o93 | number | undefined)",
        value: input.maxInitialSize
    })), (null !== input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o94 | number | undefined)",
        value: input.maxSize
    })) && (undefined === input.maxSize || "number" === typeof input.maxSize || ("object" === typeof input.maxSize && null !== input.maxSize && false === Array.isArray(input.maxSize) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o94 | number | undefined)",
        value: input.maxSize
    })) && _vo342(input.maxSize, _path + ".maxSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(__type.o94 | number | undefined)",
        value: input.maxSize
    })), (null !== input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o95 | number | undefined)",
        value: input.minSize
    })) && (undefined === input.minSize || "number" === typeof input.minSize || ("object" === typeof input.minSize && null !== input.minSize && false === Array.isArray(input.minSize) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o95 | number | undefined)",
        value: input.minSize
    })) && _vo343(input.minSize, _path + ".minSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(__type.o95 | number | undefined)",
        value: input.minSize
    })), (null !== input.minSizeReduction || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o96 | number | undefined)",
        value: input.minSizeReduction
    })) && (undefined === input.minSizeReduction || "number" === typeof input.minSizeReduction || ("object" === typeof input.minSizeReduction && null !== input.minSizeReduction && false === Array.isArray(input.minSizeReduction) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o96 | number | undefined)",
        value: input.minSizeReduction
    })) && _vo344(input.minSizeReduction, _path + ".minSizeReduction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minSizeReduction",
        expected: "(__type.o96 | number | undefined)",
        value: input.minSizeReduction
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["automaticNameDelimiter", "chunks", "maxAsyncSize", "maxInitialSize", "maxSize", "minSize", "minSizeReduction"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo340 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo341 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo342 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo343 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo344 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo345 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo346 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo347 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo348 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo349 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo350 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "number" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "number",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo351 = (input, _path, _exceptionable = true) => [undefined === input.amdContainer || "string" === typeof input.amdContainer || _report(_exceptionable, {
        path: _path + ".amdContainer",
        expected: "(string | undefined)",
        value: input.amdContainer
    }), (null !== input.assetModuleFilename || _report(_exceptionable, {
        path: _path + ".assetModuleFilename",
        expected: "(string | undefined)",
        value: input.assetModuleFilename
    })) && (undefined === input.assetModuleFilename || "function" === typeof input.assetModuleFilename || "string" === typeof input.assetModuleFilename || _report(_exceptionable, {
        path: _path + ".assetModuleFilename",
        expected: "(string | undefined)",
        value: input.assetModuleFilename
    })), undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks || _report(_exceptionable, {
        path: _path + ".asyncChunks",
        expected: "(boolean | undefined)",
        value: input.asyncChunks
    }), (null !== input.auxiliaryComment || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })) && (undefined === input.auxiliaryComment || "string" === typeof input.auxiliaryComment || ("object" === typeof input.auxiliaryComment && null !== input.auxiliaryComment && false === Array.isArray(input.auxiliaryComment) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })) && _vo236(input.auxiliaryComment, _path + ".auxiliaryComment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".auxiliaryComment",
        expected: "(LibraryCustomUmdCommentObject.o1 | string | undefined)",
        value: input.auxiliaryComment
    })), undefined === input.charset || "boolean" === typeof input.charset || _report(_exceptionable, {
        path: _path + ".charset",
        expected: "(boolean | undefined)",
        value: input.charset
    }), (null !== input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })) && (undefined === input.chunkFilename || "function" === typeof input.chunkFilename || "string" === typeof input.chunkFilename || _report(_exceptionable, {
        path: _path + ".chunkFilename",
        expected: "(string | undefined)",
        value: input.chunkFilename
    })), undefined === input.chunkFormat || false === input.chunkFormat || "string" === typeof input.chunkFormat || _report(_exceptionable, {
        path: _path + ".chunkFormat",
        expected: "(false | string | undefined)",
        value: input.chunkFormat
    }), undefined === input.chunkLoadTimeout || "number" === typeof input.chunkLoadTimeout || _report(_exceptionable, {
        path: _path + ".chunkLoadTimeout",
        expected: "(number | undefined)",
        value: input.chunkLoadTimeout
    }), undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading || _report(_exceptionable, {
        path: _path + ".chunkLoading",
        expected: "(false | string | undefined)",
        value: input.chunkLoading
    }), undefined === input.chunkLoadingGlobal || "string" === typeof input.chunkLoadingGlobal || _report(_exceptionable, {
        path: _path + ".chunkLoadingGlobal",
        expected: "(string | undefined)",
        value: input.chunkLoadingGlobal
    }), (null !== input.clean || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(CleanOptions | boolean | undefined)",
        value: input.clean
    })) && (undefined === input.clean || "boolean" === typeof input.clean || ("object" === typeof input.clean && null !== input.clean && false === Array.isArray(input.clean) || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(CleanOptions | boolean | undefined)",
        value: input.clean
    })) && _vo352(input.clean, _path + ".clean", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".clean",
        expected: "(CleanOptions | boolean | undefined)",
        value: input.clean
    })), undefined === input.compareBeforeEmit || "boolean" === typeof input.compareBeforeEmit || _report(_exceptionable, {
        path: _path + ".compareBeforeEmit",
        expected: "(boolean | undefined)",
        value: input.compareBeforeEmit
    }), undefined === input.crossOriginLoading || false === input.crossOriginLoading || "anonymous" === input.crossOriginLoading || "use-credentials" === input.crossOriginLoading || _report(_exceptionable, {
        path: _path + ".crossOriginLoading",
        expected: "(\"anonymous\" | \"use-credentials\" | false | undefined)",
        value: input.crossOriginLoading
    }), (null !== input.cssChunkFilename || _report(_exceptionable, {
        path: _path + ".cssChunkFilename",
        expected: "(string | undefined)",
        value: input.cssChunkFilename
    })) && (undefined === input.cssChunkFilename || "function" === typeof input.cssChunkFilename || "string" === typeof input.cssChunkFilename || _report(_exceptionable, {
        path: _path + ".cssChunkFilename",
        expected: "(string | undefined)",
        value: input.cssChunkFilename
    })), (null !== input.cssFilename || _report(_exceptionable, {
        path: _path + ".cssFilename",
        expected: "(string | undefined)",
        value: input.cssFilename
    })) && (undefined === input.cssFilename || "function" === typeof input.cssFilename || "string" === typeof input.cssFilename || _report(_exceptionable, {
        path: _path + ".cssFilename",
        expected: "(string | undefined)",
        value: input.cssFilename
    })), (null !== input.devtoolFallbackModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolFallbackModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolFallbackModuleFilenameTemplate
    })) && (undefined === input.devtoolFallbackModuleFilenameTemplate || "string" === typeof input.devtoolFallbackModuleFilenameTemplate || ("object" === typeof input.devtoolFallbackModuleFilenameTemplate && null !== input.devtoolFallbackModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolFallbackModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolFallbackModuleFilenameTemplate
    })) && _vo23(input.devtoolFallbackModuleFilenameTemplate, _path + ".devtoolFallbackModuleFilenameTemplate", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devtoolFallbackModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolFallbackModuleFilenameTemplate
    })), (null !== input.devtoolModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolModuleFilenameTemplate
    })) && (undefined === input.devtoolModuleFilenameTemplate || "string" === typeof input.devtoolModuleFilenameTemplate || ("object" === typeof input.devtoolModuleFilenameTemplate && null !== input.devtoolModuleFilenameTemplate || _report(_exceptionable, {
        path: _path + ".devtoolModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolModuleFilenameTemplate
    })) && _vo23(input.devtoolModuleFilenameTemplate, _path + ".devtoolModuleFilenameTemplate", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devtoolModuleFilenameTemplate",
        expected: "(Function | string | undefined)",
        value: input.devtoolModuleFilenameTemplate
    })), undefined === input.devtoolNamespace || "string" === typeof input.devtoolNamespace || _report(_exceptionable, {
        path: _path + ".devtoolNamespace",
        expected: "(string | undefined)",
        value: input.devtoolNamespace
    }), undefined === input.enabledChunkLoadingTypes || (Array.isArray(input.enabledChunkLoadingTypes) || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledChunkLoadingTypes
    })) && input.enabledChunkLoadingTypes.map((elem, _index660) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes[" + _index660 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledChunkLoadingTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledChunkLoadingTypes
    }), undefined === input.enabledLibraryTypes || (Array.isArray(input.enabledLibraryTypes) || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledLibraryTypes
    })) && input.enabledLibraryTypes.map((elem, _index661) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes[" + _index661 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledLibraryTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledLibraryTypes
    }), undefined === input.enabledWasmLoadingTypes || (Array.isArray(input.enabledWasmLoadingTypes) || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledWasmLoadingTypes
    })) && input.enabledWasmLoadingTypes.map((elem, _index662) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes[" + _index662 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enabledWasmLoadingTypes",
        expected: "(Array<string> | undefined)",
        value: input.enabledWasmLoadingTypes
    }), undefined === input.environment || ("object" === typeof input.environment && null !== input.environment && false === Array.isArray(input.environment) || _report(_exceptionable, {
        path: _path + ".environment",
        expected: "(Environment.o1 | undefined)",
        value: input.environment
    })) && _vo353(input.environment, _path + ".environment", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".environment",
        expected: "(Environment.o1 | undefined)",
        value: input.environment
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.globalObject || "string" === typeof input.globalObject || _report(_exceptionable, {
        path: _path + ".globalObject",
        expected: "(string | undefined)",
        value: input.globalObject
    }), undefined === input.hashDigest || "string" === typeof input.hashDigest || _report(_exceptionable, {
        path: _path + ".hashDigest",
        expected: "(string | undefined)",
        value: input.hashDigest
    }), undefined === input.hashDigestLength || "number" === typeof input.hashDigestLength || _report(_exceptionable, {
        path: _path + ".hashDigestLength",
        expected: "(number | undefined)",
        value: input.hashDigestLength
    }), (null !== input.hashFunction || _report(_exceptionable, {
        path: _path + ".hashFunction",
        expected: "(Hash | string | undefined)",
        value: input.hashFunction
    })) && (undefined === input.hashFunction || "string" === typeof input.hashFunction || ("object" === typeof input.hashFunction && null !== input.hashFunction || _report(_exceptionable, {
        path: _path + ".hashFunction",
        expected: "(Hash | string | undefined)",
        value: input.hashFunction
    })) && _vo354(input.hashFunction, _path + ".hashFunction", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".hashFunction",
        expected: "(Hash | string | undefined)",
        value: input.hashFunction
    })), undefined === input.hashSalt || "string" === typeof input.hashSalt || _report(_exceptionable, {
        path: _path + ".hashSalt",
        expected: "(string | undefined)",
        value: input.hashSalt
    }), undefined === input.hotUpdateChunkFilename || "string" === typeof input.hotUpdateChunkFilename || _report(_exceptionable, {
        path: _path + ".hotUpdateChunkFilename",
        expected: "(string | undefined)",
        value: input.hotUpdateChunkFilename
    }), undefined === input.hotUpdateGlobal || "string" === typeof input.hotUpdateGlobal || _report(_exceptionable, {
        path: _path + ".hotUpdateGlobal",
        expected: "(string | undefined)",
        value: input.hotUpdateGlobal
    }), undefined === input.hotUpdateMainFilename || "string" === typeof input.hotUpdateMainFilename || _report(_exceptionable, {
        path: _path + ".hotUpdateMainFilename",
        expected: "(string | undefined)",
        value: input.hotUpdateMainFilename
    }), undefined === input.ignoreBrowserWarnings || "boolean" === typeof input.ignoreBrowserWarnings || _report(_exceptionable, {
        path: _path + ".ignoreBrowserWarnings",
        expected: "(boolean | undefined)",
        value: input.ignoreBrowserWarnings
    }), undefined === input.iife || "boolean" === typeof input.iife || _report(_exceptionable, {
        path: _path + ".iife",
        expected: "(boolean | undefined)",
        value: input.iife
    }), undefined === input.importFunctionName || "string" === typeof input.importFunctionName || _report(_exceptionable, {
        path: _path + ".importFunctionName",
        expected: "(string | undefined)",
        value: input.importFunctionName
    }), undefined === input.importMetaName || "string" === typeof input.importMetaName || _report(_exceptionable, {
        path: _path + ".importMetaName",
        expected: "(string | undefined)",
        value: input.importMetaName
    }), (null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | LibraryOptions.o1 | string | undefined)",
        value: input.library
    })) && (undefined === input.library || "string" === typeof input.library || (Array.isArray(input.library) && input.library.map((elem, _index663) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".library[" + _index663 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.library && null !== input.library && false === Array.isArray(input.library) && _vu22(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | LibraryOptions.o1 | string | undefined)",
        value: input.library
    })) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(Array<string> | LibraryCustomUmdObject.o1 | LibraryOptions.o1 | string | undefined)",
        value: input.library
    })), (null !== input.libraryExport || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })) && (undefined === input.libraryExport || "string" === typeof input.libraryExport || (Array.isArray(input.libraryExport) || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })) && input.libraryExport.map((elem, _index664) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".libraryExport[" + _index664 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".libraryExport",
        expected: "(Array<string> | string | undefined)",
        value: input.libraryExport
    })), undefined === input.libraryTarget || "string" === typeof input.libraryTarget || _report(_exceptionable, {
        path: _path + ".libraryTarget",
        expected: "(string | undefined)",
        value: input.libraryTarget
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), undefined === input.path || "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "(string | undefined)",
        value: input.path
    }), undefined === input.pathinfo || "verbose" === input.pathinfo || "boolean" === typeof input.pathinfo || _report(_exceptionable, {
        path: _path + ".pathinfo",
        expected: "(\"verbose\" | boolean | undefined)",
        value: input.pathinfo
    }), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.scriptType || false === input.scriptType || "module" === input.scriptType || "text/javascript" === input.scriptType || _report(_exceptionable, {
        path: _path + ".scriptType",
        expected: "(\"module\" | \"text/javascript\" | false | undefined)",
        value: input.scriptType
    }), undefined === input.sourceMapFilename || "string" === typeof input.sourceMapFilename || _report(_exceptionable, {
        path: _path + ".sourceMapFilename",
        expected: "(string | undefined)",
        value: input.sourceMapFilename
    }), undefined === input.sourcePrefix || "string" === typeof input.sourcePrefix || _report(_exceptionable, {
        path: _path + ".sourcePrefix",
        expected: "(string | undefined)",
        value: input.sourcePrefix
    }), undefined === input.strictModuleErrorHandling || "boolean" === typeof input.strictModuleErrorHandling || _report(_exceptionable, {
        path: _path + ".strictModuleErrorHandling",
        expected: "(boolean | undefined)",
        value: input.strictModuleErrorHandling
    }), undefined === input.strictModuleExceptionHandling || "boolean" === typeof input.strictModuleExceptionHandling || _report(_exceptionable, {
        path: _path + ".strictModuleExceptionHandling",
        expected: "(boolean | undefined)",
        value: input.strictModuleExceptionHandling
    }), (null !== input.trustedTypes || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes.o1 | string | true | undefined)",
        value: input.trustedTypes
    })) && (undefined === input.trustedTypes || true === input.trustedTypes || "string" === typeof input.trustedTypes || ("object" === typeof input.trustedTypes && null !== input.trustedTypes && false === Array.isArray(input.trustedTypes) || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes.o1 | string | true | undefined)",
        value: input.trustedTypes
    })) && _vo356(input.trustedTypes, _path + ".trustedTypes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".trustedTypes",
        expected: "(TrustedTypes.o1 | string | true | undefined)",
        value: input.trustedTypes
    })), undefined === input.umdNamedDefine || "boolean" === typeof input.umdNamedDefine || _report(_exceptionable, {
        path: _path + ".umdNamedDefine",
        expected: "(boolean | undefined)",
        value: input.umdNamedDefine
    }), undefined === input.uniqueName || "string" === typeof input.uniqueName || _report(_exceptionable, {
        path: _path + ".uniqueName",
        expected: "(string | undefined)",
        value: input.uniqueName
    }), undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading || _report(_exceptionable, {
        path: _path + ".wasmLoading",
        expected: "(false | string | undefined)",
        value: input.wasmLoading
    }), undefined === input.webassemblyModuleFilename || "string" === typeof input.webassemblyModuleFilename || _report(_exceptionable, {
        path: _path + ".webassemblyModuleFilename",
        expected: "(string | undefined)",
        value: input.webassemblyModuleFilename
    }), undefined === input.workerChunkLoading || false === input.workerChunkLoading || "string" === typeof input.workerChunkLoading || _report(_exceptionable, {
        path: _path + ".workerChunkLoading",
        expected: "(false | string | undefined)",
        value: input.workerChunkLoading
    }), undefined === input.workerPublicPath || "string" === typeof input.workerPublicPath || _report(_exceptionable, {
        path: _path + ".workerPublicPath",
        expected: "(string | undefined)",
        value: input.workerPublicPath
    }), undefined === input.workerWasmLoading || false === input.workerWasmLoading || "string" === typeof input.workerWasmLoading || _report(_exceptionable, {
        path: _path + ".workerWasmLoading",
        expected: "(false | string | undefined)",
        value: input.workerWasmLoading
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["amdContainer", "assetModuleFilename", "asyncChunks", "auxiliaryComment", "charset", "chunkFilename", "chunkFormat", "chunkLoadTimeout", "chunkLoading", "chunkLoadingGlobal", "clean", "compareBeforeEmit", "crossOriginLoading", "cssChunkFilename", "cssFilename", "devtoolFallbackModuleFilenameTemplate", "devtoolModuleFilenameTemplate", "devtoolNamespace", "enabledChunkLoadingTypes", "enabledLibraryTypes", "enabledWasmLoadingTypes", "environment", "filename", "globalObject", "hashDigest", "hashDigestLength", "hashFunction", "hashSalt", "hotUpdateChunkFilename", "hotUpdateGlobal", "hotUpdateMainFilename", "ignoreBrowserWarnings", "iife", "importFunctionName", "importMetaName", "library", "libraryExport", "libraryTarget", "module", "path", "pathinfo", "publicPath", "scriptType", "sourceMapFilename", "sourcePrefix", "strictModuleErrorHandling", "strictModuleExceptionHandling", "trustedTypes", "umdNamedDefine", "uniqueName", "wasmLoading", "webassemblyModuleFilename", "workerChunkLoading", "workerPublicPath", "workerWasmLoading"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo352 = (input, _path, _exceptionable = true) => [undefined === input.dry || "boolean" === typeof input.dry || _report(_exceptionable, {
        path: _path + ".dry",
        expected: "(boolean | undefined)",
        value: input.dry
    }), (null !== input.keep || _report(_exceptionable, {
        path: _path + ".keep",
        expected: "(RegExp | string | undefined)",
        value: input.keep
    })) && (undefined === input.keep || "function" === typeof input.keep || "string" === typeof input.keep || input.keep instanceof RegExp || _report(_exceptionable, {
        path: _path + ".keep",
        expected: "(RegExp | string | undefined)",
        value: input.keep
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dry", "keep"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo353 = (input, _path, _exceptionable = true) => [undefined === input.arrowFunction || "boolean" === typeof input.arrowFunction || _report(_exceptionable, {
        path: _path + ".arrowFunction",
        expected: "(boolean | undefined)",
        value: input.arrowFunction
    }), undefined === input.asyncFunction || "boolean" === typeof input.asyncFunction || _report(_exceptionable, {
        path: _path + ".asyncFunction",
        expected: "(boolean | undefined)",
        value: input.asyncFunction
    }), undefined === input.bigIntLiteral || "boolean" === typeof input.bigIntLiteral || _report(_exceptionable, {
        path: _path + ".bigIntLiteral",
        expected: "(boolean | undefined)",
        value: input.bigIntLiteral
    }), undefined === input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
        path: _path + "[\"const\"]",
        expected: "(boolean | undefined)",
        value: input["const"]
    }), undefined === input.destructuring || "boolean" === typeof input.destructuring || _report(_exceptionable, {
        path: _path + ".destructuring",
        expected: "(boolean | undefined)",
        value: input.destructuring
    }), undefined === input.document || "boolean" === typeof input.document || _report(_exceptionable, {
        path: _path + ".document",
        expected: "(boolean | undefined)",
        value: input.document
    }), undefined === input.dynamicImport || "boolean" === typeof input.dynamicImport || _report(_exceptionable, {
        path: _path + ".dynamicImport",
        expected: "(boolean | undefined)",
        value: input.dynamicImport
    }), undefined === input.dynamicImportInWorker || "boolean" === typeof input.dynamicImportInWorker || _report(_exceptionable, {
        path: _path + ".dynamicImportInWorker",
        expected: "(boolean | undefined)",
        value: input.dynamicImportInWorker
    }), undefined === input.forOf || "boolean" === typeof input.forOf || _report(_exceptionable, {
        path: _path + ".forOf",
        expected: "(boolean | undefined)",
        value: input.forOf
    }), undefined === input.globalThis || "boolean" === typeof input.globalThis || _report(_exceptionable, {
        path: _path + ".globalThis",
        expected: "(boolean | undefined)",
        value: input.globalThis
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), undefined === input.nodePrefixForCoreModules || "boolean" === typeof input.nodePrefixForCoreModules || _report(_exceptionable, {
        path: _path + ".nodePrefixForCoreModules",
        expected: "(boolean | undefined)",
        value: input.nodePrefixForCoreModules
    }), undefined === input.optionalChaining || "boolean" === typeof input.optionalChaining || _report(_exceptionable, {
        path: _path + ".optionalChaining",
        expected: "(boolean | undefined)",
        value: input.optionalChaining
    }), undefined === input.templateLiteral || "boolean" === typeof input.templateLiteral || _report(_exceptionable, {
        path: _path + ".templateLiteral",
        expected: "(boolean | undefined)",
        value: input.templateLiteral
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["arrowFunction", "asyncFunction", "bigIntLiteral", "const", "destructuring", "document", "dynamicImport", "dynamicImportInWorker", "forOf", "globalThis", "module", "nodePrefixForCoreModules", "optionalChaining", "templateLiteral"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo354 = (input, _path, _exceptionable = true) => [("object" === typeof input.prototype && null !== input.prototype && false === Array.isArray(input.prototype) || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "Hash.o1",
        value: input.prototype
    })) && _vo355(input.prototype, _path + ".prototype", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prototype",
        expected: "Hash.o1",
        value: input.prototype
    }), "number" === typeof input.length || _report(_exceptionable, {
        path: _path + ".length",
        expected: "number",
        value: input.length
    }), true, ("object" === typeof input.caller && null !== input.caller || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    })) && _vo23(input.caller, _path + ".caller", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".caller",
        expected: "Function",
        value: input.caller
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 5 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["prototype", "length", "arguments", "caller", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo355 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo356 = (input, _path, _exceptionable = true) => [undefined === input.onPolicyCreationFailure || "continue" === input.onPolicyCreationFailure || "stop" === input.onPolicyCreationFailure || _report(_exceptionable, {
        path: _path + ".onPolicyCreationFailure",
        expected: "(\"continue\" | \"stop\" | undefined)",
        value: input.onPolicyCreationFailure
    }), undefined === input.policyName || "string" === typeof input.policyName || _report(_exceptionable, {
        path: _path + ".policyName",
        expected: "(string | undefined)",
        value: input.policyName
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["onPolicyCreationFailure", "policyName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo357 = (input, _path, _exceptionable = true) => [undefined === input.assetFilter || ("object" === typeof input.assetFilter && null !== input.assetFilter || _report(_exceptionable, {
        path: _path + ".assetFilter",
        expected: "(Function | undefined)",
        value: input.assetFilter
    })) && _vo23(input.assetFilter, _path + ".assetFilter", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assetFilter",
        expected: "(Function | undefined)",
        value: input.assetFilter
    }), undefined === input.hints || false === input.hints || "error" === input.hints || "warning" === input.hints || _report(_exceptionable, {
        path: _path + ".hints",
        expected: "(\"error\" | \"warning\" | false | undefined)",
        value: input.hints
    }), undefined === input.maxAssetSize || "number" === typeof input.maxAssetSize || _report(_exceptionable, {
        path: _path + ".maxAssetSize",
        expected: "(number | undefined)",
        value: input.maxAssetSize
    }), undefined === input.maxEntrypointSize || "number" === typeof input.maxEntrypointSize || _report(_exceptionable, {
        path: _path + ".maxEntrypointSize",
        expected: "(number | undefined)",
        value: input.maxEntrypointSize
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assetFilter", "hints", "maxAssetSize", "maxEntrypointSize"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo358 = (input, _path, _exceptionable = true) => [undefined === input.buildDependencies || ("object" === typeof input.buildDependencies && null !== input.buildDependencies && false === Array.isArray(input.buildDependencies) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(__type.o103 | undefined)",
        value: input.buildDependencies
    })) && _vo359(input.buildDependencies, _path + ".buildDependencies", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(__type.o103 | undefined)",
        value: input.buildDependencies
    }), undefined === input.immutablePaths || (Array.isArray(input.immutablePaths) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    })) && input.immutablePaths.map((elem, _index665) => (null !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index665 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index665 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".immutablePaths[" + _index665 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".immutablePaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.immutablePaths
    }), undefined === input.managedPaths || (Array.isArray(input.managedPaths) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    })) && input.managedPaths.map((elem, _index666) => (null !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index666 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index666 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".managedPaths[" + _index666 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".managedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.managedPaths
    }), undefined === input["module"] || ("object" === typeof input["module"] && null !== input["module"] && false === Array.isArray(input["module"]) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(__type.o104 | undefined)",
        value: input["module"]
    })) && _vo360(input["module"], _path + "[\"module\"]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(__type.o104 | undefined)",
        value: input["module"]
    }), undefined === input.resolve || ("object" === typeof input.resolve && null !== input.resolve && false === Array.isArray(input.resolve) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(__type.o105 | undefined)",
        value: input.resolve
    })) && _vo361(input.resolve, _path + ".resolve", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolve",
        expected: "(__type.o105 | undefined)",
        value: input.resolve
    }), undefined === input.resolveBuildDependencies || ("object" === typeof input.resolveBuildDependencies && null !== input.resolveBuildDependencies && false === Array.isArray(input.resolveBuildDependencies) || _report(_exceptionable, {
        path: _path + ".resolveBuildDependencies",
        expected: "(__type.o106 | undefined)",
        value: input.resolveBuildDependencies
    })) && _vo362(input.resolveBuildDependencies, _path + ".resolveBuildDependencies", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".resolveBuildDependencies",
        expected: "(__type.o106 | undefined)",
        value: input.resolveBuildDependencies
    }), undefined === input.unmanagedPaths || (Array.isArray(input.unmanagedPaths) || _report(_exceptionable, {
        path: _path + ".unmanagedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.unmanagedPaths
    })) && input.unmanagedPaths.map((elem, _index667) => (null !== elem || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index667 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index667 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".unmanagedPaths[" + _index667 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".unmanagedPaths",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.unmanagedPaths
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["buildDependencies", "immutablePaths", "managedPaths", "module", "resolve", "resolveBuildDependencies", "unmanagedPaths"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo359 = (input, _path, _exceptionable = true) => [undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.timestamp || "boolean" === typeof input.timestamp || _report(_exceptionable, {
        path: _path + ".timestamp",
        expected: "(boolean | undefined)",
        value: input.timestamp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hash", "timestamp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo360 = (input, _path, _exceptionable = true) => [undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.timestamp || "boolean" === typeof input.timestamp || _report(_exceptionable, {
        path: _path + ".timestamp",
        expected: "(boolean | undefined)",
        value: input.timestamp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hash", "timestamp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo361 = (input, _path, _exceptionable = true) => [undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.timestamp || "boolean" === typeof input.timestamp || _report(_exceptionable, {
        path: _path + ".timestamp",
        expected: "(boolean | undefined)",
        value: input.timestamp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hash", "timestamp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo362 = (input, _path, _exceptionable = true) => [undefined === input.hash || "boolean" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "(boolean | undefined)",
        value: input.hash
    }), undefined === input.timestamp || "boolean" === typeof input.timestamp || _report(_exceptionable, {
        path: _path + ".timestamp",
        expected: "(boolean | undefined)",
        value: input.timestamp
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["hash", "timestamp"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo363 = (input, _path, _exceptionable = true) => [undefined === input.aggregateTimeout || "number" === typeof input.aggregateTimeout || _report(_exceptionable, {
        path: _path + ".aggregateTimeout",
        expected: "(number | undefined)",
        value: input.aggregateTimeout
    }), undefined === input.followSymlinks || "boolean" === typeof input.followSymlinks || _report(_exceptionable, {
        path: _path + ".followSymlinks",
        expected: "(boolean | undefined)",
        value: input.followSymlinks
    }), (null !== input.ignored || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })) && (undefined === input.ignored || "string" === typeof input.ignored || input.ignored instanceof RegExp || (Array.isArray(input.ignored) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })) && input.ignored.map((elem, _index668) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignored[" + _index668 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignored",
        expected: "(Array<string> | RegExp | string | undefined)",
        value: input.ignored
    })), undefined === input.poll || "number" === typeof input.poll || "boolean" === typeof input.poll || _report(_exceptionable, {
        path: _path + ".poll",
        expected: "(boolean | number | undefined)",
        value: input.poll
    }), undefined === input.stdin || "boolean" === typeof input.stdin || _report(_exceptionable, {
        path: _path + ".stdin",
        expected: "(boolean | undefined)",
        value: input.stdin
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["aggregateTimeout", "followSymlinks", "ignored", "poll", "stdin"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo364 = (input, _path, _exceptionable = true) => [undefined === input.ipc || "string" === typeof input.ipc || "boolean" === typeof input.ipc || _report(_exceptionable, {
        path: _path + ".ipc",
        expected: "(boolean | string | undefined)",
        value: input.ipc
    }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(string | undefined)",
        value: input.host
    }), undefined === input.port || "string" === typeof input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | string | undefined)",
        value: input.port
    }), undefined === input.hot || "only" === input.hot || "boolean" === typeof input.hot || _report(_exceptionable, {
        path: _path + ".hot",
        expected: "(\"only\" | boolean | undefined)",
        value: input.hot
    }), undefined === input.liveReload || "boolean" === typeof input.liveReload || _report(_exceptionable, {
        path: _path + ".liveReload",
        expected: "(boolean | undefined)",
        value: input.liveReload
    }), undefined === input.devMiddleware || ("object" === typeof input.devMiddleware && null !== input.devMiddleware && false === Array.isArray(input.devMiddleware) || _report(_exceptionable, {
        path: _path + ".devMiddleware",
        expected: "(DevMiddlewareOptions<e.Request<ParamsDictionary, any, any, QueryString.ParsedQs, Record<string, any>>, e.Response<any, Record<string, any>>> | undefined)",
        value: input.devMiddleware
    })) && _vo156(input.devMiddleware, _path + ".devMiddleware", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".devMiddleware",
        expected: "(DevMiddlewareOptions<e.Request<ParamsDictionary, any, any, QueryString.ParsedQs, Record<string, any>>, e.Response<any, Record<string, any>>> | undefined)",
        value: input.devMiddleware
    }), undefined === input.compress || "boolean" === typeof input.compress || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(boolean | undefined)",
        value: input.compress
    }), (null !== input.allowedHosts || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })) && (undefined === input.allowedHosts || "string" === typeof input.allowedHosts || (Array.isArray(input.allowedHosts) || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })) && input.allowedHosts.map((elem, _index669) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".allowedHosts[" + _index669 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".allowedHosts",
        expected: "(Array<string> | string | undefined)",
        value: input.allowedHosts
    })), (null !== input.historyApiFallback || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })) && (undefined === input.historyApiFallback || "boolean" === typeof input.historyApiFallback || ("object" === typeof input.historyApiFallback && null !== input.historyApiFallback && false === Array.isArray(input.historyApiFallback) || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })) && _vo172(input.historyApiFallback, _path + ".historyApiFallback", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".historyApiFallback",
        expected: "(boolean | historyApiFallback.Options | undefined)",
        value: input.historyApiFallback
    })), (null !== input.bonjour || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })) && (undefined === input.bonjour || "boolean" === typeof input.bonjour || ("object" === typeof input.bonjour && null !== input.bonjour && false === Array.isArray(input.bonjour) || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })) && _vu15(input.bonjour, _path + ".bonjour", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".bonjour",
        expected: "(Record<string, never> | Service | boolean | undefined)",
        value: input.bonjour
    })), (null !== input.watchFiles || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })) && (undefined === input.watchFiles || "string" === typeof input.watchFiles || (Array.isArray(input.watchFiles) && (_vp3(input.watchFiles, _path + ".watchFiles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "Array<string | WatchFiles> | Array<string>",
        value: input.watchFiles
    })) || "object" === typeof input.watchFiles && null !== input.watchFiles && _vo178(input.watchFiles, _path + ".watchFiles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })) || _report(_exceptionable, {
        path: _path + ".watchFiles",
        expected: "(Array<string | WatchFiles> | Array<string> | WatchFiles.o1 | string | undefined)",
        value: input.watchFiles
    })), (null !== input.static || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })) && (undefined === input.static || "string" === typeof input.static || "boolean" === typeof input.static || (Array.isArray(input.static) && input.static.map((elem, _index672) => (null !== elem || _report(_exceptionable, {
        path: _path + ".static[" + _index672 + "]",
        expected: "(Static | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".static[" + _index672 + "]",
        expected: "(Static | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".static[" + _index672 + "]",
        expected: "(Static | string)",
        value: elem
    })) && _vo181(elem, _path + ".static[" + _index672 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".static[" + _index672 + "]",
        expected: "(Static | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.static && null !== input.static && false === Array.isArray(input.static) && _vo181(input.static, _path + ".static", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })) || _report(_exceptionable, {
        path: _path + ".static",
        expected: "(Array<string | Static> | Static | boolean | string | undefined)",
        value: input.static
    })), (null !== input.https || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })) && (undefined === input.https || "boolean" === typeof input.https || ("object" === typeof input.https && null !== input.https && false === Array.isArray(input.https) || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })) && _vo185(input.https, _path + ".https", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".https",
        expected: "(ServerOptions | boolean | undefined)",
        value: input.https
    })), undefined === input.http2 || "boolean" === typeof input.http2 || _report(_exceptionable, {
        path: _path + ".http2",
        expected: "(boolean | undefined)",
        value: input.http2
    }), (null !== input.server || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })) && (undefined === input.server || "string" === typeof input.server || ("object" === typeof input.server && null !== input.server && false === Array.isArray(input.server) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })) && _vo187(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "(ServerConfiguration | string | undefined)",
        value: input.server
    })), (null !== input.webSocketServer || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })) && (undefined === input.webSocketServer || "string" === typeof input.webSocketServer || "boolean" === typeof input.webSocketServer || ("object" === typeof input.webSocketServer && null !== input.webSocketServer && false === Array.isArray(input.webSocketServer) || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })) && _vo188(input.webSocketServer, _path + ".webSocketServer", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".webSocketServer",
        expected: "(WebSocketServerConfiguration | boolean | string | undefined)",
        value: input.webSocketServer
    })), undefined === input.proxy || (Array.isArray(input.proxy) || _report(_exceptionable, {
        path: _path + ".proxy",
        expected: "(ProxyConfigArray | undefined)",
        value: input.proxy
    })) && input.proxy.map((elem, _index673) => (null !== elem || _report(_exceptionable, {
        path: _path + ".proxy[" + _index673 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".proxy[" + _index673 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".proxy[" + _index673 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    })) && _vo189(elem, _path + ".proxy[" + _index673 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".proxy[" + _index673 + "]",
        expected: "ProxyConfigArrayItem",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".proxy",
        expected: "(ProxyConfigArray | undefined)",
        value: input.proxy
    }), (null !== input.open || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })) && (undefined === input.open || "string" === typeof input.open || "boolean" === typeof input.open || (Array.isArray(input.open) && input.open.map((elem, _index674) => (null !== elem || _report(_exceptionable, {
        path: _path + ".open[" + _index674 + "]",
        expected: "(Open | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".open[" + _index674 + "]",
        expected: "(Open | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".open[" + _index674 + "]",
        expected: "(Open | string)",
        value: elem
    })) && _vo199(elem, _path + ".open[" + _index674 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".open[" + _index674 + "]",
        expected: "(Open | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.open && null !== input.open && false === Array.isArray(input.open) && _vo199(input.open, _path + ".open", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })) || _report(_exceptionable, {
        path: _path + ".open",
        expected: "(Array<string | Open> | Open | boolean | string | undefined)",
        value: input.open
    })), undefined === input.setupExitSignals || "boolean" === typeof input.setupExitSignals || _report(_exceptionable, {
        path: _path + ".setupExitSignals",
        expected: "(boolean | undefined)",
        value: input.setupExitSignals
    }), (null !== input.client || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })) && (undefined === input.client || "boolean" === typeof input.client || ("object" === typeof input.client && null !== input.client && false === Array.isArray(input.client) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })) && _vo201(input.client, _path + ".client", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "(ClientConfiguration | boolean | undefined)",
        value: input.client
    })), (null !== input.headers || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })) && (undefined === input.headers || "function" === typeof input.headers || (Array.isArray(input.headers) && input.headers.map((elem, _index675) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".headers[" + _index675 + "]",
        expected: "__type.o49",
        value: elem
    })) && _vo204(elem, _path + ".headers[" + _index675 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers[" + _index675 + "]",
        expected: "__type.o49",
        value: elem
    })).every(flag => flag) || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _vo153(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Array<__type>.o2 | Record<string, string | string[]> | undefined)",
        value: input.headers
    })), undefined === input.onListening || true || _report(_exceptionable, {
        path: _path + ".onListening",
        expected: "undefined",
        value: input.onListening
    }), undefined === input.setupMiddlewares || true || _report(_exceptionable, {
        path: _path + ".setupMiddlewares",
        expected: "undefined",
        value: input.setupMiddlewares
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ipc", "host", "port", "hot", "liveReload", "devMiddleware", "compress", "allowedHosts", "historyApiFallback", "bonjour", "watchFiles", "static", "https", "http2", "server", "webSocketServer", "proxy", "open", "setupExitSignals", "client", "headers", "onListening", "setupMiddlewares"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo365 = (input, _path, _exceptionable = true) => [undefined === input.dedupe || (Array.isArray(input.dedupe) || _report(_exceptionable, {
        path: _path + ".dedupe",
        expected: "(Array<string> | undefined)",
        value: input.dedupe
    })) && input.dedupe.map((elem, _index676) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dedupe[" + _index676 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dedupe",
        expected: "(Array<string> | undefined)",
        value: input.dedupe
    }), (null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })) && (undefined === input.alias || "function" === typeof input.alias || (Array.isArray(input.alias) && input.alias.map((elem, _index677) => (null !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index677 + "]",
        expected: "Alias",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index677 + "]",
        expected: "Alias",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".alias[" + _index677 + "]",
        expected: "Alias",
        value: elem
    })) && _vo366(elem, _path + ".alias[" + _index677 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias[" + _index677 + "]",
        expected: "Alias",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _vo366(input.alias, _path + ".alias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })), undefined === input.aliasStrategy || "prefer-tsconfig" === input.aliasStrategy || "prefer-alias" === input.aliasStrategy || _report(_exceptionable, {
        path: _path + ".aliasStrategy",
        expected: "(\"prefer-alias\" | \"prefer-tsconfig\" | undefined)",
        value: input.aliasStrategy
    }), undefined === input.extensions || (Array.isArray(input.extensions) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    })) && input.extensions.map((elem, _index678) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index678 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "(Array<string> | undefined)",
        value: input.extensions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["dedupe", "alias", "aliasStrategy", "extensions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo366 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        })) && value.map((elem, _index679) => false === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index679 + "]",
            expected: "(false | string)",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string | false> | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo367 = (input, _path, _exceptionable = true) => [(null !== input.alias || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })) && (undefined === input.alias || "function" === typeof input.alias || (Array.isArray(input.alias) && input.alias.map((elem, _index680) => (null !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index680 + "]",
        expected: "Alias",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".alias[" + _index680 + "]",
        expected: "Alias",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".alias[" + _index680 + "]",
        expected: "Alias",
        value: elem
    })) && _vo366(elem, _path + ".alias[" + _index680 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias[" + _index680 + "]",
        expected: "Alias",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) && _vo366(input.alias, _path + ".alias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Alias | Array<Alias | ((config: Alias) => void | Alias)> | undefined)",
        value: input.alias
    })), undefined === input.aliasStrategy || "prefer-tsconfig" === input.aliasStrategy || "prefer-alias" === input.aliasStrategy || _report(_exceptionable, {
        path: _path + ".aliasStrategy",
        expected: "(\"prefer-alias\" | \"prefer-tsconfig\" | undefined)",
        value: input.aliasStrategy
    }), (null !== input.assetsInclude || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })) && (undefined === input.assetsInclude || "function" === typeof input.assetsInclude || "string" === typeof input.assetsInclude || input.assetsInclude instanceof RegExp || (Array.isArray(input.assetsInclude) && (_va0(input.assetsInclude, _path + ".assetsInclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "RuleSetConditions",
        value: input.assetsInclude
    })) || "object" === typeof input.assetsInclude && null !== input.assetsInclude && false === Array.isArray(input.assetsInclude) && _vo207(input.assetsInclude, _path + ".assetsInclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })), undefined === input.include || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.include
    })) && input.include.map((elem, _index681) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index681 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index681 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va0(elem, _path + ".include[" + _index681 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index681 + "]",
        expected: "RuleSetConditions",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo207(elem, _path + ".include[" + _index681 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index681 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".include[" + _index681 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.include
    }), undefined === input.entry || ("object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(RsbuildEntry | undefined)",
        value: input.entry
    })) && _vo368(input.entry, _path + ".entry", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(RsbuildEntry | undefined)",
        value: input.entry
    }), undefined === input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index682) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index682 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index682 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va0(elem, _path + ".exclude[" + _index682 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index682 + "]",
        expected: "RuleSetConditions",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo207(elem, _path + ".exclude[" + _index682 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index682 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index682 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.exclude
    }), (null !== input.preEntry || _report(_exceptionable, {
        path: _path + ".preEntry",
        expected: "(Array<string> | string | undefined)",
        value: input.preEntry
    })) && (undefined === input.preEntry || "string" === typeof input.preEntry || (Array.isArray(input.preEntry) || _report(_exceptionable, {
        path: _path + ".preEntry",
        expected: "(Array<string> | string | undefined)",
        value: input.preEntry
    })) && input.preEntry.map((elem, _index683) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".preEntry[" + _index683 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".preEntry",
        expected: "(Array<string> | string | undefined)",
        value: input.preEntry
    })), undefined === input.define || ("object" === typeof input.define && null !== input.define && false === Array.isArray(input.define) || _report(_exceptionable, {
        path: _path + ".define",
        expected: "(Define | undefined)",
        value: input.define
    })) && _vo370(input.define, _path + ".define", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".define",
        expected: "(Define | undefined)",
        value: input.define
    }), undefined === input.decorators || ("object" === typeof input.decorators && null !== input.decorators && false === Array.isArray(input.decorators) || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(Decorators | undefined)",
        value: input.decorators
    })) && _vo371(input.decorators, _path + ".decorators", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(Decorators | undefined)",
        value: input.decorators
    }), (null !== input.transformImport || _report(_exceptionable, {
        path: _path + ".transformImport",
        expected: "(Array<TransformImportFn | TransformImport> | undefined)",
        value: input.transformImport
    })) && (undefined === input.transformImport || "function" === typeof input.transformImport || (Array.isArray(input.transformImport) || _report(_exceptionable, {
        path: _path + ".transformImport",
        expected: "(Array<TransformImportFn | TransformImport> | undefined)",
        value: input.transformImport
    })) && input.transformImport.map((elem, _index684) => (null !== elem || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index684 + "]",
        expected: "TransformImport",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index684 + "]",
        expected: "TransformImport",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index684 + "]",
        expected: "TransformImport",
        value: elem
    })) && _vo372(elem, _path + ".transformImport[" + _index684 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index684 + "]",
        expected: "TransformImport",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".transformImport",
        expected: "(Array<TransformImportFn | TransformImport> | undefined)",
        value: input.transformImport
    })), undefined === input.tsconfigPath || "string" === typeof input.tsconfigPath || _report(_exceptionable, {
        path: _path + ".tsconfigPath",
        expected: "(string | undefined)",
        value: input.tsconfigPath
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "aliasStrategy", "assetsInclude", "include", "entry", "exclude", "preEntry", "define", "decorators", "transformImport", "tsconfigPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo368 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | RsbuildEntryDescription | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | RsbuildEntryDescription | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index685) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index685 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && _vo369(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | RsbuildEntryDescription | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | RsbuildEntryDescription | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo369 = (input, _path, _exceptionable = true) => [(null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && (undefined !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && ("string" === typeof input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })) && input["import"].map((elem, _index686) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index686 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string)",
        value: input["import"]
    })), undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(false | string | undefined)",
        value: input.runtime
    }), (null !== input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })) && (undefined === input.publicPath || "function" === typeof input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    })), undefined === input.baseUri || "string" === typeof input.baseUri || _report(_exceptionable, {
        path: _path + ".baseUri",
        expected: "(string | undefined)",
        value: input.baseUri
    }), undefined === input.chunkLoading || false === input.chunkLoading || "string" === typeof input.chunkLoading || _report(_exceptionable, {
        path: _path + ".chunkLoading",
        expected: "(false | string | undefined)",
        value: input.chunkLoading
    }), undefined === input.asyncChunks || "boolean" === typeof input.asyncChunks || _report(_exceptionable, {
        path: _path + ".asyncChunks",
        expected: "(boolean | undefined)",
        value: input.asyncChunks
    }), undefined === input.wasmLoading || false === input.wasmLoading || "string" === typeof input.wasmLoading || _report(_exceptionable, {
        path: _path + ".wasmLoading",
        expected: "(false | string | undefined)",
        value: input.wasmLoading
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "function" === typeof input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    })), undefined === input.library || ("object" === typeof input.library && null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    })) && _vo113(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    }), (null !== input.dependOn || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && (undefined === input.dependOn || "string" === typeof input.dependOn || (Array.isArray(input.dependOn) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })) && input.dependOn.map((elem, _index687) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dependOn[" + _index687 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dependOn",
        expected: "(Array<string> | string | undefined)",
        value: input.dependOn
    })), null === input.layer || undefined === input.layer || "string" === typeof input.layer || _report(_exceptionable, {
        path: _path + ".layer",
        expected: "(null | string | undefined)",
        value: input.layer
    }), undefined === input.html || "boolean" === typeof input.html || _report(_exceptionable, {
        path: _path + ".html",
        expected: "(boolean | undefined)",
        value: input.html
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "runtime", "publicPath", "baseUri", "chunkLoading", "asyncChunks", "wasmLoading", "filename", "library", "dependOn", "layer", "html"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo370 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return true;
    }).every(flag => flag)].every(flag => flag); const _vo371 = (input, _path, _exceptionable = true) => [undefined === input.version || "legacy" === input.version || "2022-03" === input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(\"2022-03\" | \"legacy\" | undefined)",
        value: input.version
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo372 = (input, _path, _exceptionable = true) => ["string" === typeof input.libraryName || _report(_exceptionable, {
        path: _path + ".libraryName",
        expected: "string",
        value: input.libraryName
    }), undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory || _report(_exceptionable, {
        path: _path + ".libraryDirectory",
        expected: "(string | undefined)",
        value: input.libraryDirectory
    }), undefined === input.style || "string" === typeof input.style || "boolean" === typeof input.style || _report(_exceptionable, {
        path: _path + ".style",
        expected: "(boolean | string | undefined)",
        value: input.style
    }), undefined === input.styleLibraryDirectory || "string" === typeof input.styleLibraryDirectory || _report(_exceptionable, {
        path: _path + ".styleLibraryDirectory",
        expected: "(string | undefined)",
        value: input.styleLibraryDirectory
    }), undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName || _report(_exceptionable, {
        path: _path + ".camelToDashComponentName",
        expected: "(boolean | undefined)",
        value: input.camelToDashComponentName
    }), undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport || _report(_exceptionable, {
        path: _path + ".transformToDefaultImport",
        expected: "(boolean | undefined)",
        value: input.transformToDefaultImport
    }), true, true, 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["libraryName", "libraryDirectory", "style", "styleLibraryDirectory", "camelToDashComponentName", "transformToDefaultImport", "customName", "customStyleName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo373 = (input, _path, _exceptionable = true) => [undefined === input.target || "node" === input.target || "web" === input.target || "web-worker" === input.target || _report(_exceptionable, {
        path: _path + ".target",
        expected: "(\"node\" | \"web\" | \"web-worker\" | undefined)",
        value: input.target
    }), (null !== input.externals || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) && (undefined === input.externals || "function" === typeof input.externals || "string" === typeof input.externals || input.externals instanceof RegExp || (Array.isArray(input.externals) && input.externals.map((elem, _index688) => (null !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index688 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".externals[" + _index688 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".externals[" + _index688 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    })) && _vo128(elem, _path + ".externals[" + _index688 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals[" + _index688 + "]",
        expected: "(ExternalItemObjectUnknown | RegExp | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.externals && null !== input.externals && false === Array.isArray(input.externals) && _vo128(input.externals, _path + ".externals", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })) || _report(_exceptionable, {
        path: _path + ".externals",
        expected: "(Array<ExternalItem> | ExternalItemObjectUnknown | RegExp | string | undefined)",
        value: input.externals
    })), undefined === input.distPath || ("object" === typeof input.distPath && null !== input.distPath && false === Array.isArray(input.distPath) || _report(_exceptionable, {
        path: _path + ".distPath",
        expected: "(DistPathConfig | undefined)",
        value: input.distPath
    })) && _vo374(input.distPath, _path + ".distPath", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".distPath",
        expected: "(DistPathConfig | undefined)",
        value: input.distPath
    }), undefined === input.filename || ("object" === typeof input.filename && null !== input.filename && false === Array.isArray(input.filename) || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(FilenameConfig | undefined)",
        value: input.filename
    })) && _vo375(input.filename, _path + ".filename", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(FilenameConfig | undefined)",
        value: input.filename
    }), undefined === input.charset || "ascii" === input.charset || "utf8" === input.charset || _report(_exceptionable, {
        path: _path + ".charset",
        expected: "(\"ascii\" | \"utf8\" | undefined)",
        value: input.charset
    }), undefined === input.polyfill || "entry" === input.polyfill || "usage" === input.polyfill || "off" === input.polyfill || _report(_exceptionable, {
        path: _path + ".polyfill",
        expected: "(\"entry\" | \"off\" | \"usage\" | undefined)",
        value: input.polyfill
    }), undefined === input.assetPrefix || "string" === typeof input.assetPrefix || _report(_exceptionable, {
        path: _path + ".assetPrefix",
        expected: "(string | undefined)",
        value: input.assetPrefix
    }), (null !== input.dataUriLimit || _report(_exceptionable, {
        path: _path + ".dataUriLimit",
        expected: "(DataUriLimit | number | undefined)",
        value: input.dataUriLimit
    })) && (undefined === input.dataUriLimit || "number" === typeof input.dataUriLimit || ("object" === typeof input.dataUriLimit && null !== input.dataUriLimit && false === Array.isArray(input.dataUriLimit) || _report(_exceptionable, {
        path: _path + ".dataUriLimit",
        expected: "(DataUriLimit | number | undefined)",
        value: input.dataUriLimit
    })) && _vo376(input.dataUriLimit, _path + ".dataUriLimit", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".dataUriLimit",
        expected: "(DataUriLimit | number | undefined)",
        value: input.dataUriLimit
    })), undefined === input.legalComments || "none" === input.legalComments || "inline" === input.legalComments || "linked" === input.legalComments || _report(_exceptionable, {
        path: _path + ".legalComments",
        expected: "(\"inline\" | \"linked\" | \"none\" | undefined)",
        value: input.legalComments
    }), (null !== input.cleanDistPath || _report(_exceptionable, {
        path: _path + ".cleanDistPath",
        expected: "(\"auto\" | CleanDistPathObject | boolean | undefined)",
        value: input.cleanDistPath
    })) && (undefined === input.cleanDistPath || "auto" === input.cleanDistPath || "boolean" === typeof input.cleanDistPath || ("object" === typeof input.cleanDistPath && null !== input.cleanDistPath && false === Array.isArray(input.cleanDistPath) || _report(_exceptionable, {
        path: _path + ".cleanDistPath",
        expected: "(\"auto\" | CleanDistPathObject | boolean | undefined)",
        value: input.cleanDistPath
    })) && _vo377(input.cleanDistPath, _path + ".cleanDistPath", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cleanDistPath",
        expected: "(\"auto\" | CleanDistPathObject | boolean | undefined)",
        value: input.cleanDistPath
    })), undefined === input.cssModules || ("object" === typeof input.cssModules && null !== input.cssModules && false === Array.isArray(input.cssModules) || _report(_exceptionable, {
        path: _path + ".cssModules",
        expected: "(CSSModules | undefined)",
        value: input.cssModules
    })) && _vo378(input.cssModules, _path + ".cssModules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssModules",
        expected: "(CSSModules | undefined)",
        value: input.cssModules
    }), (null !== input.minify || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(__type.o108 | boolean | undefined)",
        value: input.minify
    })) && (undefined === input.minify || "boolean" === typeof input.minify || ("object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(__type.o108 | boolean | undefined)",
        value: input.minify
    })) && _vo379(input.minify, _path + ".minify", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(__type.o108 | boolean | undefined)",
        value: input.minify
    })), (null !== input.manifest || _report(_exceptionable, {
        path: _path + ".manifest",
        expected: "(ManifestObjectConfig | boolean | string | undefined)",
        value: input.manifest
    })) && (undefined === input.manifest || "string" === typeof input.manifest || "boolean" === typeof input.manifest || ("object" === typeof input.manifest && null !== input.manifest && false === Array.isArray(input.manifest) || _report(_exceptionable, {
        path: _path + ".manifest",
        expected: "(ManifestObjectConfig | boolean | string | undefined)",
        value: input.manifest
    })) && _vo389(input.manifest, _path + ".manifest", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".manifest",
        expected: "(ManifestObjectConfig | boolean | string | undefined)",
        value: input.manifest
    })), (null !== input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap | boolean | undefined)",
        value: input.sourceMap
    })) && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap || ("object" === typeof input.sourceMap && null !== input.sourceMap && false === Array.isArray(input.sourceMap) || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap | boolean | undefined)",
        value: input.sourceMap
    })) && _vo390(input.sourceMap, _path + ".sourceMap", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap | boolean | undefined)",
        value: input.sourceMap
    })), undefined === input.filenameHash || "string" === typeof input.filenameHash || "boolean" === typeof input.filenameHash || _report(_exceptionable, {
        path: _path + ".filenameHash",
        expected: "(boolean | string | undefined)",
        value: input.filenameHash
    }), (null !== input.inlineScripts || _report(_exceptionable, {
        path: _path + ".inlineScripts",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineScripts
    })) && (undefined === input.inlineScripts || "function" === typeof input.inlineScripts || "boolean" === typeof input.inlineScripts || input.inlineScripts instanceof RegExp || ("object" === typeof input.inlineScripts && null !== input.inlineScripts || _report(_exceptionable, {
        path: _path + ".inlineScripts",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineScripts
    })) && _vo391(input.inlineScripts, _path + ".inlineScripts", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".inlineScripts",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineScripts
    })), (null !== input.inlineStyles || _report(_exceptionable, {
        path: _path + ".inlineStyles",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineStyles
    })) && (undefined === input.inlineStyles || "function" === typeof input.inlineStyles || "boolean" === typeof input.inlineStyles || input.inlineStyles instanceof RegExp || ("object" === typeof input.inlineStyles && null !== input.inlineStyles || _report(_exceptionable, {
        path: _path + ".inlineStyles",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineStyles
    })) && _vo391(input.inlineStyles, _path + ".inlineStyles", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".inlineStyles",
        expected: "(RegExp | __type.o111 | boolean | undefined)",
        value: input.inlineStyles
    })), undefined === input.injectStyles || "boolean" === typeof input.injectStyles || _report(_exceptionable, {
        path: _path + ".injectStyles",
        expected: "(boolean | undefined)",
        value: input.injectStyles
    }), undefined === input.overrideBrowserslist || (Array.isArray(input.overrideBrowserslist) || _report(_exceptionable, {
        path: _path + ".overrideBrowserslist",
        expected: "(Array<string> | undefined)",
        value: input.overrideBrowserslist
    })) && input.overrideBrowserslist.map((elem, _index689) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".overrideBrowserslist[" + _index689 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".overrideBrowserslist",
        expected: "(Array<string> | undefined)",
        value: input.overrideBrowserslist
    }), (null !== input.copy || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })) && (undefined === input.copy || (Array.isArray(input.copy) && input.copy.map((elem, _index690) => (null !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index690 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index690 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index690 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && _vo393(elem, _path + ".copy[" + _index690 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".copy[" + _index690 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.copy && null !== input.copy && _vo392(input.copy, _path + ".copy", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })) || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })), undefined === input.emitAssets || "boolean" === typeof input.emitAssets || _report(_exceptionable, {
        path: _path + ".emitAssets",
        expected: "(boolean | undefined)",
        value: input.emitAssets
    }), undefined === input.emitCss || "boolean" === typeof input.emitCss || _report(_exceptionable, {
        path: _path + ".emitCss",
        expected: "(boolean | undefined)",
        value: input.emitCss
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["target", "externals", "distPath", "filename", "charset", "polyfill", "assetPrefix", "dataUriLimit", "legalComments", "cleanDistPath", "cssModules", "minify", "manifest", "sourceMap", "filenameHash", "inlineScripts", "inlineStyles", "injectStyles", "overrideBrowserslist", "copy", "emitAssets", "emitCss"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo374 = (input, _path, _exceptionable = true) => [undefined === input.root || "string" === typeof input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(string | undefined)",
        value: input.root
    }), undefined === input.js || "string" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(string | undefined)",
        value: input.js
    }), undefined === input.jsAsync || "string" === typeof input.jsAsync || _report(_exceptionable, {
        path: _path + ".jsAsync",
        expected: "(string | undefined)",
        value: input.jsAsync
    }), undefined === input.css || "string" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(string | undefined)",
        value: input.css
    }), undefined === input.cssAsync || "string" === typeof input.cssAsync || _report(_exceptionable, {
        path: _path + ".cssAsync",
        expected: "(string | undefined)",
        value: input.cssAsync
    }), undefined === input.svg || "string" === typeof input.svg || _report(_exceptionable, {
        path: _path + ".svg",
        expected: "(string | undefined)",
        value: input.svg
    }), undefined === input.font || "string" === typeof input.font || _report(_exceptionable, {
        path: _path + ".font",
        expected: "(string | undefined)",
        value: input.font
    }), undefined === input.html || "string" === typeof input.html || _report(_exceptionable, {
        path: _path + ".html",
        expected: "(string | undefined)",
        value: input.html
    }), undefined === input.wasm || "string" === typeof input.wasm || _report(_exceptionable, {
        path: _path + ".wasm",
        expected: "(string | undefined)",
        value: input.wasm
    }), undefined === input.image || "string" === typeof input.image || _report(_exceptionable, {
        path: _path + ".image",
        expected: "(string | undefined)",
        value: input.image
    }), undefined === input.media || "string" === typeof input.media || _report(_exceptionable, {
        path: _path + ".media",
        expected: "(string | undefined)",
        value: input.media
    }), undefined === input.assets || "string" === typeof input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(string | undefined)",
        value: input.assets
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["root", "js", "jsAsync", "css", "cssAsync", "svg", "font", "html", "wasm", "image", "media", "assets"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo375 = (input, _path, _exceptionable = true) => [undefined === input.html || "string" === typeof input.html || _report(_exceptionable, {
        path: _path + ".html",
        expected: "(string | undefined)",
        value: input.html
    }), (null !== input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(string | undefined)",
        value: input.js
    })) && (undefined === input.js || "function" === typeof input.js || "string" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(string | undefined)",
        value: input.js
    })), (null !== input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(string | undefined)",
        value: input.css
    })) && (undefined === input.css || "function" === typeof input.css || "string" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(string | undefined)",
        value: input.css
    })), (null !== input.svg || _report(_exceptionable, {
        path: _path + ".svg",
        expected: "(string | undefined)",
        value: input.svg
    })) && (undefined === input.svg || "function" === typeof input.svg || "string" === typeof input.svg || _report(_exceptionable, {
        path: _path + ".svg",
        expected: "(string | undefined)",
        value: input.svg
    })), (null !== input.font || _report(_exceptionable, {
        path: _path + ".font",
        expected: "(string | undefined)",
        value: input.font
    })) && (undefined === input.font || "function" === typeof input.font || "string" === typeof input.font || _report(_exceptionable, {
        path: _path + ".font",
        expected: "(string | undefined)",
        value: input.font
    })), (null !== input.image || _report(_exceptionable, {
        path: _path + ".image",
        expected: "(string | undefined)",
        value: input.image
    })) && (undefined === input.image || "function" === typeof input.image || "string" === typeof input.image || _report(_exceptionable, {
        path: _path + ".image",
        expected: "(string | undefined)",
        value: input.image
    })), (null !== input.media || _report(_exceptionable, {
        path: _path + ".media",
        expected: "(string | undefined)",
        value: input.media
    })) && (undefined === input.media || "function" === typeof input.media || "string" === typeof input.media || _report(_exceptionable, {
        path: _path + ".media",
        expected: "(string | undefined)",
        value: input.media
    })), (null !== input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(string | undefined)",
        value: input.assets
    })) && (undefined === input.assets || "function" === typeof input.assets || "string" === typeof input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(string | undefined)",
        value: input.assets
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["html", "js", "css", "svg", "font", "image", "media", "assets"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo376 = (input, _path, _exceptionable = true) => [undefined === input.svg || "number" === typeof input.svg || _report(_exceptionable, {
        path: _path + ".svg",
        expected: "(number | undefined)",
        value: input.svg
    }), undefined === input.font || "number" === typeof input.font || _report(_exceptionable, {
        path: _path + ".font",
        expected: "(number | undefined)",
        value: input.font
    }), undefined === input.image || "number" === typeof input.image || _report(_exceptionable, {
        path: _path + ".image",
        expected: "(number | undefined)",
        value: input.image
    }), undefined === input.media || "number" === typeof input.media || _report(_exceptionable, {
        path: _path + ".media",
        expected: "(number | undefined)",
        value: input.media
    }), undefined === input.assets || "number" === typeof input.assets || _report(_exceptionable, {
        path: _path + ".assets",
        expected: "(number | undefined)",
        value: input.assets
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["svg", "font", "image", "media", "assets"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo377 = (input, _path, _exceptionable = true) => [undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable || _report(_exceptionable, {
        path: _path + ".enable",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.enable
    }), undefined === input.keep || (Array.isArray(input.keep) || _report(_exceptionable, {
        path: _path + ".keep",
        expected: "(Array<RegExp> | undefined)",
        value: input.keep
    })) && input.keep.map((elem, _index691) => elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".keep[" + _index691 + "]",
        expected: "RegExp",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".keep",
        expected: "(Array<RegExp> | undefined)",
        value: input.keep
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["enable", "keep"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo378 = (input, _path, _exceptionable = true) => [(null !== input.auto || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })) && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })), undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals || _report(_exceptionable, {
        path: _path + ".exportGlobals",
        expected: "(boolean | undefined)",
        value: input.exportGlobals
    }), undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention || _report(_exceptionable, {
        path: _path + ".exportLocalsConvention",
        expected: "(\"asIs\" | \"camelCase\" | \"camelCaseOnly\" | \"dashes\" | \"dashesOnly\" | undefined)",
        value: input.exportLocalsConvention
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), (null !== input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"global\" | \"icss\" | \"local\" | \"pure\" | undefined)",
        value: input.mode
    })) && (undefined === input.mode || "function" === typeof input.mode || "local" === input.mode || "global" === input.mode || "pure" === input.mode || "icss" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"global\" | \"icss\" | \"local\" | \"pure\" | undefined)",
        value: input.mode
    })), undefined === input.namedExport || "boolean" === typeof input.namedExport || _report(_exceptionable, {
        path: _path + ".namedExport",
        expected: "(boolean | undefined)",
        value: input.namedExport
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["auto", "exportGlobals", "exportLocalsConvention", "localIdentName", "mode", "namedExport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo379 = (input, _path, _exceptionable = true) => [undefined === input.js || "boolean" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(boolean | undefined)",
        value: input.js
    }), undefined === input.jsOptions || ("object" === typeof input.jsOptions && null !== input.jsOptions && false === Array.isArray(input.jsOptions) || _report(_exceptionable, {
        path: _path + ".jsOptions",
        expected: "(SwcJsMinimizerRspackPluginOptions | undefined)",
        value: input.jsOptions
    })) && _vo380(input.jsOptions, _path + ".jsOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".jsOptions",
        expected: "(SwcJsMinimizerRspackPluginOptions | undefined)",
        value: input.jsOptions
    }), undefined === input.css || "boolean" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(boolean | undefined)",
        value: input.css
    }), undefined === input.cssOptions || ("object" === typeof input.cssOptions && null !== input.cssOptions && false === Array.isArray(input.cssOptions) || _report(_exceptionable, {
        path: _path + ".cssOptions",
        expected: "(LightningCssMinimizerRspackPluginOptions | undefined)",
        value: input.cssOptions
    })) && _vo387(input.cssOptions, _path + ".cssOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssOptions",
        expected: "(LightningCssMinimizerRspackPluginOptions | undefined)",
        value: input.cssOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["js", "jsOptions", "css", "cssOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo380 = (input, _path, _exceptionable = true) => [(null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })) && input.test.map((elem, _index692) => (null !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index692 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index692 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test[" + _index692 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index693) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index693 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index693 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exclude[" + _index693 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })) && (undefined === input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })) && input.include.map((elem, _index694) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index694 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index694 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".include[" + _index694 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })), (null !== input.extractComments || _report(_exceptionable, {
        path: _path + ".extractComments",
        expected: "(ExtractCommentsObject | RegExp | boolean | undefined)",
        value: input.extractComments
    })) && (undefined === input.extractComments || "boolean" === typeof input.extractComments || input.extractComments instanceof RegExp || ("object" === typeof input.extractComments && null !== input.extractComments && false === Array.isArray(input.extractComments) || _report(_exceptionable, {
        path: _path + ".extractComments",
        expected: "(ExtractCommentsObject | RegExp | boolean | undefined)",
        value: input.extractComments
    })) && _vo381(input.extractComments, _path + ".extractComments", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".extractComments",
        expected: "(ExtractCommentsObject | RegExp | boolean | undefined)",
        value: input.extractComments
    })), undefined === input.minimizerOptions || ("object" === typeof input.minimizerOptions && null !== input.minimizerOptions && false === Array.isArray(input.minimizerOptions) || _report(_exceptionable, {
        path: _path + ".minimizerOptions",
        expected: "(__type.o109 | undefined)",
        value: input.minimizerOptions
    })) && _vo382(input.minimizerOptions, _path + ".minimizerOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minimizerOptions",
        expected: "(__type.o109 | undefined)",
        value: input.minimizerOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["test", "exclude", "include", "extractComments", "minimizerOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo381 = (input, _path, _exceptionable = true) => [(null !== input.condition || _report(_exceptionable, {
        path: _path + ".condition",
        expected: "(RegExp | boolean | undefined)",
        value: input.condition
    })) && (undefined === input.condition || "boolean" === typeof input.condition || input.condition instanceof RegExp || _report(_exceptionable, {
        path: _path + ".condition",
        expected: "(RegExp | boolean | undefined)",
        value: input.condition
    })), undefined === input.banner || "string" === typeof input.banner || "boolean" === typeof input.banner || _report(_exceptionable, {
        path: _path + ".banner",
        expected: "(boolean | string | undefined)",
        value: input.banner
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["condition", "banner"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo382 = (input, _path, _exceptionable = true) => [undefined === input.minify || "boolean" === typeof input.minify || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(boolean | undefined)",
        value: input.minify
    }), (null !== input.compress || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions.o1 | boolean | undefined)",
        value: input.compress
    })) && (undefined === input.compress || "boolean" === typeof input.compress || ("object" === typeof input.compress && null !== input.compress && false === Array.isArray(input.compress) || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions.o1 | boolean | undefined)",
        value: input.compress
    })) && _vo383(input.compress, _path + ".compress", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".compress",
        expected: "(TerserCompressOptions.o1 | boolean | undefined)",
        value: input.compress
    })), (null !== input.mangle || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions.o1 | boolean | undefined)",
        value: input.mangle
    })) && (undefined === input.mangle || "boolean" === typeof input.mangle || ("object" === typeof input.mangle && null !== input.mangle && false === Array.isArray(input.mangle) || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions.o1 | boolean | undefined)",
        value: input.mangle
    })) && _vo384(input.mangle, _path + ".mangle", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".mangle",
        expected: "(TerserMangleOptions.o1 | boolean | undefined)",
        value: input.mangle
    })), undefined === input.format || ("object" === typeof input.format && null !== input.format && false === Array.isArray(input.format) || _report(_exceptionable, {
        path: _path + ".format",
        expected: "(JsFormatOptions & ToSnakeCaseProperties<JsFormatOptions>.o1 | undefined)",
        value: input.format
    })) && _vo386(input.format, _path + ".format", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".format",
        expected: "(JsFormatOptions & ToSnakeCaseProperties<JsFormatOptions>.o1 | undefined)",
        value: input.format
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["minify", "compress", "mangle", "format", "module"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo383 = (input, _path, _exceptionable = true) => [undefined === input.arguments || "boolean" === typeof input.arguments || _report(_exceptionable, {
        path: _path + ".arguments",
        expected: "(boolean | undefined)",
        value: input.arguments
    }), undefined === input.arrows || "boolean" === typeof input.arrows || _report(_exceptionable, {
        path: _path + ".arrows",
        expected: "(boolean | undefined)",
        value: input.arrows
    }), undefined === input.booleans || "boolean" === typeof input.booleans || _report(_exceptionable, {
        path: _path + ".booleans",
        expected: "(boolean | undefined)",
        value: input.booleans
    }), undefined === input.booleans_as_integers || "boolean" === typeof input.booleans_as_integers || _report(_exceptionable, {
        path: _path + ".booleans_as_integers",
        expected: "(boolean | undefined)",
        value: input.booleans_as_integers
    }), undefined === input.collapse_vars || "boolean" === typeof input.collapse_vars || _report(_exceptionable, {
        path: _path + ".collapse_vars",
        expected: "(boolean | undefined)",
        value: input.collapse_vars
    }), undefined === input.comparisons || "boolean" === typeof input.comparisons || _report(_exceptionable, {
        path: _path + ".comparisons",
        expected: "(boolean | undefined)",
        value: input.comparisons
    }), undefined === input.computed_props || "boolean" === typeof input.computed_props || _report(_exceptionable, {
        path: _path + ".computed_props",
        expected: "(boolean | undefined)",
        value: input.computed_props
    }), undefined === input.conditionals || "boolean" === typeof input.conditionals || _report(_exceptionable, {
        path: _path + ".conditionals",
        expected: "(boolean | undefined)",
        value: input.conditionals
    }), undefined === input.dead_code || "boolean" === typeof input.dead_code || _report(_exceptionable, {
        path: _path + ".dead_code",
        expected: "(boolean | undefined)",
        value: input.dead_code
    }), undefined === input.defaults || "boolean" === typeof input.defaults || _report(_exceptionable, {
        path: _path + ".defaults",
        expected: "(boolean | undefined)",
        value: input.defaults
    }), undefined === input.directives || "boolean" === typeof input.directives || _report(_exceptionable, {
        path: _path + ".directives",
        expected: "(boolean | undefined)",
        value: input.directives
    }), undefined === input.drop_console || "boolean" === typeof input.drop_console || _report(_exceptionable, {
        path: _path + ".drop_console",
        expected: "(boolean | undefined)",
        value: input.drop_console
    }), undefined === input.drop_debugger || "boolean" === typeof input.drop_debugger || _report(_exceptionable, {
        path: _path + ".drop_debugger",
        expected: "(boolean | undefined)",
        value: input.drop_debugger
    }), undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma || _report(_exceptionable, {
        path: _path + ".ecma",
        expected: "(number | string | undefined)",
        value: input.ecma
    }), undefined === input.evaluate || "boolean" === typeof input.evaluate || _report(_exceptionable, {
        path: _path + ".evaluate",
        expected: "(boolean | undefined)",
        value: input.evaluate
    }), undefined === input.expression || "boolean" === typeof input.expression || _report(_exceptionable, {
        path: _path + ".expression",
        expected: "(boolean | undefined)",
        value: input.expression
    }), true, undefined === input.hoist_funs || "boolean" === typeof input.hoist_funs || _report(_exceptionable, {
        path: _path + ".hoist_funs",
        expected: "(boolean | undefined)",
        value: input.hoist_funs
    }), undefined === input.hoist_props || "boolean" === typeof input.hoist_props || _report(_exceptionable, {
        path: _path + ".hoist_props",
        expected: "(boolean | undefined)",
        value: input.hoist_props
    }), undefined === input.hoist_vars || "boolean" === typeof input.hoist_vars || _report(_exceptionable, {
        path: _path + ".hoist_vars",
        expected: "(boolean | undefined)",
        value: input.hoist_vars
    }), undefined === input.ie8 || "boolean" === typeof input.ie8 || _report(_exceptionable, {
        path: _path + ".ie8",
        expected: "(boolean | undefined)",
        value: input.ie8
    }), undefined === input.if_return || "boolean" === typeof input.if_return || _report(_exceptionable, {
        path: _path + ".if_return",
        expected: "(boolean | undefined)",
        value: input.if_return
    }), undefined === input.inline || 0 === input.inline || 1 === input.inline || 2 === input.inline || 3 === input.inline || _report(_exceptionable, {
        path: _path + ".inline",
        expected: "(0 | 1 | 2 | 3 | undefined)",
        value: input.inline
    }), undefined === input.join_vars || "boolean" === typeof input.join_vars || _report(_exceptionable, {
        path: _path + ".join_vars",
        expected: "(boolean | undefined)",
        value: input.join_vars
    }), undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames || _report(_exceptionable, {
        path: _path + ".keep_classnames",
        expected: "(boolean | undefined)",
        value: input.keep_classnames
    }), undefined === input.keep_fargs || "boolean" === typeof input.keep_fargs || _report(_exceptionable, {
        path: _path + ".keep_fargs",
        expected: "(boolean | undefined)",
        value: input.keep_fargs
    }), undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames || _report(_exceptionable, {
        path: _path + ".keep_fnames",
        expected: "(boolean | undefined)",
        value: input.keep_fnames
    }), undefined === input.keep_infinity || "boolean" === typeof input.keep_infinity || _report(_exceptionable, {
        path: _path + ".keep_infinity",
        expected: "(boolean | undefined)",
        value: input.keep_infinity
    }), undefined === input.loops || "boolean" === typeof input.loops || _report(_exceptionable, {
        path: _path + ".loops",
        expected: "(boolean | undefined)",
        value: input.loops
    }), undefined === input.negate_iife || "boolean" === typeof input.negate_iife || _report(_exceptionable, {
        path: _path + ".negate_iife",
        expected: "(boolean | undefined)",
        value: input.negate_iife
    }), undefined === input.passes || "number" === typeof input.passes || _report(_exceptionable, {
        path: _path + ".passes",
        expected: "(number | undefined)",
        value: input.passes
    }), undefined === input.properties || "boolean" === typeof input.properties || _report(_exceptionable, {
        path: _path + ".properties",
        expected: "(boolean | undefined)",
        value: input.properties
    }), true, undefined === input.pure_funcs || (Array.isArray(input.pure_funcs) || _report(_exceptionable, {
        path: _path + ".pure_funcs",
        expected: "(Array<string> | undefined)",
        value: input.pure_funcs
    })) && input.pure_funcs.map((elem, _index695) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".pure_funcs[" + _index695 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".pure_funcs",
        expected: "(Array<string> | undefined)",
        value: input.pure_funcs
    }), undefined === input.reduce_funcs || "boolean" === typeof input.reduce_funcs || _report(_exceptionable, {
        path: _path + ".reduce_funcs",
        expected: "(boolean | undefined)",
        value: input.reduce_funcs
    }), undefined === input.reduce_vars || "boolean" === typeof input.reduce_vars || _report(_exceptionable, {
        path: _path + ".reduce_vars",
        expected: "(boolean | undefined)",
        value: input.reduce_vars
    }), true, undefined === input.side_effects || "boolean" === typeof input.side_effects || _report(_exceptionable, {
        path: _path + ".side_effects",
        expected: "(boolean | undefined)",
        value: input.side_effects
    }), undefined === input.switches || "boolean" === typeof input.switches || _report(_exceptionable, {
        path: _path + ".switches",
        expected: "(boolean | undefined)",
        value: input.switches
    }), true, true, undefined === input.typeofs || "boolean" === typeof input.typeofs || _report(_exceptionable, {
        path: _path + ".typeofs",
        expected: "(boolean | undefined)",
        value: input.typeofs
    }), undefined === input.unsafe || "boolean" === typeof input.unsafe || _report(_exceptionable, {
        path: _path + ".unsafe",
        expected: "(boolean | undefined)",
        value: input.unsafe
    }), undefined === input.unsafe_passes || "boolean" === typeof input.unsafe_passes || _report(_exceptionable, {
        path: _path + ".unsafe_passes",
        expected: "(boolean | undefined)",
        value: input.unsafe_passes
    }), undefined === input.unsafe_arrows || "boolean" === typeof input.unsafe_arrows || _report(_exceptionable, {
        path: _path + ".unsafe_arrows",
        expected: "(boolean | undefined)",
        value: input.unsafe_arrows
    }), undefined === input.unsafe_comps || "boolean" === typeof input.unsafe_comps || _report(_exceptionable, {
        path: _path + ".unsafe_comps",
        expected: "(boolean | undefined)",
        value: input.unsafe_comps
    }), undefined === input.unsafe_function || "boolean" === typeof input.unsafe_function || _report(_exceptionable, {
        path: _path + ".unsafe_function",
        expected: "(boolean | undefined)",
        value: input.unsafe_function
    }), undefined === input.unsafe_math || "boolean" === typeof input.unsafe_math || _report(_exceptionable, {
        path: _path + ".unsafe_math",
        expected: "(boolean | undefined)",
        value: input.unsafe_math
    }), undefined === input.unsafe_symbols || "boolean" === typeof input.unsafe_symbols || _report(_exceptionable, {
        path: _path + ".unsafe_symbols",
        expected: "(boolean | undefined)",
        value: input.unsafe_symbols
    }), undefined === input.unsafe_methods || "boolean" === typeof input.unsafe_methods || _report(_exceptionable, {
        path: _path + ".unsafe_methods",
        expected: "(boolean | undefined)",
        value: input.unsafe_methods
    }), undefined === input.unsafe_proto || "boolean" === typeof input.unsafe_proto || _report(_exceptionable, {
        path: _path + ".unsafe_proto",
        expected: "(boolean | undefined)",
        value: input.unsafe_proto
    }), undefined === input.unsafe_regexp || "boolean" === typeof input.unsafe_regexp || _report(_exceptionable, {
        path: _path + ".unsafe_regexp",
        expected: "(boolean | undefined)",
        value: input.unsafe_regexp
    }), undefined === input.unsafe_undefined || "boolean" === typeof input.unsafe_undefined || _report(_exceptionable, {
        path: _path + ".unsafe_undefined",
        expected: "(boolean | undefined)",
        value: input.unsafe_undefined
    }), undefined === input.unused || "boolean" === typeof input.unused || _report(_exceptionable, {
        path: _path + ".unused",
        expected: "(boolean | undefined)",
        value: input.unused
    }), undefined === input.const_to_let || "boolean" === typeof input.const_to_let || _report(_exceptionable, {
        path: _path + ".const_to_let",
        expected: "(boolean | undefined)",
        value: input.const_to_let
    }), undefined === input["module"] || "boolean" === typeof input["module"] || _report(_exceptionable, {
        path: _path + "[\"module\"]",
        expected: "(boolean | undefined)",
        value: input["module"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["arguments", "arrows", "booleans", "booleans_as_integers", "collapse_vars", "comparisons", "computed_props", "conditionals", "dead_code", "defaults", "directives", "drop_console", "drop_debugger", "ecma", "evaluate", "expression", "global_defs", "hoist_funs", "hoist_props", "hoist_vars", "ie8", "if_return", "inline", "join_vars", "keep_classnames", "keep_fargs", "keep_fnames", "keep_infinity", "loops", "negate_iife", "passes", "properties", "pure_getters", "pure_funcs", "reduce_funcs", "reduce_vars", "sequences", "side_effects", "switches", "top_retain", "toplevel", "typeofs", "unsafe", "unsafe_passes", "unsafe_arrows", "unsafe_comps", "unsafe_function", "unsafe_math", "unsafe_symbols", "unsafe_methods", "unsafe_proto", "unsafe_regexp", "unsafe_undefined", "unused", "const_to_let", "module"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo384 = (input, _path, _exceptionable = true) => [undefined === input.props || ("object" === typeof input.props && null !== input.props && false === Array.isArray(input.props) || _report(_exceptionable, {
        path: _path + ".props",
        expected: "(TerserManglePropertiesOptions.o1 | undefined)",
        value: input.props
    })) && _vo385(input.props, _path + ".props", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".props",
        expected: "(TerserManglePropertiesOptions.o1 | undefined)",
        value: input.props
    }), undefined === input.toplevel || "boolean" === typeof input.toplevel || _report(_exceptionable, {
        path: _path + ".toplevel",
        expected: "(boolean | undefined)",
        value: input.toplevel
    }), undefined === input.keep_classnames || "boolean" === typeof input.keep_classnames || _report(_exceptionable, {
        path: _path + ".keep_classnames",
        expected: "(boolean | undefined)",
        value: input.keep_classnames
    }), undefined === input.keep_fnames || "boolean" === typeof input.keep_fnames || _report(_exceptionable, {
        path: _path + ".keep_fnames",
        expected: "(boolean | undefined)",
        value: input.keep_fnames
    }), undefined === input.keep_private_props || "boolean" === typeof input.keep_private_props || _report(_exceptionable, {
        path: _path + ".keep_private_props",
        expected: "(boolean | undefined)",
        value: input.keep_private_props
    }), undefined === input.ie8 || "boolean" === typeof input.ie8 || _report(_exceptionable, {
        path: _path + ".ie8",
        expected: "(boolean | undefined)",
        value: input.ie8
    }), undefined === input.safari10 || "boolean" === typeof input.safari10 || _report(_exceptionable, {
        path: _path + ".safari10",
        expected: "(boolean | undefined)",
        value: input.safari10
    }), undefined === input.reserved || (Array.isArray(input.reserved) || _report(_exceptionable, {
        path: _path + ".reserved",
        expected: "(Array<string> | undefined)",
        value: input.reserved
    })) && input.reserved.map((elem, _index696) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".reserved[" + _index696 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".reserved",
        expected: "(Array<string> | undefined)",
        value: input.reserved
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["props", "toplevel", "keep_classnames", "keep_fnames", "keep_private_props", "ie8", "safari10", "reserved"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo385 = (input, _path, _exceptionable = true) => [0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo386 = (input, _path, _exceptionable = true) => [undefined === input.asciiOnly || "boolean" === typeof input.asciiOnly || _report(_exceptionable, {
        path: _path + ".asciiOnly",
        expected: "(boolean | undefined)",
        value: input.asciiOnly
    }), undefined === input.beautify || "boolean" === typeof input.beautify || _report(_exceptionable, {
        path: _path + ".beautify",
        expected: "(boolean | undefined)",
        value: input.beautify
    }), undefined === input.braces || "boolean" === typeof input.braces || _report(_exceptionable, {
        path: _path + ".braces",
        expected: "(boolean | undefined)",
        value: input.braces
    }), undefined === input.comments || false === input.comments || "some" === input.comments || "all" === input.comments || _report(_exceptionable, {
        path: _path + ".comments",
        expected: "(\"all\" | \"some\" | false | undefined)",
        value: input.comments
    }), undefined === input.ecma || "string" === typeof input.ecma || "number" === typeof input.ecma || _report(_exceptionable, {
        path: _path + ".ecma",
        expected: "(number | string | undefined)",
        value: input.ecma
    }), undefined === input.indentLevel || "number" === typeof input.indentLevel || _report(_exceptionable, {
        path: _path + ".indentLevel",
        expected: "(number | undefined)",
        value: input.indentLevel
    }), undefined === input.indentStart || "number" === typeof input.indentStart || _report(_exceptionable, {
        path: _path + ".indentStart",
        expected: "(number | undefined)",
        value: input.indentStart
    }), undefined === input.inlineScript || "number" === typeof input.inlineScript || _report(_exceptionable, {
        path: _path + ".inlineScript",
        expected: "(number | undefined)",
        value: input.inlineScript
    }), undefined === input.keepNumbers || "number" === typeof input.keepNumbers || _report(_exceptionable, {
        path: _path + ".keepNumbers",
        expected: "(number | undefined)",
        value: input.keepNumbers
    }), undefined === input.keepQuotedProps || "boolean" === typeof input.keepQuotedProps || _report(_exceptionable, {
        path: _path + ".keepQuotedProps",
        expected: "(boolean | undefined)",
        value: input.keepQuotedProps
    }), undefined === input.maxLineLen || false === input.maxLineLen || "number" === typeof input.maxLineLen || _report(_exceptionable, {
        path: _path + ".maxLineLen",
        expected: "(false | number | undefined)",
        value: input.maxLineLen
    }), undefined === input.preamble || "string" === typeof input.preamble || _report(_exceptionable, {
        path: _path + ".preamble",
        expected: "(string | undefined)",
        value: input.preamble
    }), undefined === input.quoteKeys || "boolean" === typeof input.quoteKeys || _report(_exceptionable, {
        path: _path + ".quoteKeys",
        expected: "(boolean | undefined)",
        value: input.quoteKeys
    }), undefined === input.quoteStyle || "boolean" === typeof input.quoteStyle || _report(_exceptionable, {
        path: _path + ".quoteStyle",
        expected: "(boolean | undefined)",
        value: input.quoteStyle
    }), undefined === input.preserveAnnotations || "boolean" === typeof input.preserveAnnotations || _report(_exceptionable, {
        path: _path + ".preserveAnnotations",
        expected: "(boolean | undefined)",
        value: input.preserveAnnotations
    }), undefined === input.safari10 || "boolean" === typeof input.safari10 || _report(_exceptionable, {
        path: _path + ".safari10",
        expected: "(boolean | undefined)",
        value: input.safari10
    }), undefined === input.semicolons || "boolean" === typeof input.semicolons || _report(_exceptionable, {
        path: _path + ".semicolons",
        expected: "(boolean | undefined)",
        value: input.semicolons
    }), undefined === input.shebang || "boolean" === typeof input.shebang || _report(_exceptionable, {
        path: _path + ".shebang",
        expected: "(boolean | undefined)",
        value: input.shebang
    }), undefined === input.webkit || "boolean" === typeof input.webkit || _report(_exceptionable, {
        path: _path + ".webkit",
        expected: "(boolean | undefined)",
        value: input.webkit
    }), undefined === input.wrapIife || "boolean" === typeof input.wrapIife || _report(_exceptionable, {
        path: _path + ".wrapIife",
        expected: "(boolean | undefined)",
        value: input.wrapIife
    }), undefined === input.wrapFuncArgs || "boolean" === typeof input.wrapFuncArgs || _report(_exceptionable, {
        path: _path + ".wrapFuncArgs",
        expected: "(boolean | undefined)",
        value: input.wrapFuncArgs
    }), undefined === input.ascii_only || "boolean" === typeof input.ascii_only || _report(_exceptionable, {
        path: _path + ".ascii_only",
        expected: "(boolean | undefined)",
        value: input.ascii_only
    }), undefined === input.indent_level || "number" === typeof input.indent_level || _report(_exceptionable, {
        path: _path + ".indent_level",
        expected: "(number | undefined)",
        value: input.indent_level
    }), undefined === input.indent_start || "number" === typeof input.indent_start || _report(_exceptionable, {
        path: _path + ".indent_start",
        expected: "(number | undefined)",
        value: input.indent_start
    }), undefined === input.inline_script || "number" === typeof input.inline_script || _report(_exceptionable, {
        path: _path + ".inline_script",
        expected: "(number | undefined)",
        value: input.inline_script
    }), undefined === input.keep_numbers || "number" === typeof input.keep_numbers || _report(_exceptionable, {
        path: _path + ".keep_numbers",
        expected: "(number | undefined)",
        value: input.keep_numbers
    }), undefined === input.keep_quoted_props || "boolean" === typeof input.keep_quoted_props || _report(_exceptionable, {
        path: _path + ".keep_quoted_props",
        expected: "(boolean | undefined)",
        value: input.keep_quoted_props
    }), undefined === input.max_line_len || false === input.max_line_len || "number" === typeof input.max_line_len || _report(_exceptionable, {
        path: _path + ".max_line_len",
        expected: "(false | number | undefined)",
        value: input.max_line_len
    }), undefined === input.quote_keys || "boolean" === typeof input.quote_keys || _report(_exceptionable, {
        path: _path + ".quote_keys",
        expected: "(boolean | undefined)",
        value: input.quote_keys
    }), undefined === input.quote_style || "boolean" === typeof input.quote_style || _report(_exceptionable, {
        path: _path + ".quote_style",
        expected: "(boolean | undefined)",
        value: input.quote_style
    }), undefined === input.preserve_annotations || "boolean" === typeof input.preserve_annotations || _report(_exceptionable, {
        path: _path + ".preserve_annotations",
        expected: "(boolean | undefined)",
        value: input.preserve_annotations
    }), undefined === input.wrap_iife || "boolean" === typeof input.wrap_iife || _report(_exceptionable, {
        path: _path + ".wrap_iife",
        expected: "(boolean | undefined)",
        value: input.wrap_iife
    }), undefined === input.wrap_func_args || "boolean" === typeof input.wrap_func_args || _report(_exceptionable, {
        path: _path + ".wrap_func_args",
        expected: "(boolean | undefined)",
        value: input.wrap_func_args
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["asciiOnly", "beautify", "braces", "comments", "ecma", "indentLevel", "indentStart", "inlineScript", "keepNumbers", "keepQuotedProps", "maxLineLen", "preamble", "quoteKeys", "quoteStyle", "preserveAnnotations", "safari10", "semicolons", "shebang", "webkit", "wrapIife", "wrapFuncArgs", "ascii_only", "indent_level", "indent_start", "inline_script", "keep_numbers", "keep_quoted_props", "max_line_len", "quote_keys", "quote_style", "preserve_annotations", "wrap_iife", "wrap_func_args"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo387 = (input, _path, _exceptionable = true) => [(null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })) && (undefined === input.test || "string" === typeof input.test || input.test instanceof RegExp || (Array.isArray(input.test) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })) && input.test.map((elem, _index697) => (null !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index697 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".test[" + _index697 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test[" + _index697 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".test",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.test
    })), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })) && (undefined === input.include || "string" === typeof input.include || input.include instanceof RegExp || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })) && input.include.map((elem, _index698) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index698 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index698 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".include[" + _index698 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.include
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "string" === typeof input.exclude || input.exclude instanceof RegExp || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index699) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index699 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index699 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exclude[" + _index699 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<AssetCondition> | RegExp | string | undefined)",
        value: input.exclude
    })), undefined === input.removeUnusedLocalIdents || "boolean" === typeof input.removeUnusedLocalIdents || _report(_exceptionable, {
        path: _path + ".removeUnusedLocalIdents",
        expected: "(boolean | undefined)",
        value: input.removeUnusedLocalIdents
    }), undefined === input.minimizerOptions || ("object" === typeof input.minimizerOptions && null !== input.minimizerOptions && false === Array.isArray(input.minimizerOptions) || _report(_exceptionable, {
        path: _path + ".minimizerOptions",
        expected: "(__type.o110 | undefined)",
        value: input.minimizerOptions
    })) && _vo388(input.minimizerOptions, _path + ".minimizerOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minimizerOptions",
        expected: "(__type.o110 | undefined)",
        value: input.minimizerOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["test", "include", "exclude", "removeUnusedLocalIdents", "minimizerOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo388 = (input, _path, _exceptionable = true) => [undefined === input.errorRecovery || "boolean" === typeof input.errorRecovery || _report(_exceptionable, {
        path: _path + ".errorRecovery",
        expected: "(boolean | undefined)",
        value: input.errorRecovery
    }), (null !== input.targets || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | string | undefined)",
        value: input.targets
    })) && (undefined === input.targets || "string" === typeof input.targets || (Array.isArray(input.targets) || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | string | undefined)",
        value: input.targets
    })) && input.targets.map((elem, _index700) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".targets[" + _index700 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".targets",
        expected: "(Array<string> | string | undefined)",
        value: input.targets
    })), undefined === input.include || ("object" === typeof input.include && null !== input.include && false === Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(FeatureOptions | undefined)",
        value: input.include
    })) && _vo103(input.include, _path + ".include", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(FeatureOptions | undefined)",
        value: input.include
    }), undefined === input.exclude || ("object" === typeof input.exclude && null !== input.exclude && false === Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(FeatureOptions | undefined)",
        value: input.exclude
    })) && _vo103(input.exclude, _path + ".exclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(FeatureOptions | undefined)",
        value: input.exclude
    }), undefined === input.draft || ("object" === typeof input.draft && null !== input.draft && false === Array.isArray(input.draft) || _report(_exceptionable, {
        path: _path + ".draft",
        expected: "(Drafts | undefined)",
        value: input.draft
    })) && _vo104(input.draft, _path + ".draft", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".draft",
        expected: "(Drafts | undefined)",
        value: input.draft
    }), undefined === input.drafts || ("object" === typeof input.drafts && null !== input.drafts && false === Array.isArray(input.drafts) || _report(_exceptionable, {
        path: _path + ".drafts",
        expected: "(Drafts | undefined)",
        value: input.drafts
    })) && _vo104(input.drafts, _path + ".drafts", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".drafts",
        expected: "(Drafts | undefined)",
        value: input.drafts
    }), undefined === input.nonStandard || ("object" === typeof input.nonStandard && null !== input.nonStandard && false === Array.isArray(input.nonStandard) || _report(_exceptionable, {
        path: _path + ".nonStandard",
        expected: "(NonStandard | undefined)",
        value: input.nonStandard
    })) && _vo105(input.nonStandard, _path + ".nonStandard", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".nonStandard",
        expected: "(NonStandard | undefined)",
        value: input.nonStandard
    }), undefined === input.pseudoClasses || ("object" === typeof input.pseudoClasses && null !== input.pseudoClasses && false === Array.isArray(input.pseudoClasses) || _report(_exceptionable, {
        path: _path + ".pseudoClasses",
        expected: "(PseudoClasses | undefined)",
        value: input.pseudoClasses
    })) && _vo106(input.pseudoClasses, _path + ".pseudoClasses", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pseudoClasses",
        expected: "(PseudoClasses | undefined)",
        value: input.pseudoClasses
    }), undefined === input.unusedSymbols || (Array.isArray(input.unusedSymbols) || _report(_exceptionable, {
        path: _path + ".unusedSymbols",
        expected: "(Array<string> | undefined)",
        value: input.unusedSymbols
    })) && input.unusedSymbols.map((elem, _index701) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".unusedSymbols[" + _index701 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".unusedSymbols",
        expected: "(Array<string> | undefined)",
        value: input.unusedSymbols
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["errorRecovery", "targets", "include", "exclude", "draft", "drafts", "nonStandard", "pseudoClasses", "unusedSymbols"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo389 = (input, _path, _exceptionable = true) => [undefined === input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    }), undefined === input.generate || true || _report(_exceptionable, {
        path: _path + ".generate",
        expected: "undefined",
        value: input.generate
    }), undefined === input.filter || true || _report(_exceptionable, {
        path: _path + ".filter",
        expected: "undefined",
        value: input.filter
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["filename", "generate", "filter"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo390 = (input, _path, _exceptionable = true) => [undefined === input.js || true === _vv702.has(input.js) || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(\"cheap-module-source-map\" | \"cheap-source-map\" | \"eval\" | \"eval-cheap-module-source-map\" | \"eval-cheap-source-map\" | \"eval-nosources-cheap-module-source-map\" | \"eval-nosources-cheap-source-map\" | \"eval-nosources-source-map\" | \"eval-source-map\" | \"hidden-cheap-module-source-map\" | \"hidden-cheap-source-map\" | \"hidden-nosources-cheap-module-source-map\" | \"hidden-nosources-cheap-source-map\" | \"hidden-nosources-source-map\" | \"hidden-source-map\" | \"inline-cheap-module-source-map\" | \"inline-cheap-source-map\" | \"inline-nosources-cheap-module-source-map\" | \"inline-nosources-cheap-source-map\" | \"inline-nosources-source-map\" | \"inline-source-map\" | \"nosources-cheap-module-source-map\" | \"nosources-cheap-source-map\" | \"nosources-source-map\" | \"source-map\" | false | undefined)",
        value: input.js
    }), undefined === input.css || "boolean" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(boolean | undefined)",
        value: input.css
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["js", "css"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo391 = (input, _path, _exceptionable = true) => [undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable || _report(_exceptionable, {
        path: _path + ".enable",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.enable
    }), (null !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "RegExp",
        value: input.test
    })) && (undefined !== input.test || _report(_exceptionable, {
        path: _path + ".test",
        expected: "RegExp",
        value: input.test
    })) && ("function" === typeof input.test || input.test instanceof RegExp || _report(_exceptionable, {
        path: _path + ".test",
        expected: "RegExp",
        value: input.test
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["enable", "test"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo392 = (input, _path, _exceptionable = true) => [(Array.isArray(input.patterns) || _report(_exceptionable, {
        path: _path + ".patterns",
        expected: "Array<string | ({ from: string; } & Partial<RawCopyPattern>)>",
        value: input.patterns
    })) && input.patterns.map((elem, _index703) => (null !== elem || _report(_exceptionable, {
        path: _path + ".patterns[" + _index703 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".patterns[" + _index703 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".patterns[" + _index703 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && _vo393(elem, _path + ".patterns[" + _index703 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".patterns[" + _index703 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".patterns",
        expected: "Array<string | ({ from: string; } & Partial<RawCopyPattern>)>",
        value: input.patterns
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["patterns"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo393 = (input, _path, _exceptionable = true) => ["string" === typeof input.from || _report(_exceptionable, {
        path: _path + ".from",
        expected: "string",
        value: input.from
    }), (null !== input.to || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(string | undefined)",
        value: input.to
    })) && (undefined === input.to || "function" === typeof input.to || "string" === typeof input.to || _report(_exceptionable, {
        path: _path + ".to",
        expected: "(string | undefined)",
        value: input.to
    })), undefined === input.context || "string" === typeof input.context || _report(_exceptionable, {
        path: _path + ".context",
        expected: "(string | undefined)",
        value: input.context
    }), undefined === input.toType || "string" === typeof input.toType || _report(_exceptionable, {
        path: _path + ".toType",
        expected: "(string | undefined)",
        value: input.toType
    }), undefined === input.noErrorOnMissing || "boolean" === typeof input.noErrorOnMissing || _report(_exceptionable, {
        path: _path + ".noErrorOnMissing",
        expected: "(boolean | undefined)",
        value: input.noErrorOnMissing
    }), undefined === input.force || "boolean" === typeof input.force || _report(_exceptionable, {
        path: _path + ".force",
        expected: "(boolean | undefined)",
        value: input.force
    }), undefined === input.priority || "number" === typeof input.priority || _report(_exceptionable, {
        path: _path + ".priority",
        expected: "(number | undefined)",
        value: input.priority
    }), undefined === input.globOptions || ("object" === typeof input.globOptions && null !== input.globOptions && false === Array.isArray(input.globOptions) || _report(_exceptionable, {
        path: _path + ".globOptions",
        expected: "(RawCopyGlobOptions | undefined)",
        value: input.globOptions
    })) && _vo394(input.globOptions, _path + ".globOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".globOptions",
        expected: "(RawCopyGlobOptions | undefined)",
        value: input.globOptions
    }), undefined === input.info || ("object" === typeof input.info && null !== input.info && false === Array.isArray(input.info) || _report(_exceptionable, {
        path: _path + ".info",
        expected: "(RawInfo | undefined)",
        value: input.info
    })) && _vo395(input.info, _path + ".info", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".info",
        expected: "(RawInfo | undefined)",
        value: input.info
    }), undefined === input.transform || true || _report(_exceptionable, {
        path: _path + ".transform",
        expected: "undefined",
        value: input.transform
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["from", "to", "context", "toType", "noErrorOnMissing", "force", "priority", "globOptions", "info", "transform"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo394 = (input, _path, _exceptionable = true) => [undefined === input.caseSensitiveMatch || "boolean" === typeof input.caseSensitiveMatch || _report(_exceptionable, {
        path: _path + ".caseSensitiveMatch",
        expected: "(boolean | undefined)",
        value: input.caseSensitiveMatch
    }), undefined === input.dot || "boolean" === typeof input.dot || _report(_exceptionable, {
        path: _path + ".dot",
        expected: "(boolean | undefined)",
        value: input.dot
    }), undefined === input.ignore || (Array.isArray(input.ignore) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "(Array<string> | undefined)",
        value: input.ignore
    })) && input.ignore.map((elem, _index704) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index704 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "(Array<string> | undefined)",
        value: input.ignore
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["caseSensitiveMatch", "dot", "ignore"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo395 = (input, _path, _exceptionable = true) => [undefined === input.immutable || "boolean" === typeof input.immutable || _report(_exceptionable, {
        path: _path + ".immutable",
        expected: "(boolean | undefined)",
        value: input.immutable
    }), undefined === input.minimized || "boolean" === typeof input.minimized || _report(_exceptionable, {
        path: _path + ".minimized",
        expected: "(boolean | undefined)",
        value: input.minimized
    }), undefined === input.chunkHash || (Array.isArray(input.chunkHash) || _report(_exceptionable, {
        path: _path + ".chunkHash",
        expected: "(Array<string> | undefined)",
        value: input.chunkHash
    })) && input.chunkHash.map((elem, _index705) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".chunkHash[" + _index705 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".chunkHash",
        expected: "(Array<string> | undefined)",
        value: input.chunkHash
    }), undefined === input.contentHash || (Array.isArray(input.contentHash) || _report(_exceptionable, {
        path: _path + ".contentHash",
        expected: "(Array<string> | undefined)",
        value: input.contentHash
    })) && input.contentHash.map((elem, _index706) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".contentHash[" + _index706 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".contentHash",
        expected: "(Array<string> | undefined)",
        value: input.contentHash
    }), undefined === input.development || "boolean" === typeof input.development || _report(_exceptionable, {
        path: _path + ".development",
        expected: "(boolean | undefined)",
        value: input.development
    }), undefined === input.hotModuleReplacement || "boolean" === typeof input.hotModuleReplacement || _report(_exceptionable, {
        path: _path + ".hotModuleReplacement",
        expected: "(boolean | undefined)",
        value: input.hotModuleReplacement
    }), undefined === input.related || ("object" === typeof input.related && null !== input.related && false === Array.isArray(input.related) || _report(_exceptionable, {
        path: _path + ".related",
        expected: "(RawRelated | undefined)",
        value: input.related
    })) && _vo396(input.related, _path + ".related", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".related",
        expected: "(RawRelated | undefined)",
        value: input.related
    }), undefined === input.version || "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(string | undefined)",
        value: input.version
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["immutable", "minimized", "chunkHash", "contentHash", "development", "hotModuleReplacement", "related", "version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo396 = (input, _path, _exceptionable = true) => [undefined === input.sourceMap || "string" === typeof input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(string | undefined)",
        value: input.sourceMap
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["sourceMap"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo397 = (input, _path, _exceptionable = true) => [undefined === input.nonce || "string" === typeof input.nonce || _report(_exceptionable, {
        path: _path + ".nonce",
        expected: "(string | undefined)",
        value: input.nonce
    }), undefined === input.sri || ("object" === typeof input.sri && null !== input.sri && false === Array.isArray(input.sri) || _report(_exceptionable, {
        path: _path + ".sri",
        expected: "(SriOptions | undefined)",
        value: input.sri
    })) && _vo398(input.sri, _path + ".sri", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".sri",
        expected: "(SriOptions | undefined)",
        value: input.sri
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["nonce", "sri"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo398 = (input, _path, _exceptionable = true) => [undefined === input.algorithm || "sha256" === input.algorithm || "sha384" === input.algorithm || "sha512" === input.algorithm || _report(_exceptionable, {
        path: _path + ".algorithm",
        expected: "(\"sha256\" | \"sha384\" | \"sha512\" | undefined)",
        value: input.algorithm
    }), undefined === input.enable || "auto" === input.enable || "boolean" === typeof input.enable || _report(_exceptionable, {
        path: _path + ".enable",
        expected: "(\"auto\" | boolean | undefined)",
        value: input.enable
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["algorithm", "enable"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo399 = (input, _path, _exceptionable = true) => [(null !== input.removeConsole || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType> | boolean | undefined)",
        value: input.removeConsole
    })) && (undefined === input.removeConsole || "boolean" === typeof input.removeConsole || (Array.isArray(input.removeConsole) || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType> | boolean | undefined)",
        value: input.removeConsole
    })) && input.removeConsole.map((elem, _index707) => "log" === elem || "warn" === elem || "error" === elem || "info" === elem || "table" === elem || "group" === elem || _report(_exceptionable, {
        path: _path + ".removeConsole[" + _index707 + "]",
        expected: "(\"error\" | \"group\" | \"info\" | \"log\" | \"table\" | \"warn\")",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType> | boolean | undefined)",
        value: input.removeConsole
    })), undefined === input.removeMomentLocale || "boolean" === typeof input.removeMomentLocale || _report(_exceptionable, {
        path: _path + ".removeMomentLocale",
        expected: "(boolean | undefined)",
        value: input.removeMomentLocale
    }), (null !== input.buildCache || _report(_exceptionable, {
        path: _path + ".buildCache",
        expected: "(BuildCacheOptions | boolean | undefined)",
        value: input.buildCache
    })) && (undefined === input.buildCache || "boolean" === typeof input.buildCache || ("object" === typeof input.buildCache && null !== input.buildCache && false === Array.isArray(input.buildCache) || _report(_exceptionable, {
        path: _path + ".buildCache",
        expected: "(BuildCacheOptions | boolean | undefined)",
        value: input.buildCache
    })) && _vo400(input.buildCache, _path + ".buildCache", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".buildCache",
        expected: "(BuildCacheOptions | boolean | undefined)",
        value: input.buildCache
    })), (null !== input.printFileSize || _report(_exceptionable, {
        path: _path + ".printFileSize",
        expected: "(PrintFileSizeOptions | boolean | undefined)",
        value: input.printFileSize
    })) && (undefined === input.printFileSize || "boolean" === typeof input.printFileSize || ("object" === typeof input.printFileSize && null !== input.printFileSize && false === Array.isArray(input.printFileSize) || _report(_exceptionable, {
        path: _path + ".printFileSize",
        expected: "(PrintFileSizeOptions | boolean | undefined)",
        value: input.printFileSize
    })) && _vo401(input.printFileSize, _path + ".printFileSize", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".printFileSize",
        expected: "(PrintFileSizeOptions | boolean | undefined)",
        value: input.printFileSize
    })), undefined === input.chunkSplit || ("object" === typeof input.chunkSplit && null !== input.chunkSplit && false === Array.isArray(input.chunkSplit) || _report(_exceptionable, {
        path: _path + ".chunkSplit",
        expected: "(BaseChunkSplit | SplitBySize | SplitCustom | undefined)",
        value: input.chunkSplit
    })) && _vu23(input.chunkSplit, _path + ".chunkSplit", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".chunkSplit",
        expected: "(BaseChunkSplit | SplitBySize | SplitCustom | undefined)",
        value: input.chunkSplit
    }), undefined === input.bundleAnalyze || ("object" === typeof input.bundleAnalyze && null !== input.bundleAnalyze && false === Array.isArray(input.bundleAnalyze) || _report(_exceptionable, {
        path: _path + ".bundleAnalyze",
        expected: "(BundleAnalyzerPlugin.Options | undefined)",
        value: input.bundleAnalyze
    })) && _vo406(input.bundleAnalyze, _path + ".bundleAnalyze", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".bundleAnalyze",
        expected: "(BundleAnalyzerPlugin.Options | undefined)",
        value: input.bundleAnalyze
    }), undefined === input.preconnect || (Array.isArray(input.preconnect) || _report(_exceptionable, {
        path: _path + ".preconnect",
        expected: "(Preconnect | undefined)",
        value: input.preconnect
    })) && input.preconnect.map((elem, _index708) => (null !== elem || _report(_exceptionable, {
        path: _path + ".preconnect[" + _index708 + "]",
        expected: "(PreconnectOption | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".preconnect[" + _index708 + "]",
        expected: "(PreconnectOption | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".preconnect[" + _index708 + "]",
        expected: "(PreconnectOption | string)",
        value: elem
    })) && _vo407(elem, _path + ".preconnect[" + _index708 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".preconnect[" + _index708 + "]",
        expected: "(PreconnectOption | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".preconnect",
        expected: "(Preconnect | undefined)",
        value: input.preconnect
    }), undefined === input.dnsPrefetch || (Array.isArray(input.dnsPrefetch) || _report(_exceptionable, {
        path: _path + ".dnsPrefetch",
        expected: "(DnsPrefetch | undefined)",
        value: input.dnsPrefetch
    })) && input.dnsPrefetch.map((elem, _index709) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".dnsPrefetch[" + _index709 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".dnsPrefetch",
        expected: "(DnsPrefetch | undefined)",
        value: input.dnsPrefetch
    }), (null !== input.preload || _report(_exceptionable, {
        path: _path + ".preload",
        expected: "(PreloadOrPrefetchOption | true | undefined)",
        value: input.preload
    })) && (undefined === input.preload || true === input.preload || ("object" === typeof input.preload && null !== input.preload && false === Array.isArray(input.preload) || _report(_exceptionable, {
        path: _path + ".preload",
        expected: "(PreloadOrPrefetchOption | true | undefined)",
        value: input.preload
    })) && _vo408(input.preload, _path + ".preload", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".preload",
        expected: "(PreloadOrPrefetchOption | true | undefined)",
        value: input.preload
    })), (null !== input.prefetch || _report(_exceptionable, {
        path: _path + ".prefetch",
        expected: "(PrefetchOption | true | undefined)",
        value: input.prefetch
    })) && (undefined === input.prefetch || true === input.prefetch || ("object" === typeof input.prefetch && null !== input.prefetch && false === Array.isArray(input.prefetch) || _report(_exceptionable, {
        path: _path + ".prefetch",
        expected: "(PrefetchOption | true | undefined)",
        value: input.prefetch
    })) && _vo409(input.prefetch, _path + ".prefetch", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".prefetch",
        expected: "(PrefetchOption | true | undefined)",
        value: input.prefetch
    })), undefined === input.profile || "boolean" === typeof input.profile || _report(_exceptionable, {
        path: _path + ".profile",
        expected: "(boolean | undefined)",
        value: input.profile
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["removeConsole", "removeMomentLocale", "buildCache", "printFileSize", "chunkSplit", "bundleAnalyze", "preconnect", "dnsPrefetch", "preload", "prefetch", "profile"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo400 = (input, _path, _exceptionable = true) => [undefined === input.cacheDirectory || "string" === typeof input.cacheDirectory || _report(_exceptionable, {
        path: _path + ".cacheDirectory",
        expected: "(string | undefined)",
        value: input.cacheDirectory
    }), undefined === input.cacheDigest || (Array.isArray(input.cacheDigest) || _report(_exceptionable, {
        path: _path + ".cacheDigest",
        expected: "(Array<string | undefined> | undefined)",
        value: input.cacheDigest
    })) && input.cacheDigest.map((elem, _index710) => undefined === elem || "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".cacheDigest[" + _index710 + "]",
        expected: "(string | undefined)",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".cacheDigest",
        expected: "(Array<string | undefined> | undefined)",
        value: input.cacheDigest
    }), undefined === input.buildDependencies || (Array.isArray(input.buildDependencies) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(Array<string> | undefined)",
        value: input.buildDependencies
    })) && input.buildDependencies.map((elem, _index711) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".buildDependencies[" + _index711 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".buildDependencies",
        expected: "(Array<string> | undefined)",
        value: input.buildDependencies
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["cacheDirectory", "cacheDigest", "buildDependencies"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo401 = (input, _path, _exceptionable = true) => [undefined === input.total || "boolean" === typeof input.total || _report(_exceptionable, {
        path: _path + ".total",
        expected: "(boolean | undefined)",
        value: input.total
    }), undefined === input.detail || "boolean" === typeof input.detail || _report(_exceptionable, {
        path: _path + ".detail",
        expected: "(boolean | undefined)",
        value: input.detail
    }), undefined === input.compressed || "boolean" === typeof input.compressed || _report(_exceptionable, {
        path: _path + ".compressed",
        expected: "(boolean | undefined)",
        value: input.compressed
    }), undefined === input.include || true || _report(_exceptionable, {
        path: _path + ".include",
        expected: "undefined",
        value: input.include
    }), undefined === input.exclude || true || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "undefined",
        value: input.exclude
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["total", "detail", "compressed", "include", "exclude"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo402 = (input, _path, _exceptionable = true) => [undefined === input.strategy || "all-in-one" === input.strategy || "split-by-module" === input.strategy || "split-by-experience" === input.strategy || "single-vendor" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "(\"all-in-one\" | \"single-vendor\" | \"split-by-experience\" | \"split-by-module\" | undefined)",
        value: input.strategy
    }), (null !== input.forceSplitting || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.map((elem, _index712) => elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".forceSplitting[" + _index712 + "]",
        expected: "RegExp",
        value: elem
    })).every(flag => flag) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _vo403(input.forceSplitting, _path + ".forceSplitting", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })), (null !== input.override || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && (undefined === input.override || false === input.override || ("object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && _vo144(input.override, _path + ".override", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "forceSplitting", "override"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo403 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return value instanceof RegExp || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "RegExp",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo404 = (input, _path, _exceptionable = true) => ["split-by-size" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "\"split-by-size\"",
        value: input.strategy
    }), undefined === input.minSize || "number" === typeof input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(number | undefined)",
        value: input.minSize
    }), undefined === input.maxSize || "number" === typeof input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(number | undefined)",
        value: input.maxSize
    }), (null !== input.forceSplitting || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.map((elem, _index713) => elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".forceSplitting[" + _index713 + "]",
        expected: "RegExp",
        value: elem
    })).every(flag => flag) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _vo403(input.forceSplitting, _path + ".forceSplitting", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })), (null !== input.override || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && (undefined === input.override || false === input.override || ("object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && _vo144(input.override, _path + ".override", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "minSize", "maxSize", "forceSplitting", "override"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo405 = (input, _path, _exceptionable = true) => ["custom" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "\"custom\"",
        value: input.strategy
    }), (null !== input.splitChunks || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && (undefined === input.splitChunks || false === input.splitChunks || ("object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && _vo144(input.splitChunks, _path + ".splitChunks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })), (null !== input.forceSplitting || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) && (undefined === input.forceSplitting || (Array.isArray(input.forceSplitting) && input.forceSplitting.map((elem, _index714) => elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".forceSplitting[" + _index714 + "]",
        expected: "RegExp",
        value: elem
    })).every(flag => flag) || "object" === typeof input.forceSplitting && null !== input.forceSplitting && false === Array.isArray(input.forceSplitting) && _vo403(input.forceSplitting, _path + ".forceSplitting", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })) || _report(_exceptionable, {
        path: _path + ".forceSplitting",
        expected: "(Array<RegExp> | Record<string, RegExp> | undefined)",
        value: input.forceSplitting
    })), (null !== input.override || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && (undefined === input.override || false === input.override || ("object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && _vo144(input.override, _path + ".override", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "splitChunks", "forceSplitting", "override"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo406 = (input, _path, _exceptionable = true) => [undefined === input.analyzerMode || "server" === input.analyzerMode || "static" === input.analyzerMode || "json" === input.analyzerMode || "disabled" === input.analyzerMode || _report(_exceptionable, {
        path: _path + ".analyzerMode",
        expected: "(\"disabled\" | \"json\" | \"server\" | \"static\" | undefined)",
        value: input.analyzerMode
    }), undefined === input.analyzerHost || "string" === typeof input.analyzerHost || _report(_exceptionable, {
        path: _path + ".analyzerHost",
        expected: "(string | undefined)",
        value: input.analyzerHost
    }), undefined === input.analyzerPort || "auto" === input.analyzerPort || "number" === typeof input.analyzerPort || _report(_exceptionable, {
        path: _path + ".analyzerPort",
        expected: "(\"auto\" | number | undefined)",
        value: input.analyzerPort
    }), undefined === input.analyzerUrl || true || _report(_exceptionable, {
        path: _path + ".analyzerUrl",
        expected: "undefined",
        value: input.analyzerUrl
    }), undefined === input.reportFilename || "string" === typeof input.reportFilename || _report(_exceptionable, {
        path: _path + ".reportFilename",
        expected: "(string | undefined)",
        value: input.reportFilename
    }), (null !== input.reportTitle || _report(_exceptionable, {
        path: _path + ".reportTitle",
        expected: "(string | undefined)",
        value: input.reportTitle
    })) && (undefined === input.reportTitle || "function" === typeof input.reportTitle || "string" === typeof input.reportTitle || _report(_exceptionable, {
        path: _path + ".reportTitle",
        expected: "(string | undefined)",
        value: input.reportTitle
    })), undefined === input.defaultSizes || "stat" === input.defaultSizes || "gzip" === input.defaultSizes || "parsed" === input.defaultSizes || _report(_exceptionable, {
        path: _path + ".defaultSizes",
        expected: "(\"gzip\" | \"parsed\" | \"stat\" | undefined)",
        value: input.defaultSizes
    }), undefined === input.openAnalyzer || "boolean" === typeof input.openAnalyzer || _report(_exceptionable, {
        path: _path + ".openAnalyzer",
        expected: "(boolean | undefined)",
        value: input.openAnalyzer
    }), undefined === input.generateStatsFile || "boolean" === typeof input.generateStatsFile || _report(_exceptionable, {
        path: _path + ".generateStatsFile",
        expected: "(boolean | undefined)",
        value: input.generateStatsFile
    }), undefined === input.statsFilename || "string" === typeof input.statsFilename || _report(_exceptionable, {
        path: _path + ".statsFilename",
        expected: "(string | undefined)",
        value: input.statsFilename
    }), null === input.statsOptions || undefined === input.statsOptions || "none" === input.statsOptions || "verbose" === input.statsOptions || "normal" === input.statsOptions || "errors-only" === input.statsOptions || "errors-warnings" === input.statsOptions || "minimal" === input.statsOptions || "boolean" === typeof input.statsOptions || ("object" === typeof input.statsOptions && null !== input.statsOptions && false === Array.isArray(input.statsOptions) || _report(_exceptionable, {
        path: _path + ".statsOptions",
        expected: "(\"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"verbose\" | StatsOptions.o1 | boolean | null | undefined)",
        value: input.statsOptions
    })) && _vo160(input.statsOptions, _path + ".statsOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".statsOptions",
        expected: "(\"errors-only\" | \"errors-warnings\" | \"minimal\" | \"none\" | \"normal\" | \"verbose\" | StatsOptions.o1 | boolean | null | undefined)",
        value: input.statsOptions
    }), null === input.excludeAssets || undefined === input.excludeAssets || "function" === typeof input.excludeAssets || "string" === typeof input.excludeAssets || input.excludeAssets instanceof RegExp || (Array.isArray(input.excludeAssets) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<BundleAnalyzerPlugin.ExcludeAssetsPattern> | RegExp | null | string | undefined)",
        value: input.excludeAssets
    })) && input.excludeAssets.map((elem, _index715) => (null !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index715 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index715 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".excludeAssets[" + _index715 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".excludeAssets",
        expected: "(Array<BundleAnalyzerPlugin.ExcludeAssetsPattern> | RegExp | null | string | undefined)",
        value: input.excludeAssets
    }), undefined === input.logLevel || "warn" === input.logLevel || "error" === input.logLevel || "info" === input.logLevel || "silent" === input.logLevel || _report(_exceptionable, {
        path: _path + ".logLevel",
        expected: "(\"error\" | \"info\" | \"silent\" | \"warn\" | undefined)",
        value: input.logLevel
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["analyzerMode", "analyzerHost", "analyzerPort", "analyzerUrl", "reportFilename", "reportTitle", "defaultSizes", "openAnalyzer", "generateStatsFile", "statsFilename", "statsOptions", "excludeAssets", "logLevel"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo407 = (input, _path, _exceptionable = true) => ["string" === typeof input.href || _report(_exceptionable, {
        path: _path + ".href",
        expected: "string",
        value: input.href
    }), undefined === input.crossorigin || "boolean" === typeof input.crossorigin || _report(_exceptionable, {
        path: _path + ".crossorigin",
        expected: "(boolean | undefined)",
        value: input.crossorigin
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["href", "crossorigin"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo408 = (input, _path, _exceptionable = true) => [undefined === input.type || "initial" === input.type || "async-chunks" === input.type || "all-assets" === input.type || "all-chunks" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(\"all-assets\" | \"all-chunks\" | \"async-chunks\" | \"initial\" | undefined)",
        value: input.type
    }), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })) && (undefined === input.include || "function" === typeof input.include || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })) && input.include.map((elem, _index716) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index716 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index716 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".include[" + _index716 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "function" === typeof input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index717) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index717 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index717 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exclude[" + _index717 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })), undefined === input.dedupe || "boolean" === typeof input.dedupe || _report(_exceptionable, {
        path: _path + ".dedupe",
        expected: "(boolean | undefined)",
        value: input.dedupe
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "include", "exclude", "dedupe"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo409 = (input, _path, _exceptionable = true) => [undefined === input.type || "initial" === input.type || "async-chunks" === input.type || "all-assets" === input.type || "all-chunks" === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(\"all-assets\" | \"all-chunks\" | \"async-chunks\" | \"initial\" | undefined)",
        value: input.type
    }), (null !== input.include || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })) && (undefined === input.include || "function" === typeof input.include || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })) && input.include.map((elem, _index718) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index718 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index718 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".include[" + _index718 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.include
    })), (null !== input.exclude || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })) && (undefined === input.exclude || "function" === typeof input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index719) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index719 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index719 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".exclude[" + _index719 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<string | RegExp> | undefined)",
        value: input.exclude
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "include", "exclude"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo410 = (input, _path, _exceptionable = true) => [("object" === typeof input.options && null !== input.options || _report(_exceptionable, {
        path: _path + ".options",
        expected: "ModuleFederationPluginOptions",
        value: input.options
    })) && _vo411(input.options, _path + ".options", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".options",
        expected: "ModuleFederationPluginOptions",
        value: input.options
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["options"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo411 = (input, _path, _exceptionable = true) => [undefined === input.runtimePlugins || (Array.isArray(input.runtimePlugins) || _report(_exceptionable, {
        path: _path + ".runtimePlugins",
        expected: "(RuntimePlugins | undefined)",
        value: input.runtimePlugins
    })) && input.runtimePlugins.map((elem, _index720) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".runtimePlugins[" + _index720 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".runtimePlugins",
        expected: "(RuntimePlugins | undefined)",
        value: input.runtimePlugins
    }), undefined === input.implementation || "string" === typeof input.implementation || _report(_exceptionable, {
        path: _path + ".implementation",
        expected: "(string | undefined)",
        value: input.implementation
    }), undefined === input.shareStrategy || "version-first" === input.shareStrategy || "loaded-first" === input.shareStrategy || _report(_exceptionable, {
        path: _path + ".shareStrategy",
        expected: "(\"loaded-first\" | \"version-first\" | undefined)",
        value: input.shareStrategy
    }), "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), undefined === input.runtime || false === input.runtime || "string" === typeof input.runtime || _report(_exceptionable, {
        path: _path + ".runtime",
        expected: "(false | string | undefined)",
        value: input.runtime
    }), undefined === input.filename || "string" === typeof input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(string | undefined)",
        value: input.filename
    }), undefined === input.library || ("object" === typeof input.library && null !== input.library || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    })) && _vo113(input.library, _path + ".library", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".library",
        expected: "(LibraryOptions | undefined)",
        value: input.library
    }), (null !== input.exposes || _report(_exceptionable, {
        path: _path + ".exposes",
        expected: "(Array<string | ExposesObject> | ExposesObject | undefined)",
        value: input.exposes
    })) && (undefined === input.exposes || (Array.isArray(input.exposes) && input.exposes.map((elem, _index721) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exposes[" + _index721 + "]",
        expected: "(ExposesObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exposes[" + _index721 + "]",
        expected: "(ExposesObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".exposes[" + _index721 + "]",
        expected: "(ExposesObject | string)",
        value: elem
    })) && _vo412(elem, _path + ".exposes[" + _index721 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exposes[" + _index721 + "]",
        expected: "(ExposesObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.exposes && null !== input.exposes && false === Array.isArray(input.exposes) && _vo412(input.exposes, _path + ".exposes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exposes",
        expected: "(Array<string | ExposesObject> | ExposesObject | undefined)",
        value: input.exposes
    })) || _report(_exceptionable, {
        path: _path + ".exposes",
        expected: "(Array<string | ExposesObject> | ExposesObject | undefined)",
        value: input.exposes
    })), undefined === input.remoteType || true === _vv722.has(input.remoteType) || _report(_exceptionable, {
        path: _path + ".remoteType",
        expected: "(\"amd\" | \"amd-require\" | \"assign\" | \"commonjs\" | \"commonjs-import\" | \"commonjs-module\" | \"commonjs-static\" | \"commonjs2\" | \"global\" | \"import\" | \"jsonp\" | \"module\" | \"module-import\" | \"node-commonjs\" | \"promise\" | \"script\" | \"self\" | \"system\" | \"this\" | \"umd\" | \"umd2\" | \"var\" | \"window\" | undefined)",
        value: input.remoteType
    }), (null !== input.remotes || _report(_exceptionable, {
        path: _path + ".remotes",
        expected: "(Array<string | RemotesObject> | RemotesObject | undefined)",
        value: input.remotes
    })) && (undefined === input.remotes || (Array.isArray(input.remotes) && input.remotes.map((elem, _index723) => (null !== elem || _report(_exceptionable, {
        path: _path + ".remotes[" + _index723 + "]",
        expected: "(RemotesObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".remotes[" + _index723 + "]",
        expected: "(RemotesObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".remotes[" + _index723 + "]",
        expected: "(RemotesObject | string)",
        value: elem
    })) && _vo414(elem, _path + ".remotes[" + _index723 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".remotes[" + _index723 + "]",
        expected: "(RemotesObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.remotes && null !== input.remotes && false === Array.isArray(input.remotes) && _vo414(input.remotes, _path + ".remotes", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".remotes",
        expected: "(Array<string | RemotesObject> | RemotesObject | undefined)",
        value: input.remotes
    })) || _report(_exceptionable, {
        path: _path + ".remotes",
        expected: "(Array<string | RemotesObject> | RemotesObject | undefined)",
        value: input.remotes
    })), undefined === input.shareScope || "string" === typeof input.shareScope || _report(_exceptionable, {
        path: _path + ".shareScope",
        expected: "(string | undefined)",
        value: input.shareScope
    }), (null !== input.shared || _report(_exceptionable, {
        path: _path + ".shared",
        expected: "(Array<string | SharedObject> | SharedObject | undefined)",
        value: input.shared
    })) && (undefined === input.shared || (Array.isArray(input.shared) && input.shared.map((elem, _index724) => (null !== elem || _report(_exceptionable, {
        path: _path + ".shared[" + _index724 + "]",
        expected: "(SharedObject | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".shared[" + _index724 + "]",
        expected: "(SharedObject | string)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".shared[" + _index724 + "]",
        expected: "(SharedObject | string)",
        value: elem
    })) && _vo416(elem, _path + ".shared[" + _index724 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".shared[" + _index724 + "]",
        expected: "(SharedObject | string)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.shared && null !== input.shared && false === Array.isArray(input.shared) && _vo416(input.shared, _path + ".shared", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".shared",
        expected: "(Array<string | SharedObject> | SharedObject | undefined)",
        value: input.shared
    })) || _report(_exceptionable, {
        path: _path + ".shared",
        expected: "(Array<string | SharedObject> | SharedObject | undefined)",
        value: input.shared
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["runtimePlugins", "implementation", "shareStrategy", "name", "runtime", "filename", "library", "exposes", "remoteType", "remotes", "shareScope", "shared"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo412 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExposesConfig | ExposesItems | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExposesConfig | ExposesItems | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index725) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index725 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && _vo413(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExposesConfig | ExposesItems | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(ExposesConfig | ExposesItems | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo413 = (input, _path, _exceptionable = true) => [(null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(ExposesItems | string)",
        value: input["import"]
    })) && (undefined !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(ExposesItems | string)",
        value: input["import"]
    })) && ("string" === typeof input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(ExposesItems | string)",
        value: input["import"]
    })) && input["import"].map((elem, _index726) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index726 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(ExposesItems | string)",
        value: input["import"]
    })), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo414 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RemotesConfig | RemotesItems | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RemotesConfig | RemotesItems | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index727) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index727 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && _vo415(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RemotesConfig | RemotesItems | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(RemotesConfig | RemotesItems | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo415 = (input, _path, _exceptionable = true) => [(null !== input.external || _report(_exceptionable, {
        path: _path + ".external",
        expected: "(RemotesItems | string)",
        value: input.external
    })) && (undefined !== input.external || _report(_exceptionable, {
        path: _path + ".external",
        expected: "(RemotesItems | string)",
        value: input.external
    })) && ("string" === typeof input.external || (Array.isArray(input.external) || _report(_exceptionable, {
        path: _path + ".external",
        expected: "(RemotesItems | string)",
        value: input.external
    })) && input.external.map((elem, _index728) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".external[" + _index728 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".external",
        expected: "(RemotesItems | string)",
        value: input.external
    })), undefined === input.shareScope || "string" === typeof input.shareScope || _report(_exceptionable, {
        path: _path + ".shareScope",
        expected: "(string | undefined)",
        value: input.shareScope
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["external", "shareScope"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo416 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(SharedConfig | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(SharedConfig | string)",
            value: value
        })) && ("string" === typeof value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(SharedConfig | string)",
            value: value
        })) && _vo417(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(SharedConfig | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo417 = (input, _path, _exceptionable = true) => [undefined === input.eager || "boolean" === typeof input.eager || _report(_exceptionable, {
        path: _path + ".eager",
        expected: "(boolean | undefined)",
        value: input.eager
    }), undefined === input["import"] || false === input["import"] || "string" === typeof input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(false | string | undefined)",
        value: input["import"]
    }), undefined === input.packageName || "string" === typeof input.packageName || _report(_exceptionable, {
        path: _path + ".packageName",
        expected: "(string | undefined)",
        value: input.packageName
    }), undefined === input.requiredVersion || false === input.requiredVersion || "string" === typeof input.requiredVersion || _report(_exceptionable, {
        path: _path + ".requiredVersion",
        expected: "(false | string | undefined)",
        value: input.requiredVersion
    }), undefined === input.shareKey || "string" === typeof input.shareKey || _report(_exceptionable, {
        path: _path + ".shareKey",
        expected: "(string | undefined)",
        value: input.shareKey
    }), undefined === input.shareScope || "string" === typeof input.shareScope || _report(_exceptionable, {
        path: _path + ".shareScope",
        expected: "(string | undefined)",
        value: input.shareScope
    }), undefined === input.singleton || "boolean" === typeof input.singleton || _report(_exceptionable, {
        path: _path + ".singleton",
        expected: "(boolean | undefined)",
        value: input.singleton
    }), undefined === input.strictVersion || "boolean" === typeof input.strictVersion || _report(_exceptionable, {
        path: _path + ".strictVersion",
        expected: "(boolean | undefined)",
        value: input.strictVersion
    }), undefined === input.version || false === input.version || "string" === typeof input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(false | string | undefined)",
        value: input.version
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["eager", "import", "packageName", "requiredVersion", "shareKey", "shareScope", "singleton", "strictVersion", "version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo418 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), undefined === input.pre || (Array.isArray(input.pre) || _report(_exceptionable, {
        path: _path + ".pre",
        expected: "(Array<string> | undefined)",
        value: input.pre
    })) && input.pre.map((elem, _index729) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".pre[" + _index729 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".pre",
        expected: "(Array<string> | undefined)",
        value: input.pre
    }), undefined === input.post || (Array.isArray(input.post) || _report(_exceptionable, {
        path: _path + ".post",
        expected: "(Array<string> | undefined)",
        value: input.post
    })) && input.post.map((elem, _index730) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".post[" + _index730 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".post",
        expected: "(Array<string> | undefined)",
        value: input.post
    }), undefined === input.remove || (Array.isArray(input.remove) || _report(_exceptionable, {
        path: _path + ".remove",
        expected: "(Array<string> | undefined)",
        value: input.remove
    })) && input.remove.map((elem, _index731) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".remove[" + _index731 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".remove",
        expected: "(Array<string> | undefined)",
        value: input.remove
    }), true || _report(_exceptionable, {
        path: _path + ".setup",
        expected: "unknown",
        value: input.setup
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "pre", "post", "remove", "setup"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo419 = (input, _path, _exceptionable = true) => ["string" === typeof input["__@toStringTag@729"] || _report(_exceptionable, {
        path: _path + "[\"__@toStringTag@729\"]",
        expected: "string",
        value: input["__@toStringTag@729"]
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["__@toStringTag@729"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo420 = (input, _path, _exceptionable = true) => [undefined === input.assetPrefix || "string" === typeof input.assetPrefix || _report(_exceptionable, {
        path: _path + ".assetPrefix",
        expected: "(string | undefined)",
        value: input.assetPrefix
    }), undefined === input.cleanDistPath || "boolean" === typeof input.cleanDistPath || _report(_exceptionable, {
        path: _path + ".cleanDistPath",
        expected: "(boolean | undefined)",
        value: input.cleanDistPath
    }), (null !== input.copy || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })) && (undefined === input.copy || (Array.isArray(input.copy) && input.copy.map((elem, _index732) => (null !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index732 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index732 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".copy[" + _index732 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    })) && _vo393(elem, _path + ".copy[" + _index732 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".copy[" + _index732 + "]",
        expected: "(string | { from: string; } & Partial<RawCopyPattern>)",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.copy && null !== input.copy && _vo392(input.copy, _path + ".copy", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })) || _report(_exceptionable, {
        path: _path + ".copy",
        expected: "(Array<string | ({ from: string; } & Partial<RawCopyPattern>)> | CopyRspackPluginOptions | undefined)",
        value: input.copy
    })), undefined === input.cssModules || ("object" === typeof input.cssModules && null !== input.cssModules && false === Array.isArray(input.cssModules) || _report(_exceptionable, {
        path: _path + ".cssModules",
        expected: "(CssModules | undefined)",
        value: input.cssModules
    })) && _vo421(input.cssModules, _path + ".cssModules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssModules",
        expected: "(CssModules | undefined)",
        value: input.cssModules
    }), undefined === input.dataUriLimit || "number" === typeof input.dataUriLimit || _report(_exceptionable, {
        path: _path + ".dataUriLimit",
        expected: "(number | undefined)",
        value: input.dataUriLimit
    }), undefined === input.distPath || ("object" === typeof input.distPath && null !== input.distPath && false === Array.isArray(input.distPath) || _report(_exceptionable, {
        path: _path + ".distPath",
        expected: "(DistPath | undefined)",
        value: input.distPath
    })) && _vo422(input.distPath, _path + ".distPath", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".distPath",
        expected: "(DistPath | undefined)",
        value: input.distPath
    }), (null !== input.filename || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(Filename | string | undefined)",
        value: input.filename
    })) && (undefined === input.filename || "string" === typeof input.filename || ("object" === typeof input.filename && null !== input.filename && false === Array.isArray(input.filename) || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(Filename | string | undefined)",
        value: input.filename
    })) && _vo423(input.filename, _path + ".filename", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".filename",
        expected: "(Filename | string | undefined)",
        value: input.filename
    })), undefined === input.filenameHash || "string" === typeof input.filenameHash || "boolean" === typeof input.filenameHash || _report(_exceptionable, {
        path: _path + ".filenameHash",
        expected: "(boolean | string | undefined)",
        value: input.filenameHash
    }), undefined === input.legalComments || "none" === input.legalComments || "inline" === input.legalComments || "linked" === input.legalComments || _report(_exceptionable, {
        path: _path + ".legalComments",
        expected: "(\"inline\" | \"linked\" | \"none\" | undefined)",
        value: input.legalComments
    }), (null !== input.minify || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(Minify | boolean | undefined)",
        value: input.minify
    })) && (undefined === input.minify || "boolean" === typeof input.minify || ("object" === typeof input.minify && null !== input.minify && false === Array.isArray(input.minify) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(Minify | boolean | undefined)",
        value: input.minify
    })) && _vo424(input.minify, _path + ".minify", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".minify",
        expected: "(Minify | boolean | undefined)",
        value: input.minify
    })), (null !== input.sourceMap || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap.o1 | boolean | undefined)",
        value: input.sourceMap
    })) && (undefined === input.sourceMap || "boolean" === typeof input.sourceMap || ("object" === typeof input.sourceMap && null !== input.sourceMap && false === Array.isArray(input.sourceMap) || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap.o1 | boolean | undefined)",
        value: input.sourceMap
    })) && _vo425(input.sourceMap, _path + ".sourceMap", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".sourceMap",
        expected: "(SourceMap.o1 | boolean | undefined)",
        value: input.sourceMap
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["assetPrefix", "cleanDistPath", "copy", "cssModules", "dataUriLimit", "distPath", "filename", "filenameHash", "legalComments", "minify", "sourceMap"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo421 = (input, _path, _exceptionable = true) => [(null !== input.auto || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })) && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })), undefined === input.exportGlobals || "boolean" === typeof input.exportGlobals || _report(_exceptionable, {
        path: _path + ".exportGlobals",
        expected: "(boolean | undefined)",
        value: input.exportGlobals
    }), undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention || _report(_exceptionable, {
        path: _path + ".exportLocalsConvention",
        expected: "(\"asIs\" | \"camelCase\" | \"camelCaseOnly\" | \"dashes\" | \"dashesOnly\" | undefined)",
        value: input.exportLocalsConvention
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["auto", "exportGlobals", "exportLocalsConvention", "localIdentName"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo422 = (input, _path, _exceptionable = true) => [undefined === input.root || "string" === typeof input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "(string | undefined)",
        value: input.root
    }), undefined === input.css || "string" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(string | undefined)",
        value: input.css
    }), undefined === input.cssAsync || "string" === typeof input.cssAsync || _report(_exceptionable, {
        path: _path + ".cssAsync",
        expected: "(string | undefined)",
        value: input.cssAsync
    }), undefined === input.intermediate || "string" === typeof input.intermediate || _report(_exceptionable, {
        path: _path + ".intermediate",
        expected: "(string | undefined)",
        value: input.intermediate
    }), undefined === input.js || "string" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(string | undefined)",
        value: input.js
    }), undefined === input.jsAsync || "string" === typeof input.jsAsync || _report(_exceptionable, {
        path: _path + ".jsAsync",
        expected: "(string | undefined)",
        value: input.jsAsync
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["root", "css", "cssAsync", "intermediate", "js", "jsAsync"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo423 = (input, _path, _exceptionable = true) => [undefined === input.bundle || "string" === typeof input.bundle || _report(_exceptionable, {
        path: _path + ".bundle",
        expected: "(string | undefined)",
        value: input.bundle
    }), undefined === input.template || "string" === typeof input.template || _report(_exceptionable, {
        path: _path + ".template",
        expected: "(string | undefined)",
        value: input.template
    }), undefined === input.js || "string" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(string | undefined)",
        value: input.js
    }), undefined === input.css || "string" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(string | undefined)",
        value: input.css
    }), undefined === input.svg || "string" === typeof input.svg || _report(_exceptionable, {
        path: _path + ".svg",
        expected: "(string | undefined)",
        value: input.svg
    }), undefined === input.font || "string" === typeof input.font || _report(_exceptionable, {
        path: _path + ".font",
        expected: "(string | undefined)",
        value: input.font
    }), undefined === input.image || "string" === typeof input.image || _report(_exceptionable, {
        path: _path + ".image",
        expected: "(string | undefined)",
        value: input.image
    }), undefined === input.media || "string" === typeof input.media || _report(_exceptionable, {
        path: _path + ".media",
        expected: "(string | undefined)",
        value: input.media
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["bundle", "template", "js", "css", "svg", "font", "image", "media"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo424 = (input, _path, _exceptionable = true) => [undefined === input.css || "boolean" === typeof input.css || _report(_exceptionable, {
        path: _path + ".css",
        expected: "(boolean | undefined)",
        value: input.css
    }), undefined === input.js || "boolean" === typeof input.js || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(boolean | undefined)",
        value: input.js
    }), undefined === input.jsOptions || ("object" === typeof input.jsOptions && null !== input.jsOptions && false === Array.isArray(input.jsOptions) || _report(_exceptionable, {
        path: _path + ".jsOptions",
        expected: "(SwcJsMinimizerRspackPluginOptions | undefined)",
        value: input.jsOptions
    })) && _vo380(input.jsOptions, _path + ".jsOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".jsOptions",
        expected: "(SwcJsMinimizerRspackPluginOptions | undefined)",
        value: input.jsOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["css", "js", "jsOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo425 = (input, _path, _exceptionable = true) => [undefined === input.js || true === _vv733.has(input.js) || _report(_exceptionable, {
        path: _path + ".js",
        expected: "(\"cheap-module-source-map\" | \"cheap-source-map\" | \"eval\" | \"eval-cheap-module-source-map\" | \"eval-cheap-source-map\" | \"eval-nosources-cheap-module-source-map\" | \"eval-nosources-cheap-source-map\" | \"eval-nosources-source-map\" | \"eval-source-map\" | \"hidden-cheap-module-source-map\" | \"hidden-cheap-source-map\" | \"hidden-nosources-cheap-module-source-map\" | \"hidden-nosources-cheap-source-map\" | \"hidden-nosources-source-map\" | \"hidden-source-map\" | \"inline-cheap-module-source-map\" | \"inline-cheap-source-map\" | \"inline-nosources-cheap-module-source-map\" | \"inline-nosources-cheap-source-map\" | \"inline-nosources-source-map\" | \"inline-source-map\" | \"nosources-cheap-module-source-map\" | \"nosources-cheap-source-map\" | \"nosources-source-map\" | \"source-map\" | false | undefined)",
        value: input.js
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["js"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo426 = (input, _path, _exceptionable = true) => [undefined === input.chunkSplit || ("object" === typeof input.chunkSplit && null !== input.chunkSplit && false === Array.isArray(input.chunkSplit) || _report(_exceptionable, {
        path: _path + ".chunkSplit",
        expected: "(ChunkSplit | ChunkSplitBySize | ChunkSplitCustom | undefined)",
        value: input.chunkSplit
    })) && _vu24(input.chunkSplit, _path + ".chunkSplit", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".chunkSplit",
        expected: "(ChunkSplit | ChunkSplitBySize | ChunkSplitCustom | undefined)",
        value: input.chunkSplit
    }), (null !== input.removeConsole || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType>.o1 | boolean | undefined)",
        value: input.removeConsole
    })) && (undefined === input.removeConsole || "boolean" === typeof input.removeConsole || (Array.isArray(input.removeConsole) || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType>.o1 | boolean | undefined)",
        value: input.removeConsole
    })) && input.removeConsole.map((elem, _index734) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".removeConsole[" + _index734 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".removeConsole",
        expected: "(Array<ConsoleType>.o1 | boolean | undefined)",
        value: input.removeConsole
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["chunkSplit", "removeConsole"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo427 = (input, _path, _exceptionable = true) => [undefined === input.strategy || "all-in-one" === input.strategy || "split-by-module" === input.strategy || "split-by-experience" === input.strategy || "single-vendor" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "(\"all-in-one\" | \"single-vendor\" | \"split-by-experience\" | \"split-by-module\" | undefined)",
        value: input.strategy
    }), (null !== input.override || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && (undefined === input.override || false === input.override || ("object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && _vo144(input.override, _path + ".override", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "override"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo428 = (input, _path, _exceptionable = true) => ["split-by-size" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "\"split-by-size\"",
        value: input.strategy
    }), undefined === input.minSize || "number" === typeof input.minSize || _report(_exceptionable, {
        path: _path + ".minSize",
        expected: "(number | undefined)",
        value: input.minSize
    }), undefined === input.maxSize || "number" === typeof input.maxSize || _report(_exceptionable, {
        path: _path + ".maxSize",
        expected: "(number | undefined)",
        value: input.maxSize
    }), (null !== input.override || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && (undefined === input.override || false === input.override || ("object" === typeof input.override && null !== input.override && false === Array.isArray(input.override) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })) && _vo144(input.override, _path + ".override", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".override",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.override
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "minSize", "maxSize", "override"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo429 = (input, _path, _exceptionable = true) => ["custom" === input.strategy || _report(_exceptionable, {
        path: _path + ".strategy",
        expected: "\"custom\"",
        value: input.strategy
    }), (null !== input.splitChunks || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && (undefined === input.splitChunks || false === input.splitChunks || ("object" === typeof input.splitChunks && null !== input.splitChunks && false === Array.isArray(input.splitChunks) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })) && _vo144(input.splitChunks, _path + ".splitChunks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".splitChunks",
        expected: "(OptimizationSplitChunksOptions | false | undefined)",
        value: input.splitChunks
    })), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["strategy", "splitChunks"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo430 = (input, _path, _exceptionable = true) => [undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Record<string, string | string[]> | undefined)",
        value: input.headers
    })) && _vo153(input.headers, _path + ".headers", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".headers",
        expected: "(Record<string, string | string[]> | undefined)",
        value: input.headers
    }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
        path: _path + ".host",
        expected: "(string | undefined)",
        value: input.host
    }), undefined === input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | undefined)",
        value: input.port
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["headers", "host", "port"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo431 = (input, _path, _exceptionable = true) => [undefined === input.alias || ("object" === typeof input.alias && null !== input.alias && false === Array.isArray(input.alias) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Record<string, string | false | string[]> | undefined)",
        value: input.alias
    })) && _vo432(input.alias, _path + ".alias", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".alias",
        expected: "(Record<string, string | false | string[]> | undefined)",
        value: input.alias
    }), (null !== input.assetsInclude || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })) && (undefined === input.assetsInclude || "function" === typeof input.assetsInclude || "string" === typeof input.assetsInclude || input.assetsInclude instanceof RegExp || (Array.isArray(input.assetsInclude) && (_va0(input.assetsInclude, _path + ".assetsInclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "RuleSetConditions",
        value: input.assetsInclude
    })) || "object" === typeof input.assetsInclude && null !== input.assetsInclude && false === Array.isArray(input.assetsInclude) && _vo207(input.assetsInclude, _path + ".assetsInclude", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })) || _report(_exceptionable, {
        path: _path + ".assetsInclude",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string | undefined)",
        value: input.assetsInclude
    })), undefined === input.decorators || ("object" === typeof input.decorators && null !== input.decorators && false === Array.isArray(input.decorators) || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(Decorators.o1 | undefined)",
        value: input.decorators
    })) && _vo433(input.decorators, _path + ".decorators", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".decorators",
        expected: "(Decorators.o1 | undefined)",
        value: input.decorators
    }), undefined === input.define || ("object" === typeof input.define && null !== input.define && false === Array.isArray(input.define) || _report(_exceptionable, {
        path: _path + ".define",
        expected: "(Record<string, string | number | boolean | Record<string, unknown> | undefined> | undefined)",
        value: input.define
    })) && _vo434(input.define, _path + ".define", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".define",
        expected: "(Record<string, string | number | boolean | Record<string, unknown> | undefined> | undefined)",
        value: input.define
    }), (null !== input.entry || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | Record<string, string | string[] | EntryDescription> | string | undefined)",
        value: input.entry
    })) && (undefined === input.entry || "string" === typeof input.entry || (Array.isArray(input.entry) && input.entry.map((elem, _index735) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".entry[" + _index735 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || "object" === typeof input.entry && null !== input.entry && false === Array.isArray(input.entry) && _vo435(input.entry, _path + ".entry", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | Record<string, string | string[] | EntryDescription> | string | undefined)",
        value: input.entry
    })) || _report(_exceptionable, {
        path: _path + ".entry",
        expected: "(Array<string> | Record<string, string | string[] | EntryDescription> | string | undefined)",
        value: input.entry
    })), undefined === input.exclude || (Array.isArray(input.exclude) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.exclude
    })) && input.exclude.map((elem, _index736) => (null !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index736 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".exclude[" + _index736 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va0(elem, _path + ".exclude[" + _index736 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index736 + "]",
        expected: "RuleSetConditions",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo207(elem, _path + ".exclude[" + _index736 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index736 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".exclude[" + _index736 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".exclude",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.exclude
    }), undefined === input.include || (Array.isArray(input.include) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.include
    })) && input.include.map((elem, _index737) => (null !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index737 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".include[" + _index737 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va0(elem, _path + ".include[" + _index737 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index737 + "]",
        expected: "RuleSetConditions",
        value: elem
    })) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo207(elem, _path + ".include[" + _index737 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".include[" + _index737 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    })) || _report(_exceptionable, {
        path: _path + ".include[" + _index737 + "]",
        expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".include",
        expected: "(Array<RuleSetCondition>.o3 | undefined)",
        value: input.include
    }), undefined === input.transformImport || (Array.isArray(input.transformImport) || _report(_exceptionable, {
        path: _path + ".transformImport",
        expected: "(Array<TransformImport> | undefined)",
        value: input.transformImport
    })) && input.transformImport.map((elem, _index738) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index738 + "]",
        expected: "TransformImport.o1",
        value: elem
    })) && _vo437(elem, _path + ".transformImport[" + _index738 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".transformImport[" + _index738 + "]",
        expected: "TransformImport.o1",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".transformImport",
        expected: "(Array<TransformImport> | undefined)",
        value: input.transformImport
    }), undefined === input.tsconfigPath || "string" === typeof input.tsconfigPath || _report(_exceptionable, {
        path: _path + ".tsconfigPath",
        expected: "(string | undefined)",
        value: input.tsconfigPath
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["alias", "assetsInclude", "decorators", "define", "entry", "exclude", "include", "transformImport", "tsconfigPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo432 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && (false === value || "string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        })) && value.map((elem, _index739) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index739 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | false | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo433 = (input, _path, _exceptionable = true) => [undefined === input.version || "legacy" === input.version || "2022-03" === input.version || _report(_exceptionable, {
        path: _path + ".version",
        expected: "(\"2022-03\" | \"legacy\" | undefined)",
        value: input.version
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["version"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo434 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Record<string, unknown> | boolean | number | string | undefined)",
            value: value
        })) && (undefined === value || "string" === typeof value || "number" === typeof value || "boolean" === typeof value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Record<string, unknown> | boolean | number | string | undefined)",
            value: value
        })) && _vo39(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Record<string, unknown> | boolean | number | string | undefined)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo435 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o2 | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o2 | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) && value.map((elem, _index740) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index740 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || "object" === typeof value && null !== value && false === Array.isArray(value) && _vo436(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), true && _exceptionable) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o2 | string)",
            value: value
        })) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | EntryDescription.o2 | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo436 = (input, _path, _exceptionable = true) => [(null !== input["import"] || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["import"]
    })) && (undefined === input["import"] || "string" === typeof input["import"] || (Array.isArray(input["import"]) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["import"]
    })) && input["import"].map((elem, _index741) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + "[\"import\"][" + _index741 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + "[\"import\"]",
        expected: "(Array<string> | string | undefined)",
        value: input["import"]
    })), undefined === input.publicPath || "string" === typeof input.publicPath || _report(_exceptionable, {
        path: _path + ".publicPath",
        expected: "(string | undefined)",
        value: input.publicPath
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["import", "publicPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo437 = (input, _path, _exceptionable = true) => [undefined === input.camelToDashComponentName || "boolean" === typeof input.camelToDashComponentName || _report(_exceptionable, {
        path: _path + ".camelToDashComponentName",
        expected: "(boolean | undefined)",
        value: input.camelToDashComponentName
    }), undefined === input.customName || "string" === typeof input.customName || _report(_exceptionable, {
        path: _path + ".customName",
        expected: "(string | undefined)",
        value: input.customName
    }), "string" === typeof input.libraryName || _report(_exceptionable, {
        path: _path + ".libraryName",
        expected: "string",
        value: input.libraryName
    }), undefined === input.libraryDirectory || "string" === typeof input.libraryDirectory || _report(_exceptionable, {
        path: _path + ".libraryDirectory",
        expected: "(string | undefined)",
        value: input.libraryDirectory
    }), undefined === input.transformToDefaultImport || "boolean" === typeof input.transformToDefaultImport || _report(_exceptionable, {
        path: _path + ".transformToDefaultImport",
        expected: "(boolean | undefined)",
        value: input.transformToDefaultImport
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["camelToDashComponentName", "customName", "libraryName", "libraryDirectory", "transformToDefaultImport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo438 = (input, _path, _exceptionable = true) => [(null !== input.bundlerChain || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })) && (undefined === input.bundlerChain || "function" === typeof input.bundlerChain || (Array.isArray(input.bundlerChain) || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })) && input.bundlerChain.map((elem, _index742) => true || _report(_exceptionable, {
        path: _path + ".bundlerChain[" + _index742 + "]",
        expected: "unknown",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".bundlerChain",
        expected: "(Array<__type> | undefined)",
        value: input.bundlerChain
    })), undefined === input.cssLoader || ("object" === typeof input.cssLoader && null !== input.cssLoader && false === Array.isArray(input.cssLoader) || _report(_exceptionable, {
        path: _path + ".cssLoader",
        expected: "(CssLoader | undefined)",
        value: input.cssLoader
    })) && _vo439(input.cssLoader, _path + ".cssLoader", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssLoader",
        expected: "(CssLoader | undefined)",
        value: input.cssLoader
    }), undefined === input.cssExtract || ("object" === typeof input.cssExtract && null !== input.cssExtract && false === Array.isArray(input.cssExtract) || _report(_exceptionable, {
        path: _path + ".cssExtract",
        expected: "(CssExtract | undefined)",
        value: input.cssExtract
    })) && _vo441(input.cssExtract, _path + ".cssExtract", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cssExtract",
        expected: "(CssExtract | undefined)",
        value: input.cssExtract
    }), undefined === input.rsdoctor || ("object" === typeof input.rsdoctor && null !== input.rsdoctor && false === Array.isArray(input.rsdoctor) || _report(_exceptionable, {
        path: _path + ".rsdoctor",
        expected: "(RsdoctorRspackPluginOptions<[]> | undefined)",
        value: input.rsdoctor
    })) && _vo444(input.rsdoctor, _path + ".rsdoctor", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rsdoctor",
        expected: "(RsdoctorRspackPluginOptions<[]> | undefined)",
        value: input.rsdoctor
    }), (null !== input.rspack || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })) && (undefined === input.rspack || "function" === typeof input.rspack || (Array.isArray(input.rspack) && input.rspack.map((elem, _index743) => (null !== elem || _report(_exceptionable, {
        path: _path + ".rspack[" + _index743 + "]",
        expected: "RspackOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".rspack[" + _index743 + "]",
        expected: "RspackOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".rspack[" + _index743 + "]",
        expected: "RspackOptions",
        value: elem
    })) && _vo110(elem, _path + ".rspack[" + _index743 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspack[" + _index743 + "]",
        expected: "RspackOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.rspack && null !== input.rspack && false === Array.isArray(input.rspack) && _vo110(input.rspack, _path + ".rspack", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })) || _report(_exceptionable, {
        path: _path + ".rspack",
        expected: "(Array<RspackOptions | ((config: RspackOptions, ctx: ModifyRspackConfigUtils) => MaybePromise<void | RspackOptions>)> | RspackOptions | undefined)",
        value: input.rspack
    })), (null !== input.swc || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })) && (undefined === input.swc || "function" === typeof input.swc || (Array.isArray(input.swc) && input.swc.map((elem, _index744) => (null !== elem || _report(_exceptionable, {
        path: _path + ".swc[" + _index744 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".swc[" + _index744 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && ("function" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
        path: _path + ".swc[" + _index744 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    })) && _vo70(elem, _path + ".swc[" + _index744 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".swc[" + _index744 + "]",
        expected: "SwcLoaderOptions",
        value: elem
    }))).every(flag => flag) || "object" === typeof input.swc && null !== input.swc && false === Array.isArray(input.swc) && _vo70(input.swc, _path + ".swc", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })) || _report(_exceptionable, {
        path: _path + ".swc",
        expected: "(Array<SwcLoaderOptions | ((config: SwcLoaderOptions) => void | SwcLoaderOptions)> | SwcLoaderOptions | undefined)",
        value: input.swc
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["bundlerChain", "cssLoader", "cssExtract", "rsdoctor", "rspack", "swc"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo439 = (input, _path, _exceptionable = true) => [undefined === input.importLoaders || 0 === input.importLoaders || 1 === input.importLoaders || 2 === input.importLoaders || _report(_exceptionable, {
        path: _path + ".importLoaders",
        expected: "(0 | 1 | 2 | undefined)",
        value: input.importLoaders
    }), (null !== input.modules || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CssLoaderModules | boolean | undefined)",
        value: input.modules
    })) && (undefined === input.modules || "boolean" === typeof input.modules || ("object" === typeof input.modules && null !== input.modules && false === Array.isArray(input.modules) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CssLoaderModules | boolean | undefined)",
        value: input.modules
    })) && _vo440(input.modules, _path + ".modules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".modules",
        expected: "(CssLoaderModules | boolean | undefined)",
        value: input.modules
    })), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["importLoaders", "modules"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo440 = (input, _path, _exceptionable = true) => [(null !== input.auto || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })) && (undefined === input.auto || "function" === typeof input.auto || "boolean" === typeof input.auto || input.auto instanceof RegExp || _report(_exceptionable, {
        path: _path + ".auto",
        expected: "(RegExp | boolean | undefined)",
        value: input.auto
    })), undefined === input.exportLocalsConvention || "asIs" === input.exportLocalsConvention || "camelCase" === input.exportLocalsConvention || "camelCaseOnly" === input.exportLocalsConvention || "dashes" === input.exportLocalsConvention || "dashesOnly" === input.exportLocalsConvention || _report(_exceptionable, {
        path: _path + ".exportLocalsConvention",
        expected: "(\"asIs\" | \"camelCase\" | \"camelCaseOnly\" | \"dashes\" | \"dashesOnly\" | undefined)",
        value: input.exportLocalsConvention
    }), undefined === input.localIdentName || "string" === typeof input.localIdentName || _report(_exceptionable, {
        path: _path + ".localIdentName",
        expected: "(string | undefined)",
        value: input.localIdentName
    }), undefined === input.namedExport || "boolean" === typeof input.namedExport || _report(_exceptionable, {
        path: _path + ".namedExport",
        expected: "(boolean | undefined)",
        value: input.namedExport
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["auto", "exportLocalsConvention", "localIdentName", "namedExport"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo441 = (input, _path, _exceptionable = true) => [undefined === input.loaderOptions || ("object" === typeof input.loaderOptions && null !== input.loaderOptions && false === Array.isArray(input.loaderOptions) || _report(_exceptionable, {
        path: _path + ".loaderOptions",
        expected: "(CssExtractRspackLoaderOptions.o1 | undefined)",
        value: input.loaderOptions
    })) && _vo442(input.loaderOptions, _path + ".loaderOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".loaderOptions",
        expected: "(CssExtractRspackLoaderOptions.o1 | undefined)",
        value: input.loaderOptions
    }), undefined === input.pluginOptions || ("object" === typeof input.pluginOptions && null !== input.pluginOptions && false === Array.isArray(input.pluginOptions) || _report(_exceptionable, {
        path: _path + ".pluginOptions",
        expected: "(CssExtractRspackPluginOptions.o1 | undefined)",
        value: input.pluginOptions
    })) && _vo443(input.pluginOptions, _path + ".pluginOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".pluginOptions",
        expected: "(CssExtractRspackPluginOptions.o1 | undefined)",
        value: input.pluginOptions
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["loaderOptions", "pluginOptions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo442 = (input, _path, _exceptionable = true) => [undefined === input.esModule || "boolean" === typeof input.esModule || _report(_exceptionable, {
        path: _path + ".esModule",
        expected: "(boolean | undefined)",
        value: input.esModule
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["esModule"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo443 = (input, _path, _exceptionable = true) => [undefined === input.ignoreOrder || "boolean" === typeof input.ignoreOrder || _report(_exceptionable, {
        path: _path + ".ignoreOrder",
        expected: "(boolean | undefined)",
        value: input.ignoreOrder
    }), undefined === input.pathinfo || "boolean" === typeof input.pathinfo || _report(_exceptionable, {
        path: _path + ".pathinfo",
        expected: "(boolean | undefined)",
        value: input.pathinfo
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ignoreOrder", "pathinfo"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo444 = (input, _path, _exceptionable = true) => [undefined === input.linter || ("object" === typeof input.linter && null !== input.linter && false === Array.isArray(input.linter) || _report(_exceptionable, {
        path: _path + ".linter",
        expected: "(Options<[], [RuleData<Config, \"duplicate-package\">, RuleData<Config, \"default-import-check\">, RuleData<Config, \"loader-performance-optimization\">, RuleData<...>], []> | undefined)",
        value: input.linter
    })) && _vo445(input.linter, _path + ".linter", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".linter",
        expected: "(Options<[], [RuleData<Config, \"duplicate-package\">, RuleData<Config, \"default-import-check\">, RuleData<Config, \"loader-performance-optimization\">, RuleData<...>], []> | undefined)",
        value: input.linter
    }), (null !== input.features || _report(_exceptionable, {
        path: _path + ".features",
        expected: "(Array<keyof RsdoctorWebpackPluginFeatures> | RsdoctorWebpackPluginFeatures | undefined)",
        value: input.features
    })) && (undefined === input.features || (Array.isArray(input.features) && input.features.map((elem, _index745) => "loader" === elem || "bundle" === elem || "plugins" === elem || "resolver" === elem || "treeShaking" === elem || "lite" === elem || _report(_exceptionable, {
        path: _path + ".features[" + _index745 + "]",
        expected: "(\"bundle\" | \"lite\" | \"loader\" | \"plugins\" | \"resolver\" | \"treeShaking\")",
        value: elem
    })).every(flag => flag) || "object" === typeof input.features && null !== input.features && false === Array.isArray(input.features) && _vo451(input.features, _path + ".features", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".features",
        expected: "(Array<keyof RsdoctorWebpackPluginFeatures> | RsdoctorWebpackPluginFeatures | undefined)",
        value: input.features
    })) || _report(_exceptionable, {
        path: _path + ".features",
        expected: "(Array<keyof RsdoctorWebpackPluginFeatures> | RsdoctorWebpackPluginFeatures | undefined)",
        value: input.features
    })), undefined === input.mode || "normal" === input.mode || "lite" === input.mode || "brief" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"brief\" | \"lite\" | \"normal\" | undefined)",
        value: input.mode
    }), undefined === input.loaderInterceptorOptions || ("object" === typeof input.loaderInterceptorOptions && null !== input.loaderInterceptorOptions && false === Array.isArray(input.loaderInterceptorOptions) || _report(_exceptionable, {
        path: _path + ".loaderInterceptorOptions",
        expected: "(__type.o117 | undefined)",
        value: input.loaderInterceptorOptions
    })) && _vo452(input.loaderInterceptorOptions, _path + ".loaderInterceptorOptions", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".loaderInterceptorOptions",
        expected: "(__type.o117 | undefined)",
        value: input.loaderInterceptorOptions
    }), undefined === input.disableClientServer || "boolean" === typeof input.disableClientServer || _report(_exceptionable, {
        path: _path + ".disableClientServer",
        expected: "(boolean | undefined)",
        value: input.disableClientServer
    }), undefined === input.sdkInstance || ("object" === typeof input.sdkInstance && null !== input.sdkInstance || _report(_exceptionable, {
        path: _path + ".sdkInstance",
        expected: "(RsdoctorSDK<RsdoctorWebpackSDKOptions> | undefined)",
        value: input.sdkInstance
    })) && _vo453(input.sdkInstance, _path + ".sdkInstance", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".sdkInstance",
        expected: "(RsdoctorSDK<RsdoctorWebpackSDKOptions> | undefined)",
        value: input.sdkInstance
    }), undefined === input.supports || ("object" === typeof input.supports && null !== input.supports && false === Array.isArray(input.supports) || _report(_exceptionable, {
        path: _path + ".supports",
        expected: "(ISupport | undefined)",
        value: input.supports
    })) && _vo465(input.supports, _path + ".supports", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".supports",
        expected: "(ISupport | undefined)",
        value: input.supports
    }), undefined === input.reportDir || "string" === typeof input.reportDir || _report(_exceptionable, {
        path: _path + ".reportDir",
        expected: "(string | undefined)",
        value: input.reportDir
    }), undefined === input.reportCodeType || ("object" === typeof input.reportCodeType && null !== input.reportCodeType && false === Array.isArray(input.reportCodeType) || _report(_exceptionable, {
        path: _path + ".reportCodeType",
        expected: "(IReportCodeType | undefined)",
        value: input.reportCodeType
    })) && _vo466(input.reportCodeType, _path + ".reportCodeType", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".reportCodeType",
        expected: "(IReportCodeType | undefined)",
        value: input.reportCodeType
    }), undefined === input.port || "number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "(number | undefined)",
        value: input.port
    }), undefined === input.printLog || ("object" === typeof input.printLog && null !== input.printLog || _report(_exceptionable, {
        path: _path + ".printLog",
        expected: "(IPrintLog | undefined)",
        value: input.printLog
    })) && _vo456(input.printLog, _path + ".printLog", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".printLog",
        expected: "(IPrintLog | undefined)",
        value: input.printLog
    }), undefined === input.brief || ("object" === typeof input.brief && null !== input.brief || _report(_exceptionable, {
        path: _path + ".brief",
        expected: "(BriefConfig | undefined)",
        value: input.brief
    })) && _vo457(input.brief, _path + ".brief", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".brief",
        expected: "(BriefConfig | undefined)",
        value: input.brief
    }), undefined === input.disableTOSUpload || "boolean" === typeof input.disableTOSUpload || _report(_exceptionable, {
        path: _path + ".disableTOSUpload",
        expected: "(boolean | undefined)",
        value: input.disableTOSUpload
    }), undefined === input.innerClientPath || "string" === typeof input.innerClientPath || _report(_exceptionable, {
        path: _path + ".innerClientPath",
        expected: "(string | undefined)",
        value: input.innerClientPath
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["linter", "features", "mode", "loaderInterceptorOptions", "disableClientServer", "sdkInstance", "supports", "reportDir", "reportCodeType", "port", "printLog", "brief", "disableTOSUpload", "innerClientPath"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo445 = (input, _path, _exceptionable = true) => [undefined === input.rules || ("object" === typeof input.rules && null !== input.rules && false === Array.isArray(input.rules) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(undefined | {} & { [key: string]: RuleConfigItem<unknown>; } & { \"duplicate-package\"?: RuleConfigItem<Config>; \"default-import-check\"?: RuleConfigItem<Config>; \"loader-performance-optimization\"?: RuleConfigItem<...>; \"ecma-version-check\"?: RuleConfigItem<...>; })",
        value: input.rules
    })) && _vo446(input.rules, _path + ".rules", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".rules",
        expected: "(undefined | {} & { [key: string]: RuleConfigItem<unknown>; } & { \"duplicate-package\"?: RuleConfigItem<Config>; \"default-import-check\"?: RuleConfigItem<Config>; \"loader-performance-optimization\"?: RuleConfigItem<...>; \"ecma-version-check\"?: RuleConfigItem<...>; })",
        value: input.rules
    }), undefined === input.level || "Ignore" === input.level || "Warn" === input.level || "Error" === input.level || _report(_exceptionable, {
        path: _path + ".level",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | undefined)",
        value: input.level
    }), undefined === input["extends"] || (Array.isArray(input["extends"]) || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "([] | undefined)",
        value: input["extends"]
    })) && ((input["extends"].length === 0 || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "[]",
        value: input["extends"]
    })) && [].every(flag => flag)) || _report(_exceptionable, {
        path: _path + "[\"extends\"]",
        expected: "([] | undefined)",
        value: input["extends"]
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["rules", "level", "extends"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo446 = (input, _path, _exceptionable = true) => [(null !== input["duplicate-package"] || _report(_exceptionable, {
        path: _path + "[\"duplicate-package\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config] | undefined)",
        value: input["duplicate-package"]
    })) && (undefined === input["duplicate-package"] || "off" === input["duplicate-package"] || "on" === input["duplicate-package"] || "Ignore" === input["duplicate-package"] || "Warn" === input["duplicate-package"] || "Error" === input["duplicate-package"] || (Array.isArray(input["duplicate-package"]) || _report(_exceptionable, {
        path: _path + "[\"duplicate-package\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config] | undefined)",
        value: input["duplicate-package"]
    })) && ((input["duplicate-package"].length === 2 || _report(_exceptionable, {
        path: _path + "[\"duplicate-package\"]",
        expected: "[(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\"), Config.o2]",
        value: input["duplicate-package"]
    })) && [
        "off" === input["duplicate-package"][0] || "on" === input["duplicate-package"][0] || "Ignore" === input["duplicate-package"][0] || "Warn" === input["duplicate-package"][0] || "Error" === input["duplicate-package"][0] || _report(_exceptionable, {
            path: _path + "[\"duplicate-package\"][0]",
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\")",
            value: input["duplicate-package"][0]
        }),
        ("object" === typeof input["duplicate-package"][1] && null !== input["duplicate-package"][1] || _report(_exceptionable, {
            path: _path + "[\"duplicate-package\"][1]",
            expected: "Config.o2",
            value: input["duplicate-package"][1]
        })) && _vo447(input["duplicate-package"][1], _path + "[\"duplicate-package\"][1]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + "[\"duplicate-package\"][1]",
            expected: "Config.o2",
            value: input["duplicate-package"][1]
        })
    ].every(flag => flag)) || _report(_exceptionable, {
        path: _path + "[\"duplicate-package\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config] | undefined)",
        value: input["duplicate-package"]
    })), (null !== input["default-import-check"] || _report(_exceptionable, {
        path: _path + "[\"default-import-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o1 | undefined)",
        value: input["default-import-check"]
    })) && (undefined === input["default-import-check"] || "off" === input["default-import-check"] || "on" === input["default-import-check"] || "Ignore" === input["default-import-check"] || "Warn" === input["default-import-check"] || "Error" === input["default-import-check"] || (Array.isArray(input["default-import-check"]) || _report(_exceptionable, {
        path: _path + "[\"default-import-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o1 | undefined)",
        value: input["default-import-check"]
    })) && ((input["default-import-check"].length === 2 || _report(_exceptionable, {
        path: _path + "[\"default-import-check\"]",
        expected: "[(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\"), Config.o3]",
        value: input["default-import-check"]
    })) && [
        "off" === input["default-import-check"][0] || "on" === input["default-import-check"][0] || "Ignore" === input["default-import-check"][0] || "Warn" === input["default-import-check"][0] || "Error" === input["default-import-check"][0] || _report(_exceptionable, {
            path: _path + "[\"default-import-check\"][0]",
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\")",
            value: input["default-import-check"][0]
        }),
        ("object" === typeof input["default-import-check"][1] && null !== input["default-import-check"][1] || _report(_exceptionable, {
            path: _path + "[\"default-import-check\"][1]",
            expected: "Config.o3",
            value: input["default-import-check"][1]
        })) && _vo448(input["default-import-check"][1], _path + "[\"default-import-check\"][1]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + "[\"default-import-check\"][1]",
            expected: "Config.o3",
            value: input["default-import-check"][1]
        })
    ].every(flag => flag)) || _report(_exceptionable, {
        path: _path + "[\"default-import-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o1 | undefined)",
        value: input["default-import-check"]
    })), (null !== input["loader-performance-optimization"] || _report(_exceptionable, {
        path: _path + "[\"loader-performance-optimization\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o2 | undefined)",
        value: input["loader-performance-optimization"]
    })) && (undefined === input["loader-performance-optimization"] || "off" === input["loader-performance-optimization"] || "on" === input["loader-performance-optimization"] || "Ignore" === input["loader-performance-optimization"] || "Warn" === input["loader-performance-optimization"] || "Error" === input["loader-performance-optimization"] || (Array.isArray(input["loader-performance-optimization"]) || _report(_exceptionable, {
        path: _path + "[\"loader-performance-optimization\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o2 | undefined)",
        value: input["loader-performance-optimization"]
    })) && ((input["loader-performance-optimization"].length === 2 || _report(_exceptionable, {
        path: _path + "[\"loader-performance-optimization\"]",
        expected: "[(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\"), Config.o4]",
        value: input["loader-performance-optimization"]
    })) && [
        "off" === input["loader-performance-optimization"][0] || "on" === input["loader-performance-optimization"][0] || "Ignore" === input["loader-performance-optimization"][0] || "Warn" === input["loader-performance-optimization"][0] || "Error" === input["loader-performance-optimization"][0] || _report(_exceptionable, {
            path: _path + "[\"loader-performance-optimization\"][0]",
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\")",
            value: input["loader-performance-optimization"][0]
        }),
        ("object" === typeof input["loader-performance-optimization"][1] && null !== input["loader-performance-optimization"][1] || _report(_exceptionable, {
            path: _path + "[\"loader-performance-optimization\"][1]",
            expected: "Config.o4",
            value: input["loader-performance-optimization"][1]
        })) && _vo449(input["loader-performance-optimization"][1], _path + "[\"loader-performance-optimization\"][1]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + "[\"loader-performance-optimization\"][1]",
            expected: "Config.o4",
            value: input["loader-performance-optimization"][1]
        })
    ].every(flag => flag)) || _report(_exceptionable, {
        path: _path + "[\"loader-performance-optimization\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o2 | undefined)",
        value: input["loader-performance-optimization"]
    })), (null !== input["ecma-version-check"] || _report(_exceptionable, {
        path: _path + "[\"ecma-version-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o3 | undefined)",
        value: input["ecma-version-check"]
    })) && (undefined === input["ecma-version-check"] || "off" === input["ecma-version-check"] || "on" === input["ecma-version-check"] || "Ignore" === input["ecma-version-check"] || "Warn" === input["ecma-version-check"] || "Error" === input["ecma-version-check"] || (Array.isArray(input["ecma-version-check"]) || _report(_exceptionable, {
        path: _path + "[\"ecma-version-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o3 | undefined)",
        value: input["ecma-version-check"]
    })) && ((input["ecma-version-check"].length === 2 || _report(_exceptionable, {
        path: _path + "[\"ecma-version-check\"]",
        expected: "[(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\"), Config.o5]",
        value: input["ecma-version-check"]
    })) && [
        "off" === input["ecma-version-check"][0] || "on" === input["ecma-version-check"][0] || "Ignore" === input["ecma-version-check"][0] || "Warn" === input["ecma-version-check"][0] || "Error" === input["ecma-version-check"][0] || _report(_exceptionable, {
            path: _path + "[\"ecma-version-check\"][0]",
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\")",
            value: input["ecma-version-check"][0]
        }),
        ("object" === typeof input["ecma-version-check"][1] && null !== input["ecma-version-check"][1] || _report(_exceptionable, {
            path: _path + "[\"ecma-version-check\"][1]",
            expected: "Config.o5",
            value: input["ecma-version-check"][1]
        })) && _vo450(input["ecma-version-check"][1], _path + "[\"ecma-version-check\"][1]", true && _exceptionable) || _report(_exceptionable, {
            path: _path + "[\"ecma-version-check\"][1]",
            expected: "Config.o5",
            value: input["ecma-version-check"][1]
        })
    ].every(flag => flag)) || _report(_exceptionable, {
        path: _path + "[\"ecma-version-check\"]",
        expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, Config].o3 | undefined)",
        value: input["ecma-version-check"]
    })), false === _exceptionable || Object.keys(input).map(key => {
        if (["duplicate-package", "default-import-check", "loader-performance-optimization", "ecma-version-check"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, unknown])",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, unknown])",
            value: value
        })) && ("off" === value || "on" === value || "Ignore" === value || "Warn" === value || "Error" === value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, unknown])",
            value: value
        })) && ((value.length === 2 || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "[(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\"), any]",
            value: value
        })) && [
            "off" === value[0] || "on" === value[0] || "Ignore" === value[0] || "Warn" === value[0] || "Error" === value[0] || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[0]",
                expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\")",
                value: value[0]
            }),
            true
        ].every(flag => flag)) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(\"Error\" | \"Ignore\" | \"Warn\" | \"off\" | \"on\" | [SeverityInput, unknown])",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo447 = (input, _path, _exceptionable = true) => ["null" === input.checkVersion || "prerelease" === input.checkVersion || "prepatch" === input.checkVersion || "patch" === input.checkVersion || "preminor" === input.checkVersion || "minor" === input.checkVersion || "premajor" === input.checkVersion || "major" === input.checkVersion || _report(_exceptionable, {
        path: _path + ".checkVersion",
        expected: "(\"major\" | \"minor\" | \"null\" | \"patch\" | \"premajor\" | \"preminor\" | \"prepatch\" | \"prerelease\")",
        value: input.checkVersion
    }), (Array.isArray(input.ignore) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    })) && input.ignore.map((elem, _index746) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index746 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["checkVersion", "ignore"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo448 = (input, _path, _exceptionable = true) => [(Array.isArray(input.ignore) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    })) && input.ignore.map((elem, _index747) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index747 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ignore"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo449 = (input, _path, _exceptionable = true) => [(Array.isArray(input.ignore) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string | RegExp>",
        value: input.ignore
    })) && input.ignore.map((elem, _index748) => (null !== elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index748 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index748 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".ignore[" + _index748 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string | RegExp>",
        value: input.ignore
    }), "number" === typeof input.threshold || _report(_exceptionable, {
        path: _path + ".threshold",
        expected: "number",
        value: input.threshold
    }), (Array.isArray(input.extensions) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "Array<string | RegExp>",
        value: input.extensions
    })) && input.extensions.map((elem, _index749) => (null !== elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index749 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && (undefined !== elem || _report(_exceptionable, {
        path: _path + ".extensions[" + _index749 + "]",
        expected: "(RegExp | string)",
        value: elem
    })) && ("string" === typeof elem || elem instanceof RegExp || _report(_exceptionable, {
        path: _path + ".extensions[" + _index749 + "]",
        expected: "(RegExp | string)",
        value: elem
    }))).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".extensions",
        expected: "Array<string | RegExp>",
        value: input.extensions
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["ignore", "threshold", "extensions"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo450 = (input, _path, _exceptionable = true) => ["ES5" === input.highestVersion || "ES6" === input.highestVersion || "ES7+" === input.highestVersion || _report(_exceptionable, {
        path: _path + ".highestVersion",
        expected: "(\"ES5\" | \"ES6\" | \"ES7+\")",
        value: input.highestVersion
    }), (Array.isArray(input.ignore) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    })) && input.ignore.map((elem, _index750) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".ignore[" + _index750 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".ignore",
        expected: "Array<string>",
        value: input.ignore
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["highestVersion", "ignore"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo451 = (input, _path, _exceptionable = true) => [undefined === input.loader || "boolean" === typeof input.loader || _report(_exceptionable, {
        path: _path + ".loader",
        expected: "(boolean | undefined)",
        value: input.loader
    }), undefined === input.plugins || "boolean" === typeof input.plugins || _report(_exceptionable, {
        path: _path + ".plugins",
        expected: "(boolean | undefined)",
        value: input.plugins
    }), undefined === input.resolver || "boolean" === typeof input.resolver || _report(_exceptionable, {
        path: _path + ".resolver",
        expected: "(boolean | undefined)",
        value: input.resolver
    }), undefined === input.bundle || "boolean" === typeof input.bundle || _report(_exceptionable, {
        path: _path + ".bundle",
        expected: "(boolean | undefined)",
        value: input.bundle
    }), undefined === input.treeShaking || "boolean" === typeof input.treeShaking || _report(_exceptionable, {
        path: _path + ".treeShaking",
        expected: "(boolean | undefined)",
        value: input.treeShaking
    }), undefined === input.lite || "boolean" === typeof input.lite || _report(_exceptionable, {
        path: _path + ".lite",
        expected: "(boolean | undefined)",
        value: input.lite
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["loader", "plugins", "resolver", "bundle", "treeShaking", "lite"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo452 = (input, _path, _exceptionable = true) => [undefined === input.skipLoaders || (Array.isArray(input.skipLoaders) || _report(_exceptionable, {
        path: _path + ".skipLoaders",
        expected: "(Array<string> | undefined)",
        value: input.skipLoaders
    })) && input.skipLoaders.map((elem, _index751) => "string" === typeof elem || _report(_exceptionable, {
        path: _path + ".skipLoaders[" + _index751 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".skipLoaders",
        expected: "(Array<string> | undefined)",
        value: input.skipLoaders
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["skipLoaders"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo453 = (input, _path, _exceptionable = true) => [("object" === typeof input.server && null !== input.server || _report(_exceptionable, {
        path: _path + ".server",
        expected: "RsdoctorServer",
        value: input.server
    })) && _vo454(input.server, _path + ".server", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".server",
        expected: "RsdoctorServer",
        value: input.server
    }), undefined === input.extraConfig || ("object" === typeof input.extraConfig && null !== input.extraConfig || _report(_exceptionable, {
        path: _path + ".extraConfig",
        expected: "(SDKOptionsType | undefined)",
        value: input.extraConfig
    })) && _vo455(input.extraConfig, _path + ".extraConfig", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".extraConfig",
        expected: "(SDKOptionsType | undefined)",
        value: input.extraConfig
    }), 0 === input.type || 1 === input.type || 2 === input.type || 3 === input.type || 4 === input.type || _report(_exceptionable, {
        path: _path + ".type",
        expected: "(0 | 1 | 2 | 3 | 4)",
        value: input.type
    }), true, true, true, true, true, true, true, true, true, true, true, true, true, "string" === typeof input._name || _report(_exceptionable, {
        path: _path + "._name",
        expected: "string",
        value: input._name
    }), "string" === typeof input.hash || _report(_exceptionable, {
        path: _path + ".hash",
        expected: "string",
        value: input.hash
    }), "string" === typeof input.root || _report(_exceptionable, {
        path: _path + ".root",
        expected: "string",
        value: input.root
    }), "number" === typeof input.pid || _report(_exceptionable, {
        path: _path + ".pid",
        expected: "number",
        value: input.pid
    }), ("object" === typeof input.hooks && null !== input.hooks || _report(_exceptionable, {
        path: _path + ".hooks",
        expected: "Hooks",
        value: input.hooks
    })) && _vo458(input.hooks, _path + ".hooks", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".hooks",
        expected: "Hooks",
        value: input.hooks
    }), ("object" === typeof input._envinfo && null !== input._envinfo || _report(_exceptionable, {
        path: _path + "._envinfo",
        expected: "EnvInfo",
        value: input._envinfo
    })) && _vo460(input._envinfo, _path + "._envinfo", true && _exceptionable) || _report(_exceptionable, {
        path: _path + "._envinfo",
        expected: "EnvInfo",
        value: input._envinfo
    }), true, true, "string" === typeof input.diskManifestPath || _report(_exceptionable, {
        path: _path + ".diskManifestPath",
        expected: "string",
        value: input.diskManifestPath
    }), undefined === input.cloudData || ("object" === typeof input.cloudData && null !== input.cloudData || _report(_exceptionable, {
        path: _path + ".cloudData",
        expected: "(RsdoctorManifestWithShardingFiles | undefined)",
        value: input.cloudData
    })) && _vo461(input.cloudData, _path + ".cloudData", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cloudData",
        expected: "(RsdoctorManifestWithShardingFiles | undefined)",
        value: input.cloudData
    }), 24 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["server", "extraConfig", "type", "_summary", "_configs", "_errors", "_loader", "_loaderStart", "_resolver", "_plugin", "_moduleGraph", "_chunkGraph", "_rawSourceMapCache", "_sourceMap", "_packageGraph", "_tileReportHtml", "_name", "hash", "root", "pid", "hooks", "_envinfo", "_clientRoutes", "_outputDir", "diskManifestPath", "cloudData"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo454 = (input, _path, _exceptionable = true) => ["number" === typeof input.port || _report(_exceptionable, {
        path: _path + ".port",
        expected: "number",
        value: input.port
    }), true || _report(_exceptionable, {
        path: _path + ".get",
        expected: "unknown",
        value: input.get
    }), true || _report(_exceptionable, {
        path: _path + ".post",
        expected: "unknown",
        value: input.post
    }), true || _report(_exceptionable, {
        path: _path + ".dispose",
        expected: "unknown",
        value: input.dispose
    }), 4 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["port", "get", "post", "dispose"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo455 = (input, _path, _exceptionable = true) => ["boolean" === typeof input.disableTOSUpload || _report(_exceptionable, {
        path: _path + ".disableTOSUpload",
        expected: "boolean",
        value: input.disableTOSUpload
    }), undefined === input.innerClientPath || "string" === typeof input.innerClientPath || _report(_exceptionable, {
        path: _path + ".innerClientPath",
        expected: "(string | undefined)",
        value: input.innerClientPath
    }), undefined === input.disableClientServer || "boolean" === typeof input.disableClientServer || _report(_exceptionable, {
        path: _path + ".disableClientServer",
        expected: "(boolean | undefined)",
        value: input.disableClientServer
    }), undefined === input.noServer || "boolean" === typeof input.noServer || _report(_exceptionable, {
        path: _path + ".noServer",
        expected: "(boolean | undefined)",
        value: input.noServer
    }), undefined === input.printLog || ("object" === typeof input.printLog && null !== input.printLog || _report(_exceptionable, {
        path: _path + ".printLog",
        expected: "(IPrintLog | undefined)",
        value: input.printLog
    })) && _vo456(input.printLog, _path + ".printLog", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".printLog",
        expected: "(IPrintLog | undefined)",
        value: input.printLog
    }), undefined === input.mode || "normal" === input.mode || "lite" === input.mode || "brief" === input.mode || _report(_exceptionable, {
        path: _path + ".mode",
        expected: "(\"brief\" | \"lite\" | \"normal\" | undefined)",
        value: input.mode
    }), undefined === input.brief || ("object" === typeof input.brief && null !== input.brief || _report(_exceptionable, {
        path: _path + ".brief",
        expected: "(BriefConfig | undefined)",
        value: input.brief
    })) && _vo457(input.brief, _path + ".brief", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".brief",
        expected: "(BriefConfig | undefined)",
        value: input.brief
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["disableTOSUpload", "innerClientPath", "disableClientServer", "noServer", "printLog", "mode", "brief"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo456 = (input, _path, _exceptionable = true) => ["boolean" === typeof input.serverUrls || _report(_exceptionable, {
        path: _path + ".serverUrls",
        expected: "boolean",
        value: input.serverUrls
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["serverUrls"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo457 = (input, _path, _exceptionable = true) => [undefined === input.reportHtmlName || "string" === typeof input.reportHtmlName || _report(_exceptionable, {
        path: _path + ".reportHtmlName",
        expected: "(string | undefined)",
        value: input.reportHtmlName
    }), "boolean" === typeof input.writeDataJson || _report(_exceptionable, {
        path: _path + ".writeDataJson",
        expected: "boolean",
        value: input.writeDataJson
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["reportHtmlName", "writeDataJson"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo458 = (input, _path, _exceptionable = true) => [("object" === typeof input.afterSaveManifest && null !== input.afterSaveManifest || _report(_exceptionable, {
        path: _path + ".afterSaveManifest",
        expected: "AsyncSeriesHook<[{ manifestWithShardingFiles: RsdoctorManifestWithShardingFiles; manifestDiskPath: string; manifestCloudPath?: string; }], UnsetAdditionalOptions>",
        value: input.afterSaveManifest
    })) && _vo459(input.afterSaveManifest, _path + ".afterSaveManifest", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".afterSaveManifest",
        expected: "AsyncSeriesHook<[{ manifestWithShardingFiles: RsdoctorManifestWithShardingFiles; manifestDiskPath: string; manifestCloudPath?: string; }], UnsetAdditionalOptions>",
        value: input.afterSaveManifest
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["afterSaveManifest"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo459 = (input, _path, _exceptionable = true) => [undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), (Array.isArray(input.taps) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    })) && input.taps.map((elem, _index752) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".taps[" + _index752 + "]",
        expected: "FullTap",
        value: elem
    })) && _vo292(elem, _path + ".taps[" + _index752 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".taps[" + _index752 + "]",
        expected: "FullTap",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".taps",
        expected: "Array<FullTap>",
        value: input.taps
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "taps"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo460 = (input, _path, _exceptionable = true) => ["string" === typeof input.os || _report(_exceptionable, {
        path: _path + ".os",
        expected: "string",
        value: input.os
    }), "string" === typeof input.cpu || _report(_exceptionable, {
        path: _path + ".cpu",
        expected: "string",
        value: input.cpu
    }), "string" === typeof input.memory || _report(_exceptionable, {
        path: _path + ".memory",
        expected: "string",
        value: input.memory
    }), "string" === typeof input.nodeVersion || _report(_exceptionable, {
        path: _path + ".nodeVersion",
        expected: "string",
        value: input.nodeVersion
    }), "string" === typeof input.yarnVersion || _report(_exceptionable, {
        path: _path + ".yarnVersion",
        expected: "string",
        value: input.yarnVersion
    }), "string" === typeof input.npmVersion || _report(_exceptionable, {
        path: _path + ".npmVersion",
        expected: "string",
        value: input.npmVersion
    }), "string" === typeof input.pnpmVersion || _report(_exceptionable, {
        path: _path + ".pnpmVersion",
        expected: "string",
        value: input.pnpmVersion
    }), false === _exceptionable || Object.keys(input).map(key => {
        if (["os", "cpu", "memory", "nodeVersion", "yarnVersion", "npmVersion", "pnpmVersion"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const _vo461 = (input, _path, _exceptionable = true) => [("object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) || _report(_exceptionable, {
        path: _path + ".data",
        expected: "Record<keyof RsdoctorManifestData, string | string[]>",
        value: input.data
    })) && _vo462(input.data, _path + ".data", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".data",
        expected: "Record<keyof RsdoctorManifestData, string | string[]>",
        value: input.data
    }), undefined === input.cloudData || ("object" === typeof input.cloudData && null !== input.cloudData && false === Array.isArray(input.cloudData) || _report(_exceptionable, {
        path: _path + ".cloudData",
        expected: "(Record<keyof RsdoctorManifestData, string | string[]> | undefined)",
        value: input.cloudData
    })) && _vo462(input.cloudData, _path + ".cloudData", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".cloudData",
        expected: "(Record<keyof RsdoctorManifestData, string | string[]> | undefined)",
        value: input.cloudData
    }), undefined === input.__LOCAL__SERVER__ || "boolean" === typeof input.__LOCAL__SERVER__ || _report(_exceptionable, {
        path: _path + ".__LOCAL__SERVER__",
        expected: "(boolean | undefined)",
        value: input.__LOCAL__SERVER__
    }), undefined === input.__SOCKET__PORT__ || "string" === typeof input.__SOCKET__PORT__ || _report(_exceptionable, {
        path: _path + ".__SOCKET__PORT__",
        expected: "(string | undefined)",
        value: input.__SOCKET__PORT__
    }), undefined === input.__SOCKET__URL__ || "string" === typeof input.__SOCKET__URL__ || _report(_exceptionable, {
        path: _path + ".__SOCKET__URL__",
        expected: "(string | undefined)",
        value: input.__SOCKET__URL__
    }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "(string | undefined)",
        value: input.name
    }), ("object" === typeof input.client && null !== input.client || _report(_exceptionable, {
        path: _path + ".client",
        expected: "RsdoctorManifestClient",
        value: input.client
    })) && _vo463(input.client, _path + ".client", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".client",
        expected: "RsdoctorManifestClient",
        value: input.client
    }), undefined === input.cloudManifestUrl || "string" === typeof input.cloudManifestUrl || _report(_exceptionable, {
        path: _path + ".cloudManifestUrl",
        expected: "(string | undefined)",
        value: input.cloudManifestUrl
    }), undefined === input.series || (Array.isArray(input.series) || _report(_exceptionable, {
        path: _path + ".series",
        expected: "(Array<RsdoctorManifestSeriesData> | undefined)",
        value: input.series
    })) && input.series.map((elem, _index753) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
        path: _path + ".series[" + _index753 + "]",
        expected: "RsdoctorManifestSeriesData",
        value: elem
    })) && _vo464(elem, _path + ".series[" + _index753 + "]", true && _exceptionable) || _report(_exceptionable, {
        path: _path + ".series[" + _index753 + "]",
        expected: "RsdoctorManifestSeriesData",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".series",
        expected: "(Array<RsdoctorManifestSeriesData> | undefined)",
        value: input.series
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["data", "cloudData", "__LOCAL__SERVER__", "__SOCKET__PORT__", "__SOCKET__URL__", "name", "client", "cloudManifestUrl", "series"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo462 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && (undefined !== value || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && ("string" === typeof value || (Array.isArray(value) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        })) && value.map((elem, _index754) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index754 + "]",
            expected: "string",
            value: elem
        })).every(flag => flag) || _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "(Array<string> | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const _vo463 = (input, _path, _exceptionable = true) => [(Array.isArray(input.enableRoutes) || _report(_exceptionable, {
        path: _path + ".enableRoutes",
        expected: "Array<RsdoctorManifestClientRoutes>",
        value: input.enableRoutes
    })) && input.enableRoutes.map((elem, _index756) => "Overall" === elem || "Compile.WebpackLoaders" === elem || "Compile.ModuleResolve" === elem || "Compile.WebpackPlugins" === elem || "Bundle.BundleSize" === elem || "Bundle.ModuleGraph" === elem || "Bundle.TreeShaking" === elem || _report(_exceptionable, {
        path: _path + ".enableRoutes[" + _index756 + "]",
        expected: "(\"Bundle.BundleSize\" | \"Bundle.ModuleGraph\" | \"Bundle.TreeShaking\" | \"Compile.ModuleResolve\" | \"Compile.WebpackLoaders\" | \"Compile.WebpackPlugins\" | \"Overall\")",
        value: elem
    })).every(flag => flag) || _report(_exceptionable, {
        path: _path + ".enableRoutes",
        expected: "Array<RsdoctorManifestClientRoutes>",
        value: input.enableRoutes
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["enableRoutes"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo464 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || _report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), "string" === typeof input.path || _report(_exceptionable, {
        path: _path + ".path",
        expected: "string",
        value: input.path
    }), "number" === typeof input.stage || _report(_exceptionable, {
        path: _path + ".stage",
        expected: "number",
        value: input.stage
    }), undefined === input.origin || "string" === typeof input.origin || _report(_exceptionable, {
        path: _path + ".origin",
        expected: "(string | undefined)",
        value: input.origin
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "path", "stage", "origin"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo465 = (input, _path, _exceptionable = true) => [undefined === input.banner || "boolean" === typeof input.banner || _report(_exceptionable, {
        path: _path + ".banner",
        expected: "(boolean | undefined)",
        value: input.banner
    }), undefined === input.parseBundle || "boolean" === typeof input.parseBundle || _report(_exceptionable, {
        path: _path + ".parseBundle",
        expected: "(boolean | undefined)",
        value: input.parseBundle
    }), undefined === input.generateTileGraph || "boolean" === typeof input.generateTileGraph || _report(_exceptionable, {
        path: _path + ".generateTileGraph",
        expected: "(boolean | undefined)",
        value: input.generateTileGraph
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["banner", "parseBundle", "generateTileGraph"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vo466 = (input, _path, _exceptionable = true) => [undefined === input.noModuleSource || "boolean" === typeof input.noModuleSource || _report(_exceptionable, {
        path: _path + ".noModuleSource",
        expected: "(boolean | undefined)",
        value: input.noModuleSource
    }), undefined === input.noAssetsAndModuleSource || "boolean" === typeof input.noAssetsAndModuleSource || _report(_exceptionable, {
        path: _path + ".noAssetsAndModuleSource",
        expected: "(boolean | undefined)",
        value: input.noAssetsAndModuleSource
    }), undefined === input.noCode || "boolean" === typeof input.noCode || _report(_exceptionable, {
        path: _path + ".noCode",
        expected: "(boolean | undefined)",
        value: input.noCode
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["noModuleSource", "noAssetsAndModuleSource", "noCode"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return _report(_exceptionable, {
            path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const _vu0 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input["__@toStringTag@729"])
        return _vo27(input, _path, true && _exceptionable);
    else if (undefined !== input.pem)
        return _vo28(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".KeyObject)",
            value: input
        });
})(); const _vu1 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input["__@toStringTag@729"])
        return _vo27(input, _path, true && _exceptionable);
    else if (undefined !== input.buf)
        return _vo29(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(\"buffer\".global.Buffer<ArrayBufferLike> | \"tls\".PxfObject)",
            value: input
        });
})(); const _vu2 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.plugins)
        return _vo52(input, _path, true && _exceptionable);
    else if (undefined !== input.postcssVersion)
        return _vo61(input, _path, true && _exceptionable);
    else if (true === input.postcss)
        return _vo62(input, _path, true && _exceptionable);
    else
        return (() => {
            if (undefined !== input.postcss)
                return _vo60(input, _path, true && _exceptionable);
            else if (undefined !== input.postcssPlugin)
                return _vo53(input, _path, true && _exceptionable);
            else if (undefined !== input.prototype)
                return _vo58(input, _path, true && _exceptionable);
            else
                return _report(_exceptionable, {
                    path: _path,
                    expected: "(__type.o9 | postcss.Plugin | postcss.TransformCallback)",
                    value: input
                });
        })();
})(); const _vu3 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.postcssVersion)
        return _vo59(input, _path, true && _exceptionable);
    else
        return (() => {
            if (undefined !== input.postcssPlugin)
                return _vo53(input, _path, true && _exceptionable);
            else if (undefined !== input.prototype)
                return _vo58(input, _path, true && _exceptionable);
            else
                return _report(_exceptionable, {
                    path: _path,
                    expected: "(postcss.Plugin | postcss.TransformCallback)",
                    value: input
                });
        })();
})(); const _vu4 = (input, _path, _exceptionable = true) => (() => {
    if (_vo143(input, _path, false && _exceptionable))
        return _vo143(input, _path, true && _exceptionable);
    if (_vo142(input, _path, false && _exceptionable))
        return _vo142(input, _path, true && _exceptionable);
    return _report(_exceptionable, {
        path: _path,
        expected: "(WebpackPluginInstance | RspackPluginInstance)",
        value: input
    });
})(); const _vu5 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.name)
        return _vo418(input, _path, true && _exceptionable);
    else if (undefined !== input["__@toStringTag@729"])
        return _vo419(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(LooseRsbuildPlugin | RsbuildPlugins | LooseRsbuildPlugin | Falsy)",
            value: input
        });
})(); const _vu6 = (input, _path, _exceptionable = true) => (() => {
    if (_vo15(input, _path, false && _exceptionable))
        return _vo15(input, _path, true && _exceptionable);
    if (_vo26(input, _path, false && _exceptionable))
        return _vo26(input, _path, true && _exceptionable);
    return _report(_exceptionable, {
        path: _path,
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse>)",
        value: input
    });
})(); const _vu7 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _vo49(input, _path, true && _exceptionable);
    else
        return _vo50(input, _path, true && _exceptionable);
})(); const _vu8 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _vo51(input, _path, true && _exceptionable);
    else
        return _vo50(input, _path, true && _exceptionable);
})(); const _vu9 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.plugins)
        return _vo52(input, _path, true && _exceptionable);
    else if (undefined !== input.prototype)
        return _vo58(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(Processor_ | postcss.TransformCallback)",
            value: input
        });
})(); const _vu10 = (input, _path, _exceptionable = true) => (() => {
    if ("commonjs" === input.type)
        return _vo93(input, _path, true && _exceptionable);
    else if ("es6" === input.type)
        return _vo92(input, _path, true && _exceptionable);
    else if ("umd" === input.type)
        return _vo94(input, _path, true && _exceptionable);
    else if ("amd" === input.type)
        return _vo96(input, _path, true && _exceptionable);
    else if ("nodenext" === input.type)
        return _vo97(input, _path, true && _exceptionable);
    else if ("systemjs" === input.type)
        return _vo98(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(CommonJsConfig | Es6Config | UmdConfig | AmdConfig | NodeNextConfig | SystemjsConfig)",
            value: input
        });
})(); const _vu11 = (input, _path, _exceptionable = true) => (() => {
    if ("typescript" === input.syntax)
        return _vo74(input, _path, true && _exceptionable);
    else if ("ecmascript" === input.syntax)
        return _vo75(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(TsParserConfig | EsParserConfig)",
            value: input
        });
})(); const _vu12 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.type)
        return _vo113(input, _path, true && _exceptionable);
    else
        return _vo115(input, _path, true && _exceptionable);
})(); const _vu13 = (input, _path, _exceptionable = true) => (() => {
    if ("memory" === input.type)
        return _vo121(input, _path, true && _exceptionable);
    else if ("persistent" === input.type)
        return _vo122(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(__type.o22 | __type.o23)",
            value: input
        });
})(); const _vu14 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.root)
        return _vo129(input, _path, true && _exceptionable);
    else
        return _vo130(input, _path, true && _exceptionable);
})(); const _vu15 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.protocol)
        return _vo175(input, _path, true && _exceptionable);
    else
        return _vo174(input, _path, true && _exceptionable);
})(); const _vu16 = (input, _path, _exceptionable = true) => (() => {
    if ("number" === typeof input.port)
        return _vo194(input, _path, true && _exceptionable);
    else
        return _vo192(input, _path, true && _exceptionable);
})(); const _vu17 = (input, _path, _exceptionable = true) => (() => {
    if (_vo210(input, _path, false && _exceptionable))
        return _vo210(input, _path, true && _exceptionable);
    if (_vo218(input, _path, false && _exceptionable))
        return _vo218(input, _path, true && _exceptionable);
    return _report(_exceptionable, {
        path: _path,
        expected: "(ParserOptionsByModuleTypeKnown | ParserOptionsByModuleTypeUnknown)",
        value: input
    });
})(); const _vu18 = (input, _path, _exceptionable = true) => (() => {
    if (_vo219(input, _path, false && _exceptionable))
        return _vo219(input, _path, true && _exceptionable);
    if (_vo226(input, _path, false && _exceptionable))
        return _vo226(input, _path, true && _exceptionable);
    return _report(_exceptionable, {
        path: _path,
        expected: "(GeneratorOptionsByModuleTypeKnown | GeneratorOptionsByModuleTypeUnknown)",
        value: input
    });
})(); const _vu19 = (input, _path, _exceptionable = true) => (() => {
    if ("filesystem" === input.type)
        return _vo230(input, _path, true && _exceptionable);
    else if ("memory" === input.type)
        return _vo232(input, _path, true && _exceptionable);
    else
        return _report(_exceptionable, {
            path: _path,
            expected: "(FileCacheOptions | MemoryCacheOptions)",
            value: input
        });
})(); const _vu20 = (input, _path, _exceptionable = true) => (() => {
    if (_vo15(input, _path, false && _exceptionable))
        return _vo15(input, _path, true && _exceptionable);
    if (_vo242(input, _path, false && _exceptionable))
        return _vo242(input, _path, true && _exceptionable);
    return _report(_exceptionable, {
        path: _path,
        expected: "(\"http\".ServerOptions<\"http\".IncomingMessage, \"http\".ServerResponse> | ServerOptionsHttps<\"http\".IncomingMessage, \"http\".ServerResponse>.o1)",
        value: input
    });
})(); const _vu21 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.prototype)
        return _vo23(input, _path, true && _exceptionable);
    else
        return _vo330(input, _path, true && _exceptionable);
})(); const _vu22 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.type)
        return _vo235(input, _path, true && _exceptionable);
    else
        return _vo237(input, _path, true && _exceptionable);
})(); const _vu23 = (input, _path, _exceptionable = true) => (() => {
    if ("split-by-size" === input.strategy)
        return _vo404(input, _path, true && _exceptionable);
    else if ("custom" === input.strategy)
        return _vo405(input, _path, true && _exceptionable);
    else
        return _vo402(input, _path, true && _exceptionable);
})(); const _vu24 = (input, _path, _exceptionable = true) => (() => {
    if ("split-by-size" === input.strategy)
        return _vo428(input, _path, true && _exceptionable);
    else if ("custom" === input.strategy)
        return _vo429(input, _path, true && _exceptionable);
    else
        return _vo427(input, _path, true && _exceptionable);
})(); const _va0 = (input, _path, _exceptionable = true) => input.map((elem, _index757) => (null !== elem || _report(_exceptionable, {
    path: _path + "[" + _index757 + "]",
    expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
    value: elem
})) && (undefined !== elem || _report(_exceptionable, {
    path: _path + "[" + _index757 + "]",
    expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
    value: elem
})) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va0(elem, _path + "[" + _index757 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index757 + "]",
    expected: "RuleSetConditions",
    value: elem
})) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo207(elem, _path + "[" + _index757 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index757 + "]",
    expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
    value: elem
})) || _report(_exceptionable, {
    path: _path + "[" + _index757 + "]",
    expected: "(RegExp | RuleSetConditions | RuleSetLogicalConditions | string)",
    value: elem
}))).every(flag => flag); const _va1 = (input, _path, _exceptionable = true) => input.map((elem, _index758) => (null !== elem || _report(_exceptionable, {
    path: _path + "[" + _index758 + "]",
    expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
    value: elem
})) && (undefined !== elem || _report(_exceptionable, {
    path: _path + "[" + _index758 + "]",
    expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
    value: elem
})) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va1(elem, _path + "[" + _index758 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index758 + "]",
    expected: "Array<RuleSetCondition>.o1",
    value: elem
})) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo253(elem, _path + "[" + _index758 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index758 + "]",
    expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
    value: elem
})) || _report(_exceptionable, {
    path: _path + "[" + _index758 + "]",
    expected: "(Array<RuleSetCondition>.o1 | RegExp | RuleSetLogicalConditions.o1 | string)",
    value: elem
}))).every(flag => flag); const _va2 = (input, _path, _exceptionable = true) => input.map((elem, _index759) => (null !== elem || _report(_exceptionable, {
    path: _path + "[" + _index759 + "]",
    expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
    value: elem
})) && (undefined !== elem || _report(_exceptionable, {
    path: _path + "[" + _index759 + "]",
    expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
    value: elem
})) && ("function" === typeof elem || "string" === typeof elem || elem instanceof RegExp || (Array.isArray(elem) && (_va2(elem, _path + "[" + _index759 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index759 + "]",
    expected: "Array<RuleSetConditionAbsolute>.o1",
    value: elem
})) || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _vo255(elem, _path + "[" + _index759 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index759 + "]",
    expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
    value: elem
})) || _report(_exceptionable, {
    path: _path + "[" + _index759 + "]",
    expected: "(Array<RuleSetConditionAbsolute>.o1 | RegExp | RuleSetLogicalConditionsAbsolute | string)",
    value: elem
}))).every(flag => flag); const _va3 = (input, _path, _exceptionable = true) => input.map((elem, _index760) => null === elem || undefined === elem || false === elem || (Array.isArray(elem) && (_va3(elem, _path + "[" + _index760 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index760 + "]",
    expected: "RsbuildPlugins",
    value: elem
})) || "object" === typeof elem && null !== elem && _vu5(elem, _path + "[" + _index760 + "]", true && _exceptionable) || _report(_exceptionable, {
    path: _path + "[" + _index760 + "]",
    expected: "(LooseRsbuildPlugin | RsbuildPlugins | RsbuildPlugins | LooseRsbuildPlugin | Falsy | false | null | undefined)",
    value: elem
})) || _report(_exceptionable, {
    path: _path + "[" + _index760 + "]",
    expected: "(LooseRsbuildPlugin | RsbuildPlugins | RsbuildPlugins | LooseRsbuildPlugin | Falsy | false | null | undefined)",
    value: elem
})).every(flag => flag); const __is = (input, _exceptionable = true) => "object" === typeof input && null !== input && false === Array.isArray(input) && _io0(input, true); let errors; let _report; return input => {
    if (false === __is(input)) {
        errors = [];
        _report = __typia_transform__validateReport._validateReport(errors);
        ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input && false === Array.isArray(input) || _report(true, {
            path: _path + "",
            expected: "Config",
            value: input
        })) && _vo0(input, _path + "", true) || _report(true, {
            path: _path + "",
            expected: "Config",
            value: input
        }))(input, "$input", true);
        const success = 0 === errors.length;
        return success ? {
            success,
            data: input
        } : {
            success,
            errors,
            data: input
        };
    }
    return {
        success: true,
        data: input
    };
}; })();
export function validate(input, configPath) {
    const result = validateConfig(input);
    if (result.success) {
        return result.data;
    }
    const messages = result.errors.flatMap(({ expected, path, value }) => {
        if (expected === 'undefined') {
            // Unknown properties
            return [`Unknown property: \`${color.red(path)}\` in configuration`, ''];
        }
        return [
            `Invalid config on \`${color.red(path)}\`.`,
            `  - Expect to be ${color.green(expected)}`,
            `  - Got: ${color.red(whatIs(value))}`,
            '',
        ];
    });
    // We use `Array.isArray` outside to deal with error messages
    throw new Error([
        `Invalid configuration${configPath ? ` loaded from ${color.dim(configPath)}` : '.'}`,
        '',
    ]
        .concat(messages)
        .join('\n'));
}
function whatIs(value) {
    return Object.prototype.toString.call(value)
        .replace(/^\[object\s+([a-z]+)\]$/i, '$1')
        .toLowerCase();
}
//# sourceMappingURL=validate.js.map