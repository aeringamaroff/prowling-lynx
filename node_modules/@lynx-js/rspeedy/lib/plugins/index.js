import { debug, isDebug } from '../debug.js';
async function applyDebugPlugins(rsbuildInstance, config) {
    const debugPlugins = Object.freeze([
        import('./inspect.plugin.js').then(({ pluginInspect }) => pluginInspect(config)),
        import('./stats.plugin.js').then(({ pluginStats }) => pluginStats()),
    ]);
    rsbuildInstance.addPlugins(await Promise.all(debugPlugins));
}
async function applyDefaultDevPlugins(rsbuildInstance, config) {
    const devPlugins = Object.freeze([
        import('./dev.plugin.js').then(({ pluginDev }) => pluginDev(config.dev, config.server)),
    ]);
    rsbuildInstance.addPlugins(await Promise.all(devPlugins));
}
export async function applyDefaultPlugins(rsbuildInstance, config) {
    const defaultPlugins = Object.freeze([
        import('./api.plugin.js').then(({ pluginAPI }) => pluginAPI(config)),
        import('./chunkLoading.plugin.js').then(({ pluginChunkLoading }) => pluginChunkLoading()),
        import('./minify.plugin.js').then(({ pluginMinify }) => pluginMinify(config.output?.minify)),
        import('./optimization.plugin.js').then(({ pluginOptimization }) => pluginOptimization()),
        import('./output.plugin.js').then(({ pluginOutput }) => pluginOutput(config.output)),
        import('./resolve.plugin.js').then(({ pluginResolve }) => pluginResolve()),
        import('./rsdoctor.plugin.js').then(({ pluginRsdoctor }) => pluginRsdoctor(config.tools?.rsdoctor)),
        import('./sourcemap.plugin.js').then(({ pluginSourcemap }) => pluginSourcemap()),
        import('./swc.plugin.js').then(({ pluginSwc }) => pluginSwc()),
        import('./target.plugin.js').then(({ pluginTarget }) => pluginTarget()),
    ]);
    const promises = [
        Promise.all(defaultPlugins).then(plugins => {
            rsbuildInstance.addPlugins(plugins);
        }),
    ];
    // TODO: replace with `isDev()` helper
    if (process.env['NODE_ENV'] === 'development') {
        debug('apply Rspeedy default development plugins');
        promises.push(applyDefaultDevPlugins(rsbuildInstance, config));
    }
    if (isDebug()) {
        debug('apply Rspeedy default debug plugins');
        promises.push(applyDebugPlugins(rsbuildInstance, config));
    }
    await Promise.all(promises);
    // If no `@rsbuild/plugin-css-minimizer` is applied, apply it
    const { pluginCssMinimizer, PLUGIN_CSS_MINIMIZER_NAME } = await import('@rsbuild/plugin-css-minimizer');
    if (!rsbuildInstance.isPluginExists(PLUGIN_CSS_MINIMIZER_NAME)) {
        rsbuildInstance.addPlugins([pluginCssMinimizer()]);
    }
}
//# sourceMappingURL=index.js.map