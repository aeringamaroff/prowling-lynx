import type { Compilation, Compiler } from 'webpack';
import type { CSS } from './index.js';
/**
 * The options for LynxEncodePluginOptions
 *
 * @public
 */
export interface LynxEncodePluginOptions {
}
/**
 * LynxEncodePlugin
 *
 * @public
 */
export declare class LynxEncodePlugin {
    protected options?: LynxEncodePluginOptions | undefined;
    /**
     * The stage of the beforeEncode hook.
     */
    static BEFORE_ENCODE_STAGE: number;
    /**
     * The stage of the encode hook.
     */
    static ENCODE_STAGE: number;
    /**
     * The stage of the beforeEmit hook.
     */
    static BEFORE_EMIT_STAGE: number;
    constructor(options?: LynxEncodePluginOptions | undefined);
    /**
     * Encode CSS chunks into a template.
     *
     * @param cssChunks - The CSS chunks' content.
     * @param options - The encode options.
     * @returns The buffer of the template.
     *
     * @example
     * ```
     * (await encodeCSS(
     *   '.red { color: red; }',
     *   {
     *     targetSdkVersion: '3.2',
     *     enableCSSSelector: true,
     *   },
     * )).toString('base64'),
     * ```
     */
    static encodeCSS(cssChunks: string[], options: {
        /**
         * {@inheritdoc @lynx-js/react-rsbuild-plugin#PluginReactLynxOptions.enableCSSSelector}
         */
        enableCSSSelector: boolean;
        /**
         * {@inheritdoc @lynx-js/react-rsbuild-plugin#PluginReactLynxOptions.enableRemoveCSSScope}
         */
        enableRemoveCSSScope: boolean;
        /**
         * {@inheritdoc @lynx-js/react-rsbuild-plugin#PluginReactLynxOptions.enableRemoveCSSScope}
         */
        targetSdkVersion: string;
    }, plugins?: CSS.Plugin[], encode?: (options: any) => Promise<{
        buffer: Buffer;
    }>): Promise<Buffer>;
    /**
     * `defaultOptions` is the default options that the {@link LynxEncodePlugin} uses.
     *
     * @example
     * `defaultOptions` can be used to change part of the option and keep others as the default value.
     *
     * ```js
     * // webpack.config.js
     * import { LynxEncodePlugin } from '@lynx-js/template-webpack-plugin'
     * export default {
     *   plugins: [
     *     new LynxEncodePlugin({
     *       ...LynxEncodePlugin.defaultOptions,
     *       enableRemoveCSSScope: true,
     *     }),
     *   ],
     * }
     * ```
     *
     * @public
     */
    static defaultOptions: Readonly<Required<LynxEncodePluginOptions>>;
    /**
     * The entry point of a webpack plugin.
     * @param compiler - the webpack compiler
     */
    apply(compiler: Compiler): void;
}
export declare class LynxEncodePluginImpl {
    #private;
    name: string;
    constructor(compiler: Compiler, options: Required<LynxEncodePluginOptions>);
    /**
     * The deleteDebuggingAssets delete all the assets that are inlined into the template.
     */
    deleteDebuggingAssets(compilation: Compilation, assets: ({
        name: string;
    } | undefined)[]): void;
    protected options: Required<LynxEncodePluginOptions>;
}
export declare function isDebug(): boolean;
export declare function isRsdoctor(): boolean;
