"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var probeLoaderPlugin_exports = {};
__export(probeLoaderPlugin_exports, {
  ProbeLoaderPlugin: () => ProbeLoaderPlugin
});
module.exports = __toCommonJS(probeLoaderPlugin_exports);
var import_common = require("@rsdoctor/utils/common");
var import__ = require("../..");
var import__2 = require("..");
const BuiltinLoaderName = "builtin:swc-loader";
const BuiltinLightingCssName = "builtin:lightningcss-loader";
const ESMLoaderFile = ".mjs";
class ProbeLoaderPlugin {
  apply(compiler) {
    compiler.hooks.beforeRun.tap(
      {
        name: "ProbeLoaderPlugin"
      },
      () => {
        this.addProbeLoader(compiler);
      }
    );
    compiler.hooks.watchRun.tap(
      {
        name: "ProbeLoaderPlugin"
      },
      () => {
        this.addProbeLoader(compiler);
      }
    );
  }
  addProbeLoader(compiler) {
    let rules = compiler.options.module.rules;
    if (import_common.Loader.isVue(compiler)) {
      compiler.options.module.rules = import__2.Utils.addProbeLoader2Rules(
        rules,
        compiler,
        (r) => !!r.loader || typeof r === "string"
      );
      return;
    }
    rules = import__2.Utils.addProbeLoader2Rules(
      rules,
      compiler,
      (r) => import__.Build.Utils.getLoaderNameMatch(r, BuiltinLoaderName, true)
    );
    rules = import__2.Utils.addProbeLoader2Rules(
      rules,
      compiler,
      (r) => import__.Build.Utils.getLoaderNameMatch(r, BuiltinLightingCssName, true)
    );
    compiler.options.module.rules = import__2.Utils.addProbeLoader2Rules(
      rules,
      compiler,
      (r) => {
        return import__.Build.Utils.getLoaderNameMatch(r, ESMLoaderFile, false) || import__.Build.Utils.isESMLoader(r);
      }
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProbeLoaderPlugin
});
