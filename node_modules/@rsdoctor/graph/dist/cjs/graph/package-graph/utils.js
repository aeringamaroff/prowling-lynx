"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  isPackagePath: () => isPackagePath,
  readPackageJson: () => readPackageJson
});
module.exports = __toCommonJS(utils_exports);
var import_path = require("path");
var import_common = require("@rsdoctor/utils/common");
function isPackagePath(path) {
  return /(^|[/\\])node_modules[/\\]/.test(path);
}
const readPackageJson = (file, readFile) => {
  let result;
  let current = file;
  while (current !== "/" && !result) {
    if ((0, import_path.dirname)(current) === current) {
      break;
    }
    current = (0, import_path.dirname)(current);
    if (readFile) {
      result = readFile((0, import_path.join)(current, "package.json"));
    }
    if (!readFile) {
      result = import_common.Package.getPackageMetaFromModulePath(file);
    } else if (!result?.name) {
      result = void 0;
    }
  }
  if (!result) {
    return;
  }
  if (readFile && (!result.name || !result.version)) {
    return readPackageJson((0, import_path.dirname)(current), readFile);
  }
  return {
    ...result,
    root: current
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  isPackagePath,
  readPackageJson
});
