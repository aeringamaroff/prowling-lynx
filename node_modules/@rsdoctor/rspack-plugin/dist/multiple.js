"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var multiple_exports = {};
__export(multiple_exports, {
  RsdoctorRspackMultiplePlugin: () => RsdoctorRspackMultiplePlugin
});
module.exports = __toCommonJS(multiple_exports);
var import_sdk = require("@rsdoctor/sdk");
var import_plugin = require("./plugin");
var import_plugins = require("@rsdoctor/core/plugins");
let globalController;
class RsdoctorRspackMultiplePlugin extends import_plugin.RsdoctorRspackPlugin {
  constructor(options = {}) {
    const controller = (() => {
      if (globalController) {
        return globalController;
      }
      const controller2 = new import_sdk.RsdoctorSDKController();
      globalController = controller2;
      return controller2;
    })();
    const normallizedOptions = (0, import_plugins.normalizeUserConfig)(options);
    const instance = controller.createSlave({
      name: options.name || "Builder",
      stage: options.stage,
      extraConfig: {
        disableTOSUpload: normallizedOptions.disableTOSUpload || false,
        innerClientPath: normallizedOptions.innerClientPath,
        printLog: normallizedOptions.printLog,
        mode: normallizedOptions.mode ? normallizedOptions.mode : void 0,
        brief: normallizedOptions.brief
      },
      type: normallizedOptions.reportCodeType
    });
    super({
      ...options,
      sdkInstance: instance
    });
    this.controller = controller;
  }
  apply(compiler) {
    if ("dependencies" in compiler.options) {
      this.sdk.dependencies = compiler.options.dependencies;
    }
    super.apply(compiler);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RsdoctorRspackMultiplePlugin
});
