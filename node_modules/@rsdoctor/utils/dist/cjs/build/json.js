"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var json_exports = {};
__export(json_exports, {
  readPackageJson: () => readPackageJson,
  stringify: () => stringify
});
module.exports = __toCommonJS(json_exports);
var import_json_stream_stringify = require("json-stream-stringify");
var import_path = require("path");
var import_common = require("../common");
var import_stream = require("stream");
const maxFileSize = 1024 * 1024 * 400;
function stringify(json, replacer, space, cycle) {
  const jsonList = [];
  if (json && typeof json === "object") {
    return new Promise((resolve, reject) => {
      const stream = new import_json_stream_stringify.JsonStreamStringify(json, replacer, space, cycle);
      let currentLength = 0;
      let currentContent = "";
      const batchProcessor = new import_stream.Transform({
        readableObjectMode: true,
        transform(chunk, _encoding, callback) {
          const lines = chunk.toString().split("\\n");
          lines.forEach((line) => {
            if (currentLength + line.length > maxFileSize) {
              jsonList.push(currentContent);
              currentContent = "";
              currentLength = 0;
            }
            if (line.length) {
              currentContent += line;
              currentLength += line.length;
            }
          });
          callback();
        }
      });
      stream.pipe(batchProcessor).on("data", (line) => {
        if (currentLength + line.length > maxFileSize) {
          jsonList.push(currentContent);
          currentContent = "";
          currentLength = 0;
        }
        if (line.length) {
          currentContent += line;
          currentLength += line.length;
        }
      }).on("end", () => {
        if (jsonList.length < 1) {
          jsonList.push(currentContent);
        }
        resolve(jsonList);
      }).on("error", (err) => {
        return reject(err);
      });
    });
  }
  return Promise.resolve(JSON.stringify(json, replacer, space));
}
const readPackageJson = (file, readFile) => {
  let result;
  let current = file;
  while (current !== "/" && !result) {
    const parent = (0, import_path.dirname)(current);
    if (parent === current) {
      break;
    }
    current = parent;
    if (readFile) {
      result = readFile((0, import_path.join)(current, "package.json"));
    }
    if (!readFile) {
      result = import_common.Package.getPackageMetaFromModulePath(file);
    } else if (!result?.name) {
      result = void 0;
    }
  }
  if (!result) {
    return;
  }
  if (readFile && (!result.name || !result.version)) {
    return readPackageJson((0, import_path.dirname)(current), readFile);
  }
  return {
    ...result,
    root: current
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  readPackageJson,
  stringify
});
