import { JsonStreamStringify } from "json-stream-stringify";
import { dirname, join } from "path";
import { Package } from "../common";
import { Transform } from "stream";
const maxFileSize = 1024 * 1024 * 400;
function stringify(json, replacer, space, cycle) {
  const jsonList = [];
  if (json && typeof json === "object") {
    return new Promise((resolve, reject) => {
      const stream = new JsonStreamStringify(json, replacer, space, cycle);
      let currentLength = 0;
      let currentContent = "";
      const batchProcessor = new Transform({
        readableObjectMode: true,
        transform(chunk, _encoding, callback) {
          const lines = chunk.toString().split("\\n");
          lines.forEach((line) => {
            if (currentLength + line.length > maxFileSize) {
              jsonList.push(currentContent);
              currentContent = "";
              currentLength = 0;
            }
            if (line.length) {
              currentContent += line;
              currentLength += line.length;
            }
          });
          callback();
        }
      });
      stream.pipe(batchProcessor).on("data", (line) => {
        if (currentLength + line.length > maxFileSize) {
          jsonList.push(currentContent);
          currentContent = "";
          currentLength = 0;
        }
        if (line.length) {
          currentContent += line;
          currentLength += line.length;
        }
      }).on("end", () => {
        if (jsonList.length < 1) {
          jsonList.push(currentContent);
        }
        resolve(jsonList);
      }).on("error", (err) => {
        return reject(err);
      });
    });
  }
  return Promise.resolve(JSON.stringify(json, replacer, space));
}
const readPackageJson = (file, readFile) => {
  let result;
  let current = file;
  while (current !== "/" && !result) {
    const parent = dirname(current);
    if (parent === current) {
      break;
    }
    current = parent;
    if (readFile) {
      result = readFile(join(current, "package.json"));
    }
    if (!readFile) {
      result = Package.getPackageMetaFromModulePath(file);
    } else if (!result?.name) {
      result = void 0;
    }
  }
  if (!result) {
    return;
  }
  if (readFile && (!result.name || !result.version)) {
    return readPackageJson(dirname(current), readFile);
  }
  return {
    ...result,
    root: current
  };
};
export {
  readPackageJson,
  stringify
};
