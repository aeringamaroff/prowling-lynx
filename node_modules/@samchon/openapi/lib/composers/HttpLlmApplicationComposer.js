"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpLlmComposer = void 0;
var LlmSchemaComposer_1 = require("./LlmSchemaComposer");
var HttpLlmComposer;
(function (HttpLlmComposer) {
    HttpLlmComposer.application = function (props) {
        var _a, _b;
        // COMPOSE FUNCTIONS
        var errors = props.migrate.errors
            .filter(function (e) { return e.operation()["x-samchon-human"] !== true; })
            .map(function (e) { return ({
            method: e.method,
            path: e.path,
            messages: e.messages,
            operation: function () { return e.operation(); },
            route: function () { return undefined; },
        }); });
        var functions = props.migrate.routes
            .filter(function (e) { return e.operation()["x-samchon-human"] !== true; })
            .map(function (route, i) {
            var _a, _b;
            if (route.method === "head") {
                errors.push({
                    method: route.method,
                    path: route.path,
                    messages: ["HEAD method is not supported in the LLM application."],
                    operation: function () { return route.operation(); },
                    route: function () { return route; },
                });
                return null;
            }
            else if (((_a = route.body) === null || _a === void 0 ? void 0 : _a.type) === "multipart/form-data" ||
                ((_b = route.success) === null || _b === void 0 ? void 0 : _b.type) === "multipart/form-data") {
                errors.push({
                    method: route.method,
                    path: route.path,
                    messages: [
                        "The \"multipart/form-data\" content type is not supported in the LLM application.",
                    ],
                    operation: function () { return route.operation(); },
                    route: function () { return route; },
                });
                return null;
            }
            var localErrors = [];
            var func = composeFunction({
                model: props.model,
                options: props.options,
                components: props.migrate.document().components,
                route: route,
                errors: localErrors,
                index: i,
            });
            if (func === null)
                errors.push({
                    method: route.method,
                    path: route.path,
                    messages: localErrors,
                    operation: function () { return route.operation(); },
                    route: function () { return route; },
                });
            return func;
        })
            .filter(function (v) { return v !== null; });
        var app = {
            model: props.model,
            options: props.options,
            functions: functions,
            errors: errors,
        };
        HttpLlmComposer.shorten(app, (_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.maxLength) !== null && _b !== void 0 ? _b : 64);
        return app;
    };
    var composeFunction = function (props) {
        var _a, _b, _c, _d;
        var $defs = {};
        var cast = function (s, accessor) {
            var _a;
            var result = LlmSchemaComposer_1.LlmSchemaComposer.schema(props.model)({
                config: props.options,
                schema: s,
                components: props.components,
                $defs: $defs,
                accessor: accessor,
                refAccessor: "$input.components.schemas",
            });
            if (result.success === false) {
                (_a = props.errors).push.apply(_a, __spreadArray([], __read(result.error.reasons.map(function (r) { return "".concat(r.accessor, ": ").concat(r.message); })), false));
                return null;
            }
            return result.value;
        };
        // METADATA
        var endpoint = "$input.paths[".concat(JSON.stringify(props.route.path), "][").concat(JSON.stringify(props.route.method), "]");
        var output = props.route
            .success
            ? cast(props.route.success.schema, "".concat(endpoint, ".responses[").concat(JSON.stringify(props.route.success.status), "][").concat(JSON.stringify(props.route.success.type), "].schema"))
            : undefined;
        var properties = __spreadArray(__spreadArray(__spreadArray([], __read(props.route.parameters.map(function (s) {
            var _a, _b;
            return [
                s.key,
                cast(__assign(__assign({}, s.schema), { title: (_a = s.parameter().title) !== null && _a !== void 0 ? _a : s.schema.title, description: (_b = s.parameter().description) !== null && _b !== void 0 ? _b : s.schema.description }), "".concat(endpoint, ".parameters[").concat(JSON.stringify(s.key), "].schema")),
            ];
        })), false), __read((props.route.query
            ? [
                [
                    props.route.query.key,
                    cast(__assign(__assign({}, props.route.query.schema), { title: (_a = props.route.query.title()) !== null && _a !== void 0 ? _a : props.route.query.schema.title, description: (_b = props.route.query.description()) !== null && _b !== void 0 ? _b : props.route.query.schema.description }), "".concat(endpoint, ".parameters[").concat(JSON.stringify(props.route.query.key), "].schema")),
                ],
            ]
            : [])), false), __read((props.route.body
            ? [
                [
                    props.route.body.key,
                    cast(__assign(__assign({}, props.route.body.schema), { description: (_c = props.route.body.description()) !== null && _c !== void 0 ? _c : props.route.body.schema.description }), "".concat(endpoint, ".requestBody.content[").concat(JSON.stringify(props.route.body.type), "].schema")),
                ],
            ]
            : [])), false);
        // DESCRIPTION
        var operation = props.route.operation();
        var description = (function () {
            var _a, _b, _c, _d, _e, _f;
            if (!((_a = operation.summary) === null || _a === void 0 ? void 0 : _a.length) || !((_b = operation.description) === null || _b === void 0 ? void 0 : _b.length))
                return [
                    operation.summary || operation.description,
                    (_f = (_d = (_c = operation.summary) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : (_e = operation.description) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0,
                ];
            var summary = operation.summary.endsWith(".")
                ? operation.summary.slice(0, -1)
                : operation.summary;
            var final = operation.description.startsWith(summary)
                ? operation.description
                : summary + ".\n\n" + operation.description;
            return [final, final.length];
        })();
        if (description[1] > 1024) {
            props.errors.push("The description of the function is too long (must be equal or less than 1,024 characters, but ".concat(description[1].toLocaleString(), " length)."));
        }
        // FUNCTION NAME
        var name = emend(props.route.accessor.join("_"));
        var isNameVariable = /^[a-zA-Z0-9_-]+$/.test(name);
        var isNameStartsWithNumber = /^[0-9]/.test((_d = name[0]) !== null && _d !== void 0 ? _d : "");
        if (isNameVariable === false)
            props.errors.push("Elements of path (separated by '/') must be composed with alphabets, numbers, underscores, and hyphens");
        if (output === null ||
            properties.some(function (_a) {
                var _b = __read(_a, 2), _k = _b[0], v = _b[1];
                return v === null;
            }) ||
            isNameVariable === false ||
            isNameStartsWithNumber === true ||
            description[1] > 1024)
            return null;
        // COMPOSE PARAMETERS
        var parameters = {
            type: "object",
            properties: Object.fromEntries(properties),
            additionalProperties: false,
            required: properties.map(function (_a) {
                var _b = __read(_a, 1), k = _b[0];
                return k;
            }),
        };
        if (LlmSchemaComposer_1.LlmSchemaComposer.isDefs(props.model))
            parameters.$defs = $defs;
        // FINALIZATION
        return {
            method: props.route.method,
            path: props.route.path,
            name: name,
            parameters: parameters,
            separated: props.options.separate
                ? LlmSchemaComposer_1.LlmSchemaComposer.separateParameters(props.model)({
                    predicate: props.options.separate,
                    parameters: parameters,
                })
                : undefined,
            output: output,
            description: description[0],
            deprecated: operation.deprecated,
            tags: operation.tags,
            route: function () { return props.route; },
            operation: function () { return props.route.operation(); },
        };
    };
    HttpLlmComposer.shorten = function (app, limit) {
        var e_1, _a, e_2, _b;
        if (limit === void 0) { limit = 64; }
        var dictionary = new Set();
        var longFunctions = [];
        try {
            for (var _c = __values(app.functions), _d = _c.next(); !_d.done; _d = _c.next()) {
                var func = _d.value;
                dictionary.add(func.name);
                if (func.name.length > limit) {
                    longFunctions.push(func);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (longFunctions.length === 0)
            return;
        var index = 0;
        var _loop_1 = function (func) {
            var success = false;
            var rename = function (str) {
                dictionary.delete(func.name);
                dictionary.add(str);
                func.name = str;
                success = true;
            };
            for (var i = 1; i < func.route().accessor.length; ++i) {
                var shortName = func.route().accessor.slice(i).join("_");
                if (shortName.length > limit - 8)
                    continue;
                else if (dictionary.has(shortName) === false)
                    rename(shortName);
                else {
                    var newName = "_".concat(index, "_").concat(shortName);
                    if (dictionary.has(newName) === true)
                        continue;
                    rename(newName);
                    ++index;
                }
                break;
            }
            if (success === false)
                rename(randomFormatUuid());
        };
        try {
            for (var longFunctions_1 = __values(longFunctions), longFunctions_1_1 = longFunctions_1.next(); !longFunctions_1_1.done; longFunctions_1_1 = longFunctions_1.next()) {
                var func = longFunctions_1_1.value;
                _loop_1(func);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (longFunctions_1_1 && !longFunctions_1_1.done && (_b = longFunctions_1.return)) _b.call(longFunctions_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
})(HttpLlmComposer || (exports.HttpLlmComposer = HttpLlmComposer = {}));
var randomFormatUuid = function () {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0;
        var v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
var emend = function (str) {
    var e_3, _a;
    try {
        for (var FORBIDDEN_1 = __values(FORBIDDEN), FORBIDDEN_1_1 = FORBIDDEN_1.next(); !FORBIDDEN_1_1.done; FORBIDDEN_1_1 = FORBIDDEN_1.next()) {
            var ch = FORBIDDEN_1_1.value;
            str = str.split(ch).join("_");
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (FORBIDDEN_1_1 && !FORBIDDEN_1_1.done && (_a = FORBIDDEN_1.return)) _a.call(FORBIDDEN_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return str;
};
var FORBIDDEN = ["$", "%", "."];
