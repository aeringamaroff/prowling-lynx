{"version":3,"file":"HttpLlmApplicationComposer.mjs","sources":["../../src/composers/HttpLlmApplicationComposer.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { IChatGptSchema } from \"../structures/IChatGptSchema\";\nimport { IHttpLlmApplication } from \"../structures/IHttpLlmApplication\";\nimport { IHttpLlmFunction } from \"../structures/IHttpLlmFunction\";\nimport { IHttpMigrateApplication } from \"../structures/IHttpMigrateApplication\";\nimport { IHttpMigrateRoute } from \"../structures/IHttpMigrateRoute\";\nimport { ILlmFunction } from \"../structures/ILlmFunction\";\nimport { ILlmSchema } from \"../structures/ILlmSchema\";\nimport { LlmSchemaComposer } from \"./LlmSchemaComposer\";\n\nexport namespace HttpLlmComposer {\n  export const application = <Model extends ILlmSchema.Model>(props: {\n    model: Model;\n    migrate: IHttpMigrateApplication;\n    options: IHttpLlmApplication.IOptions<Model>;\n  }): IHttpLlmApplication<Model> => {\n    // COMPOSE FUNCTIONS\n    const errors: IHttpLlmApplication.IError[] = props.migrate.errors\n      .filter((e) => e.operation()[\"x-samchon-human\"] !== true)\n      .map((e) => ({\n        method: e.method,\n        path: e.path,\n        messages: e.messages,\n        operation: () => e.operation(),\n        route: () => undefined,\n      }));\n    const functions: IHttpLlmFunction<Model>[] = props.migrate.routes\n      .filter((e) => e.operation()[\"x-samchon-human\"] !== true)\n      .map((route, i) => {\n        if (route.method === \"head\") {\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: [\"HEAD method is not supported in the LLM application.\"],\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n          return null;\n        } else if (\n          route.body?.type === \"multipart/form-data\" ||\n          route.success?.type === \"multipart/form-data\"\n        ) {\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: [\n              `The \"multipart/form-data\" content type is not supported in the LLM application.`,\n            ],\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n          return null;\n        }\n        const localErrors: string[] = [];\n        const func: IHttpLlmFunction<Model> | null = composeFunction<Model>({\n          model: props.model,\n          options: props.options,\n          components: props.migrate.document().components,\n          route: route,\n          errors: localErrors,\n          index: i,\n        });\n        if (func === null)\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: localErrors,\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n        return func;\n      })\n      .filter((v): v is IHttpLlmFunction<Model> => v !== null);\n\n    const app: IHttpLlmApplication<Model> = {\n      model: props.model,\n      options: props.options,\n      functions,\n      errors,\n    };\n    shorten(app, props.options?.maxLength ?? 64);\n    return app;\n  };\n\n  const composeFunction = <Model extends ILlmSchema.Model>(props: {\n    model: Model;\n    components: OpenApi.IComponents;\n    route: IHttpMigrateRoute;\n    options: IHttpLlmApplication.IOptions<Model>;\n    errors: string[];\n    index: number;\n  }): IHttpLlmFunction<Model> | null => {\n    const $defs: Record<string, IChatGptSchema> = {};\n    const cast = (\n      s: OpenApi.IJsonSchema,\n      accessor: string,\n    ): ILlmSchema.ModelSchema[Model] | null => {\n      const result = LlmSchemaComposer.schema(props.model)({\n        config: props.options as any,\n        schema: s,\n        components: props.components,\n        $defs,\n        accessor,\n        refAccessor: `$input.components.schemas`,\n      });\n      if (result.success === false) {\n        props.errors.push(\n          ...result.error.reasons.map((r) => `${r.accessor}: ${r.message}`),\n        );\n        return null;\n      }\n      return result.value as ILlmSchema.ModelSchema[Model];\n    };\n\n    // METADATA\n    const endpoint: string = `$input.paths[${JSON.stringify(props.route.path)}][${JSON.stringify(props.route.method)}]`;\n    const output: ILlmSchema.ModelSchema[Model] | null | undefined = props.route\n      .success\n      ? cast(\n          props.route.success.schema,\n          `${endpoint}.responses[${JSON.stringify(props.route.success.status)}][${JSON.stringify(props.route.success.type)}].schema`,\n        )\n      : undefined;\n    const properties: Array<\n      readonly [string, ILlmSchema.ModelSchema[Model] | null]\n    > = [\n      ...props.route.parameters.map(\n        (s) =>\n          [\n            s.key,\n            cast(\n              {\n                ...s.schema,\n                title: s.parameter().title ?? s.schema.title,\n                description: s.parameter().description ?? s.schema.description,\n              },\n              `${endpoint}.parameters[${JSON.stringify(s.key)}].schema`,\n            ),\n          ] as const,\n      ),\n      ...(props.route.query\n        ? [\n            [\n              props.route.query.key,\n              cast(\n                {\n                  ...props.route.query.schema,\n                  title:\n                    props.route.query.title() ?? props.route.query.schema.title,\n                  description:\n                    props.route.query.description() ??\n                    props.route.query.schema.description,\n                },\n                `${endpoint}.parameters[${JSON.stringify(props.route.query.key)}].schema`,\n              ),\n            ] as const,\n          ]\n        : []),\n      ...(props.route.body\n        ? [\n            [\n              props.route.body.key,\n              cast(\n                {\n                  ...props.route.body.schema,\n                  description:\n                    props.route.body.description() ??\n                    props.route.body.schema.description,\n                },\n                `${endpoint}.requestBody.content[${JSON.stringify(props.route.body.type)}].schema`,\n              ),\n            ] as const,\n          ]\n        : []),\n    ];\n\n    // DESCRIPTION\n    const operation: OpenApi.IOperation = props.route.operation();\n    const description: [string | undefined, number] = (() => {\n      if (!operation.summary?.length || !operation.description?.length)\n        return [\n          operation.summary || operation.description,\n          operation.summary?.length ?? operation.description?.length ?? 0,\n        ];\n      const summary: string = operation.summary.endsWith(\".\")\n        ? operation.summary.slice(0, -1)\n        : operation.summary;\n      const final: string = operation.description.startsWith(summary)\n        ? operation.description\n        : summary + \".\\n\\n\" + operation.description;\n      return [final, final.length];\n    })();\n    if (description[1] > 1_024) {\n      props.errors.push(\n        `The description of the function is too long (must be equal or less than 1,024 characters, but ${description[1].toLocaleString()} length).`,\n      );\n    }\n\n    // FUNCTION NAME\n    const name: string = emend(props.route.accessor.join(\"_\"));\n    const isNameVariable: boolean = /^[a-zA-Z0-9_-]+$/.test(name);\n    const isNameStartsWithNumber: boolean = /^[0-9]/.test(name[0] ?? \"\");\n    if (isNameVariable === false)\n      props.errors.push(\n        `Elements of path (separated by '/') must be composed with alphabets, numbers, underscores, and hyphens`,\n      );\n    if (\n      output === null ||\n      properties.some(([_k, v]) => v === null) ||\n      isNameVariable === false ||\n      isNameStartsWithNumber === true ||\n      description[1] > 1_024\n    )\n      return null;\n\n    // COMPOSE PARAMETERS\n    const parameters: ILlmSchema.ModelParameters[Model] = {\n      type: \"object\",\n      properties: Object.fromEntries(\n        properties as [string, ILlmSchema.ModelSchema[Model]][],\n      ),\n      additionalProperties: false,\n      required: properties.map(([k]) => k),\n    } as any as ILlmSchema.ModelParameters[Model];\n    if (LlmSchemaComposer.isDefs(props.model))\n      (parameters as any as IChatGptSchema.IParameters).$defs = $defs;\n\n    // FINALIZATION\n    return {\n      method: props.route.method as \"get\",\n      path: props.route.path,\n      name,\n      parameters,\n      separated: props.options.separate\n        ? (LlmSchemaComposer.separateParameters(props.model)({\n            predicate: props.options.separate as any,\n            parameters:\n              parameters satisfies ILlmSchema.ModelParameters[Model] as any,\n          }) as ILlmFunction.ISeparated<Model>)\n        : undefined,\n      output: output as any,\n      description: description[0],\n      deprecated: operation.deprecated,\n      tags: operation.tags,\n      route: () => props.route as any,\n      operation: () => props.route.operation(),\n    };\n  };\n\n  export const shorten = <Model extends ILlmSchema.Model>(\n    app: IHttpLlmApplication<Model>,\n    limit: number = 64,\n  ): void => {\n    const dictionary: Set<string> = new Set();\n    const longFunctions: IHttpLlmFunction<Model>[] = [];\n    for (const func of app.functions) {\n      dictionary.add(func.name);\n      if (func.name.length > limit) {\n        longFunctions.push(func);\n      }\n    }\n    if (longFunctions.length === 0) return;\n\n    let index: number = 0;\n    for (const func of longFunctions) {\n      let success: boolean = false;\n      let rename = (str: string) => {\n        dictionary.delete(func.name);\n        dictionary.add(str);\n        func.name = str;\n        success = true;\n      };\n      for (let i: number = 1; i < func.route().accessor.length; ++i) {\n        const shortName: string = func.route().accessor.slice(i).join(\"_\");\n        if (shortName.length > limit - 8) continue;\n        else if (dictionary.has(shortName) === false) rename(shortName);\n        else {\n          const newName: string = `_${index}_${shortName}`;\n          if (dictionary.has(newName) === true) continue;\n          rename(newName);\n          ++index;\n        }\n        break;\n      }\n      if (success === false) rename(randomFormatUuid());\n    }\n  };\n}\n\nconst randomFormatUuid = (): string =>\n  \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n\nconst emend = (str: string): string => {\n  for (const ch of FORBIDDEN) str = str.split(ch).join(\"_\");\n  return str;\n};\n\nconst FORBIDDEN = [\"$\", \"%\", \".\"];\n"],"names":["HttpLlmComposer","application","props","errors","migrate","filter","e","operation","map","method","path","messages","route","undefined","functions","routes","i","push","body","type","success","localErrors","func","composeFunction","model","options","components","document","v","app","shorten","maxLength","$defs","cast","s","accessor","result","LlmSchemaComposer","schema","config","refAccessor","error","reasons","r","message","value","endpoint","JSON","stringify","output","status","properties","parameters","key","title","parameter","description","query","summary","length","endsWith","slice","final","startsWith","toLocaleString","name","emend","join","isNameVariable","test","isNameStartsWithNumber","some","_k","Object","fromEntries","additionalProperties","required","k","isDefs","separated","separate","separateParameters","predicate","deprecated","tags","limit","dictionary","Set","longFunctions","add","index","rename","str","delete","shortName","has","newName","randomFormatUuid","replace","c","Math","random","toString","ch","FORBIDDEN","split"],"mappings":";;AAUM,IAAWA;;CAAjB,SAAiBA;IACFA,gBAAAC,cAA+CC;QAM1D,MAAMC,SAAuCD,MAAME,QAAQD,OACxDE,QAAQC,KAAMA,EAAEC,YAAY,uBAAuB,OACnDC,KAAKF,MAAO;YACXG,QAAQH,EAAEG;YACVC,MAAMJ,EAAEI;YACRC,UAAUL,EAAEK;YACZJ,WAAW,MAAMD,EAAEC;YACnBK,OAAO,MAAMC;;QAEjB,MAAMC,YAAuCZ,MAAME,QAAQW,OACxDV,QAAQC,KAAMA,EAAEC,YAAY,uBAAuB,OACnDC,KAAI,CAACI,OAAOI;YACX,IAAIJ,MAAMH,WAAW,QAAQ;gBAC3BN,OAAOc,KAAK;oBACVR,QAAQG,MAAMH;oBACdC,MAAME,MAAMF;oBACZC,UAAU,EAAC;oBACXJ,WAAW,MAAMK,MAAML;oBACvBK,OAAO,MAAMA;;gBAEf,OAAO;mBACF,IACLA,MAAMM,MAAMC,SAAS,yBACrBP,MAAMQ,SAASD,SAAS,uBACxB;gBACAhB,OAAOc,KAAK;oBACVR,QAAQG,MAAMH;oBACdC,MAAME,MAAMF;oBACZC,UAAU,EACR;oBAEFJ,WAAW,MAAMK,MAAML;oBACvBK,OAAO,MAAMA;;gBAEf,OAAO;;YAET,MAAMS,cAAwB;YAC9B,MAAMC,OAAuCC,gBAAuB;gBAClEC,OAAOtB,MAAMsB;gBACbC,SAASvB,MAAMuB;gBACfC,YAAYxB,MAAME,QAAQuB,WAAWD;gBACrCd;gBACAT,QAAQkB;;YAGV,IAAIC,SAAS,MACXnB,OAAOc,KAAK;gBACVR,QAAQG,MAAMH;gBACdC,MAAME,MAAMF;gBACZC,UAAUU;gBACVd,WAAW,MAAMK,MAAML;gBACvBK,OAAO,MAAMA;;YAEjB,OAAOU;AAAI,YAEZjB,QAAQuB,KAAoCA,MAAM;QAErD,MAAMC,MAAkC;YACtCL,OAAOtB,MAAMsB;YACbC,SAASvB,MAAMuB;YACfX;YACAX;;QAEFH,gBAAA8B,QAAQD,KAAK3B,MAAMuB,SAASM,aAAa;QACzC,OAAOF;AAAG;IAGZ,MAAMN,kBAAmDrB;QAQvD,MAAM8B,QAAwC,CAAE;QAChD,MAAMC,OAAO,CACXC,GACAC;YAEA,MAAMC,SAASC,kBAAkBC,OAAOpC,MAAMsB,MAA/Ba,CAAsC;gBACnDE,QAAQrC,MAAMuB;gBACda,QAAQJ;gBACRR,YAAYxB,MAAMwB;gBAClBM;gBACAG;gBACAK,aAAa;;YAEf,IAAIJ,OAAOhB,YAAY,OAAO;gBAC5BlB,MAAMC,OAAOc,QACRmB,OAAOK,MAAMC,QAAQlC,KAAKmC,KAAM,GAAGA,EAAER,aAAaQ,EAAEC;gBAEzD,OAAO;;YAET,OAAOR,OAAOS;AAAsC;QAItD,MAAMC,WAAmB,gBAAgBC,KAAKC,UAAU9C,MAAMU,MAAMF,UAAUqC,KAAKC,UAAU9C,MAAMU,MAAMH;QACzG,MAAMwC,SAA2D/C,MAAMU,MACpEQ,UACCa,KACE/B,MAAMU,MAAMQ,QAAQkB,QACpB,GAAGQ,sBAAsBC,KAAKC,UAAU9C,MAAMU,MAAMQ,QAAQ8B,YAAYH,KAAKC,UAAU9C,MAAMU,MAAMQ,QAAQD,mBAE7GN;QACJ,MAAMsC,aAEF,KACCjD,MAAMU,MAAMwC,WAAW5C,KACvB0B,KACC,EACEA,EAAEmB,KACFpB,KACE;eACKC,EAAEI;YACLgB,OAAOpB,EAAEqB,YAAYD,SAASpB,EAAEI,OAAOgB;YACvCE,aAAatB,EAAEqB,YAAYC,eAAetB,EAAEI,OAAOkB;WAErD,GAAGV,uBAAuBC,KAAKC,UAAUd,EAAEmB,wBAI/CnD,MAAMU,MAAM6C,QACZ,EACE,EACEvD,MAAMU,MAAM6C,MAAMJ,KAClBpB,KACE;eACK/B,MAAMU,MAAM6C,MAAMnB;YACrBgB,OACEpD,MAAMU,MAAM6C,MAAMH,WAAWpD,MAAMU,MAAM6C,MAAMnB,OAAOgB;YACxDE,aACEtD,MAAMU,MAAM6C,MAAMD,iBAClBtD,MAAMU,MAAM6C,MAAMnB,OAAOkB;WAE7B,GAAGV,uBAAuBC,KAAKC,UAAU9C,MAAMU,MAAM6C,MAAMJ,sBAIjE,OACAnD,MAAMU,MAAMM,OACZ,EACE,EACEhB,MAAMU,MAAMM,KAAKmC,KACjBpB,KACE;eACK/B,MAAMU,MAAMM,KAAKoB;YACpBkB,aACEtD,MAAMU,MAAMM,KAAKsC,iBACjBtD,MAAMU,MAAMM,KAAKoB,OAAOkB;WAE5B,GAAGV,gCAAgCC,KAAKC,UAAU9C,MAAMU,MAAMM,KAAKC,uBAIzE;QAIN,MAAMZ,YAAgCL,MAAMU,MAAML;QAClD,MAAMiD,cAA4C;YAChD,KAAKjD,UAAUmD,SAASC,WAAWpD,UAAUiD,aAAaG,QACxD,OAAO,EACLpD,UAAUmD,WAAWnD,UAAUiD,aAC/BjD,UAAUmD,SAASC,UAAUpD,UAAUiD,aAAaG,UAAU;YAElE,MAAMD,UAAkBnD,UAAUmD,QAAQE,SAAS,OAC/CrD,UAAUmD,QAAQG,MAAM,IAAK,KAC7BtD,UAAUmD;YACd,MAAMI,QAAgBvD,UAAUiD,YAAYO,WAAWL,WACnDnD,UAAUiD,cACVE,UAAU,UAAUnD,UAAUiD;YAClC,OAAO,EAACM,OAAOA,MAAMH;AACtB,UAbiD;QAclD,IAAIH,YAAY,KAAK,MAAO;YAC1BtD,MAAMC,OAAOc,KACX,iGAAiGuC,YAAY,GAAGQ;;QAKpH,MAAMC,OAAeC,MAAMhE,MAAMU,MAAMuB,SAASgC,KAAK;QACrD,MAAMC,iBAA0B,mBAAmBC,KAAKJ;QACxD,MAAMK,yBAAkC,SAASD,KAAKJ,KAAK,MAAM;QACjE,IAAIG,mBAAmB,OACrBlE,MAAMC,OAAOc,KACX;QAEJ,IACEgC,WAAW,QACXE,WAAWoB,MAAK,EAAEC,IAAI5C,OAAOA,MAAM,UACnCwC,mBAAmB,SACnBE,2BAA2B,QAC3Bd,YAAY,KAAK,MAEjB,OAAO;QAGT,MAAMJ,aAAgD;YACpDjC,MAAM;YACNgC,YAAYsB,OAAOC,YACjBvB;YAEFwB,sBAAsB;YACtBC,UAAUzB,WAAW3C,KAAI,EAAEqE,OAAOA;;QAEpC,IAAIxC,kBAAkByC,OAAO5E,MAAMsB,QAChC4B,WAAiDpB,QAAQA;QAG5D,OAAO;YACLvB,QAAQP,MAAMU,MAAMH;YACpBC,MAAMR,MAAMU,MAAMF;YAClBuD;YACAb;YACA2B,WAAW7E,MAAMuB,QAAQuD,WACpB3C,kBAAkB4C,mBAAmB/E,MAAMsB,MAA3Ca,CAAkD;gBACjD6C,WAAWhF,MAAMuB,QAAQuD;gBACzB5B;iBAGFvC;YACJoC;YACAO,aAAaA,YAAY;YACzB2B,YAAY5E,UAAU4E;YACtBC,MAAM7E,UAAU6E;YAChBxE,OAAO,MAAMV,MAAMU;YACnBL,WAAW,MAAML,MAAMU,MAAML;;AAC9B;IAGUP,gBAAA8B,UAAU,CACrBD,KACAwD,QAAgB;QAEhB,MAAMC,aAA0B,IAAIC;QACpC,MAAMC,gBAA2C;QACjD,KAAK,MAAMlE,QAAQO,IAAIf,WAAW;YAChCwE,WAAWG,IAAInE,KAAK2C;YACpB,IAAI3C,KAAK2C,KAAKN,SAAS0B,OAAO;gBAC5BG,cAAcvE,KAAKK;;;QAGvB,IAAIkE,cAAc7B,WAAW,GAAG;QAEhC,IAAI+B,QAAgB;QACpB,KAAK,MAAMpE,QAAQkE,eAAe;YAChC,IAAIpE,UAAmB;YACvB,IAAIuE,SAAUC;gBACZN,WAAWO,OAAOvE,KAAK2C;gBACvBqB,WAAWG,IAAIG;gBACftE,KAAK2C,OAAO2B;gBACZxE,UAAU;AAAI;YAEhB,KAAK,IAAIJ,IAAY,GAAGA,IAAIM,KAAKV,QAAQuB,SAASwB,UAAU3C,GAAG;gBAC7D,MAAM8E,YAAoBxE,KAAKV,QAAQuB,SAAS0B,MAAM7C,GAAGmD,KAAK;gBAC9D,IAAI2B,UAAUnC,SAAS0B,QAAQ,GAAG,eAC7B,IAAIC,WAAWS,IAAID,eAAe,OAAOH,OAAOG,iBAChD;oBACH,MAAME,UAAkB,IAAIN,SAASI;oBACrC,IAAIR,WAAWS,IAAIC,aAAa,MAAM;oBACtCL,OAAOK;sBACLN;;gBAEJ;;YAEF,IAAItE,YAAY,OAAOuE,OAAOM;;;AAGnC,EArRD,CAAiBjG,oBAAAA,kBAqRhB,CAAA;;AAED,MAAMiG,mBAAmB,MACvB,uCAAuCC,QAAQ,UAAUC;IACvD,MAAMxD,IAAKyD,KAAKC,WAAW,KAAM;IACjC,MAAMzE,IAAIuE,MAAM,MAAMxD,IAAKA,IAAI,IAAO;IACtC,OAAOf,EAAE0E,SAAS;AAAG;;AAGzB,MAAMpC,QAAS0B;IACb,KAAK,MAAMW,MAAMC,WAAWZ,MAAMA,IAAIa,MAAMF,IAAIpC,KAAK;IACrD,OAAOyB;AAAG;;AAGZ,MAAMY,YAAY,EAAC,KAAK,KAAK;;"}