"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmDescriptionInverter = void 0;
var LlmDescriptionInverter;
(function (LlmDescriptionInverter) {
    LlmDescriptionInverter.numeric = function (description) {
        var lines = description.split("\n");
        var exclusiveMinimum = find({
            type: "number",
            name: "exclusiveMinimum",
            lines: lines,
        });
        var exclusiveMaximum = find({
            type: "number",
            name: "exclusiveMaximum",
            lines: lines,
        });
        return {
            minimum: exclusiveMinimum !== null && exclusiveMinimum !== void 0 ? exclusiveMinimum : find({
                type: "number",
                name: "minimum",
                lines: lines,
            }),
            maximum: exclusiveMaximum !== null && exclusiveMaximum !== void 0 ? exclusiveMaximum : find({
                type: "number",
                name: "maximum",
                lines: lines,
            }),
            exclusiveMinimum: exclusiveMinimum !== undefined ? true : undefined,
            exclusiveMaximum: exclusiveMaximum !== undefined ? true : undefined,
            multipleOf: find({
                type: "number",
                name: "multipleOf",
                lines: lines,
            }),
        };
    };
    LlmDescriptionInverter.string = function (description) {
        var lines = description.split("\n");
        return {
            format: find({
                type: "string",
                name: "format",
                lines: lines,
            }),
            pattern: find({
                type: "string",
                name: "pattern",
                lines: description.split("\n"),
            }),
            contentMediaType: find({
                type: "string",
                name: "contentMediaType",
                lines: lines,
            }),
            minLength: find({
                type: "number",
                name: "minLength",
                lines: lines,
            }),
            maxLength: find({
                type: "number",
                name: "maxLength",
                lines: description.split("\n"),
            }),
        };
    };
    LlmDescriptionInverter.array = function (description) {
        var lines = description.split("\n");
        return {
            minItems: find({
                type: "number",
                name: "minItems",
                lines: lines,
            }),
            maxItems: find({
                type: "number",
                name: "maxItems",
                lines: lines,
            }),
            uniqueItems: find({
                type: "boolean",
                name: "uniqueItems",
                lines: lines,
            }),
        };
    };
    var find = function (props) {
        var e_1, _a;
        if (props.type === "boolean")
            return props.lines.some(function (line) { return line.startsWith("@".concat(props.name)); })
                ? true
                : undefined;
        try {
            for (var _b = __values(props.lines), _c = _b.next(); !_c.done; _c = _b.next()) {
                var line = _c.value;
                if (line.startsWith("@".concat(props.name, " ")) === false)
                    continue;
                var value = line.replace("@".concat(props.name, " "), "").trim();
                if (props.type === "number")
                    return (isNaN(Number(value)) ? undefined : Number(value));
                return value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
})(LlmDescriptionInverter || (exports.LlmDescriptionInverter = LlmDescriptionInverter = {}));
