var LlmDescriptionInverter;

(function(LlmDescriptionInverter) {
    LlmDescriptionInverter.numeric = description => {
        const lines = description.split("\n");
        const exclusiveMinimum = find({
            type: "number",
            name: "exclusiveMinimum",
            lines
        });
        const exclusiveMaximum = find({
            type: "number",
            name: "exclusiveMaximum",
            lines
        });
        return {
            minimum: exclusiveMinimum ?? find({
                type: "number",
                name: "minimum",
                lines
            }),
            maximum: exclusiveMaximum ?? find({
                type: "number",
                name: "maximum",
                lines
            }),
            exclusiveMinimum: exclusiveMinimum !== undefined ? true : undefined,
            exclusiveMaximum: exclusiveMaximum !== undefined ? true : undefined,
            multipleOf: find({
                type: "number",
                name: "multipleOf",
                lines
            })
        };
    };
    LlmDescriptionInverter.string = description => {
        const lines = description.split("\n");
        return {
            format: find({
                type: "string",
                name: "format",
                lines
            }),
            pattern: find({
                type: "string",
                name: "pattern",
                lines: description.split("\n")
            }),
            contentMediaType: find({
                type: "string",
                name: "contentMediaType",
                lines
            }),
            minLength: find({
                type: "number",
                name: "minLength",
                lines
            }),
            maxLength: find({
                type: "number",
                name: "maxLength",
                lines: description.split("\n")
            })
        };
    };
    LlmDescriptionInverter.array = description => {
        const lines = description.split("\n");
        return {
            minItems: find({
                type: "number",
                name: "minItems",
                lines
            }),
            maxItems: find({
                type: "number",
                name: "maxItems",
                lines
            }),
            uniqueItems: find({
                type: "boolean",
                name: "uniqueItems",
                lines
            })
        };
    };
    const find = props => {
        if (props.type === "boolean") return props.lines.some((line => line.startsWith(`@${props.name}`))) ? true : undefined;
        for (const line of props.lines) {
            if (line.startsWith(`@${props.name} `) === false) continue;
            const value = line.replace(`@${props.name} `, "").trim();
            if (props.type === "number") return isNaN(Number(value)) ? undefined : Number(value);
            return value;
        }
        return undefined;
    };
})(LlmDescriptionInverter || (LlmDescriptionInverter = {}));

export { LlmDescriptionInverter };
//# sourceMappingURL=LlmDescriptionInverter.mjs.map
