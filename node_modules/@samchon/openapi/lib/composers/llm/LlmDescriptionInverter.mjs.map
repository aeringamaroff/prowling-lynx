{"version":3,"file":"LlmDescriptionInverter.mjs","sources":["../../../src/composers/llm/LlmDescriptionInverter.ts"],"sourcesContent":["import { OpenApi } from \"../../OpenApi\";\n\nexport namespace LlmDescriptionInverter {\n  export const numeric = (\n    description: string,\n  ): Pick<\n    OpenApi.IJsonSchema.INumber,\n    | \"minimum\"\n    | \"maximum\"\n    | \"exclusiveMinimum\"\n    | \"exclusiveMaximum\"\n    | \"multipleOf\"\n  > => {\n    const lines: string[] = description.split(\"\\n\");\n    const exclusiveMinimum: number | undefined = find({\n      type: \"number\",\n      name: \"exclusiveMinimum\",\n      lines,\n    });\n    const exclusiveMaximum: number | undefined = find({\n      type: \"number\",\n      name: \"exclusiveMaximum\",\n      lines,\n    });\n    return {\n      minimum:\n        exclusiveMinimum ??\n        find({\n          type: \"number\",\n          name: \"minimum\",\n          lines,\n        }),\n      maximum:\n        exclusiveMaximum ??\n        find({\n          type: \"number\",\n          name: \"maximum\",\n          lines,\n        }),\n      exclusiveMinimum: exclusiveMinimum !== undefined ? true : undefined,\n      exclusiveMaximum: exclusiveMaximum !== undefined ? true : undefined,\n      multipleOf: find({\n        type: \"number\",\n        name: \"multipleOf\",\n        lines,\n      }),\n    };\n  };\n\n  export const string = (\n    description: string,\n  ): Pick<\n    OpenApi.IJsonSchema.IString,\n    \"format\" | \"pattern\" | \"contentMediaType\" | \"minLength\" | \"maxLength\"\n  > => {\n    const lines: string[] = description.split(\"\\n\");\n    return {\n      format: find({\n        type: \"string\",\n        name: \"format\",\n        lines,\n      }),\n      pattern: find({\n        type: \"string\",\n        name: \"pattern\",\n        lines: description.split(\"\\n\"),\n      }),\n      contentMediaType: find({\n        type: \"string\",\n        name: \"contentMediaType\",\n        lines,\n      }),\n      minLength: find({\n        type: \"number\",\n        name: \"minLength\",\n        lines,\n      }),\n      maxLength: find({\n        type: \"number\",\n        name: \"maxLength\",\n        lines: description.split(\"\\n\"),\n      }),\n    };\n  };\n\n  export const array = (\n    description: string,\n  ): Pick<\n    OpenApi.IJsonSchema.IArray,\n    \"minItems\" | \"maxItems\" | \"uniqueItems\"\n  > => {\n    const lines: string[] = description.split(\"\\n\");\n    return {\n      minItems: find({\n        type: \"number\",\n        name: \"minItems\",\n        lines,\n      }),\n      maxItems: find({\n        type: \"number\",\n        name: \"maxItems\",\n        lines,\n      }),\n      uniqueItems: find({\n        type: \"boolean\",\n        name: \"uniqueItems\",\n        lines,\n      }),\n    };\n  };\n\n  const find = <Type extends \"boolean\" | \"number\" | \"string\">(props: {\n    type: Type;\n    name: string;\n    lines: string[];\n  }):\n    | (Type extends \"boolean\" ? true : Type extends \"number\" ? number : string)\n    | undefined => {\n    if (props.type === \"boolean\")\n      return props.lines.some((line) => line.startsWith(`@${props.name}`))\n        ? true\n        : (undefined as any);\n    for (const line of props.lines) {\n      if (line.startsWith(`@${props.name} `) === false) continue;\n      const value: string = line.replace(`@${props.name} `, \"\").trim();\n      if (props.type === \"number\")\n        return (isNaN(Number(value)) ? undefined : Number(value)) satisfies\n          | number\n          | undefined as any;\n      return value as any;\n    }\n    return undefined as any;\n  };\n}\n"],"names":["LlmDescriptionInverter","numeric","description","lines","split","exclusiveMinimum","find","type","name","exclusiveMaximum","minimum","maximum","undefined","multipleOf","string","format","pattern","contentMediaType","minLength","maxLength","array","minItems","maxItems","uniqueItems","props","some","line","startsWith","value","replace","trim","isNaN","Number"],"mappings":"AAEM,IAAWA;;CAAjB,SAAiBA;IACFA,uBAAAC,UACXC;QASA,MAAMC,QAAkBD,YAAYE,MAAM;QAC1C,MAAMC,mBAAuCC,KAAK;YAChDC,MAAM;YACNC,MAAM;YACNL;;QAEF,MAAMM,mBAAuCH,KAAK;YAChDC,MAAM;YACNC,MAAM;YACNL;;QAEF,OAAO;YACLO,SACEL,oBACAC,KAAK;gBACHC,MAAM;gBACNC,MAAM;gBACNL;;YAEJQ,SACEF,oBACAH,KAAK;gBACHC,MAAM;gBACNC,MAAM;gBACNL;;YAEJE,kBAAkBA,qBAAqBO,YAAY,OAAOA;YAC1DH,kBAAkBA,qBAAqBG,YAAY,OAAOA;YAC1DC,YAAYP,KAAK;gBACfC,MAAM;gBACNC,MAAM;gBACNL;;;AAEH;IAGUH,uBAAAc,SACXZ;QAKA,MAAMC,QAAkBD,YAAYE,MAAM;QAC1C,OAAO;YACLW,QAAQT,KAAK;gBACXC,MAAM;gBACNC,MAAM;gBACNL;;YAEFa,SAASV,KAAK;gBACZC,MAAM;gBACNC,MAAM;gBACNL,OAAOD,YAAYE,MAAM;;YAE3Ba,kBAAkBX,KAAK;gBACrBC,MAAM;gBACNC,MAAM;gBACNL;;YAEFe,WAAWZ,KAAK;gBACdC,MAAM;gBACNC,MAAM;gBACNL;;YAEFgB,WAAWb,KAAK;gBACdC,MAAM;gBACNC,MAAM;gBACNL,OAAOD,YAAYE,MAAM;;;AAE5B;IAGUJ,uBAAAoB,QACXlB;QAKA,MAAMC,QAAkBD,YAAYE,MAAM;QAC1C,OAAO;YACLiB,UAAUf,KAAK;gBACbC,MAAM;gBACNC,MAAM;gBACNL;;YAEFmB,UAAUhB,KAAK;gBACbC,MAAM;gBACNC,MAAM;gBACNL;;YAEFoB,aAAajB,KAAK;gBAChBC,MAAM;gBACNC,MAAM;gBACNL;;;AAEH;IAGH,MAAMG,OAAsDkB;QAO1D,IAAIA,MAAMjB,SAAS,WACjB,OAAOiB,MAAMrB,MAAMsB,MAAMC,QAASA,KAAKC,WAAW,IAAIH,MAAMhB,YACxD,OACCI;QACP,KAAK,MAAMc,QAAQF,MAAMrB,OAAO;YAC9B,IAAIuB,KAAKC,WAAW,IAAIH,MAAMhB,aAAa,OAAO;YAClD,MAAMoB,QAAgBF,KAAKG,QAAQ,IAAIL,MAAMhB,SAAS,IAAIsB;YAC1D,IAAIN,MAAMjB,SAAS,UACjB,OAAQwB,MAAMC,OAAOJ,UAAUhB,YAAYoB,OAAOJ;YAGpD,OAAOA;;QAET,OAAOhB;AAAgB;AAE1B,EAnID,CAAiBZ,2BAAAA,yBAmIhB,CAAA;;"}