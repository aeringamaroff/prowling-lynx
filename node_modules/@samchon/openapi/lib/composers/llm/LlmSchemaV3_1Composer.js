"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmSchemaV3_1Composer = void 0;
var LlmTypeCheckerV3_1_1 = require("../../utils/LlmTypeCheckerV3_1");
var NamingConvention_1 = require("../../utils/NamingConvention");
var OpenApiConstraintShifter_1 = require("../../utils/OpenApiConstraintShifter");
var OpenApiTypeChecker_1 = require("../../utils/OpenApiTypeChecker");
var JsonDescriptionUtil_1 = require("../../utils/internal/JsonDescriptionUtil");
var LlmDescriptionInverter_1 = require("./LlmDescriptionInverter");
var LlmParametersComposer_1 = require("./LlmParametersComposer");
var LlmSchemaV3_1Composer;
(function (LlmSchemaV3_1Composer) {
    /**
     * @internal
     */
    LlmSchemaV3_1Composer.IS_DEFS = true;
    /* -----------------------------------------------------------
      CONVERTERS
    ----------------------------------------------------------- */
    LlmSchemaV3_1Composer.parameters = function (props) {
        var entity = LlmParametersComposer_1.LlmParametersFinder.parameters(__assign(__assign({}, props), { method: "LlmSchemaV3_1Composer.parameters" }));
        if (entity.success === false)
            return entity;
        var $defs = {};
        var result = LlmSchemaV3_1Composer.schema(__assign(__assign({}, props), { $defs: $defs, schema: entity.value }));
        if (result.success === false)
            return result;
        return {
            success: true,
            value: __assign(__assign({}, result.value), { additionalProperties: false, $defs: $defs }),
        };
    };
    LlmSchemaV3_1Composer.schema = function (props) {
        var _a;
        var union = [];
        var attribute = __assign({ title: props.schema.title, description: props.schema.description, example: props.schema.example, examples: props.schema.examples }, Object.fromEntries(Object.entries(props.schema).filter(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            return key.startsWith("x-") && value !== undefined;
        })));
        var reasons = [];
        OpenApiTypeChecker_1.OpenApiTypeChecker.visit({
            closure: function (next, accessor) {
                var _a;
                if (props.validate) {
                    // CUSTOM VALIDATION
                    reasons.push.apply(reasons, __spreadArray([], __read(props.validate(next, accessor)), false));
                }
                if (OpenApiTypeChecker_1.OpenApiTypeChecker.isTuple(next))
                    reasons.push({
                        schema: next,
                        accessor: accessor,
                        message: "LLM does not allow tuple type.",
                    });
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(next)) {
                    // UNABLE TO FIND MATCHED REFERENCE
                    var key = next.$ref.split("#/components/schemas/")[1];
                    if (((_a = props.components.schemas) === null || _a === void 0 ? void 0 : _a[key]) === undefined)
                        reasons.push({
                            schema: next,
                            accessor: accessor,
                            message: "unable to find reference type ".concat(JSON.stringify(key), "."),
                        });
                }
            },
            components: props.components,
            schema: props.schema,
            accessor: props.accessor,
            refAccessor: props.refAccessor,
        });
        if (reasons.length > 0)
            return {
                success: false,
                error: {
                    method: "LlmSchemaV3_1Composer.schema",
                    message: "Failed to compose LLM schema of v3.1",
                    reasons: reasons,
                },
            };
        var visit = function (input, accessor) {
            var _a, _b, _c, _d;
            if (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(input)) {
                // UNION TYPE
                input.oneOf.forEach(function (s, i) { return visit(s, "".concat(accessor, ".oneOf[").concat(i, "]")); });
                return 0;
            }
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(input)) {
                // REFERENCE TYPE
                var key_1 = input.$ref.split("#/components/schemas/")[1];
                var target = (_a = props.components.schemas) === null || _a === void 0 ? void 0 : _a[key_1];
                if (target === undefined)
                    return union.push(null); // UNREACHABLEE
                else if (
                // KEEP THE REFERENCE TYPE
                props.config.reference === true ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isRecursiveReference({
                        components: props.components,
                        schema: input,
                    })) {
                    var out = function () {
                        return union.push(__assign(__assign({}, input), { $ref: "#/$defs/".concat(key_1) }));
                    };
                    if (props.$defs[key_1] !== undefined)
                        return out();
                    props.$defs[key_1] = {};
                    var converted = LlmSchemaV3_1Composer.schema({
                        config: props.config,
                        components: props.components,
                        $defs: props.$defs,
                        schema: target,
                        refAccessor: props.refAccessor,
                        accessor: "".concat((_b = props.refAccessor) !== null && _b !== void 0 ? _b : "$def", "[").concat(JSON.stringify(key_1), "]"),
                    });
                    if (converted.success === false)
                        return union.push(null); // UNREACHABLE
                    props.$defs[key_1] = converted.value;
                    return out();
                }
                else {
                    // DISCARD THE REFERENCE TYPE
                    var length_1 = union.length;
                    visit(target, accessor);
                    if (length_1 === union.length - 1 && union[union.length - 1] !== null)
                        union[union.length - 1] = __assign(__assign({}, union[union.length - 1]), { description: JsonDescriptionUtil_1.JsonDescriptionUtil.cascade({
                                prefix: "#/components/schemas/",
                                components: props.components,
                                $ref: input.$ref,
                                description: union[union.length - 1].description,
                                escape: true,
                            }) });
                    else
                        attribute.description = JsonDescriptionUtil_1.JsonDescriptionUtil.cascade({
                            prefix: "#/components/schemas/",
                            components: props.components,
                            $ref: input.$ref,
                            description: attribute.description,
                            escape: true,
                        });
                    return union.length;
                }
            }
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(input)) {
                // OBJECT TYPE
                var properties = Object.entries((_c = input.properties) !== null && _c !== void 0 ? _c : {}).reduce(function (acc, _a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    var converted = LlmSchemaV3_1Composer.schema({
                        config: props.config,
                        components: props.components,
                        $defs: props.$defs,
                        schema: value,
                        refAccessor: props.refAccessor,
                        accessor: "".concat(accessor, ".properties[").concat(JSON.stringify(key), "]"),
                    });
                    acc[key] = converted.success ? converted.value : null;
                    if (converted.success === false)
                        reasons.push.apply(reasons, __spreadArray([], __read(converted.error.reasons), false));
                    return acc;
                }, {});
                if (Object.values(properties).some(function (v) { return v === null; }))
                    return union.push(null);
                var additionalProperties = (function () {
                    if (typeof input.additionalProperties === "object" &&
                        input.additionalProperties !== null) {
                        var converted = LlmSchemaV3_1Composer.schema({
                            config: props.config,
                            components: props.components,
                            $defs: props.$defs,
                            schema: input.additionalProperties,
                            refAccessor: props.refAccessor,
                            accessor: "".concat(accessor, ".additionalProperties"),
                        });
                        if (converted.success === false) {
                            reasons.push.apply(reasons, __spreadArray([], __read(converted.error.reasons), false));
                            return null;
                        }
                        return converted.value;
                    }
                    return input.additionalProperties;
                })();
                if (additionalProperties === null)
                    return union.push(null);
                return union.push(__assign(__assign({}, input), { properties: properties, additionalProperties: additionalProperties, required: (_d = input.required) !== null && _d !== void 0 ? _d : [] }));
            }
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isArray(input)) {
                var items = LlmSchemaV3_1Composer.schema({
                    config: props.config,
                    components: props.components,
                    $defs: props.$defs,
                    schema: input.items,
                    refAccessor: props.refAccessor,
                    accessor: "".concat(accessor, ".items"),
                });
                if (items.success === false) {
                    reasons.push.apply(reasons, __spreadArray([], __read(items.error.reasons), false));
                    return union.push(null);
                }
                return union.push((props.config.constraint
                    ? function (x) { return x; }
                    : function (x) {
                        return OpenApiConstraintShifter_1.OpenApiConstraintShifter.shiftArray(x);
                    })(__assign(__assign({}, input), { items: items.value })));
            }
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isString(input))
                return union.push((props.config.constraint
                    ? function (x) { return x; }
                    : function (x) {
                        return OpenApiConstraintShifter_1.OpenApiConstraintShifter.shiftString(x);
                    })(__assign({}, input)));
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isNumber(input) ||
                OpenApiTypeChecker_1.OpenApiTypeChecker.isInteger(input))
                return union.push((props.config.constraint
                    ? function (x) { return x; }
                    : function (x) {
                        return OpenApiConstraintShifter_1.OpenApiConstraintShifter.shiftNumeric(x);
                    })(__assign({}, input)));
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isTuple(input))
                return union.push(null); // UNREACHABLE
            else
                return union.push(__assign({}, input));
        };
        visit(props.schema, (_a = props.accessor) !== null && _a !== void 0 ? _a : "$input.schema");
        if (union.some(function (u) { return u === null; }))
            return {
                success: false,
                error: {
                    method: "LlmSchemaV3_1Composer.schema",
                    message: "Failed to compose LLM schema of v3.1",
                    reasons: reasons,
                },
            };
        else if (union.length === 0)
            return {
                success: true,
                value: __assign(__assign({}, attribute), { type: undefined }),
            };
        else if (union.length === 1)
            return {
                success: true,
                value: __assign(__assign(__assign({}, attribute), union[0]), { description: LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isReference(union[0])
                        ? undefined
                        : union[0].description }),
            };
        return {
            success: true,
            value: __assign(__assign({}, attribute), { oneOf: union.map(function (u) { return (__assign(__assign({}, u), { description: LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isReference(u)
                        ? undefined
                        : u.description })); }) }),
        };
    };
    /* -----------------------------------------------------------
      SEPARATORS
    ----------------------------------------------------------- */
    LlmSchemaV3_1Composer.separateParameters = function (props) {
        var e_1, _a;
        var _b, _c;
        var convention = (_b = props.convention) !== null && _b !== void 0 ? _b : (function (key, type) { return "".concat(key, ".").concat(NamingConvention_1.NamingConvention.capitalize(type)); });
        var _d = __read(separateObject({
            $defs: props.parameters.$defs,
            schema: props.parameters,
            predicate: props.predicate,
            convention: convention,
        }), 2), llm = _d[0], human = _d[1];
        if (llm === null || human === null)
            return {
                llm: (_c = llm) !== null && _c !== void 0 ? _c : {
                    type: "object",
                    properties: {},
                    additionalProperties: false,
                    required: [],
                    $defs: {},
                },
                human: human,
            };
        var output = {
            llm: __assign(__assign({}, llm), { $defs: Object.fromEntries(Object.entries(props.parameters.$defs).filter(function (_a) {
                    var _b = __read(_a, 1), key = _b[0];
                    return key.endsWith(".Llm");
                })), additionalProperties: false }),
            human: __assign(__assign({}, human), { $defs: Object.fromEntries(Object.entries(props.parameters.$defs).filter(function (_a) {
                    var _b = __read(_a, 1), key = _b[0];
                    return key.endsWith(".Human");
                })), additionalProperties: false }),
        };
        try {
            for (var _e = __values(Object.keys(props.parameters.$defs)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                if (key.endsWith(".Llm") === false && key.endsWith(".Human") === false)
                    delete props.parameters.$defs[key];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return output;
    };
    var separateStation = function (props) {
        if (props.predicate(props.schema) === true)
            return [null, props.schema];
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isUnknown(props.schema) ||
            LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isOneOf(props.schema))
            return [props.schema, null];
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isObject(props.schema))
            return separateObject({
                predicate: props.predicate,
                convention: props.convention,
                $defs: props.$defs,
                schema: props.schema,
            });
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isArray(props.schema))
            return separateArray({
                predicate: props.predicate,
                convention: props.convention,
                $defs: props.$defs,
                schema: props.schema,
            });
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isReference(props.schema))
            return separateReference({
                predicate: props.predicate,
                convention: props.convention,
                $defs: props.$defs,
                schema: props.schema,
            });
        return [props.schema, null];
    };
    var separateArray = function (props) {
        var _a = __read(separateStation({
            predicate: props.predicate,
            convention: props.convention,
            $defs: props.$defs,
            schema: props.schema.items,
        }), 2), x = _a[0], y = _a[1];
        return [
            x !== null
                ? __assign(__assign({}, props.schema), { items: x }) : null,
            y !== null
                ? __assign(__assign({}, props.schema), { items: y }) : null,
        ];
    };
    var separateObject = function (props) {
        var e_2, _a;
        var _b, _c;
        // EMPTY OBJECT
        if (Object.keys((_b = props.schema.properties) !== null && _b !== void 0 ? _b : {}).length === 0 &&
            !!props.schema.additionalProperties === false)
            return [props.schema, null];
        var llm = __assign(__assign({}, props.schema), { properties: {}, additionalProperties: props.schema.additionalProperties });
        var human = __assign(__assign({}, props.schema), { properties: {} });
        try {
            for (var _d = __values(Object.entries((_c = props.schema.properties) !== null && _c !== void 0 ? _c : {})), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                var _g = __read(separateStation({
                    predicate: props.predicate,
                    convention: props.convention,
                    $defs: props.$defs,
                    schema: value,
                }), 2), x = _g[0], y = _g[1];
                if (x !== null)
                    llm.properties[key] = x;
                if (y !== null)
                    human.properties[key] = y;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (typeof props.schema.additionalProperties === "object" &&
            props.schema.additionalProperties !== null) {
            var _h = __read(separateStation({
                predicate: props.predicate,
                convention: props.convention,
                $defs: props.$defs,
                schema: props.schema.additionalProperties,
            }), 2), dx = _h[0], dy = _h[1];
            llm.additionalProperties = dx !== null && dx !== void 0 ? dx : false;
            human.additionalProperties = dy !== null && dy !== void 0 ? dy : false;
        }
        return [
            !!Object.keys(llm.properties).length || !!llm.additionalProperties
                ? shrinkRequired(llm)
                : null,
            !!Object.keys(human.properties).length || human.additionalProperties
                ? shrinkRequired(human)
                : null,
        ];
    };
    var separateReference = function (props) {
        var _a, _b, _c, _d, _e;
        var key = props.schema.$ref.split("#/$defs/")[1];
        var humanKey = props.convention(key, "human");
        var llmKey = props.convention(key, "llm");
        // FIND EXISTING
        if (((_a = props.$defs) === null || _a === void 0 ? void 0 : _a[humanKey]) || ((_b = props.$defs) === null || _b === void 0 ? void 0 : _b[llmKey]))
            return [
                ((_c = props.$defs) === null || _c === void 0 ? void 0 : _c[llmKey])
                    ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(llmKey) }) : null,
                ((_d = props.$defs) === null || _d === void 0 ? void 0 : _d[humanKey])
                    ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(humanKey) }) : null,
            ];
        // PRE-ASSIGNMENT
        props.$defs[llmKey] = {};
        props.$defs[humanKey] = {};
        // DO COMPOSE
        var schema = (_e = props.$defs) === null || _e === void 0 ? void 0 : _e[key];
        var _f = __read(separateStation({
            predicate: props.predicate,
            convention: props.convention,
            $defs: props.$defs,
            schema: schema,
        }), 2), llm = _f[0], human = _f[1];
        // ONLY ONE
        if (llm === null || human === null) {
            delete props.$defs[llmKey];
            delete props.$defs[humanKey];
            return llm === null ? [null, props.schema] : [props.schema, null];
        }
        // BOTH OF THEM
        return [
            llm !== null
                ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(llmKey) }) : null,
            human !== null
                ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(humanKey) }) : null,
        ];
    };
    var shrinkRequired = function (s) {
        if (s.required !== undefined)
            s.required = s.required.filter(function (key) { var _a; return ((_a = s.properties) === null || _a === void 0 ? void 0 : _a[key]) !== undefined; });
        return s;
    };
    /* -----------------------------------------------------------
      INVERTERS
    ----------------------------------------------------------- */
    LlmSchemaV3_1Composer.invert = function (props) {
        var _a, _b, _c, _d, _e, _f, _g;
        var _h;
        var next = function (schema) {
            return LlmSchemaV3_1Composer.invert({
                components: props.components,
                $defs: props.$defs,
                schema: schema,
            });
        };
        if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isArray(props.schema))
            return __assign(__assign(__assign({}, LlmDescriptionInverter_1.LlmDescriptionInverter.array((_a = props.schema.description) !== null && _a !== void 0 ? _a : "")), props.schema), { items: next(props.schema.items) });
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isObject(props.schema))
            return __assign(__assign({}, props.schema), { properties: props.schema.properties
                    ? Object.fromEntries(Object.entries(props.schema.properties).map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return [
                            key,
                            next(value),
                        ];
                    }))
                    : undefined, additionalProperties: typeof props.schema.additionalProperties === "object" &&
                    props.schema.additionalProperties !== null
                    ? next(props.schema.additionalProperties)
                    : props.schema.additionalProperties });
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isReference(props.schema)) {
            var key = (_b = props.schema.$ref.split("#/$defs/").at(-1)) !== null && _b !== void 0 ? _b : "";
            if (((_c = props.components.schemas) === null || _c === void 0 ? void 0 : _c[key]) === undefined) {
                (_d = (_h = props.components).schemas) !== null && _d !== void 0 ? _d : (_h.schemas = {});
                props.components.schemas[key] = {};
                props.components.schemas[key] = next((_e = props.$defs[key]) !== null && _e !== void 0 ? _e : {});
            }
            return __assign(__assign({}, props.schema), { $ref: "#/components/schemas/".concat(key) });
        }
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isInteger(props.schema) ||
            LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isNumber(props.schema))
            return __assign(__assign({}, LlmDescriptionInverter_1.LlmDescriptionInverter.numeric((_f = props.schema.description) !== null && _f !== void 0 ? _f : "")), props.schema);
        else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isString(props.schema))
            return __assign(__assign({}, LlmDescriptionInverter_1.LlmDescriptionInverter.string((_g = props.schema.description) !== null && _g !== void 0 ? _g : "")), props.schema);
        return props.schema;
    };
})(LlmSchemaV3_1Composer || (exports.LlmSchemaV3_1Composer = LlmSchemaV3_1Composer = {}));
